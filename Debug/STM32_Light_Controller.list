
STM32_Light_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9d8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  0800abd8  0800abd8  0001abd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b08c  0800b08c  000205b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b08c  0800b08c  0001b08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b094  0800b094  000205b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b094  0800b094  0001b094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b098  0800b098  0001b098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005b8  20000000  0800b09c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a0  200005b8  0800b654  000205b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d58  0800b654  00020d58  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000205b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f67d  00000000  00000000  000205e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004222  00000000  00000000  0003fc63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  00043e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001598  00000000  00000000  00045628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c2dd  00000000  00000000  00046bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001feb8  00000000  00000000  00072e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101a41  00000000  00000000  00092d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00194796  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071f8  00000000  00000000  001947e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200005b8 	.word	0x200005b8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800abc0 	.word	0x0800abc0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200005bc 	.word	0x200005bc
 800023c:	0800abc0 	.word	0x0800abc0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08c      	sub	sp, #48	; 0x30
 80005f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	4b90      	ldr	r3, [pc, #576]	; (800084c <MX_GPIO_Init+0x258>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a8f      	ldr	r2, [pc, #572]	; (800084c <MX_GPIO_Init+0x258>)
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b8d      	ldr	r3, [pc, #564]	; (800084c <MX_GPIO_Init+0x258>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0304 	and.w	r3, r3, #4
 800061e:	61bb      	str	r3, [r7, #24]
 8000620:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000622:	4b8a      	ldr	r3, [pc, #552]	; (800084c <MX_GPIO_Init+0x258>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a89      	ldr	r2, [pc, #548]	; (800084c <MX_GPIO_Init+0x258>)
 8000628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b87      	ldr	r3, [pc, #540]	; (800084c <MX_GPIO_Init+0x258>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b84      	ldr	r3, [pc, #528]	; (800084c <MX_GPIO_Init+0x258>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a83      	ldr	r2, [pc, #524]	; (800084c <MX_GPIO_Init+0x258>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b81      	ldr	r3, [pc, #516]	; (800084c <MX_GPIO_Init+0x258>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	4b7e      	ldr	r3, [pc, #504]	; (800084c <MX_GPIO_Init+0x258>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a7d      	ldr	r2, [pc, #500]	; (800084c <MX_GPIO_Init+0x258>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b7b      	ldr	r3, [pc, #492]	; (800084c <MX_GPIO_Init+0x258>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800066a:	4b78      	ldr	r3, [pc, #480]	; (800084c <MX_GPIO_Init+0x258>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a77      	ldr	r2, [pc, #476]	; (800084c <MX_GPIO_Init+0x258>)
 8000670:	f043 0320 	orr.w	r3, r3, #32
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b75      	ldr	r3, [pc, #468]	; (800084c <MX_GPIO_Init+0x258>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0320 	and.w	r3, r3, #32
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000682:	4b72      	ldr	r3, [pc, #456]	; (800084c <MX_GPIO_Init+0x258>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a71      	ldr	r2, [pc, #452]	; (800084c <MX_GPIO_Init+0x258>)
 8000688:	f043 0308 	orr.w	r3, r3, #8
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b6f      	ldr	r3, [pc, #444]	; (800084c <MX_GPIO_Init+0x258>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0308 	and.w	r3, r3, #8
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800069a:	4b6c      	ldr	r3, [pc, #432]	; (800084c <MX_GPIO_Init+0x258>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a6b      	ldr	r2, [pc, #428]	; (800084c <MX_GPIO_Init+0x258>)
 80006a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b69      	ldr	r3, [pc, #420]	; (800084c <MX_GPIO_Init+0x258>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	21e0      	movs	r1, #224	; 0xe0
 80006b6:	4866      	ldr	r0, [pc, #408]	; (8000850 <MX_GPIO_Init+0x25c>)
 80006b8:	f002 f97c 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f244 0181 	movw	r1, #16513	; 0x4081
 80006c2:	4864      	ldr	r0, [pc, #400]	; (8000854 <MX_GPIO_Init+0x260>)
 80006c4:	f002 f976 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ce:	4862      	ldr	r0, [pc, #392]	; (8000858 <MX_GPIO_Init+0x264>)
 80006d0:	f002 f970 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_D4_Pin|LCD_E_Pin, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80006da:	4860      	ldr	r0, [pc, #384]	; (800085c <MX_GPIO_Init+0x268>)
 80006dc:	f002 f96a 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2140      	movs	r1, #64	; 0x40
 80006e4:	485e      	ldr	r0, [pc, #376]	; (8000860 <MX_GPIO_Init+0x26c>)
 80006e6:	f002 f965 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4619      	mov	r1, r3
 8000700:	4858      	ldr	r0, [pc, #352]	; (8000864 <MX_GPIO_Init+0x270>)
 8000702:	f001 ff93 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000706:	2332      	movs	r3, #50	; 0x32
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070a:	2302      	movs	r3, #2
 800070c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000716:	230b      	movs	r3, #11
 8000718:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	4619      	mov	r1, r3
 8000720:	4850      	ldr	r0, [pc, #320]	; (8000864 <MX_GPIO_Init+0x270>)
 8000722:	f001 ff83 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8000726:	2306      	movs	r3, #6
 8000728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072a:	2302      	movs	r3, #2
 800072c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000732:	2303      	movs	r3, #3
 8000734:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000736:	230b      	movs	r3, #11
 8000738:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	4619      	mov	r1, r3
 8000740:	4843      	ldr	r0, [pc, #268]	; (8000850 <MX_GPIO_Init+0x25c>)
 8000742:	f001 ff73 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin;
 8000746:	23e0      	movs	r3, #224	; 0xe0
 8000748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	4619      	mov	r1, r3
 800075c:	483c      	ldr	r0, [pc, #240]	; (8000850 <MX_GPIO_Init+0x25c>)
 800075e:	f001 ff65 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000762:	f244 0381 	movw	r3, #16513	; 0x4081
 8000766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	4836      	ldr	r0, [pc, #216]	; (8000854 <MX_GPIO_Init+0x260>)
 800077c:	f001 ff56 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 8000780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	482f      	ldr	r0, [pc, #188]	; (8000858 <MX_GPIO_Init+0x264>)
 800079a:	f001 ff47 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800079e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ac:	2303      	movs	r3, #3
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b0:	230b      	movs	r3, #11
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	4826      	ldr	r0, [pc, #152]	; (8000854 <MX_GPIO_Init+0x260>)
 80007bc:	f001 ff36 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_E_Pin;
 80007c0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	4820      	ldr	r0, [pc, #128]	; (800085c <MX_GPIO_Init+0x268>)
 80007da:	f001 ff27 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007de:	2340      	movs	r3, #64	; 0x40
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	481a      	ldr	r0, [pc, #104]	; (8000860 <MX_GPIO_Init+0x26c>)
 80007f6:	f001 ff19 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007fa:	2380      	movs	r3, #128	; 0x80
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4814      	ldr	r0, [pc, #80]	; (8000860 <MX_GPIO_Init+0x26c>)
 800080e:	f001 ff0d 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000812:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000818:	2302      	movs	r3, #2
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000820:	2303      	movs	r3, #3
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000824:	230b      	movs	r3, #11
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4619      	mov	r1, r3
 800082e:	480c      	ldr	r0, [pc, #48]	; (8000860 <MX_GPIO_Init+0x26c>)
 8000830:	f001 fefc 	bl	800262c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	2028      	movs	r0, #40	; 0x28
 800083a:	f001 fe2e 	bl	800249a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800083e:	2028      	movs	r0, #40	; 0x28
 8000840:	f001 fe47 	bl	80024d2 <HAL_NVIC_EnableIRQ>

}
 8000844:	bf00      	nop
 8000846:	3730      	adds	r7, #48	; 0x30
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40020000 	.word	0x40020000
 8000854:	40020400 	.word	0x40020400
 8000858:	40021400 	.word	0x40021400
 800085c:	40020c00 	.word	0x40020c00
 8000860:	40021800 	.word	0x40021800
 8000864:	40020800 	.word	0x40020800

08000868 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_I2C1_Init+0x74>)
 800086e:	4a1c      	ldr	r2, [pc, #112]	; (80008e0 <MX_I2C1_Init+0x78>)
 8000870:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_I2C1_Init+0x74>)
 8000874:	4a1b      	ldr	r2, [pc, #108]	; (80008e4 <MX_I2C1_Init+0x7c>)
 8000876:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_I2C1_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_I2C1_Init+0x74>)
 8000880:	2201      	movs	r2, #1
 8000882:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_I2C1_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_I2C1_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_I2C1_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_I2C1_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_I2C1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008a2:	480e      	ldr	r0, [pc, #56]	; (80008dc <MX_I2C1_Init+0x74>)
 80008a4:	f002 f8c4 	bl	8002a30 <HAL_I2C_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008ae:	f000 fa31 	bl	8000d14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008b2:	2100      	movs	r1, #0
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <MX_I2C1_Init+0x74>)
 80008b6:	f002 fda1 	bl	80033fc <HAL_I2CEx_ConfigAnalogFilter>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008c0:	f000 fa28 	bl	8000d14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008c4:	2100      	movs	r1, #0
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_I2C1_Init+0x74>)
 80008c8:	f002 fde3 	bl	8003492 <HAL_I2CEx_ConfigDigitalFilter>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008d2:	f000 fa1f 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200005d4 	.word	0x200005d4
 80008e0:	40005400 	.word	0x40005400
 80008e4:	20303e5d 	.word	0x20303e5d

080008e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b0ae      	sub	sp, #184	; 0xb8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2290      	movs	r2, #144	; 0x90
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f007 fa55 	bl	8007db8 <memset>
  if(i2cHandle->Instance==I2C1)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a22      	ldr	r2, [pc, #136]	; (800099c <HAL_I2C_MspInit+0xb4>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d13c      	bne.n	8000992 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000918:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800091c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800091e:	2300      	movs	r3, #0
 8000920:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4618      	mov	r0, r3
 8000928:	f003 fc7c 	bl	8004224 <HAL_RCCEx_PeriphCLKConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000932:	f000 f9ef 	bl	8000d14 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <HAL_I2C_MspInit+0xb8>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a19      	ldr	r2, [pc, #100]	; (80009a0 <HAL_I2C_MspInit+0xb8>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <HAL_I2C_MspInit+0xb8>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800094e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000952:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000956:	2312      	movs	r3, #18
 8000958:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000968:	2304      	movs	r3, #4
 800096a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000972:	4619      	mov	r1, r3
 8000974:	480b      	ldr	r0, [pc, #44]	; (80009a4 <HAL_I2C_MspInit+0xbc>)
 8000976:	f001 fe59 	bl	800262c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_I2C_MspInit+0xb8>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_I2C_MspInit+0xb8>)
 8000980:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_I2C_MspInit+0xb8>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000992:	bf00      	nop
 8000994:	37b8      	adds	r7, #184	; 0xb8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40005400 	.word	0x40005400
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020400 	.word	0x40020400

080009a8 <send_string>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void send_string(char* s)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)s, strlen(s));
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff fc45 	bl	8000240 <strlen>
 80009b6:	4603      	mov	r3, r0
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	461a      	mov	r2, r3
 80009bc:	6879      	ldr	r1, [r7, #4]
 80009be:	4803      	ldr	r0, [pc, #12]	; (80009cc <send_string+0x24>)
 80009c0:	f005 fb7e 	bl	80060c0 <HAL_UART_Transmit_IT>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200007b4 	.word	0x200007b4

080009d0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]



  }

  if (htim->Instance == TIM6)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a2b      	ldr	r2, [pc, #172]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d14f      	bne.n	8000a82 <HAL_TIM_PeriodElapsedCallback+0xb2>
    {
	  static int time_ms = 0;

	  if(time_ms % 200 == 0)
 80009e2:	4b2b      	ldr	r3, [pc, #172]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	4b2b      	ldr	r3, [pc, #172]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80009e8:	fb83 1302 	smull	r1, r3, r3, r2
 80009ec:	1199      	asrs	r1, r3, #6
 80009ee:	17d3      	asrs	r3, r2, #31
 80009f0:	1acb      	subs	r3, r1, r3
 80009f2:	21c8      	movs	r1, #200	; 0xc8
 80009f4:	fb01 f303 	mul.w	r3, r1, r3
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d122      	bne.n	8000a44 <HAL_TIM_PeriodElapsedCallback+0x74>
	  {
		  Light = BH1750_ReadLux(&hbh1750_1);
 80009fe:	4826      	ldr	r0, [pc, #152]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000a00:	f000 fdce 	bl	80015a0 <BH1750_ReadLux>
 8000a04:	eef0 7a40 	vmov.f32	s15, s0
 8000a08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a0c:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000a0e:	ed83 7b00 	vstr	d7, [r3]

		  PID_Compute(&Light_PID);
 8000a12:	4823      	ldr	r0, [pc, #140]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000a14:	f001 f984 	bl	8001d20 <PID_Compute>
		  pulse = PID_Out;
 8000a18:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000a1a:	ed93 7b00 	vldr	d7, [r3]
 8000a1e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a22:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000a24:	edc3 7a00 	vstr	s15, [r3]

		  int_pulse = (int)pulse;
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000a2a:	edd3 7a00 	vldr	s15, [r3]
 8000a2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a32:	ee17 2a90 	vmov	r2, s15
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000a38:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, int_pulse);
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	635a      	str	r2, [r3, #52]	; 0x34
	  }


	  if(time_ms % 500 == 0)
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000a4a:	fb83 1302 	smull	r1, r3, r3, r2
 8000a4e:	1159      	asrs	r1, r3, #5
 8000a50:	17d3      	asrs	r3, r2, #31
 8000a52:	1acb      	subs	r3, r1, r3
 8000a54:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a58:	fb01 f303 	mul.w	r3, r1, r3
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d102      	bne.n	8000a68 <HAL_TIM_PeriodElapsedCallback+0x98>
//		  Lcd_cursor(&lcd, 1,0);
//		  sprintf(str_buffer, "Measured: %5d", (int)Light);
//
//		  Lcd_string(&lcd, str_buffer);

		  MENU_ROUTINE(&hmenu);
 8000a62:	4815      	ldr	r0, [pc, #84]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000a64:	f001 f884 	bl	8001b70 <MENU_ROUTINE>
	  }


	  time_ms += 100;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	3364      	adds	r3, #100	; 0x64
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000a70:	6013      	str	r3, [r2, #0]
	  if(time_ms == 1000)
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a7a:	d102      	bne.n	8000a82 <HAL_TIM_PeriodElapsedCallback+0xb2>
	  {
		  time_ms = 0;
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
	  }
    }


}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40001000 	.word	0x40001000
 8000a90:	200006c8 	.word	0x200006c8
 8000a94:	51eb851f 	.word	0x51eb851f
 8000a98:	20000004 	.word	0x20000004
 8000a9c:	200006b0 	.word	0x200006b0
 8000aa0:	20000628 	.word	0x20000628
 8000aa4:	200006b8 	.word	0x200006b8
 8000aa8:	200006a4 	.word	0x200006a4
 8000aac:	200006a8 	.word	0x200006a8
 8000ab0:	200006d0 	.word	0x200006d0
 8000ab4:	10624dd3 	.word	0x10624dd3
 8000ab8:	20000048 	.word	0x20000048

08000abc <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08e      	sub	sp, #56	; 0x38
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	uint8_t Data[6];
	sprintf(Data, "%s",Received);
 8000ac4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac8:	4a1a      	ldr	r2, [pc, #104]	; (8000b34 <HAL_UART_RxCpltCallback+0x78>)
 8000aca:	491b      	ldr	r1, [pc, #108]	; (8000b38 <HAL_UART_RxCpltCallback+0x7c>)
 8000acc:	4618      	mov	r0, r3
 8000ace:	f007 fdf1 	bl	80086b4 <siprintf>
	if(Data[0]=='L')
 8000ad2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ad6:	2b4c      	cmp	r3, #76	; 0x4c
 8000ad8:	d122      	bne.n	8000b20 <HAL_UART_RxCpltCallback+0x64>
	{
		int value = atoi(&Data[1]);
 8000ada:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ade:	3301      	adds	r3, #1
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f007 f93b 	bl	8007d5c <atoi>
 8000ae6:	6378      	str	r0, [r7, #52]	; 0x34
		if(value >= 0 && value <=9999)
 8000ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	db18      	blt.n	8000b20 <HAL_UART_RxCpltCallback+0x64>
 8000aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000af0:	f242 720f 	movw	r2, #9999	; 0x270f
 8000af4:	4293      	cmp	r3, r2
 8000af6:	dc13      	bgt.n	8000b20 <HAL_UART_RxCpltCallback+0x64>
		{
			char send_buffer[32];
			LightSetpoint = value;
 8000af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000afa:	ee07 3a90 	vmov	s15, r3
 8000afe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_UART_RxCpltCallback+0x80>)
 8000b04:	ed83 7b00 	vstr	d7, [r3]
			sprintf(send_buffer, "Light: %4d [lx]\r\n", value);
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b0e:	490c      	ldr	r1, [pc, #48]	; (8000b40 <HAL_UART_RxCpltCallback+0x84>)
 8000b10:	4618      	mov	r0, r3
 8000b12:	f007 fdcf 	bl	80086b4 <siprintf>
			send_string(send_buffer);
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff ff44 	bl	80009a8 <send_string>
		}
	}
	HAL_UART_Receive_IT(&huart3, Received, 5);
 8000b20:	2205      	movs	r2, #5
 8000b22:	4904      	ldr	r1, [pc, #16]	; (8000b34 <HAL_UART_RxCpltCallback+0x78>)
 8000b24:	4807      	ldr	r0, [pc, #28]	; (8000b44 <HAL_UART_RxCpltCallback+0x88>)
 8000b26:	f005 fb29 	bl	800617c <HAL_UART_Receive_IT>
}
 8000b2a:	bf00      	nop
 8000b2c:	3738      	adds	r7, #56	; 0x38
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000698 	.word	0x20000698
 8000b38:	0800abd8 	.word	0x0800abd8
 8000b3c:	200006c0 	.word	0x200006c0
 8000b40:	0800abdc 	.word	0x0800abdc
 8000b44:	200007b4 	.word	0x200007b4

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4e:	f001 fb47 	bl	80021e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b52:	f000 f86d 	bl	8000c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b56:	f7ff fd4d 	bl	80005f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b5a:	f000 fb8f 	bl	800127c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b5e:	f000 fc25 	bl	80013ac <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 8000b62:	f000 fa29 	bl	8000fb8 <MX_TIM4_Init>
  MX_I2C1_Init();
 8000b66:	f7ff fe7f 	bl	8000868 <MX_I2C1_Init>
  MX_TIM6_Init();
 8000b6a:	f000 fa9d 	bl	80010a8 <MX_TIM6_Init>
  MX_TIM14_Init();
 8000b6e:	f000 fad3 	bl	8001118 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000b72:	4823      	ldr	r0, [pc, #140]	; (8000c00 <main+0xb8>)
 8000b74:	f004 f86e 	bl	8004c54 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000b78:	4822      	ldr	r0, [pc, #136]	; (8000c04 <main+0xbc>)
 8000b7a:	f004 f86b 	bl	8004c54 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000b7e:	2100      	movs	r1, #0
 8000b80:	481f      	ldr	r0, [pc, #124]	; (8000c00 <main+0xb8>)
 8000b82:	f004 f941 	bl	8004e08 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  BH1750_Init(&hbh1750_1);
 8000b86:	4820      	ldr	r0, [pc, #128]	; (8000c08 <main+0xc0>)
 8000b88:	f000 fce1 	bl	800154e <BH1750_Init>
  Lcd_init(&lcd);
 8000b8c:	481f      	ldr	r0, [pc, #124]	; (8000c0c <main+0xc4>)
 8000b8e:	f000 fd2f 	bl	80015f0 <Lcd_init>

//  Lcd_cursor(&lcd, 0,0);
//  Lcd_string(&lcd, "SM ZZ");

  LightSetpoint = 200;
 8000b92:	491f      	ldr	r1, [pc, #124]	; (8000c10 <main+0xc8>)
 8000b94:	f04f 0200 	mov.w	r2, #0
 8000b98:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <main+0xcc>)
 8000b9a:	e9c1 2300 	strd	r2, r3, [r1]
  PID(&Light_PID, &Light, &PID_Out, &LightSetpoint, 3, 0.5, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	9301      	str	r3, [sp, #4]
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	ed9f 2b12 	vldr	d2, [pc, #72]	; 8000bf0 <main+0xa8>
 8000baa:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8000bae:	eeb0 0b08 	vmov.f64	d0, #8	; 0x40400000  3.0
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <main+0xc8>)
 8000bb4:	4a18      	ldr	r2, [pc, #96]	; (8000c18 <main+0xd0>)
 8000bb6:	4919      	ldr	r1, [pc, #100]	; (8000c1c <main+0xd4>)
 8000bb8:	4819      	ldr	r0, [pc, #100]	; (8000c20 <main+0xd8>)
 8000bba:	f001 f865 	bl	8001c88 <PID>

  PID_SetMode(&Light_PID, _PID_MODE_AUTOMATIC);
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	4817      	ldr	r0, [pc, #92]	; (8000c20 <main+0xd8>)
 8000bc2:	f001 f97d 	bl	8001ec0 <PID_SetMode>
  PID_SetSampleTime(&Light_PID, 200);
 8000bc6:	21c8      	movs	r1, #200	; 0xc8
 8000bc8:	4815      	ldr	r0, [pc, #84]	; (8000c20 <main+0xd8>)
 8000bca:	f001 fad5 	bl	8002178 <PID_SetSampleTime>
  PID_SetOutputLimits(&Light_PID, 0, 999);
 8000bce:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 8000bf8 <main+0xb0>
 8000bd2:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8000bf0 <main+0xa8>
 8000bd6:	4812      	ldr	r0, [pc, #72]	; (8000c20 <main+0xd8>)
 8000bd8:	f001 f990 	bl	8001efc <PID_SetOutputLimits>

  MENU_Init(&hmenu);
 8000bdc:	4811      	ldr	r0, [pc, #68]	; (8000c24 <main+0xdc>)
 8000bde:	f000 ff63 	bl	8001aa8 <MENU_Init>

  HAL_UART_Receive_IT(&huart3, Received, 5);
 8000be2:	2205      	movs	r2, #5
 8000be4:	4910      	ldr	r1, [pc, #64]	; (8000c28 <main+0xe0>)
 8000be6:	4811      	ldr	r0, [pc, #68]	; (8000c2c <main+0xe4>)
 8000be8:	f005 fac8 	bl	800617c <HAL_UART_Receive_IT>

  while (1)
 8000bec:	e7fe      	b.n	8000bec <main+0xa4>
 8000bee:	bf00      	nop
	...
 8000bfc:	408f3800 	.word	0x408f3800
 8000c00:	200006d0 	.word	0x200006d0
 8000c04:	2000071c 	.word	0x2000071c
 8000c08:	20000004 	.word	0x20000004
 8000c0c:	2000002c 	.word	0x2000002c
 8000c10:	200006c0 	.word	0x200006c0
 8000c14:	40690000 	.word	0x40690000
 8000c18:	200006b8 	.word	0x200006b8
 8000c1c:	200006b0 	.word	0x200006b0
 8000c20:	20000628 	.word	0x20000628
 8000c24:	20000048 	.word	0x20000048
 8000c28:	20000698 	.word	0x20000698
 8000c2c:	200007b4 	.word	0x200007b4

08000c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b094      	sub	sp, #80	; 0x50
 8000c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	2234      	movs	r2, #52	; 0x34
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f007 f8ba 	bl	8007db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c44:	f107 0308 	add.w	r3, r7, #8
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c54:	f002 fdb2 	bl	80037bc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c58:	4b2c      	ldr	r3, [pc, #176]	; (8000d0c <SystemClock_Config+0xdc>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	4a2b      	ldr	r2, [pc, #172]	; (8000d0c <SystemClock_Config+0xdc>)
 8000c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c62:	6413      	str	r3, [r2, #64]	; 0x40
 8000c64:	4b29      	ldr	r3, [pc, #164]	; (8000d0c <SystemClock_Config+0xdc>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c70:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <SystemClock_Config+0xe0>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c78:	4a25      	ldr	r2, [pc, #148]	; (8000d10 <SystemClock_Config+0xe0>)
 8000c7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <SystemClock_Config+0xe0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c90:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c94:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c96:	2302      	movs	r3, #2
 8000c98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000ca4:	2360      	movs	r3, #96	; 0x60
 8000ca6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cac:	2304      	movs	r3, #4
 8000cae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f002 fddf 	bl	800387c <HAL_RCC_OscConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000cc4:	f000 f826 	bl	8000d14 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cc8:	f002 fd88 	bl	80037dc <HAL_PWREx_EnableOverDrive>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000cd2:	f000 f81f 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd6:	230f      	movs	r3, #15
 8000cd8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000cec:	f107 0308 	add.w	r3, r7, #8
 8000cf0:	2103      	movs	r1, #3
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f003 f870 	bl	8003dd8 <HAL_RCC_ClockConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000cfe:	f000 f809 	bl	8000d14 <Error_Handler>
  }
}
 8000d02:	bf00      	nop
 8000d04:	3750      	adds	r7, #80	; 0x50
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40007000 	.word	0x40007000

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <Error_Handler+0x8>
	...

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <HAL_MspInit+0x44>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <HAL_MspInit+0x44>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d30:	6413      	str	r3, [r2, #64]	; 0x40
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <HAL_MspInit+0x44>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <HAL_MspInit+0x44>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <HAL_MspInit+0x44>)
 8000d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d48:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_MspInit+0x44>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <NMI_Handler+0x4>

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db4:	f001 fa52 	bl	800225c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <TIM4_IRQHandler+0x10>)
 8000dc2:	f004 f91b 	bl	8004ffc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200006d0 	.word	0x200006d0

08000dd0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <USART3_IRQHandler+0x10>)
 8000dd6:	f005 fa15 	bl	8006204 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200007b4 	.word	0x200007b4

08000de4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000de8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000dec:	f001 fdfc 	bl	80029e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <TIM6_DAC_IRQHandler+0x10>)
 8000dfa:	f004 f8ff 	bl	8004ffc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	2000071c 	.word	0x2000071c

08000e08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
	return 1;
 8000e0c:	2301      	movs	r3, #1
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <_kill>:

int _kill(int pid, int sig)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e22:	f006 ff9f 	bl	8007d64 <__errno>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2216      	movs	r2, #22
 8000e2a:	601a      	str	r2, [r3, #0]
	return -1;
 8000e2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <_exit>:

void _exit (int status)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ffe7 	bl	8000e18 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e4a:	e7fe      	b.n	8000e4a <_exit+0x12>

08000e4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	e00a      	b.n	8000e74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e5e:	f3af 8000 	nop.w
 8000e62:	4601      	mov	r1, r0
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	60ba      	str	r2, [r7, #8]
 8000e6a:	b2ca      	uxtb	r2, r1
 8000e6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3301      	adds	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	dbf0      	blt.n	8000e5e <_read+0x12>
	}

return len;
 8000e7c:	687b      	ldr	r3, [r7, #4]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	60f8      	str	r0, [r7, #12]
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e009      	b.n	8000eac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	60ba      	str	r2, [r7, #8]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	dbf1      	blt.n	8000e98 <_write+0x12>
	}
	return len;
 8000eb4:	687b      	ldr	r3, [r7, #4]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_close>:

int _close(int file)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ee6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <_isatty>:

int _isatty(int file)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
	return 1;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
	return 0;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f30:	4a14      	ldr	r2, [pc, #80]	; (8000f84 <_sbrk+0x5c>)
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <_sbrk+0x60>)
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d102      	bne.n	8000f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <_sbrk+0x64>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <_sbrk+0x68>)
 8000f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d207      	bcs.n	8000f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f58:	f006 ff04 	bl	8007d64 <__errno>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	220c      	movs	r2, #12
 8000f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
 8000f66:	e009      	b.n	8000f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <_sbrk+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6e:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <_sbrk+0x64>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <_sbrk+0x64>)
 8000f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20080000 	.word	0x20080000
 8000f88:	00000400 	.word	0x00000400
 8000f8c:	200006cc 	.word	0x200006cc
 8000f90:	20000d58 	.word	0x20000d58

08000f94 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <SystemInit+0x20>)
 8000f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <SystemInit+0x20>)
 8000fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <MX_TIM4_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim14;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08e      	sub	sp, #56	; 0x38
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fd8:	463b      	mov	r3, r7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]
 8000fe6:	615a      	str	r2, [r3, #20]
 8000fe8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fea:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <MX_TIM4_Init+0xe8>)
 8000fec:	4a2d      	ldr	r2, [pc, #180]	; (80010a4 <MX_TIM4_Init+0xec>)
 8000fee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 95;
 8000ff0:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <MX_TIM4_Init+0xe8>)
 8000ff2:	225f      	movs	r2, #95	; 0x5f
 8000ff4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff6:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <MX_TIM4_Init+0xe8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000ffc:	4b28      	ldr	r3, [pc, #160]	; (80010a0 <MX_TIM4_Init+0xe8>)
 8000ffe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001002:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001004:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <MX_TIM4_Init+0xe8>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100a:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <MX_TIM4_Init+0xe8>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001010:	4823      	ldr	r0, [pc, #140]	; (80010a0 <MX_TIM4_Init+0xe8>)
 8001012:	f003 fd2f 	bl	8004a74 <HAL_TIM_Base_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800101c:	f7ff fe7a 	bl	8000d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001026:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800102a:	4619      	mov	r1, r3
 800102c:	481c      	ldr	r0, [pc, #112]	; (80010a0 <MX_TIM4_Init+0xe8>)
 800102e:	f004 fa19 	bl	8005464 <HAL_TIM_ConfigClockSource>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001038:	f7ff fe6c 	bl	8000d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800103c:	4818      	ldr	r0, [pc, #96]	; (80010a0 <MX_TIM4_Init+0xe8>)
 800103e:	f003 fe81 	bl	8004d44 <HAL_TIM_PWM_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001048:	f7ff fe64 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	4619      	mov	r1, r3
 800105a:	4811      	ldr	r0, [pc, #68]	; (80010a0 <MX_TIM4_Init+0xe8>)
 800105c:	f004 feb2 	bl	8005dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001066:	f7ff fe55 	bl	8000d14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800106a:	2360      	movs	r3, #96	; 0x60
 800106c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800106e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001072:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800107c:	463b      	mov	r3, r7
 800107e:	2200      	movs	r2, #0
 8001080:	4619      	mov	r1, r3
 8001082:	4807      	ldr	r0, [pc, #28]	; (80010a0 <MX_TIM4_Init+0xe8>)
 8001084:	f004 f8da 	bl	800523c <HAL_TIM_PWM_ConfigChannel>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800108e:	f7ff fe41 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001092:	4803      	ldr	r0, [pc, #12]	; (80010a0 <MX_TIM4_Init+0xe8>)
 8001094:	f000 f8ba 	bl	800120c <HAL_TIM_MspPostInit>

}
 8001098:	bf00      	nop
 800109a:	3738      	adds	r7, #56	; 0x38
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200006d0 	.word	0x200006d0
 80010a4:	40000800 	.word	0x40000800

080010a8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <MX_TIM6_Init+0x68>)
 80010ba:	4a16      	ldr	r2, [pc, #88]	; (8001114 <MX_TIM6_Init+0x6c>)
 80010bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <MX_TIM6_Init+0x68>)
 80010c0:	f242 527f 	movw	r2, #9599	; 0x257f
 80010c4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <MX_TIM6_Init+0x68>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80010cc:	4b10      	ldr	r3, [pc, #64]	; (8001110 <MX_TIM6_Init+0x68>)
 80010ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010d2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <MX_TIM6_Init+0x68>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80010da:	480d      	ldr	r0, [pc, #52]	; (8001110 <MX_TIM6_Init+0x68>)
 80010dc:	f003 fcca 	bl	8004a74 <HAL_TIM_Base_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80010e6:	f7ff fe15 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	4619      	mov	r1, r3
 80010f6:	4806      	ldr	r0, [pc, #24]	; (8001110 <MX_TIM6_Init+0x68>)
 80010f8:	f004 fe64 	bl	8005dc4 <HAL_TIMEx_MasterConfigSynchronization>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001102:	f7ff fe07 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	2000071c 	.word	0x2000071c
 8001114:	40001000 	.word	0x40001000

08001118 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_TIM14_Init+0x40>)
 800111e:	4a0f      	ldr	r2, [pc, #60]	; (800115c <MX_TIM14_Init+0x44>)
 8001120:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 95;
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <MX_TIM14_Init+0x40>)
 8001124:	225f      	movs	r2, #95	; 0x5f
 8001126:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <MX_TIM14_Init+0x40>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65000;
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <MX_TIM14_Init+0x40>)
 8001130:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001134:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <MX_TIM14_Init+0x40>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MX_TIM14_Init+0x40>)
 800113e:	2200      	movs	r2, #0
 8001140:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_TIM14_Init+0x40>)
 8001144:	f003 fc96 	bl	8004a74 <HAL_TIM_Base_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800114e:	f7ff fde1 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000768 	.word	0x20000768
 800115c:	40002000 	.word	0x40002000

08001160 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a23      	ldr	r2, [pc, #140]	; (80011fc <HAL_TIM_Base_MspInit+0x9c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d114      	bne.n	800119c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001172:	4b23      	ldr	r3, [pc, #140]	; (8001200 <HAL_TIM_Base_MspInit+0xa0>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	4a22      	ldr	r2, [pc, #136]	; (8001200 <HAL_TIM_Base_MspInit+0xa0>)
 8001178:	f043 0304 	orr.w	r3, r3, #4
 800117c:	6413      	str	r3, [r2, #64]	; 0x40
 800117e:	4b20      	ldr	r3, [pc, #128]	; (8001200 <HAL_TIM_Base_MspInit+0xa0>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	697b      	ldr	r3, [r7, #20]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	201e      	movs	r0, #30
 8001190:	f001 f983 	bl	800249a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001194:	201e      	movs	r0, #30
 8001196:	f001 f99c 	bl	80024d2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800119a:	e02a      	b.n	80011f2 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a18      	ldr	r2, [pc, #96]	; (8001204 <HAL_TIM_Base_MspInit+0xa4>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d114      	bne.n	80011d0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <HAL_TIM_Base_MspInit+0xa0>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	4a15      	ldr	r2, [pc, #84]	; (8001200 <HAL_TIM_Base_MspInit+0xa0>)
 80011ac:	f043 0310 	orr.w	r3, r3, #16
 80011b0:	6413      	str	r3, [r2, #64]	; 0x40
 80011b2:	4b13      	ldr	r3, [pc, #76]	; (8001200 <HAL_TIM_Base_MspInit+0xa0>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f003 0310 	and.w	r3, r3, #16
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2036      	movs	r0, #54	; 0x36
 80011c4:	f001 f969 	bl	800249a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011c8:	2036      	movs	r0, #54	; 0x36
 80011ca:	f001 f982 	bl	80024d2 <HAL_NVIC_EnableIRQ>
}
 80011ce:	e010      	b.n	80011f2 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM14)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0c      	ldr	r2, [pc, #48]	; (8001208 <HAL_TIM_Base_MspInit+0xa8>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d10b      	bne.n	80011f2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <HAL_TIM_Base_MspInit+0xa0>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	4a08      	ldr	r2, [pc, #32]	; (8001200 <HAL_TIM_Base_MspInit+0xa0>)
 80011e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e4:	6413      	str	r3, [r2, #64]	; 0x40
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_TIM_Base_MspInit+0xa0>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40000800 	.word	0x40000800
 8001200:	40023800 	.word	0x40023800
 8001204:	40001000 	.word	0x40001000
 8001208:	40002000 	.word	0x40002000

0800120c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a11      	ldr	r2, [pc, #68]	; (8001270 <HAL_TIM_MspPostInit+0x64>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d11c      	bne.n	8001268 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <HAL_TIM_MspPostInit+0x68>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a10      	ldr	r2, [pc, #64]	; (8001274 <HAL_TIM_MspPostInit+0x68>)
 8001234:	f043 0308 	orr.w	r3, r3, #8
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <HAL_TIM_MspPostInit+0x68>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001258:	2302      	movs	r3, #2
 800125a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	4619      	mov	r1, r3
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <HAL_TIM_MspPostInit+0x6c>)
 8001264:	f001 f9e2 	bl	800262c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001268:	bf00      	nop
 800126a:	3720      	adds	r7, #32
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40000800 	.word	0x40000800
 8001274:	40023800 	.word	0x40023800
 8001278:	40020c00 	.word	0x40020c00

0800127c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001280:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <MX_USART3_UART_Init+0x58>)
 8001282:	4a15      	ldr	r2, [pc, #84]	; (80012d8 <MX_USART3_UART_Init+0x5c>)
 8001284:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <MX_USART3_UART_Init+0x58>)
 8001288:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800128c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_USART3_UART_Init+0x58>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <MX_USART3_UART_Init+0x58>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_USART3_UART_Init+0x58>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <MX_USART3_UART_Init+0x58>)
 80012a2:	220c      	movs	r2, #12
 80012a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <MX_USART3_UART_Init+0x58>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <MX_USART3_UART_Init+0x58>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <MX_USART3_UART_Init+0x58>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <MX_USART3_UART_Init+0x58>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <MX_USART3_UART_Init+0x58>)
 80012c0:	f004 fe2c 	bl	8005f1c <HAL_UART_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80012ca:	f7ff fd23 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200007b4 	.word	0x200007b4
 80012d8:	40004800 	.word	0x40004800

080012dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b0ae      	sub	sp, #184	; 0xb8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2290      	movs	r2, #144	; 0x90
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f006 fd5b 	bl	8007db8 <memset>
  if(uartHandle->Instance==USART3)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a26      	ldr	r2, [pc, #152]	; (80013a0 <HAL_UART_MspInit+0xc4>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d144      	bne.n	8001396 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800130c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001310:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001312:	2300      	movs	r3, #0
 8001314:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	4618      	mov	r0, r3
 800131c:	f002 ff82 	bl	8004224 <HAL_RCCEx_PeriphCLKConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001326:	f7ff fcf5 	bl	8000d14 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800132a:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <HAL_UART_MspInit+0xc8>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	4a1d      	ldr	r2, [pc, #116]	; (80013a4 <HAL_UART_MspInit+0xc8>)
 8001330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001334:	6413      	str	r3, [r2, #64]	; 0x40
 8001336:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <HAL_UART_MspInit+0xc8>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <HAL_UART_MspInit+0xc8>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a17      	ldr	r2, [pc, #92]	; (80013a4 <HAL_UART_MspInit+0xc8>)
 8001348:	f043 0308 	orr.w	r3, r3, #8
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <HAL_UART_MspInit+0xc8>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800135a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800135e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136e:	2303      	movs	r3, #3
 8001370:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001374:	2307      	movs	r3, #7
 8001376:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800137e:	4619      	mov	r1, r3
 8001380:	4809      	ldr	r0, [pc, #36]	; (80013a8 <HAL_UART_MspInit+0xcc>)
 8001382:	f001 f953 	bl	800262c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	2027      	movs	r0, #39	; 0x27
 800138c:	f001 f885 	bl	800249a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001390:	2027      	movs	r0, #39	; 0x27
 8001392:	f001 f89e 	bl	80024d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001396:	bf00      	nop
 8001398:	37b8      	adds	r7, #184	; 0xb8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40004800 	.word	0x40004800
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020c00 	.word	0x40020c00

080013ac <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80013b0:	4b14      	ldr	r3, [pc, #80]	; (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80013b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ba:	2206      	movs	r2, #6
 80013bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013c0:	2202      	movs	r2, #2
 80013c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013cc:	2202      	movs	r2, #2
 80013ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013d8:	2200      	movs	r2, #0
 80013da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013de:	2200      	movs	r2, #0
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013ee:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013f0:	f002 f89b 	bl	800352a <HAL_PCD_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80013fa:	f7ff fc8b 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2000083c 	.word	0x2000083c

08001408 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b0ae      	sub	sp, #184	; 0xb8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2290      	movs	r2, #144	; 0x90
 8001426:	2100      	movs	r1, #0
 8001428:	4618      	mov	r0, r3
 800142a:	f006 fcc5 	bl	8007db8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001436:	d159      	bne.n	80014ec <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001438:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800143c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800143e:	2300      	movs	r3, #0
 8001440:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4618      	mov	r0, r3
 800144a:	f002 feeb 	bl	8004224 <HAL_RCCEx_PeriphCLKConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001454:	f7ff fc5e 	bl	8000d14 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001458:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <HAL_PCD_MspInit+0xec>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	4a25      	ldr	r2, [pc, #148]	; (80014f4 <HAL_PCD_MspInit+0xec>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6313      	str	r3, [r2, #48]	; 0x30
 8001464:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <HAL_PCD_MspInit+0xec>)
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001470:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001474:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800148a:	230a      	movs	r3, #10
 800148c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001494:	4619      	mov	r1, r3
 8001496:	4818      	ldr	r0, [pc, #96]	; (80014f8 <HAL_PCD_MspInit+0xf0>)
 8001498:	f001 f8c8 	bl	800262c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800149c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014b4:	4619      	mov	r1, r3
 80014b6:	4810      	ldr	r0, [pc, #64]	; (80014f8 <HAL_PCD_MspInit+0xf0>)
 80014b8:	f001 f8b8 	bl	800262c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014bc:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <HAL_PCD_MspInit+0xec>)
 80014be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c0:	4a0c      	ldr	r2, [pc, #48]	; (80014f4 <HAL_PCD_MspInit+0xec>)
 80014c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c6:	6353      	str	r3, [r2, #52]	; 0x34
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <HAL_PCD_MspInit+0xec>)
 80014ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <HAL_PCD_MspInit+0xec>)
 80014d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d8:	4a06      	ldr	r2, [pc, #24]	; (80014f4 <HAL_PCD_MspInit+0xec>)
 80014da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014de:	6453      	str	r3, [r2, #68]	; 0x44
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <HAL_PCD_MspInit+0xec>)
 80014e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80014ec:	bf00      	nop
 80014ee:	37b8      	adds	r7, #184	; 0xb8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020000 	.word	0x40020000

080014fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001534 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001500:	480d      	ldr	r0, [pc, #52]	; (8001538 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001502:	490e      	ldr	r1, [pc, #56]	; (800153c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001504:	4a0e      	ldr	r2, [pc, #56]	; (8001540 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001508:	e002      	b.n	8001510 <LoopCopyDataInit>

0800150a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800150c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150e:	3304      	adds	r3, #4

08001510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001514:	d3f9      	bcc.n	800150a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001516:	4a0b      	ldr	r2, [pc, #44]	; (8001544 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001518:	4c0b      	ldr	r4, [pc, #44]	; (8001548 <LoopFillZerobss+0x26>)
  movs r3, #0
 800151a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800151c:	e001      	b.n	8001522 <LoopFillZerobss>

0800151e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001520:	3204      	adds	r2, #4

08001522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001524:	d3fb      	bcc.n	800151e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001526:	f7ff fd35 	bl	8000f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800152a:	f006 fc21 	bl	8007d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800152e:	f7ff fb0b 	bl	8000b48 <main>
  bx  lr    
 8001532:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001534:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800153c:	200005b8 	.word	0x200005b8
  ldr r2, =_sidata
 8001540:	0800b09c 	.word	0x0800b09c
  ldr r2, =_sbss
 8001544:	200005b8 	.word	0x200005b8
  ldr r4, =_ebss
 8001548:	20000d58 	.word	0x20000d58

0800154c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800154c:	e7fe      	b.n	800154c <ADC_IRQHandler>

0800154e <BH1750_Init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hbh1750 BH1750 digital light sensor handler
 * @return None
 */
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af02      	add	r7, sp, #8
 8001554:	6078      	str	r0, [r7, #4]
  uint8_t command;
  command = BH1750_POWER_ON;
 8001556:	2301      	movs	r3, #1
 8001558:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6818      	ldr	r0, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	791b      	ldrb	r3, [r3, #4]
 8001562:	b299      	uxth	r1, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f107 020f 	add.w	r2, r7, #15
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	2301      	movs	r3, #1
 8001570:	f001 faee 	bl	8002b50 <HAL_I2C_Master_Transmit>
  command = BH1750_CONTINOUS_H_RES_MODE;
 8001574:	2310      	movs	r3, #16
 8001576:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6818      	ldr	r0, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	791b      	ldrb	r3, [r3, #4]
 8001580:	b299      	uxth	r1, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f107 020f 	add.w	r2, r7, #15
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2301      	movs	r3, #1
 800158e:	f001 fadf 	bl	8002b50 <HAL_I2C_Master_Transmit>
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	0000      	movs	r0, r0
 800159c:	0000      	movs	r0, r0
	...

080015a0 <BH1750_ReadLux>:
 * @note Uses blocking mode I2C receiving routine.
 * @param[in] hbh1750 BH1750 digital light sensor handler
 * @return Measurement result in lux [lx]
 */
float BH1750_ReadLux(BH1750_HandleTypeDef* hbh1750)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af02      	add	r7, sp, #8
 80015a6:	6078      	str	r0, [r7, #4]
  uint8_t rxarray[BH1750_DATA_SIZE];
  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6818      	ldr	r0, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	791b      	ldrb	r3, [r3, #4]
 80015b0:	b299      	uxth	r1, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f107 020c 	add.w	r2, r7, #12
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	2302      	movs	r3, #2
 80015be:	f001 fbbb 	bl	8002d38 <HAL_I2C_Master_Receive>
  return ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2; // @see BH1750 technical note p. 10;
 80015c2:	7b3b      	ldrb	r3, [r7, #12]
 80015c4:	021b      	lsls	r3, r3, #8
 80015c6:	7b7a      	ldrb	r2, [r7, #13]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	ee07 3a90 	vmov	s15, r3
 80015ce:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80015d2:	ed9f 5b05 	vldr	d5, [pc, #20]	; 80015e8 <BH1750_ReadLux+0x48>
 80015d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 80015de:	eeb0 0a67 	vmov.f32	s0, s15
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	33333333 	.word	0x33333333
 80015ec:	3ff33333 	.word	0x3ff33333

080015f0 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	HAL_Delay(16);
 80015f8:	2010      	movs	r0, #16
 80015fa:	f000 fe4f 	bl	800229c <HAL_Delay>

	if(lcd->mode == LCD_4_BIT_MODE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	7d9b      	ldrb	r3, [r3, #22]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d115      	bne.n	8001632 <Lcd_init+0x42>
	{
			lcd_write_command(lcd, 0x33);
 8001606:	2133      	movs	r1, #51	; 0x33
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 f88a 	bl	8001722 <lcd_write_command>
			HAL_Delay(5);
 800160e:	2005      	movs	r0, #5
 8001610:	f000 fe44 	bl	800229c <HAL_Delay>
			lcd_write_command(lcd, 0x32);
 8001614:	2132      	movs	r1, #50	; 0x32
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 f883 	bl	8001722 <lcd_write_command>
			HAL_Delay(1);
 800161c:	2001      	movs	r0, #1
 800161e:	f000 fe3d 	bl	800229c <HAL_Delay>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8001622:	2128      	movs	r1, #40	; 0x28
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 f87c 	bl	8001722 <lcd_write_command>
			HAL_Delay(1);
 800162a:	2001      	movs	r0, #1
 800162c:	f000 fe36 	bl	800229c <HAL_Delay>
 8001630:	e003      	b.n	800163a <Lcd_init+0x4a>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8001632:	2138      	movs	r1, #56	; 0x38
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 f874 	bl	8001722 <lcd_write_command>

	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 800163a:	2101      	movs	r1, #1
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f870 	bl	8001722 <lcd_write_command>
	HAL_Delay(2);
 8001642:	2002      	movs	r0, #2
 8001644:	f000 fe2a 	bl	800229c <HAL_Delay>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8001648:	210c      	movs	r1, #12
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 f869 	bl	8001722 <lcd_write_command>
	HAL_Delay(2);
 8001650:	2002      	movs	r0, #2
 8001652:	f000 fe23 	bl	800229c <HAL_Delay>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8001656:	2106      	movs	r1, #6
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f862 	bl	8001722 <lcd_write_command>
	HAL_Delay(2);
 800165e:	2002      	movs	r0, #2
 8001660:	f000 fe1c 	bl	800229c <HAL_Delay>
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8001676:	2300      	movs	r3, #0
 8001678:	73fb      	strb	r3, [r7, #15]
 800167a:	e00a      	b.n	8001692 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	4413      	add	r3, r2
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	4619      	mov	r1, r3
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f879 	bl	800177e <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	3301      	adds	r3, #1
 8001690:	73fb      	strb	r3, [r7, #15]
 8001692:	7bfc      	ldrb	r4, [r7, #15]
 8001694:	6838      	ldr	r0, [r7, #0]
 8001696:	f7fe fdd3 	bl	8000240 <strlen>
 800169a:	4603      	mov	r3, r0
 800169c:	429c      	cmp	r4, r3
 800169e:	d3ed      	bcc.n	800167c <Lcd_string+0x10>
	}
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd90      	pop	{r4, r7, pc}
	...

080016ac <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	70fb      	strb	r3, [r7, #3]
 80016b8:	4613      	mov	r3, r2
 80016ba:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	4a07      	ldr	r2, [pc, #28]	; (80016dc <Lcd_cursor+0x30>)
 80016c0:	5cd2      	ldrb	r2, [r2, r3]
 80016c2:	78bb      	ldrb	r3, [r7, #2]
 80016c4:	4413      	add	r3, r2
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	3b80      	subs	r3, #128	; 0x80
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	4619      	mov	r1, r3
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f827 	bl	8001722 <lcd_write_command>
	#endif
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	0800ac90 	.word	0x0800ac90

080016e0 <DELAY_func>:


/************************************** Static function definition **************************************/

void DELAY_func(Lcd_HandleTypeDef* lcd, uint16_t delay_us)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COUNTER(lcd->timer, 0);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2200      	movs	r2, #0
 80016f4:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(lcd->timer);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f003 fa12 	bl	8004b24 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(lcd->timer) < delay_us);
 8001700:	bf00      	nop
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800170a:	887b      	ldrh	r3, [r7, #2]
 800170c:	429a      	cmp	r2, r3
 800170e:	d3f8      	bcc.n	8001702 <DELAY_func+0x22>
  HAL_TIM_Base_Stop(lcd->timer);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	4618      	mov	r0, r3
 8001716:	f003 fa75 	bl	8004c04 <HAL_TIM_Base_Stop>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	460b      	mov	r3, r1
 800172c:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6898      	ldr	r0, [r3, #8]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	899b      	ldrh	r3, [r3, #12]
 8001736:	2200      	movs	r2, #0
 8001738:	4619      	mov	r1, r3
 800173a:	f001 f93b 	bl	80029b4 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	7d9b      	ldrb	r3, [r3, #22]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d111      	bne.n	800176a <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	091b      	lsrs	r3, r3, #4
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2204      	movs	r2, #4
 800174e:	4619      	mov	r1, r3
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 f842 	bl	80017da <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	f003 030f 	and.w	r3, r3, #15
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2204      	movs	r2, #4
 8001760:	4619      	mov	r1, r3
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f839 	bl	80017da <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8001768:	e005      	b.n	8001776 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	2208      	movs	r2, #8
 800176e:	4619      	mov	r1, r3
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 f832 	bl	80017da <lcd_write>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	460b      	mov	r3, r1
 8001788:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6898      	ldr	r0, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	899b      	ldrh	r3, [r3, #12]
 8001792:	2201      	movs	r2, #1
 8001794:	4619      	mov	r1, r3
 8001796:	f001 f90d 	bl	80029b4 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	7d9b      	ldrb	r3, [r3, #22]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d111      	bne.n	80017c6 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80017a2:	78fb      	ldrb	r3, [r7, #3]
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2204      	movs	r2, #4
 80017aa:	4619      	mov	r1, r3
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f814 	bl	80017da <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	f003 030f 	and.w	r3, r3, #15
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2204      	movs	r2, #4
 80017bc:	4619      	mov	r1, r3
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f80b 	bl	80017da <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80017c4:	e005      	b.n	80017d2 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80017c6:	78fb      	ldrb	r3, [r7, #3]
 80017c8:	2208      	movs	r2, #8
 80017ca:	4619      	mov	r1, r3
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 f804 	bl	80017da <lcd_write>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b084      	sub	sp, #16
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	460b      	mov	r3, r1
 80017e4:	70fb      	strb	r3, [r7, #3]
 80017e6:	4613      	mov	r3, r2
 80017e8:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6918      	ldr	r0, [r3, #16]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	8a9b      	ldrh	r3, [r3, #20]
 80017f2:	2201      	movs	r2, #1
 80017f4:	4619      	mov	r1, r3
 80017f6:	f001 f8dd 	bl	80029b4 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80017fa:	2300      	movs	r3, #0
 80017fc:	73fb      	strb	r3, [r7, #15]
 80017fe:	e019      	b.n	8001834 <lcd_write+0x5a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	6818      	ldr	r0, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4413      	add	r3, r2
 8001816:	8819      	ldrh	r1, [r3, #0]
 8001818:	78fa      	ldrb	r2, [r7, #3]
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	fa42 f303 	asr.w	r3, r2, r3
 8001820:	b2db      	uxtb	r3, r3
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	b2db      	uxtb	r3, r3
 8001828:	461a      	mov	r2, r3
 800182a:	f001 f8c3 	bl	80029b4 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	3301      	adds	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
 8001834:	7bfa      	ldrb	r2, [r7, #15]
 8001836:	78bb      	ldrb	r3, [r7, #2]
 8001838:	429a      	cmp	r2, r3
 800183a:	d3e1      	bcc.n	8001800 <lcd_write+0x26>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6918      	ldr	r0, [r3, #16]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	8a9b      	ldrh	r3, [r3, #20]
 8001844:	2200      	movs	r2, #0
 8001846:	4619      	mov	r1, r3
 8001848:	f001 f8b4 	bl	80029b4 <HAL_GPIO_WritePin>
	DELAY(lcd, 0.08);// Data receive on falling edge
 800184c:	214f      	movs	r1, #79	; 0x4f
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ff46 	bl	80016e0 <DELAY_func>
}
 8001854:	bf00      	nop
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <MENU_ITEM_WriteDisplayBuffer>:
/**
 * @brief Write menu item display buffer content
 * @param[in/out] hmenuitem : Menu item handler
 */
void MENU_ITEM_WriteDisplayBuffer(MenuItem_TypeDef* hmenuitem, const char* str)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af02      	add	r7, sp, #8
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  int pad_len = LCD_LINE_LEN - hmenuitem->DisplayStrLen;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	8a5b      	ldrh	r3, [r3, #18]
 800186a:	f1c3 0310 	rsb	r3, r3, #16
 800186e:	60fb      	str	r3, [r7, #12]
  sprintf(hmenuitem->DisplayStr, "%s%.*s", str, pad_len, __menu__padding);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	4b05      	ldr	r3, [pc, #20]	; (8001888 <MENU_ITEM_WriteDisplayBuffer+0x2c>)
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	4904      	ldr	r1, [pc, #16]	; (800188c <MENU_ITEM_WriteDisplayBuffer+0x30>)
 800187c:	f006 ff1a 	bl	80086b4 <siprintf>
}
 8001880:	bf00      	nop
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	0800ac94 	.word	0x0800ac94
 800188c:	0800abf8 	.word	0x0800abf8

08001890 <__menu_DO_folder_routine>:
};

unsigned int ADC1_ConvResults_mV[16];

/* Private variables ---------------------------------------------------------*/
MENU_ITEM_CONTRUCTOR(menu_DO_folder, {menu_folder_routine(hmenuitem, "Dgtl Outputs");} );
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	4903      	ldr	r1, [pc, #12]	; (80018a8 <__menu_DO_folder_routine+0x18>)
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f8b6 	bl	8001a0c <menu_folder_routine>
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	0800ac00 	.word	0x0800ac00

080018ac <__menu_DI_folder_routine>:
MENU_ITEM_CONTRUCTOR(menu_DI_folder, {menu_folder_routine(hmenuitem, "Dgtl Inputs");} );
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	4903      	ldr	r1, [pc, #12]	; (80018c4 <__menu_DI_folder_routine+0x18>)
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f8a8 	bl	8001a0c <menu_folder_routine>
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	0800ac10 	.word	0x0800ac10

080018c8 <__menu_AO_folder_routine>:
MENU_ITEM_CONTRUCTOR(menu_AO_folder, {menu_folder_routine(hmenuitem, "Anlg Outputs");} );
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	4903      	ldr	r1, [pc, #12]	; (80018e0 <__menu_AO_folder_routine+0x18>)
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f89a 	bl	8001a0c <menu_folder_routine>
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	0800ac1c 	.word	0x0800ac1c

080018e4 <__menu_AI_folder_routine>:
MENU_ITEM_CONTRUCTOR(menu_AI_folder, {menu_folder_routine(hmenuitem, "Anlg Inputs");} );
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	4903      	ldr	r1, [pc, #12]	; (80018fc <__menu_AI_folder_routine+0x18>)
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f88c 	bl	8001a0c <menu_folder_routine>
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	0800ac2c 	.word	0x0800ac2c

08001900 <__menu_ld1_routine>:

MENU_ITEM_CONTRUCTOR(menu_ld1, {menu_dout_routine(hmenuitem, LD1_GPIO_Port, LD1_Pin, "LD1");} );
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <__menu_ld1_routine+0x1c>)
 800190a:	2201      	movs	r2, #1
 800190c:	4904      	ldr	r1, [pc, #16]	; (8001920 <__menu_ld1_routine+0x20>)
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f848 	bl	80019a4 <menu_dout_routine>
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	0800ac38 	.word	0x0800ac38
 8001920:	40020400 	.word	0x40020400

08001924 <__menu_ld2_routine>:
MENU_ITEM_CONTRUCTOR(menu_ld2, {menu_dout_routine(hmenuitem, LD2_GPIO_Port, LD2_Pin, "LD2");} );
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <__menu_ld2_routine+0x1c>)
 800192e:	2280      	movs	r2, #128	; 0x80
 8001930:	4904      	ldr	r1, [pc, #16]	; (8001944 <__menu_ld2_routine+0x20>)
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 f836 	bl	80019a4 <menu_dout_routine>
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	0800ac3c 	.word	0x0800ac3c
 8001944:	40020400 	.word	0x40020400

08001948 <__menu_ld3_routine>:
MENU_ITEM_CONTRUCTOR(menu_ld3, {menu_dout_routine(hmenuitem, LD3_GPIO_Port, LD3_Pin, "LD3");} );
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <__menu_ld3_routine+0x20>)
 8001952:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001956:	4905      	ldr	r1, [pc, #20]	; (800196c <__menu_ld3_routine+0x24>)
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 f823 	bl	80019a4 <menu_dout_routine>
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	0800ac40 	.word	0x0800ac40
 800196c:	40020400 	.word	0x40020400

08001970 <__menu_bh1750_routine>:

MENU_ITEM_CONTRUCTOR(menu_bh1750, {menu_float_io_routine(hmenuitem, hbh1750_1.Readout, 6, "LIGHT", "lx");} );
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <__menu_bh1750_routine+0x28>)
 800197a:	edd3 7a03 	vldr	s15, [r3, #12]
 800197e:	4b07      	ldr	r3, [pc, #28]	; (800199c <__menu_bh1750_routine+0x2c>)
 8001980:	4a07      	ldr	r2, [pc, #28]	; (80019a0 <__menu_bh1750_routine+0x30>)
 8001982:	2106      	movs	r1, #6
 8001984:	eeb0 0a67 	vmov.f32	s0, s15
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 f85f 	bl	8001a4c <menu_float_io_routine>
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000004 	.word	0x20000004
 800199c:	0800ac44 	.word	0x0800ac44
 80019a0:	0800ac48 	.word	0x0800ac48

080019a4 <menu_dout_routine>:
 * @param[in/out] hmenuitem : Menu item structure
 * @param[in]     hled      : Digital output handler
 * @param[in]     name      : Output display name
 */
void menu_dout_routine(MenuItem_TypeDef* hmenuitem, GPIO_TypeDef* Port, uint16_t Pin, const char* name)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08c      	sub	sp, #48	; 0x30
 80019a8:	af02      	add	r7, sp, #8
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	4613      	mov	r3, r2
 80019b2:	80fb      	strh	r3, [r7, #6]
//    else if(henc1.CounterDec)
//    	HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
//  }

  char temp_str[LCD_LINE_BUF_LEN];
  hmenuitem->DisplayStrLen = snprintf(temp_str, LCD_LINE_LEN, "%s: %s", name, (_Bool)HAL_GPIO_ReadPin(Port, Pin) ? "ON" : "OFF");
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	4619      	mov	r1, r3
 80019b8:	68b8      	ldr	r0, [r7, #8]
 80019ba:	f000 ffe3 	bl	8002984 <HAL_GPIO_ReadPin>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <menu_dout_routine+0x24>
 80019c4:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <menu_dout_routine+0x5c>)
 80019c6:	e000      	b.n	80019ca <menu_dout_routine+0x26>
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <menu_dout_routine+0x60>)
 80019ca:	f107 0014 	add.w	r0, r7, #20
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	4a0d      	ldr	r2, [pc, #52]	; (8001a08 <menu_dout_routine+0x64>)
 80019d4:	2110      	movs	r1, #16
 80019d6:	f006 fe39 	bl	800864c <sniprintf>
 80019da:	4603      	mov	r3, r0
 80019dc:	b29a      	uxth	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	825a      	strh	r2, [r3, #18]
  MENU_ITEM_WriteDisplayBuffer(hmenuitem, temp_str); // Set display buffer
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f7ff ff37 	bl	800185c <MENU_ITEM_WriteDisplayBuffer>
  hmenuitem->SerialPortStrLen = 0;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
}
 80019f6:	bf00      	nop
 80019f8:	3728      	adds	r7, #40	; 0x28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	0800ac50 	.word	0x0800ac50
 8001a04:	0800ac54 	.word	0x0800ac54
 8001a08:	0800ac58 	.word	0x0800ac58

08001a0c <menu_folder_routine>:
 * @brief Common menu folders routine.
 * @param[in/out] hmenuitem : Menu item structure
 * @param[in]     name      : Output display name
 */
void menu_folder_routine(MenuItem_TypeDef* hmenuitem, const char* name)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
	char temp_str[LCD_LINE_BUF_LEN];
	hmenuitem->DisplayStrLen = snprintf(temp_str, LCD_LINE_LEN, "%s", name);
 8001a16:	f107 000c 	add.w	r0, r7, #12
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <menu_folder_routine+0x3c>)
 8001a1e:	2110      	movs	r1, #16
 8001a20:	f006 fe14 	bl	800864c <sniprintf>
 8001a24:	4603      	mov	r3, r0
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	825a      	strh	r2, [r3, #18]
	MENU_ITEM_WriteDisplayBuffer(hmenuitem, temp_str); // Set display buffer
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	4619      	mov	r1, r3
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ff12 	bl	800185c <MENU_ITEM_WriteDisplayBuffer>
	hmenuitem->SerialPortStrLen = 0;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
}
 8001a40:	bf00      	nop
 8001a42:	3720      	adds	r7, #32
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	0800ac60 	.word	0x0800ac60

08001a4c <menu_float_io_routine>:
//  MENU_ITEM_WriteDisplayBuffer(hmenuitem, temp_str); // Set display buffer
//  hmenuitem->SerialPortStrLen = 0;
//}

void menu_float_io_routine(MenuItem_TypeDef* hmenuitem, float value, unsigned int len, const char* name, const char* unit)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b092      	sub	sp, #72	; 0x48
 8001a50:	af06      	add	r7, sp, #24
 8001a52:	6178      	str	r0, [r7, #20]
 8001a54:	ed87 0a04 	vstr	s0, [r7, #16]
 8001a58:	60f9      	str	r1, [r7, #12]
 8001a5a:	60ba      	str	r2, [r7, #8]
 8001a5c:	607b      	str	r3, [r7, #4]
  char temp_str[LCD_LINE_BUF_LEN];
  hmenuitem->DisplayStrLen = snprintf(temp_str, LCD_LINE_LEN, "%s: %*.2f%s", name, len, value, unit);
 8001a5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a66:	f107 001c 	add.w	r0, r7, #28
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	9304      	str	r3, [sp, #16]
 8001a6e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <menu_float_io_routine+0x58>)
 8001a7a:	2110      	movs	r1, #16
 8001a7c:	f006 fde6 	bl	800864c <sniprintf>
 8001a80:	4603      	mov	r3, r0
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	825a      	strh	r2, [r3, #18]
  MENU_ITEM_WriteDisplayBuffer(hmenuitem, temp_str); // Set display buffer
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	6978      	ldr	r0, [r7, #20]
 8001a90:	f7ff fee4 	bl	800185c <MENU_ITEM_WriteDisplayBuffer>
  hmenuitem->SerialPortStrLen = 0;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
}
 8001a9c:	bf00      	nop
 8001a9e:	3730      	adds	r7, #48	; 0x30
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	0800ac64 	.word	0x0800ac64

08001aa8 <MENU_Init>:
/**
 * @brief Menu initialization. Creates doubly-linked list from elements of MENU_MAIN_ARRAY.
 * @param[in/out] hmenu : Menu structure
 */
void MENU_Init(Menu_TypeDef* hmenu)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Active element initialization */
  hmenu->Item = MENU_MAIN_ARRAY[0];
 8001ab0:	4b2c      	ldr	r3, [pc, #176]	; (8001b64 <MENU_Init+0xbc>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	601a      	str	r2, [r3, #0]

  /* Folders loop*/
  for(uint8_t i = 0; i < (uint8_t)(MENU_FOLDERS_NBR-1); i++) //< Next item
 8001ab8:	2300      	movs	r3, #0
 8001aba:	73fb      	strb	r3, [r7, #15]
 8001abc:	e00c      	b.n	8001ad8 <MENU_Init+0x30>
      {
  	  MENU_MAIN_ARRAY[i]->Next = MENU_MAIN_ARRAY[i+1];
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	4927      	ldr	r1, [pc, #156]	; (8001b64 <MENU_Init+0xbc>)
 8001ac6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001aca:	4926      	ldr	r1, [pc, #152]	; (8001b64 <MENU_Init+0xbc>)
 8001acc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ad0:	659a      	str	r2, [r3, #88]	; 0x58
  for(uint8_t i = 0; i < (uint8_t)(MENU_FOLDERS_NBR-1); i++) //< Next item
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d9ef      	bls.n	8001abe <MENU_Init+0x16>
      }

  for(uint8_t i = 1; i < (uint8_t)MENU_FOLDERS_NBR; i++)     //< Previous item
 8001ade:	2301      	movs	r3, #1
 8001ae0:	73bb      	strb	r3, [r7, #14]
 8001ae2:	e00c      	b.n	8001afe <MENU_Init+0x56>
      {
  	  MENU_MAIN_ARRAY[i]->Prev = MENU_MAIN_ARRAY[i-1];
 8001ae4:	7bbb      	ldrb	r3, [r7, #14]
 8001ae6:	1e5a      	subs	r2, r3, #1
 8001ae8:	7bbb      	ldrb	r3, [r7, #14]
 8001aea:	491e      	ldr	r1, [pc, #120]	; (8001b64 <MENU_Init+0xbc>)
 8001aec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001af0:	491c      	ldr	r1, [pc, #112]	; (8001b64 <MENU_Init+0xbc>)
 8001af2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001af6:	65da      	str	r2, [r3, #92]	; 0x5c
  for(uint8_t i = 1; i < (uint8_t)MENU_FOLDERS_NBR; i++)     //< Previous item
 8001af8:	7bbb      	ldrb	r3, [r7, #14]
 8001afa:	3301      	adds	r3, #1
 8001afc:	73bb      	strb	r3, [r7, #14]
 8001afe:	7bbb      	ldrb	r3, [r7, #14]
 8001b00:	2b03      	cmp	r3, #3
 8001b02:	d9ef      	bls.n	8001ae4 <MENU_Init+0x3c>
      }
  /* Cyclic list */
  MENU_MAIN_ARRAY[MENU_FOLDERS_NBR-1]->Next = MENU_MAIN_ARRAY[0]; //< Next of last is first item
 8001b04:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <MENU_Init+0xbc>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	4a16      	ldr	r2, [pc, #88]	; (8001b64 <MENU_Init+0xbc>)
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	659a      	str	r2, [r3, #88]	; 0x58
  MENU_MAIN_ARRAY[0]->Prev = MENU_MAIN_ARRAY[MENU_FOLDERS_NBR-1]; //< Previous of first is last item
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <MENU_Init+0xbc>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <MENU_Init+0xbc>)
 8001b14:	68d2      	ldr	r2, [r2, #12]
 8001b16:	65da      	str	r2, [r3, #92]	; 0x5c

  MENU_MAIN_ARRAY[0]->Child = MENU_MAIN_ARRAY[MENU_1ST_DO];
 8001b18:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <MENU_Init+0xbc>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a11      	ldr	r2, [pc, #68]	; (8001b64 <MENU_Init+0xbc>)
 8001b1e:	6912      	ldr	r2, [r2, #16]
 8001b20:	661a      	str	r2, [r3, #96]	; 0x60
//  MENU_MAIN_ARRAY[1]->Child = MENU_MAIN_ARRAY[MENU_1ST_DO];
//  MENU_MAIN_ARRAY[2]->Child = MENU_MAIN_ARRAY[MENU_1ST_DO];
//  MENU_MAIN_ARRAY[3]->Child = MENU_MAIN_ARRAY[MENU_1ST_DO];

  hmenu->Initialized = 1;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	751a      	strb	r2, [r3, #20]

  /* LCD set-up */
  Lcd_cursor(hmenu->Display, 0, 0);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fdbb 	bl	80016ac <Lcd_cursor>
  Lcd_string(hmenu->Display, ">");
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	490b      	ldr	r1, [pc, #44]	; (8001b68 <MENU_Init+0xc0>)
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fd95 	bl	800166c <Lcd_string>
  Lcd_cursor(hmenu->Display, 1, 0);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2200      	movs	r2, #0
 8001b48:	2101      	movs	r1, #1
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fdae 	bl	80016ac <Lcd_cursor>
  Lcd_string(hmenu->Display, " ");
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	4905      	ldr	r1, [pc, #20]	; (8001b6c <MENU_Init+0xc4>)
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fd88 	bl	800166c <Lcd_string>
}
 8001b5c:	bf00      	nop
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	200003c0 	.word	0x200003c0
 8001b68:	0800ac70 	.word	0x0800ac70
 8001b6c:	0800ac74 	.word	0x0800ac74

08001b70 <MENU_ROUTINE>:
/**
 * @brief Menu routine. Calls active items routines and updates output devices.
 * @param[in/out] hmenu : Menu structure
 */
void MENU_ROUTINE(Menu_TypeDef* hmenu)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

  if(!hmenu->Initialized)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	7d1b      	ldrb	r3, [r3, #20]
 8001b7c:	f083 0301 	eor.w	r3, r3, #1
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d13f      	bne.n	8001c06 <MENU_ROUTINE+0x96>
  {
	  return;
  }

  MENU_CALL_ROUTINE(hmenu->Item);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6812      	ldr	r2, [r2, #0]
 8001b90:	4610      	mov	r0, r2
 8001b92:	4798      	blx	r3
  MENU_CALL_ROUTINE(hmenu->Item->Next);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4798      	blx	r3

  hmenu->ItemChanged = 0;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	711a      	strb	r2, [r3, #4]

  // #1 line - active item
  Lcd_cursor(hmenu->Display, 0, 1);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fd79 	bl	80016ac <Lcd_cursor>
  Lcd_string(hmenu->Display, hmenu->Item->DisplayStr);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	f7ff fd51 	bl	800166c <Lcd_string>

  // #1 line - next item
  Lcd_cursor(hmenu->Display, 1, 1);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fd6a 	bl	80016ac <Lcd_cursor>
  Lcd_string(hmenu->Display, hmenu->Item->Next->DisplayStr);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be2:	4619      	mov	r1, r3
 8001be4:	4610      	mov	r0, r2
 8001be6:	f7ff fd41 	bl	800166c <Lcd_string>


  // Serial port streaming
  HAL_UART_Transmit(hmenu->SerialPort, (uint8_t*)hmenu->Item->SerialPortStr, hmenu->Item->SerialPortStrLen, 10);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6918      	ldr	r0, [r3, #16]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f103 0114 	add.w	r1, r3, #20
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8001bfe:	230a      	movs	r3, #10
 8001c00:	f004 f9da 	bl	8005fb8 <HAL_UART_Transmit>
 8001c04:	e000      	b.n	8001c08 <MENU_ROUTINE+0x98>
	  return;
 8001c06:	bf00      	nop
}
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <PID_Init>:
#include "main.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	if (uPID->OutputSum > uPID->OutMax)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8001c3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c46:	dd06      	ble.n	8001c56 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8001c54:	e011      	b.n	8001c7a <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8001c62:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6a:	d400      	bmi.n	8001c6e <PID_Init+0x60>
}
 8001c6c:	e005      	b.n	8001c7a <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6278      	str	r0, [r7, #36]	; 0x24
 8001c90:	6239      	str	r1, [r7, #32]
 8001c92:	61fa      	str	r2, [r7, #28]
 8001c94:	61bb      	str	r3, [r7, #24]
 8001c96:	ed87 0b04 	vstr	d0, [r7, #16]
 8001c9a:	ed87 1b02 	vstr	d1, [r7, #8]
 8001c9e:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	69fa      	ldr	r2, [r7, #28]
 8001ca6:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	6a3a      	ldr	r2, [r7, #32]
 8001cac:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8001cba:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8001d10 <PID+0x88>
 8001cbe:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8001d18 <PID+0x90>
 8001cc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001cc4:	f000 f91a 	bl	8001efc <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	2264      	movs	r2, #100	; 0x64
 8001ccc:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8001cce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001cd6:	f000 fa13 	bl	8002100 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8001cda:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001cde:	4619      	mov	r1, r3
 8001ce0:	ed97 2b00 	vldr	d2, [r7]
 8001ce4:	ed97 1b02 	vldr	d1, [r7, #8]
 8001ce8:	ed97 0b04 	vldr	d0, [r7, #16]
 8001cec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001cee:	f000 f977 	bl	8001fe0 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 8001cf2:	f000 fac7 	bl	8002284 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	1ad2      	subs	r2, r2, r3
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	605a      	str	r2, [r3, #4]

}
 8001d02:	bf00      	nop
 8001d04:	3728      	adds	r7, #40	; 0x28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	f3af 8000 	nop.w
 8001d10:	00000000 	.word	0x00000000
 8001d14:	406fe000 	.word	0x406fe000
	...

08001d20 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08c      	sub	sp, #48	; 0x30
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	785b      	ldrb	r3, [r3, #1]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <PID_Compute+0x14>
	{
		return _FALSE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	e0c1      	b.n	8001eb8 <PID_Compute+0x198>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8001d34:	f000 faa6 	bl	8002284 <HAL_GetTick>
 8001d38:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	6a3a      	ldr	r2, [r7, #32]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	f0c0 80b3 	bcc.w	8001eb6 <PID_Compute+0x196>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d58:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d60:	ed93 6b00 	vldr	d6, [r3]
 8001d64:	ed97 7b06 	vldr	d7, [r7, #24]
 8001d68:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d6c:	ed87 7b04 	vstr	d7, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8001d76:	ed97 6b06 	vldr	d6, [r7, #24]
 8001d7a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d7e:	ed87 7b02 	vstr	d7, [r7, #8]

		uPID->OutputSum     += (uPID->Ki * error);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	ed93 5b0c 	vldr	d5, [r3, #48]	; 0x30
 8001d8e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001d92:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001d96:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50

		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10e      	bne.n	8001dc6 <PID_Compute+0xa6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 8001db4:	ed97 7b02 	vldr	d7, [r7, #8]
 8001db8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001dbc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
		}

		if (uPID->OutputSum > uPID->OutMax)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8001dd2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dda:	dd06      	ble.n	8001dea <PID_Compute+0xca>
		{
			uPID->OutputSum = uPID->OutMax;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001de8:	e010      	b.n	8001e0c <PID_Compute+0xec>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8001df6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfe:	d505      	bpl.n	8001e0c <PID_Compute+0xec>
		{
			uPID->OutputSum = uPID->OutMin;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }

		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d009      	beq.n	8001e28 <PID_Compute+0x108>
		{
			output = uPID->Kp * error;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001e1a:	ed97 6b04 	vldr	d6, [r7, #16]
 8001e1e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001e22:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
 8001e26:	e005      	b.n	8001e34 <PID_Compute+0x114>
		}
		else
		{
			output = 0;
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 8001e40:	ed97 7b02 	vldr	d7, [r7, #8]
 8001e44:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001e48:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001e4c:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001e50:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e54:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8001e5e:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001e62:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6a:	dd05      	ble.n	8001e78 <PID_Compute+0x158>
		{
			output = uPID->OutMax;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001e72:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001e76:	e00e      	b.n	8001e96 <PID_Compute+0x176>
		}
		else if (output < uPID->OutMin)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8001e7e:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001e82:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8a:	d504      	bpl.n	8001e96 <PID_Compute+0x176>
		{
			output = uPID->OutMin;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001e92:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }

		*uPID->MyOutput = output;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001e9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e9e:	e9c1 2300 	strd	r2, r3, [r1]

		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ea8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb0:	605a      	str	r2, [r3, #4]

		return _TRUE;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <PID_Compute+0x198>

	}
	else
	{
		return _FALSE;
 8001eb6:	2300      	movs	r3, #0
	}

}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3730      	adds	r7, #48	; 0x30
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	bf0c      	ite	eq
 8001ed2:	2301      	moveq	r3, #1
 8001ed4:	2300      	movne	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d006      	beq.n	8001eee <PID_SetMode+0x2e>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	785b      	ldrb	r3, [r3, #1]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d102      	bne.n	8001eee <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff fe90 	bl	8001c0e <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	7bfa      	ldrb	r2, [r7, #15]
 8001ef2:	705a      	strb	r2, [r3, #1]

}
 8001ef4:	bf00      	nop
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6178      	str	r0, [r7, #20]
 8001f04:	ed87 0b02 	vstr	d0, [r7, #8]
 8001f08:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8001f0c:	ed97 6b02 	vldr	d6, [r7, #8]
 8001f10:	ed97 7b00 	vldr	d7, [r7]
 8001f14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1c:	da58      	bge.n	8001fd0 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 8001f1e:	6979      	ldr	r1, [r7, #20]
 8001f20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f24:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8001f28:	6979      	ldr	r1, [r7, #20]
 8001f2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f2e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	785b      	ldrb	r3, [r3, #1]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d04b      	beq.n	8001fd2 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	ed93 6b00 	vldr	d6, [r3]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8001f48:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f50:	dd07      	ble.n	8001f62 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001f5c:	e9c1 2300 	strd	r2, r3, [r1]
 8001f60:	e012      	b.n	8001f88 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	ed93 6b00 	vldr	d6, [r3]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8001f70:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f78:	d506      	bpl.n	8001f88 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001f84:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8001f94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9c:	dd06      	ble.n	8001fac <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001fa4:	6979      	ldr	r1, [r7, #20]
 8001fa6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001faa:	e012      	b.n	8001fd2 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8001fb8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc0:	d507      	bpl.n	8001fd2 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001fc8:	6979      	ldr	r1, [r7, #20]
 8001fca:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001fce:	e000      	b.n	8001fd2 <PID_SetOutputLimits+0xd6>
		return;
 8001fd0:	bf00      	nop
		}
		else { }

	}

}
 8001fd2:	371c      	adds	r7, #28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	0000      	movs	r0, r0
	...

08001fe0 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b08b      	sub	sp, #44	; 0x2c
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	61f8      	str	r0, [r7, #28]
 8001fe8:	ed87 0b04 	vstr	d0, [r7, #16]
 8001fec:	ed87 1b02 	vstr	d1, [r7, #8]
 8001ff0:	ed87 2b00 	vstr	d2, [r7]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8001ff8:	ed97 7b04 	vldr	d7, [r7, #16]
 8001ffc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002004:	d46e      	bmi.n	80020e4 <PID_SetTunings2+0x104>
 8002006:	ed97 7b02 	vldr	d7, [r7, #8]
 800200a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800200e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002012:	d467      	bmi.n	80020e4 <PID_SetTunings2+0x104>
 8002014:	ed97 7b00 	vldr	d7, [r7]
 8002018:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800201c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002020:	d460      	bmi.n	80020e4 <PID_SetTunings2+0x104>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	7efa      	ldrb	r2, [r7, #27]
 8002026:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002028:	7efb      	ldrb	r3, [r7, #27]
 800202a:	2b01      	cmp	r3, #1
 800202c:	bf0c      	ite	eq
 800202e:	2301      	moveq	r3, #1
 8002030:	2300      	movne	r3, #0
 8002032:	b2db      	uxtb	r3, r3
 8002034:	461a      	mov	r2, r3
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 800203a:	69f9      	ldr	r1, [r7, #28]
 800203c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002040:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8002044:	69f9      	ldr	r1, [r7, #28]
 8002046:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800204a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 800204e:	69f9      	ldr	r1, [r7, #28]
 8002050:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002054:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	ee07 3a90 	vmov	s15, r3
 8002060:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002064:	ed9f 5b22 	vldr	d5, [pc, #136]	; 80020f0 <PID_SetTunings2+0x110>
 8002068:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800206c:	ed87 7b08 	vstr	d7, [r7, #32]

	uPID->Kp = Kp;
 8002070:	69f9      	ldr	r1, [r7, #28]
 8002072:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002076:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 800207a:	ed97 6b02 	vldr	d6, [r7, #8]
 800207e:	ed97 7b08 	vldr	d7, [r7, #32]
 8002082:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 800208c:	ed97 5b00 	vldr	d5, [r7]
 8002090:	ed97 6b08 	vldr	d6, [r7, #32]
 8002094:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	78db      	ldrb	r3, [r3, #3]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d11f      	bne.n	80020e6 <PID_SetTunings2+0x106>
	{

		uPID->Kp = (0 - uPID->Kp);
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80020ac:	ed9f 6b12 	vldr	d6, [pc, #72]	; 80020f8 <PID_SetTunings2+0x118>
 80020b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80020c0:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80020f8 <PID_SetTunings2+0x118>
 80020c4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80020d4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80020f8 <PID_SetTunings2+0x118>
 80020d8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
 80020e2:	e000      	b.n	80020e6 <PID_SetTunings2+0x106>
		return;
 80020e4:	bf00      	nop

	}

}
 80020e6:	372c      	adds	r7, #44	; 0x2c
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	00000000 	.word	0x00000000
 80020f4:	408f4000 	.word	0x408f4000
	...

08002100 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	785b      	ldrb	r3, [r3, #1]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d022      	beq.n	800215a <PID_SetControllerDirection+0x5a>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	78db      	ldrb	r3, [r3, #3]
 8002118:	78fa      	ldrb	r2, [r7, #3]
 800211a:	429a      	cmp	r2, r3
 800211c:	d01d      	beq.n	800215a <PID_SetControllerDirection+0x5a>
	{

		uPID->Kp = (0 - uPID->Kp);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002124:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8002170 <PID_SetControllerDirection+0x70>
 8002128:	ee36 7b47 	vsub.f64	d7, d6, d7
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002138:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8002170 <PID_SetControllerDirection+0x70>
 800213c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800214c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8002170 <PID_SetControllerDirection+0x70>
 8002150:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	78fa      	ldrb	r2, [r7, #3]
 800215e:	70da      	strb	r2, [r3, #3]

}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	f3af 8000 	nop.w
	...

08002178 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	dd25      	ble.n	80021d4 <PID_SetSampleTime+0x5c>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	ee07 3a90 	vmov	s15, r3
 800218e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	ee07 3a90 	vmov	s15, r3
 800219a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800219e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80021a2:	ed87 7b02 	vstr	d7, [r7, #8]

		uPID->Ki *= ratio;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 80021ac:	ed97 7b02 	vldr	d7, [r7, #8]
 80021b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		uPID->Kd /= ratio;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 80021c0:	ed97 6b02 	vldr	d6, [r7, #8]
 80021c4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	609a      	str	r2, [r3, #8]

	}

}
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e4:	2003      	movs	r0, #3
 80021e6:	f000 f94d 	bl	8002484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ea:	2000      	movs	r0, #0
 80021ec:	f000 f806 	bl	80021fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021f0:	f7fe fd96 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002204:	4b12      	ldr	r3, [pc, #72]	; (8002250 <HAL_InitTick+0x54>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b12      	ldr	r3, [pc, #72]	; (8002254 <HAL_InitTick+0x58>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4619      	mov	r1, r3
 800220e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002212:	fbb3 f3f1 	udiv	r3, r3, r1
 8002216:	fbb2 f3f3 	udiv	r3, r2, r3
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f967 	bl	80024ee <HAL_SYSTICK_Config>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e00e      	b.n	8002248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b0f      	cmp	r3, #15
 800222e:	d80a      	bhi.n	8002246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002230:	2200      	movs	r2, #0
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	f000 f92f 	bl	800249a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800223c:	4a06      	ldr	r2, [pc, #24]	; (8002258 <HAL_InitTick+0x5c>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	e000      	b.n	8002248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000000 	.word	0x20000000
 8002254:	200003e4 	.word	0x200003e4
 8002258:	200003e0 	.word	0x200003e0

0800225c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_IncTick+0x20>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_IncTick+0x24>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4413      	add	r3, r2
 800226c:	4a04      	ldr	r2, [pc, #16]	; (8002280 <HAL_IncTick+0x24>)
 800226e:	6013      	str	r3, [r2, #0]
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	200003e4 	.word	0x200003e4
 8002280:	20000d44 	.word	0x20000d44

08002284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return uwTick;
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <HAL_GetTick+0x14>)
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20000d44 	.word	0x20000d44

0800229c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a4:	f7ff ffee 	bl	8002284 <HAL_GetTick>
 80022a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b4:	d005      	beq.n	80022c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <HAL_Delay+0x44>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4413      	add	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022c2:	bf00      	nop
 80022c4:	f7ff ffde 	bl	8002284 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d8f7      	bhi.n	80022c4 <HAL_Delay+0x28>
  {
  }
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	200003e4 	.word	0x200003e4

080022e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <__NVIC_SetPriorityGrouping+0x40>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002300:	4013      	ands	r3, r2
 8002302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <__NVIC_SetPriorityGrouping+0x44>)
 800230e:	4313      	orrs	r3, r2
 8002310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002312:	4a04      	ldr	r2, [pc, #16]	; (8002324 <__NVIC_SetPriorityGrouping+0x40>)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	60d3      	str	r3, [r2, #12]
}
 8002318:	bf00      	nop
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000ed00 	.word	0xe000ed00
 8002328:	05fa0000 	.word	0x05fa0000

0800232c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002330:	4b04      	ldr	r3, [pc, #16]	; (8002344 <__NVIC_GetPriorityGrouping+0x18>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	f003 0307 	and.w	r3, r3, #7
}
 800233a:	4618      	mov	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	2b00      	cmp	r3, #0
 8002358:	db0b      	blt.n	8002372 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	f003 021f 	and.w	r2, r3, #31
 8002360:	4907      	ldr	r1, [pc, #28]	; (8002380 <__NVIC_EnableIRQ+0x38>)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	095b      	lsrs	r3, r3, #5
 8002368:	2001      	movs	r0, #1
 800236a:	fa00 f202 	lsl.w	r2, r0, r2
 800236e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000e100 	.word	0xe000e100

08002384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	6039      	str	r1, [r7, #0]
 800238e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002394:	2b00      	cmp	r3, #0
 8002396:	db0a      	blt.n	80023ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	b2da      	uxtb	r2, r3
 800239c:	490c      	ldr	r1, [pc, #48]	; (80023d0 <__NVIC_SetPriority+0x4c>)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	0112      	lsls	r2, r2, #4
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	440b      	add	r3, r1
 80023a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023ac:	e00a      	b.n	80023c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	4908      	ldr	r1, [pc, #32]	; (80023d4 <__NVIC_SetPriority+0x50>)
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	3b04      	subs	r3, #4
 80023bc:	0112      	lsls	r2, r2, #4
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	440b      	add	r3, r1
 80023c2:	761a      	strb	r2, [r3, #24]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000e100 	.word	0xe000e100
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d8:	b480      	push	{r7}
 80023da:	b089      	sub	sp, #36	; 0x24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f1c3 0307 	rsb	r3, r3, #7
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	bf28      	it	cs
 80023f6:	2304      	movcs	r3, #4
 80023f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	3304      	adds	r3, #4
 80023fe:	2b06      	cmp	r3, #6
 8002400:	d902      	bls.n	8002408 <NVIC_EncodePriority+0x30>
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3b03      	subs	r3, #3
 8002406:	e000      	b.n	800240a <NVIC_EncodePriority+0x32>
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800240c:	f04f 32ff 	mov.w	r2, #4294967295
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43da      	mvns	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	401a      	ands	r2, r3
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002420:	f04f 31ff 	mov.w	r1, #4294967295
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	fa01 f303 	lsl.w	r3, r1, r3
 800242a:	43d9      	mvns	r1, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002430:	4313      	orrs	r3, r2
         );
}
 8002432:	4618      	mov	r0, r3
 8002434:	3724      	adds	r7, #36	; 0x24
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
	...

08002440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3b01      	subs	r3, #1
 800244c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002450:	d301      	bcc.n	8002456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002452:	2301      	movs	r3, #1
 8002454:	e00f      	b.n	8002476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002456:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <SysTick_Config+0x40>)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800245e:	210f      	movs	r1, #15
 8002460:	f04f 30ff 	mov.w	r0, #4294967295
 8002464:	f7ff ff8e 	bl	8002384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <SysTick_Config+0x40>)
 800246a:	2200      	movs	r2, #0
 800246c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800246e:	4b04      	ldr	r3, [pc, #16]	; (8002480 <SysTick_Config+0x40>)
 8002470:	2207      	movs	r2, #7
 8002472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	e000e010 	.word	0xe000e010

08002484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff ff29 	bl	80022e4 <__NVIC_SetPriorityGrouping>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800249a:	b580      	push	{r7, lr}
 800249c:	b086      	sub	sp, #24
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	607a      	str	r2, [r7, #4]
 80024a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024ac:	f7ff ff3e 	bl	800232c <__NVIC_GetPriorityGrouping>
 80024b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	6978      	ldr	r0, [r7, #20]
 80024b8:	f7ff ff8e 	bl	80023d8 <NVIC_EncodePriority>
 80024bc:	4602      	mov	r2, r0
 80024be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff5d 	bl	8002384 <__NVIC_SetPriority>
}
 80024ca:	bf00      	nop
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4603      	mov	r3, r0
 80024da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff ff31 	bl	8002348 <__NVIC_EnableIRQ>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff ffa2 	bl	8002440 <SysTick_Config>
 80024fc:	4603      	mov	r3, r0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002512:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002514:	f7ff feb6 	bl	8002284 <HAL_GetTick>
 8002518:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d008      	beq.n	8002538 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2280      	movs	r2, #128	; 0x80
 800252a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e052      	b.n	80025de <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0216 	bic.w	r2, r2, #22
 8002546:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002556:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	2b00      	cmp	r3, #0
 800255e:	d103      	bne.n	8002568 <HAL_DMA_Abort+0x62>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002564:	2b00      	cmp	r3, #0
 8002566:	d007      	beq.n	8002578 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0208 	bic.w	r2, r2, #8
 8002576:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0201 	bic.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002588:	e013      	b.n	80025b2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800258a:	f7ff fe7b 	bl	8002284 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b05      	cmp	r3, #5
 8002596:	d90c      	bls.n	80025b2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2220      	movs	r2, #32
 800259c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2203      	movs	r2, #3
 80025a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e015      	b.n	80025de <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1e4      	bne.n	800258a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c4:	223f      	movs	r2, #63	; 0x3f
 80025c6:	409a      	lsls	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d004      	beq.n	8002604 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2280      	movs	r2, #128	; 0x80
 80025fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e00c      	b.n	800261e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2205      	movs	r2, #5
 8002608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0201 	bic.w	r2, r2, #1
 800261a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800262c:	b480      	push	{r7}
 800262e:	b089      	sub	sp, #36	; 0x24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002636:	2300      	movs	r3, #0
 8002638:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002642:	2300      	movs	r3, #0
 8002644:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	e175      	b.n	8002938 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800264c:	2201      	movs	r2, #1
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4013      	ands	r3, r2
 800265e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	429a      	cmp	r2, r3
 8002666:	f040 8164 	bne.w	8002932 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	2b01      	cmp	r3, #1
 8002674:	d005      	beq.n	8002682 <HAL_GPIO_Init+0x56>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d130      	bne.n	80026e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	2203      	movs	r2, #3
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026b8:	2201      	movs	r2, #1
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	091b      	lsrs	r3, r3, #4
 80026ce:	f003 0201 	and.w	r2, r3, #1
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d017      	beq.n	8002720 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	2203      	movs	r2, #3
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d123      	bne.n	8002774 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	08da      	lsrs	r2, r3, #3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3208      	adds	r2, #8
 8002734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	220f      	movs	r2, #15
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	08da      	lsrs	r2, r3, #3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3208      	adds	r2, #8
 800276e:	69b9      	ldr	r1, [r7, #24]
 8002770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	2203      	movs	r2, #3
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0203 	and.w	r2, r3, #3
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 80be 	beq.w	8002932 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b6:	4b66      	ldr	r3, [pc, #408]	; (8002950 <HAL_GPIO_Init+0x324>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	4a65      	ldr	r2, [pc, #404]	; (8002950 <HAL_GPIO_Init+0x324>)
 80027bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c0:	6453      	str	r3, [r2, #68]	; 0x44
 80027c2:	4b63      	ldr	r3, [pc, #396]	; (8002950 <HAL_GPIO_Init+0x324>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80027ce:	4a61      	ldr	r2, [pc, #388]	; (8002954 <HAL_GPIO_Init+0x328>)
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	089b      	lsrs	r3, r3, #2
 80027d4:	3302      	adds	r3, #2
 80027d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	220f      	movs	r2, #15
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43db      	mvns	r3, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4013      	ands	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a58      	ldr	r2, [pc, #352]	; (8002958 <HAL_GPIO_Init+0x32c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d037      	beq.n	800286a <HAL_GPIO_Init+0x23e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a57      	ldr	r2, [pc, #348]	; (800295c <HAL_GPIO_Init+0x330>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d031      	beq.n	8002866 <HAL_GPIO_Init+0x23a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a56      	ldr	r2, [pc, #344]	; (8002960 <HAL_GPIO_Init+0x334>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d02b      	beq.n	8002862 <HAL_GPIO_Init+0x236>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a55      	ldr	r2, [pc, #340]	; (8002964 <HAL_GPIO_Init+0x338>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d025      	beq.n	800285e <HAL_GPIO_Init+0x232>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a54      	ldr	r2, [pc, #336]	; (8002968 <HAL_GPIO_Init+0x33c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d01f      	beq.n	800285a <HAL_GPIO_Init+0x22e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a53      	ldr	r2, [pc, #332]	; (800296c <HAL_GPIO_Init+0x340>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d019      	beq.n	8002856 <HAL_GPIO_Init+0x22a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a52      	ldr	r2, [pc, #328]	; (8002970 <HAL_GPIO_Init+0x344>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d013      	beq.n	8002852 <HAL_GPIO_Init+0x226>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a51      	ldr	r2, [pc, #324]	; (8002974 <HAL_GPIO_Init+0x348>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d00d      	beq.n	800284e <HAL_GPIO_Init+0x222>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a50      	ldr	r2, [pc, #320]	; (8002978 <HAL_GPIO_Init+0x34c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d007      	beq.n	800284a <HAL_GPIO_Init+0x21e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a4f      	ldr	r2, [pc, #316]	; (800297c <HAL_GPIO_Init+0x350>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d101      	bne.n	8002846 <HAL_GPIO_Init+0x21a>
 8002842:	2309      	movs	r3, #9
 8002844:	e012      	b.n	800286c <HAL_GPIO_Init+0x240>
 8002846:	230a      	movs	r3, #10
 8002848:	e010      	b.n	800286c <HAL_GPIO_Init+0x240>
 800284a:	2308      	movs	r3, #8
 800284c:	e00e      	b.n	800286c <HAL_GPIO_Init+0x240>
 800284e:	2307      	movs	r3, #7
 8002850:	e00c      	b.n	800286c <HAL_GPIO_Init+0x240>
 8002852:	2306      	movs	r3, #6
 8002854:	e00a      	b.n	800286c <HAL_GPIO_Init+0x240>
 8002856:	2305      	movs	r3, #5
 8002858:	e008      	b.n	800286c <HAL_GPIO_Init+0x240>
 800285a:	2304      	movs	r3, #4
 800285c:	e006      	b.n	800286c <HAL_GPIO_Init+0x240>
 800285e:	2303      	movs	r3, #3
 8002860:	e004      	b.n	800286c <HAL_GPIO_Init+0x240>
 8002862:	2302      	movs	r3, #2
 8002864:	e002      	b.n	800286c <HAL_GPIO_Init+0x240>
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <HAL_GPIO_Init+0x240>
 800286a:	2300      	movs	r3, #0
 800286c:	69fa      	ldr	r2, [r7, #28]
 800286e:	f002 0203 	and.w	r2, r2, #3
 8002872:	0092      	lsls	r2, r2, #2
 8002874:	4093      	lsls	r3, r2
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4313      	orrs	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800287c:	4935      	ldr	r1, [pc, #212]	; (8002954 <HAL_GPIO_Init+0x328>)
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	089b      	lsrs	r3, r3, #2
 8002882:	3302      	adds	r3, #2
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800288a:	4b3d      	ldr	r3, [pc, #244]	; (8002980 <HAL_GPIO_Init+0x354>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	43db      	mvns	r3, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4013      	ands	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ae:	4a34      	ldr	r2, [pc, #208]	; (8002980 <HAL_GPIO_Init+0x354>)
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028b4:	4b32      	ldr	r3, [pc, #200]	; (8002980 <HAL_GPIO_Init+0x354>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028d8:	4a29      	ldr	r2, [pc, #164]	; (8002980 <HAL_GPIO_Init+0x354>)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028de:	4b28      	ldr	r3, [pc, #160]	; (8002980 <HAL_GPIO_Init+0x354>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002902:	4a1f      	ldr	r2, [pc, #124]	; (8002980 <HAL_GPIO_Init+0x354>)
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002908:	4b1d      	ldr	r3, [pc, #116]	; (8002980 <HAL_GPIO_Init+0x354>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800292c:	4a14      	ldr	r2, [pc, #80]	; (8002980 <HAL_GPIO_Init+0x354>)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3301      	adds	r3, #1
 8002936:	61fb      	str	r3, [r7, #28]
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	2b0f      	cmp	r3, #15
 800293c:	f67f ae86 	bls.w	800264c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002940:	bf00      	nop
 8002942:	bf00      	nop
 8002944:	3724      	adds	r7, #36	; 0x24
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800
 8002954:	40013800 	.word	0x40013800
 8002958:	40020000 	.word	0x40020000
 800295c:	40020400 	.word	0x40020400
 8002960:	40020800 	.word	0x40020800
 8002964:	40020c00 	.word	0x40020c00
 8002968:	40021000 	.word	0x40021000
 800296c:	40021400 	.word	0x40021400
 8002970:	40021800 	.word	0x40021800
 8002974:	40021c00 	.word	0x40021c00
 8002978:	40022000 	.word	0x40022000
 800297c:	40022400 	.word	0x40022400
 8002980:	40013c00 	.word	0x40013c00

08002984 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	887b      	ldrh	r3, [r7, #2]
 8002996:	4013      	ands	r3, r2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800299c:	2301      	movs	r3, #1
 800299e:	73fb      	strb	r3, [r7, #15]
 80029a0:	e001      	b.n	80029a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029a2:	2300      	movs	r3, #0
 80029a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	807b      	strh	r3, [r7, #2]
 80029c0:	4613      	mov	r3, r2
 80029c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029c4:	787b      	ldrb	r3, [r7, #1]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ca:	887a      	ldrh	r2, [r7, #2]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80029d0:	e003      	b.n	80029da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80029d2:	887b      	ldrh	r3, [r7, #2]
 80029d4:	041a      	lsls	r2, r3, #16
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	619a      	str	r2, [r3, #24]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029f2:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029f4:	695a      	ldr	r2, [r3, #20]
 80029f6:	88fb      	ldrh	r3, [r7, #6]
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d006      	beq.n	8002a0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029fe:	4a05      	ldr	r2, [pc, #20]	; (8002a14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a00:	88fb      	ldrh	r3, [r7, #6]
 8002a02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 f806 	bl	8002a18 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a0c:	bf00      	nop
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40013c00 	.word	0x40013c00

08002a18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e07f      	b.n	8002b42 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fd ff46 	bl	80008e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2224      	movs	r2, #36	; 0x24
 8002a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0201 	bic.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d107      	bne.n	8002aaa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	e006      	b.n	8002ab8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ab6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d104      	bne.n	8002aca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ac8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6859      	ldr	r1, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4b1d      	ldr	r3, [pc, #116]	; (8002b4c <HAL_I2C_Init+0x11c>)
 8002ad6:	430b      	orrs	r3, r1
 8002ad8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ae8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69d9      	ldr	r1, [r3, #28]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1a      	ldr	r2, [r3, #32]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	02008000 	.word	0x02008000

08002b50 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	607a      	str	r2, [r7, #4]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	817b      	strh	r3, [r7, #10]
 8002b60:	4613      	mov	r3, r2
 8002b62:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b20      	cmp	r3, #32
 8002b6e:	f040 80da 	bne.w	8002d26 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_I2C_Master_Transmit+0x30>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e0d3      	b.n	8002d28 <HAL_I2C_Master_Transmit+0x1d8>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b88:	f7ff fb7c 	bl	8002284 <HAL_GetTick>
 8002b8c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	2319      	movs	r3, #25
 8002b94:	2201      	movs	r2, #1
 8002b96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f9e6 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e0be      	b.n	8002d28 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2221      	movs	r2, #33	; 0x21
 8002bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2210      	movs	r2, #16
 8002bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	893a      	ldrh	r2, [r7, #8]
 8002bca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2bff      	cmp	r3, #255	; 0xff
 8002bda:	d90e      	bls.n	8002bfa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	22ff      	movs	r2, #255	; 0xff
 8002be0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	8979      	ldrh	r1, [r7, #10]
 8002bea:	4b51      	ldr	r3, [pc, #324]	; (8002d30 <HAL_I2C_Master_Transmit+0x1e0>)
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 fbd0 	bl	8003398 <I2C_TransferConfig>
 8002bf8:	e06c      	b.n	8002cd4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	8979      	ldrh	r1, [r7, #10]
 8002c0c:	4b48      	ldr	r3, [pc, #288]	; (8002d30 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 fbbf 	bl	8003398 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002c1a:	e05b      	b.n	8002cd4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	6a39      	ldr	r1, [r7, #32]
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 f9e3 	bl	8002fec <I2C_WaitOnTXISFlagUntilTimeout>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e07b      	b.n	8002d28 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	781a      	ldrb	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d034      	beq.n	8002cd4 <HAL_I2C_Master_Transmit+0x184>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d130      	bne.n	8002cd4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2180      	movs	r1, #128	; 0x80
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 f975 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e04d      	b.n	8002d28 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2bff      	cmp	r3, #255	; 0xff
 8002c94:	d90e      	bls.n	8002cb4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	22ff      	movs	r2, #255	; 0xff
 8002c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	8979      	ldrh	r1, [r7, #10]
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 fb73 	bl	8003398 <I2C_TransferConfig>
 8002cb2:	e00f      	b.n	8002cd4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	8979      	ldrh	r1, [r7, #10]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 fb62 	bl	8003398 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d19e      	bne.n	8002c1c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	6a39      	ldr	r1, [r7, #32]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f9c2 	bl	800306c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e01a      	b.n	8002d28 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6859      	ldr	r1, [r3, #4]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <HAL_I2C_Master_Transmit+0x1e4>)
 8002d06:	400b      	ands	r3, r1
 8002d08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	e000      	b.n	8002d28 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002d26:	2302      	movs	r3, #2
  }
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	80002000 	.word	0x80002000
 8002d34:	fe00e800 	.word	0xfe00e800

08002d38 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	607a      	str	r2, [r7, #4]
 8002d42:	461a      	mov	r2, r3
 8002d44:	460b      	mov	r3, r1
 8002d46:	817b      	strh	r3, [r7, #10]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	f040 80db 	bne.w	8002f10 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_I2C_Master_Receive+0x30>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e0d4      	b.n	8002f12 <HAL_I2C_Master_Receive+0x1da>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d70:	f7ff fa88 	bl	8002284 <HAL_GetTick>
 8002d74:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	2319      	movs	r3, #25
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 f8f2 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e0bf      	b.n	8002f12 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2222      	movs	r2, #34	; 0x22
 8002d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2210      	movs	r2, #16
 8002d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	893a      	ldrh	r2, [r7, #8]
 8002db2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2bff      	cmp	r3, #255	; 0xff
 8002dc2:	d90e      	bls.n	8002de2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	22ff      	movs	r2, #255	; 0xff
 8002dc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	8979      	ldrh	r1, [r7, #10]
 8002dd2:	4b52      	ldr	r3, [pc, #328]	; (8002f1c <HAL_I2C_Master_Receive+0x1e4>)
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 fadc 	bl	8003398 <I2C_TransferConfig>
 8002de0:	e06d      	b.n	8002ebe <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	8979      	ldrh	r1, [r7, #10]
 8002df4:	4b49      	ldr	r3, [pc, #292]	; (8002f1c <HAL_I2C_Master_Receive+0x1e4>)
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 facb 	bl	8003398 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002e02:	e05c      	b.n	8002ebe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	6a39      	ldr	r1, [r7, #32]
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f96b 	bl	80030e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e07c      	b.n	8002f12 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d034      	beq.n	8002ebe <HAL_I2C_Master_Receive+0x186>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d130      	bne.n	8002ebe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	2200      	movs	r2, #0
 8002e64:	2180      	movs	r1, #128	; 0x80
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f880 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e04d      	b.n	8002f12 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2bff      	cmp	r3, #255	; 0xff
 8002e7e:	d90e      	bls.n	8002e9e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	22ff      	movs	r2, #255	; 0xff
 8002e84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	8979      	ldrh	r1, [r7, #10]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 fa7e 	bl	8003398 <I2C_TransferConfig>
 8002e9c:	e00f      	b.n	8002ebe <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	8979      	ldrh	r1, [r7, #10]
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 fa6d 	bl	8003398 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d19d      	bne.n	8002e04 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	6a39      	ldr	r1, [r7, #32]
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 f8cd 	bl	800306c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e01a      	b.n	8002f12 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6859      	ldr	r1, [r3, #4]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <HAL_I2C_Master_Receive+0x1e8>)
 8002ef0:	400b      	ands	r3, r1
 8002ef2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e000      	b.n	8002f12 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002f10:	2302      	movs	r3, #2
  }
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	80002400 	.word	0x80002400
 8002f20:	fe00e800 	.word	0xfe00e800

08002f24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d103      	bne.n	8002f42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d007      	beq.n	8002f60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699a      	ldr	r2, [r3, #24]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0201 	orr.w	r2, r2, #1
 8002f5e:	619a      	str	r2, [r3, #24]
  }
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f7c:	e022      	b.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f84:	d01e      	beq.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f86:	f7ff f97d 	bl	8002284 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d302      	bcc.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d113      	bne.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa0:	f043 0220 	orr.w	r2, r3, #32
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e00f      	b.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2301      	moveq	r3, #1
 8002fd6:	2300      	movne	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d0cd      	beq.n	8002f7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ff8:	e02c      	b.n	8003054 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	68b9      	ldr	r1, [r7, #8]
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 f8ea 	bl	80031d8 <I2C_IsErrorOccurred>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e02a      	b.n	8003064 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003014:	d01e      	beq.n	8003054 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003016:	f7ff f935 	bl	8002284 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	429a      	cmp	r2, r3
 8003024:	d302      	bcc.n	800302c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d113      	bne.n	8003054 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003030:	f043 0220 	orr.w	r2, r3, #32
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e007      	b.n	8003064 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b02      	cmp	r3, #2
 8003060:	d1cb      	bne.n	8002ffa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003078:	e028      	b.n	80030cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 f8aa 	bl	80031d8 <I2C_IsErrorOccurred>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e026      	b.n	80030dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800308e:	f7ff f8f9 	bl	8002284 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	429a      	cmp	r2, r3
 800309c:	d302      	bcc.n	80030a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d113      	bne.n	80030cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a8:	f043 0220 	orr.w	r2, r3, #32
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e007      	b.n	80030dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	f003 0320 	and.w	r3, r3, #32
 80030d6:	2b20      	cmp	r3, #32
 80030d8:	d1cf      	bne.n	800307a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030f0:	e064      	b.n	80031bc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	68b9      	ldr	r1, [r7, #8]
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 f86e 	bl	80031d8 <I2C_IsErrorOccurred>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e062      	b.n	80031cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	f003 0320 	and.w	r3, r3, #32
 8003110:	2b20      	cmp	r3, #32
 8003112:	d138      	bne.n	8003186 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b04      	cmp	r3, #4
 8003120:	d105      	bne.n	800312e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	e04e      	b.n	80031cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	2b10      	cmp	r3, #16
 800313a:	d107      	bne.n	800314c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2210      	movs	r2, #16
 8003142:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2204      	movs	r2, #4
 8003148:	645a      	str	r2, [r3, #68]	; 0x44
 800314a:	e002      	b.n	8003152 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2220      	movs	r2, #32
 8003158:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6859      	ldr	r1, [r3, #4]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003166:	400b      	ands	r3, r1
 8003168:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2220      	movs	r2, #32
 800316e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e022      	b.n	80031cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003186:	f7ff f87d 	bl	8002284 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	429a      	cmp	r2, r3
 8003194:	d302      	bcc.n	800319c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10f      	bne.n	80031bc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a0:	f043 0220 	orr.w	r2, r3, #32
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e007      	b.n	80031cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d193      	bne.n	80030f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	fe00e800 	.word	0xfe00e800

080031d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08a      	sub	sp, #40	; 0x28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	2b00      	cmp	r3, #0
 8003202:	d068      	beq.n	80032d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2210      	movs	r2, #16
 800320a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800320c:	e049      	b.n	80032a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003214:	d045      	beq.n	80032a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003216:	f7ff f835 	bl	8002284 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	429a      	cmp	r2, r3
 8003224:	d302      	bcc.n	800322c <I2C_IsErrorOccurred+0x54>
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d13a      	bne.n	80032a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003236:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800323e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800324a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800324e:	d121      	bne.n	8003294 <I2C_IsErrorOccurred+0xbc>
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003256:	d01d      	beq.n	8003294 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003258:	7cfb      	ldrb	r3, [r7, #19]
 800325a:	2b20      	cmp	r3, #32
 800325c:	d01a      	beq.n	8003294 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800326c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800326e:	f7ff f809 	bl	8002284 <HAL_GetTick>
 8003272:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003274:	e00e      	b.n	8003294 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003276:	f7ff f805 	bl	8002284 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b19      	cmp	r3, #25
 8003282:	d907      	bls.n	8003294 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	f043 0320 	orr.w	r3, r3, #32
 800328a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003292:	e006      	b.n	80032a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	f003 0320 	and.w	r3, r3, #32
 800329e:	2b20      	cmp	r3, #32
 80032a0:	d1e9      	bne.n	8003276 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b20      	cmp	r3, #32
 80032ae:	d003      	beq.n	80032b8 <I2C_IsErrorOccurred+0xe0>
 80032b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0aa      	beq.n	800320e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80032b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d103      	bne.n	80032c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2220      	movs	r2, #32
 80032c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	f043 0304 	orr.w	r3, r3, #4
 80032ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00b      	beq.n	8003300 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00b      	beq.n	8003322 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	f043 0308 	orr.w	r3, r3, #8
 8003310:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800331a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00b      	beq.n	8003344 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	f043 0302 	orr.w	r3, r3, #2
 8003332:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800333c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01c      	beq.n	8003386 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f7ff fde9 	bl	8002f24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6859      	ldr	r1, [r3, #4]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <I2C_IsErrorOccurred+0x1bc>)
 800335e:	400b      	ands	r3, r1
 8003360:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	431a      	orrs	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2220      	movs	r2, #32
 8003372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003386:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800338a:	4618      	mov	r0, r3
 800338c:	3728      	adds	r7, #40	; 0x28
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	fe00e800 	.word	0xfe00e800

08003398 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	607b      	str	r3, [r7, #4]
 80033a2:	460b      	mov	r3, r1
 80033a4:	817b      	strh	r3, [r7, #10]
 80033a6:	4613      	mov	r3, r2
 80033a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033aa:	897b      	ldrh	r3, [r7, #10]
 80033ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033b0:	7a7b      	ldrb	r3, [r7, #9]
 80033b2:	041b      	lsls	r3, r3, #16
 80033b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	0d5b      	lsrs	r3, r3, #21
 80033d2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80033d6:	4b08      	ldr	r3, [pc, #32]	; (80033f8 <I2C_TransferConfig+0x60>)
 80033d8:	430b      	orrs	r3, r1
 80033da:	43db      	mvns	r3, r3
 80033dc:	ea02 0103 	and.w	r1, r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80033ea:	bf00      	nop
 80033ec:	371c      	adds	r7, #28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	03ff63ff 	.word	0x03ff63ff

080033fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b20      	cmp	r3, #32
 8003410:	d138      	bne.n	8003484 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800341c:	2302      	movs	r3, #2
 800341e:	e032      	b.n	8003486 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2224      	movs	r2, #36	; 0x24
 800342c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0201 	bic.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800344e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6819      	ldr	r1, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003480:	2300      	movs	r3, #0
 8003482:	e000      	b.n	8003486 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003484:	2302      	movs	r3, #2
  }
}
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003492:	b480      	push	{r7}
 8003494:	b085      	sub	sp, #20
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d139      	bne.n	800351c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d101      	bne.n	80034b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034b2:	2302      	movs	r3, #2
 80034b4:	e033      	b.n	800351e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2224      	movs	r2, #36	; 0x24
 80034c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0201 	bic.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	021b      	lsls	r3, r3, #8
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	e000      	b.n	800351e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800351c:	2302      	movs	r3, #2
  }
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800352a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800352c:	b08f      	sub	sp, #60	; 0x3c
 800352e:	af0a      	add	r7, sp, #40	; 0x28
 8003530:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e116      	b.n	800376a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7fd ff56 	bl	8001408 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2203      	movs	r2, #3
 8003560:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	d102      	bne.n	8003576 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f004 f952 	bl	8007824 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	603b      	str	r3, [r7, #0]
 8003586:	687e      	ldr	r6, [r7, #4]
 8003588:	466d      	mov	r5, sp
 800358a:	f106 0410 	add.w	r4, r6, #16
 800358e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003590:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003594:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003596:	e894 0003 	ldmia.w	r4, {r0, r1}
 800359a:	e885 0003 	stmia.w	r5, {r0, r1}
 800359e:	1d33      	adds	r3, r6, #4
 80035a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035a2:	6838      	ldr	r0, [r7, #0]
 80035a4:	f004 f8e6 	bl	8007774 <USB_CoreInit>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d005      	beq.n	80035ba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2202      	movs	r2, #2
 80035b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e0d7      	b.n	800376a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2100      	movs	r1, #0
 80035c0:	4618      	mov	r0, r3
 80035c2:	f004 f940 	bl	8007846 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035c6:	2300      	movs	r3, #0
 80035c8:	73fb      	strb	r3, [r7, #15]
 80035ca:	e04a      	b.n	8003662 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035cc:	7bfa      	ldrb	r2, [r7, #15]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	333d      	adds	r3, #61	; 0x3d
 80035dc:	2201      	movs	r2, #1
 80035de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035e0:	7bfa      	ldrb	r2, [r7, #15]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	333c      	adds	r3, #60	; 0x3c
 80035f0:	7bfa      	ldrb	r2, [r7, #15]
 80035f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035f4:	7bfa      	ldrb	r2, [r7, #15]
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	b298      	uxth	r0, r3
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	3344      	adds	r3, #68	; 0x44
 8003608:	4602      	mov	r2, r0
 800360a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800360c:	7bfa      	ldrb	r2, [r7, #15]
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	4613      	mov	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	3340      	adds	r3, #64	; 0x40
 800361c:	2200      	movs	r2, #0
 800361e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003620:	7bfa      	ldrb	r2, [r7, #15]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	3348      	adds	r3, #72	; 0x48
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003634:	7bfa      	ldrb	r2, [r7, #15]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	4413      	add	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	334c      	adds	r3, #76	; 0x4c
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003648:	7bfa      	ldrb	r2, [r7, #15]
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	3354      	adds	r3, #84	; 0x54
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	3301      	adds	r3, #1
 8003660:	73fb      	strb	r3, [r7, #15]
 8003662:	7bfa      	ldrb	r2, [r7, #15]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	429a      	cmp	r2, r3
 800366a:	d3af      	bcc.n	80035cc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800366c:	2300      	movs	r3, #0
 800366e:	73fb      	strb	r3, [r7, #15]
 8003670:	e044      	b.n	80036fc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003672:	7bfa      	ldrb	r2, [r7, #15]
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	4413      	add	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	440b      	add	r3, r1
 8003680:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003684:	2200      	movs	r2, #0
 8003686:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003688:	7bfa      	ldrb	r2, [r7, #15]
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800369a:	7bfa      	ldrb	r2, [r7, #15]
 800369c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800369e:	7bfa      	ldrb	r2, [r7, #15]
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	4613      	mov	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80036b0:	2200      	movs	r2, #0
 80036b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036b4:	7bfa      	ldrb	r2, [r7, #15]
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036ca:	7bfa      	ldrb	r2, [r7, #15]
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	4413      	add	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036e0:	7bfa      	ldrb	r2, [r7, #15]
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
 80036f8:	3301      	adds	r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]
 80036fc:	7bfa      	ldrb	r2, [r7, #15]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	429a      	cmp	r2, r3
 8003704:	d3b5      	bcc.n	8003672 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	603b      	str	r3, [r7, #0]
 800370c:	687e      	ldr	r6, [r7, #4]
 800370e:	466d      	mov	r5, sp
 8003710:	f106 0410 	add.w	r4, r6, #16
 8003714:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003716:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800371a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800371c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003720:	e885 0003 	stmia.w	r5, {r0, r1}
 8003724:	1d33      	adds	r3, r6, #4
 8003726:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003728:	6838      	ldr	r0, [r7, #0]
 800372a:	f004 f8d9 	bl	80078e0 <USB_DevInit>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d005      	beq.n	8003740 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e014      	b.n	800376a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	2b01      	cmp	r3, #1
 8003756:	d102      	bne.n	800375e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f80b 	bl	8003774 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f004 fa97 	bl	8007c96 <USB_DevDisconnect>

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003774 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037a2:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <HAL_PCDEx_ActivateLPM+0x44>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	10000003 	.word	0x10000003

080037bc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037c0:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a04      	ldr	r2, [pc, #16]	; (80037d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ca:	6013      	str	r3, [r2, #0]
}
 80037cc:	bf00      	nop
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	40007000 	.word	0x40007000

080037dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80037e2:	2300      	movs	r3, #0
 80037e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80037e6:	4b23      	ldr	r3, [pc, #140]	; (8003874 <HAL_PWREx_EnableOverDrive+0x98>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	4a22      	ldr	r2, [pc, #136]	; (8003874 <HAL_PWREx_EnableOverDrive+0x98>)
 80037ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f0:	6413      	str	r3, [r2, #64]	; 0x40
 80037f2:	4b20      	ldr	r3, [pc, #128]	; (8003874 <HAL_PWREx_EnableOverDrive+0x98>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80037fe:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a1d      	ldr	r2, [pc, #116]	; (8003878 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003808:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800380a:	f7fe fd3b 	bl	8002284 <HAL_GetTick>
 800380e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003810:	e009      	b.n	8003826 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003812:	f7fe fd37 	bl	8002284 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003820:	d901      	bls.n	8003826 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e022      	b.n	800386c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003826:	4b14      	ldr	r3, [pc, #80]	; (8003878 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800382e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003832:	d1ee      	bne.n	8003812 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003834:	4b10      	ldr	r3, [pc, #64]	; (8003878 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a0f      	ldr	r2, [pc, #60]	; (8003878 <HAL_PWREx_EnableOverDrive+0x9c>)
 800383a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800383e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003840:	f7fe fd20 	bl	8002284 <HAL_GetTick>
 8003844:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003846:	e009      	b.n	800385c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003848:	f7fe fd1c 	bl	8002284 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003856:	d901      	bls.n	800385c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e007      	b.n	800386c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800385c:	4b06      	ldr	r3, [pc, #24]	; (8003878 <HAL_PWREx_EnableOverDrive+0x9c>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003864:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003868:	d1ee      	bne.n	8003848 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40023800 	.word	0x40023800
 8003878:	40007000 	.word	0x40007000

0800387c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003884:	2300      	movs	r3, #0
 8003886:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e29b      	b.n	8003dca <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 8087 	beq.w	80039ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038a0:	4b96      	ldr	r3, [pc, #600]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 030c 	and.w	r3, r3, #12
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d00c      	beq.n	80038c6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ac:	4b93      	ldr	r3, [pc, #588]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 030c 	and.w	r3, r3, #12
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d112      	bne.n	80038de <HAL_RCC_OscConfig+0x62>
 80038b8:	4b90      	ldr	r3, [pc, #576]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038c4:	d10b      	bne.n	80038de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c6:	4b8d      	ldr	r3, [pc, #564]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d06c      	beq.n	80039ac <HAL_RCC_OscConfig+0x130>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d168      	bne.n	80039ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e275      	b.n	8003dca <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e6:	d106      	bne.n	80038f6 <HAL_RCC_OscConfig+0x7a>
 80038e8:	4b84      	ldr	r3, [pc, #528]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a83      	ldr	r2, [pc, #524]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 80038ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	e02e      	b.n	8003954 <HAL_RCC_OscConfig+0xd8>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10c      	bne.n	8003918 <HAL_RCC_OscConfig+0x9c>
 80038fe:	4b7f      	ldr	r3, [pc, #508]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a7e      	ldr	r2, [pc, #504]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 8003904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	4b7c      	ldr	r3, [pc, #496]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a7b      	ldr	r2, [pc, #492]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 8003910:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	e01d      	b.n	8003954 <HAL_RCC_OscConfig+0xd8>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003920:	d10c      	bne.n	800393c <HAL_RCC_OscConfig+0xc0>
 8003922:	4b76      	ldr	r3, [pc, #472]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a75      	ldr	r2, [pc, #468]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 8003928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	4b73      	ldr	r3, [pc, #460]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a72      	ldr	r2, [pc, #456]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 8003934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	e00b      	b.n	8003954 <HAL_RCC_OscConfig+0xd8>
 800393c:	4b6f      	ldr	r3, [pc, #444]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a6e      	ldr	r2, [pc, #440]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 8003942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	4b6c      	ldr	r3, [pc, #432]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a6b      	ldr	r2, [pc, #428]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 800394e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d013      	beq.n	8003984 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395c:	f7fe fc92 	bl	8002284 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003964:	f7fe fc8e 	bl	8002284 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b64      	cmp	r3, #100	; 0x64
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e229      	b.n	8003dca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003976:	4b61      	ldr	r3, [pc, #388]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0xe8>
 8003982:	e014      	b.n	80039ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7fe fc7e 	bl	8002284 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800398c:	f7fe fc7a 	bl	8002284 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b64      	cmp	r3, #100	; 0x64
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e215      	b.n	8003dca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800399e:	4b57      	ldr	r3, [pc, #348]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0x110>
 80039aa:	e000      	b.n	80039ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d069      	beq.n	8003a8e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039ba:	4b50      	ldr	r3, [pc, #320]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 030c 	and.w	r3, r3, #12
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00b      	beq.n	80039de <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039c6:	4b4d      	ldr	r3, [pc, #308]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d11c      	bne.n	8003a0c <HAL_RCC_OscConfig+0x190>
 80039d2:	4b4a      	ldr	r3, [pc, #296]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d116      	bne.n	8003a0c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039de:	4b47      	ldr	r3, [pc, #284]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_RCC_OscConfig+0x17a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d001      	beq.n	80039f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e1e9      	b.n	8003dca <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f6:	4b41      	ldr	r3, [pc, #260]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	493d      	ldr	r1, [pc, #244]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a0a:	e040      	b.n	8003a8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d023      	beq.n	8003a5c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a14:	4b39      	ldr	r3, [pc, #228]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a38      	ldr	r2, [pc, #224]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7fe fc30 	bl	8002284 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a28:	f7fe fc2c 	bl	8002284 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e1c7      	b.n	8003dca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a3a:	4b30      	ldr	r3, [pc, #192]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a46:	4b2d      	ldr	r3, [pc, #180]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4929      	ldr	r1, [pc, #164]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	600b      	str	r3, [r1, #0]
 8003a5a:	e018      	b.n	8003a8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a5c:	4b27      	ldr	r3, [pc, #156]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a26      	ldr	r2, [pc, #152]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 8003a62:	f023 0301 	bic.w	r3, r3, #1
 8003a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a68:	f7fe fc0c 	bl	8002284 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a70:	f7fe fc08 	bl	8002284 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e1a3      	b.n	8003dca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a82:	4b1e      	ldr	r3, [pc, #120]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d038      	beq.n	8003b0c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d019      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa2:	4b16      	ldr	r3, [pc, #88]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 8003aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa6:	4a15      	ldr	r2, [pc, #84]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aae:	f7fe fbe9 	bl	8002284 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ab6:	f7fe fbe5 	bl	8002284 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e180      	b.n	8003dca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac8:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 8003aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0f0      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x23a>
 8003ad4:	e01a      	b.n	8003b0c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ad6:	4b09      	ldr	r3, [pc, #36]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 8003ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ada:	4a08      	ldr	r2, [pc, #32]	; (8003afc <HAL_RCC_OscConfig+0x280>)
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae2:	f7fe fbcf 	bl	8002284 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae8:	e00a      	b.n	8003b00 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aea:	f7fe fbcb 	bl	8002284 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d903      	bls.n	8003b00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e166      	b.n	8003dca <HAL_RCC_OscConfig+0x54e>
 8003afc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b00:	4b92      	ldr	r3, [pc, #584]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1ee      	bne.n	8003aea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 80a4 	beq.w	8003c62 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b1a:	4b8c      	ldr	r3, [pc, #560]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10d      	bne.n	8003b42 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b26:	4b89      	ldr	r3, [pc, #548]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	4a88      	ldr	r2, [pc, #544]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b30:	6413      	str	r3, [r2, #64]	; 0x40
 8003b32:	4b86      	ldr	r3, [pc, #536]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	60bb      	str	r3, [r7, #8]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b42:	4b83      	ldr	r3, [pc, #524]	; (8003d50 <HAL_RCC_OscConfig+0x4d4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d118      	bne.n	8003b80 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003b4e:	4b80      	ldr	r3, [pc, #512]	; (8003d50 <HAL_RCC_OscConfig+0x4d4>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a7f      	ldr	r2, [pc, #508]	; (8003d50 <HAL_RCC_OscConfig+0x4d4>)
 8003b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b5a:	f7fe fb93 	bl	8002284 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b62:	f7fe fb8f 	bl	8002284 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b64      	cmp	r3, #100	; 0x64
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e12a      	b.n	8003dca <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b74:	4b76      	ldr	r3, [pc, #472]	; (8003d50 <HAL_RCC_OscConfig+0x4d4>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d106      	bne.n	8003b96 <HAL_RCC_OscConfig+0x31a>
 8003b88:	4b70      	ldr	r3, [pc, #448]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8c:	4a6f      	ldr	r2, [pc, #444]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	6713      	str	r3, [r2, #112]	; 0x70
 8003b94:	e02d      	b.n	8003bf2 <HAL_RCC_OscConfig+0x376>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10c      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x33c>
 8003b9e:	4b6b      	ldr	r3, [pc, #428]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba2:	4a6a      	ldr	r2, [pc, #424]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003ba4:	f023 0301 	bic.w	r3, r3, #1
 8003ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8003baa:	4b68      	ldr	r3, [pc, #416]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bae:	4a67      	ldr	r2, [pc, #412]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003bb0:	f023 0304 	bic.w	r3, r3, #4
 8003bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb6:	e01c      	b.n	8003bf2 <HAL_RCC_OscConfig+0x376>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	2b05      	cmp	r3, #5
 8003bbe:	d10c      	bne.n	8003bda <HAL_RCC_OscConfig+0x35e>
 8003bc0:	4b62      	ldr	r3, [pc, #392]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc4:	4a61      	ldr	r2, [pc, #388]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003bc6:	f043 0304 	orr.w	r3, r3, #4
 8003bca:	6713      	str	r3, [r2, #112]	; 0x70
 8003bcc:	4b5f      	ldr	r3, [pc, #380]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd0:	4a5e      	ldr	r2, [pc, #376]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003bd2:	f043 0301 	orr.w	r3, r3, #1
 8003bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd8:	e00b      	b.n	8003bf2 <HAL_RCC_OscConfig+0x376>
 8003bda:	4b5c      	ldr	r3, [pc, #368]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bde:	4a5b      	ldr	r2, [pc, #364]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003be0:	f023 0301 	bic.w	r3, r3, #1
 8003be4:	6713      	str	r3, [r2, #112]	; 0x70
 8003be6:	4b59      	ldr	r3, [pc, #356]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bea:	4a58      	ldr	r2, [pc, #352]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003bec:	f023 0304 	bic.w	r3, r3, #4
 8003bf0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d015      	beq.n	8003c26 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfa:	f7fe fb43 	bl	8002284 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c00:	e00a      	b.n	8003c18 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c02:	f7fe fb3f 	bl	8002284 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e0d8      	b.n	8003dca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c18:	4b4c      	ldr	r3, [pc, #304]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0ee      	beq.n	8003c02 <HAL_RCC_OscConfig+0x386>
 8003c24:	e014      	b.n	8003c50 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c26:	f7fe fb2d 	bl	8002284 <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c2c:	e00a      	b.n	8003c44 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2e:	f7fe fb29 	bl	8002284 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e0c2      	b.n	8003dca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c44:	4b41      	ldr	r3, [pc, #260]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1ee      	bne.n	8003c2e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c50:	7dfb      	ldrb	r3, [r7, #23]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d105      	bne.n	8003c62 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c56:	4b3d      	ldr	r3, [pc, #244]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	4a3c      	ldr	r2, [pc, #240]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 80ae 	beq.w	8003dc8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c6c:	4b37      	ldr	r3, [pc, #220]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 030c 	and.w	r3, r3, #12
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d06d      	beq.n	8003d54 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d14b      	bne.n	8003d18 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c80:	4b32      	ldr	r3, [pc, #200]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a31      	ldr	r2, [pc, #196]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8c:	f7fe fafa 	bl	8002284 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c94:	f7fe faf6 	bl	8002284 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e091      	b.n	8003dca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca6:	4b29      	ldr	r3, [pc, #164]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69da      	ldr	r2, [r3, #28]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	019b      	lsls	r3, r3, #6
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	085b      	lsrs	r3, r3, #1
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	041b      	lsls	r3, r3, #16
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	061b      	lsls	r3, r3, #24
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	071b      	lsls	r3, r3, #28
 8003cde:	491b      	ldr	r1, [pc, #108]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ce4:	4b19      	ldr	r3, [pc, #100]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a18      	ldr	r2, [pc, #96]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf0:	f7fe fac8 	bl	8002284 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf8:	f7fe fac4 	bl	8002284 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e05f      	b.n	8003dca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d0a:	4b10      	ldr	r3, [pc, #64]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x47c>
 8003d16:	e057      	b.n	8003dc8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d18:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a0b      	ldr	r2, [pc, #44]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003d1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d24:	f7fe faae 	bl	8002284 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d2c:	f7fe faaa 	bl	8002284 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e045      	b.n	8003dca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3e:	4b03      	ldr	r3, [pc, #12]	; (8003d4c <HAL_RCC_OscConfig+0x4d0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f0      	bne.n	8003d2c <HAL_RCC_OscConfig+0x4b0>
 8003d4a:	e03d      	b.n	8003dc8 <HAL_RCC_OscConfig+0x54c>
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003d54:	4b1f      	ldr	r3, [pc, #124]	; (8003dd4 <HAL_RCC_OscConfig+0x558>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d030      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d129      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d122      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d84:	4013      	ands	r3, r2
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d8a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d119      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9a:	085b      	lsrs	r3, r3, #1
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d10f      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d107      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d001      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40023800 	.word	0x40023800

08003dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0d0      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003df0:	4b6a      	ldr	r3, [pc, #424]	; (8003f9c <HAL_RCC_ClockConfig+0x1c4>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d910      	bls.n	8003e20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfe:	4b67      	ldr	r3, [pc, #412]	; (8003f9c <HAL_RCC_ClockConfig+0x1c4>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f023 020f 	bic.w	r2, r3, #15
 8003e06:	4965      	ldr	r1, [pc, #404]	; (8003f9c <HAL_RCC_ClockConfig+0x1c4>)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0e:	4b63      	ldr	r3, [pc, #396]	; (8003f9c <HAL_RCC_ClockConfig+0x1c4>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d001      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0b8      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d020      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d005      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e38:	4b59      	ldr	r3, [pc, #356]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	4a58      	ldr	r2, [pc, #352]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e50:	4b53      	ldr	r3, [pc, #332]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	4a52      	ldr	r2, [pc, #328]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e5c:	4b50      	ldr	r3, [pc, #320]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	494d      	ldr	r1, [pc, #308]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d040      	beq.n	8003efc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d107      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	4b47      	ldr	r3, [pc, #284]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d115      	bne.n	8003eba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e07f      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d107      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9a:	4b41      	ldr	r3, [pc, #260]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e073      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eaa:	4b3d      	ldr	r3, [pc, #244]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e06b      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eba:	4b39      	ldr	r3, [pc, #228]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f023 0203 	bic.w	r2, r3, #3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	4936      	ldr	r1, [pc, #216]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ecc:	f7fe f9da 	bl	8002284 <HAL_GetTick>
 8003ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed2:	e00a      	b.n	8003eea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ed4:	f7fe f9d6 	bl	8002284 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e053      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eea:	4b2d      	ldr	r3, [pc, #180]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 020c 	and.w	r2, r3, #12
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d1eb      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003efc:	4b27      	ldr	r3, [pc, #156]	; (8003f9c <HAL_RCC_ClockConfig+0x1c4>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 030f 	and.w	r3, r3, #15
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d210      	bcs.n	8003f2c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0a:	4b24      	ldr	r3, [pc, #144]	; (8003f9c <HAL_RCC_ClockConfig+0x1c4>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f023 020f 	bic.w	r2, r3, #15
 8003f12:	4922      	ldr	r1, [pc, #136]	; (8003f9c <HAL_RCC_ClockConfig+0x1c4>)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1a:	4b20      	ldr	r3, [pc, #128]	; (8003f9c <HAL_RCC_ClockConfig+0x1c4>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e032      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f38:	4b19      	ldr	r3, [pc, #100]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4916      	ldr	r1, [pc, #88]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d009      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f56:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	490e      	ldr	r1, [pc, #56]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f6a:	f000 f821 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	091b      	lsrs	r3, r3, #4
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	490a      	ldr	r1, [pc, #40]	; (8003fa4 <HAL_RCC_ClockConfig+0x1cc>)
 8003f7c:	5ccb      	ldrb	r3, [r1, r3]
 8003f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f82:	4a09      	ldr	r2, [pc, #36]	; (8003fa8 <HAL_RCC_ClockConfig+0x1d0>)
 8003f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f86:	4b09      	ldr	r3, [pc, #36]	; (8003fac <HAL_RCC_ClockConfig+0x1d4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fe f936 	bl	80021fc <HAL_InitTick>

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40023c00 	.word	0x40023c00
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	0800ac78 	.word	0x0800ac78
 8003fa8:	20000000 	.word	0x20000000
 8003fac:	200003e0 	.word	0x200003e0

08003fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fb4:	b094      	sub	sp, #80	; 0x50
 8003fb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	647b      	str	r3, [r7, #68]	; 0x44
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fc8:	4b79      	ldr	r3, [pc, #484]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 030c 	and.w	r3, r3, #12
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d00d      	beq.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x40>
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	f200 80e1 	bhi.w	800419c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x34>
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d003      	beq.n	8003fea <HAL_RCC_GetSysClockFreq+0x3a>
 8003fe2:	e0db      	b.n	800419c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fe4:	4b73      	ldr	r3, [pc, #460]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fe6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fe8:	e0db      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fea:	4b73      	ldr	r3, [pc, #460]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003fec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fee:	e0d8      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ff0:	4b6f      	ldr	r3, [pc, #444]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ff8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003ffa:	4b6d      	ldr	r3, [pc, #436]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d063      	beq.n	80040ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004006:	4b6a      	ldr	r3, [pc, #424]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	099b      	lsrs	r3, r3, #6
 800400c:	2200      	movs	r2, #0
 800400e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004010:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004018:	633b      	str	r3, [r7, #48]	; 0x30
 800401a:	2300      	movs	r3, #0
 800401c:	637b      	str	r3, [r7, #52]	; 0x34
 800401e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004022:	4622      	mov	r2, r4
 8004024:	462b      	mov	r3, r5
 8004026:	f04f 0000 	mov.w	r0, #0
 800402a:	f04f 0100 	mov.w	r1, #0
 800402e:	0159      	lsls	r1, r3, #5
 8004030:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004034:	0150      	lsls	r0, r2, #5
 8004036:	4602      	mov	r2, r0
 8004038:	460b      	mov	r3, r1
 800403a:	4621      	mov	r1, r4
 800403c:	1a51      	subs	r1, r2, r1
 800403e:	6139      	str	r1, [r7, #16]
 8004040:	4629      	mov	r1, r5
 8004042:	eb63 0301 	sbc.w	r3, r3, r1
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004054:	4659      	mov	r1, fp
 8004056:	018b      	lsls	r3, r1, #6
 8004058:	4651      	mov	r1, sl
 800405a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800405e:	4651      	mov	r1, sl
 8004060:	018a      	lsls	r2, r1, #6
 8004062:	4651      	mov	r1, sl
 8004064:	ebb2 0801 	subs.w	r8, r2, r1
 8004068:	4659      	mov	r1, fp
 800406a:	eb63 0901 	sbc.w	r9, r3, r1
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	f04f 0300 	mov.w	r3, #0
 8004076:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800407a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800407e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004082:	4690      	mov	r8, r2
 8004084:	4699      	mov	r9, r3
 8004086:	4623      	mov	r3, r4
 8004088:	eb18 0303 	adds.w	r3, r8, r3
 800408c:	60bb      	str	r3, [r7, #8]
 800408e:	462b      	mov	r3, r5
 8004090:	eb49 0303 	adc.w	r3, r9, r3
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040a2:	4629      	mov	r1, r5
 80040a4:	024b      	lsls	r3, r1, #9
 80040a6:	4621      	mov	r1, r4
 80040a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040ac:	4621      	mov	r1, r4
 80040ae:	024a      	lsls	r2, r1, #9
 80040b0:	4610      	mov	r0, r2
 80040b2:	4619      	mov	r1, r3
 80040b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040b6:	2200      	movs	r2, #0
 80040b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040c0:	f7fc f916 	bl	80002f0 <__aeabi_uldivmod>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4613      	mov	r3, r2
 80040ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040cc:	e058      	b.n	8004180 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ce:	4b38      	ldr	r3, [pc, #224]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	099b      	lsrs	r3, r3, #6
 80040d4:	2200      	movs	r2, #0
 80040d6:	4618      	mov	r0, r3
 80040d8:	4611      	mov	r1, r2
 80040da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040de:	623b      	str	r3, [r7, #32]
 80040e0:	2300      	movs	r3, #0
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24
 80040e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040e8:	4642      	mov	r2, r8
 80040ea:	464b      	mov	r3, r9
 80040ec:	f04f 0000 	mov.w	r0, #0
 80040f0:	f04f 0100 	mov.w	r1, #0
 80040f4:	0159      	lsls	r1, r3, #5
 80040f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040fa:	0150      	lsls	r0, r2, #5
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4641      	mov	r1, r8
 8004102:	ebb2 0a01 	subs.w	sl, r2, r1
 8004106:	4649      	mov	r1, r9
 8004108:	eb63 0b01 	sbc.w	fp, r3, r1
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004118:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800411c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004120:	ebb2 040a 	subs.w	r4, r2, sl
 8004124:	eb63 050b 	sbc.w	r5, r3, fp
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	00eb      	lsls	r3, r5, #3
 8004132:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004136:	00e2      	lsls	r2, r4, #3
 8004138:	4614      	mov	r4, r2
 800413a:	461d      	mov	r5, r3
 800413c:	4643      	mov	r3, r8
 800413e:	18e3      	adds	r3, r4, r3
 8004140:	603b      	str	r3, [r7, #0]
 8004142:	464b      	mov	r3, r9
 8004144:	eb45 0303 	adc.w	r3, r5, r3
 8004148:	607b      	str	r3, [r7, #4]
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004156:	4629      	mov	r1, r5
 8004158:	028b      	lsls	r3, r1, #10
 800415a:	4621      	mov	r1, r4
 800415c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004160:	4621      	mov	r1, r4
 8004162:	028a      	lsls	r2, r1, #10
 8004164:	4610      	mov	r0, r2
 8004166:	4619      	mov	r1, r3
 8004168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800416a:	2200      	movs	r2, #0
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	61fa      	str	r2, [r7, #28]
 8004170:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004174:	f7fc f8bc 	bl	80002f0 <__aeabi_uldivmod>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4613      	mov	r3, r2
 800417e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004180:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	0c1b      	lsrs	r3, r3, #16
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	3301      	adds	r3, #1
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004190:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004194:	fbb2 f3f3 	udiv	r3, r2, r3
 8004198:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800419a:	e002      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800419c:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800419e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3750      	adds	r7, #80	; 0x50
 80041a8:	46bd      	mov	sp, r7
 80041aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ae:	bf00      	nop
 80041b0:	40023800 	.word	0x40023800
 80041b4:	00f42400 	.word	0x00f42400
 80041b8:	007a1200 	.word	0x007a1200

080041bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041c0:	4b03      	ldr	r3, [pc, #12]	; (80041d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80041c2:	681b      	ldr	r3, [r3, #0]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	20000000 	.word	0x20000000

080041d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041d8:	f7ff fff0 	bl	80041bc <HAL_RCC_GetHCLKFreq>
 80041dc:	4602      	mov	r2, r0
 80041de:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	0a9b      	lsrs	r3, r3, #10
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	4903      	ldr	r1, [pc, #12]	; (80041f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041ea:	5ccb      	ldrb	r3, [r1, r3]
 80041ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40023800 	.word	0x40023800
 80041f8:	0800ac88 	.word	0x0800ac88

080041fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004200:	f7ff ffdc 	bl	80041bc <HAL_RCC_GetHCLKFreq>
 8004204:	4602      	mov	r2, r0
 8004206:	4b05      	ldr	r3, [pc, #20]	; (800421c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	0b5b      	lsrs	r3, r3, #13
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	4903      	ldr	r1, [pc, #12]	; (8004220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004212:	5ccb      	ldrb	r3, [r1, r3]
 8004214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004218:	4618      	mov	r0, r3
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40023800 	.word	0x40023800
 8004220:	0800ac88 	.word	0x0800ac88

08004224 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b088      	sub	sp, #32
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004234:	2300      	movs	r3, #0
 8004236:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004238:	2300      	movs	r3, #0
 800423a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d012      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800424c:	4b69      	ldr	r3, [pc, #420]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	4a68      	ldr	r2, [pc, #416]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004252:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004256:	6093      	str	r3, [r2, #8]
 8004258:	4b66      	ldr	r3, [pc, #408]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004260:	4964      	ldr	r1, [pc, #400]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004262:	4313      	orrs	r3, r2
 8004264:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800426e:	2301      	movs	r3, #1
 8004270:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d017      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800427e:	4b5d      	ldr	r3, [pc, #372]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004284:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428c:	4959      	ldr	r1, [pc, #356]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428e:	4313      	orrs	r3, r2
 8004290:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004298:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800429c:	d101      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800429e:	2301      	movs	r3, #1
 80042a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80042aa:	2301      	movs	r3, #1
 80042ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d017      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042ba:	4b4e      	ldr	r3, [pc, #312]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	494a      	ldr	r1, [pc, #296]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042d8:	d101      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80042da:	2301      	movs	r3, #1
 80042dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80042e6:	2301      	movs	r3, #1
 80042e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80042f6:	2301      	movs	r3, #1
 80042f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 808b 	beq.w	800441e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004308:	4b3a      	ldr	r3, [pc, #232]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	4a39      	ldr	r2, [pc, #228]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800430e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004312:	6413      	str	r3, [r2, #64]	; 0x40
 8004314:	4b37      	ldr	r3, [pc, #220]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004320:	4b35      	ldr	r3, [pc, #212]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a34      	ldr	r2, [pc, #208]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800432a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800432c:	f7fd ffaa 	bl	8002284 <HAL_GetTick>
 8004330:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004334:	f7fd ffa6 	bl	8002284 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b64      	cmp	r3, #100	; 0x64
 8004340:	d901      	bls.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e38f      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004346:	4b2c      	ldr	r3, [pc, #176]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0f0      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004352:	4b28      	ldr	r3, [pc, #160]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800435a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d035      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	429a      	cmp	r2, r3
 800436e:	d02e      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004370:	4b20      	ldr	r3, [pc, #128]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004378:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800437a:	4b1e      	ldr	r3, [pc, #120]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800437c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437e:	4a1d      	ldr	r2, [pc, #116]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004384:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004386:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438a:	4a1a      	ldr	r2, [pc, #104]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004390:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004392:	4a18      	ldr	r2, [pc, #96]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004398:	4b16      	ldr	r3, [pc, #88]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d114      	bne.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a4:	f7fd ff6e 	bl	8002284 <HAL_GetTick>
 80043a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043aa:	e00a      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ac:	f7fd ff6a 	bl	8002284 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e351      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c2:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0ee      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043da:	d111      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80043dc:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043e8:	4b04      	ldr	r3, [pc, #16]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80043ea:	400b      	ands	r3, r1
 80043ec:	4901      	ldr	r1, [pc, #4]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	608b      	str	r3, [r1, #8]
 80043f2:	e00b      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80043f4:	40023800 	.word	0x40023800
 80043f8:	40007000 	.word	0x40007000
 80043fc:	0ffffcff 	.word	0x0ffffcff
 8004400:	4bac      	ldr	r3, [pc, #688]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	4aab      	ldr	r2, [pc, #684]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004406:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800440a:	6093      	str	r3, [r2, #8]
 800440c:	4ba9      	ldr	r3, [pc, #676]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800440e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004418:	49a6      	ldr	r1, [pc, #664]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800441a:	4313      	orrs	r3, r2
 800441c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0310 	and.w	r3, r3, #16
 8004426:	2b00      	cmp	r3, #0
 8004428:	d010      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800442a:	4ba2      	ldr	r3, [pc, #648]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800442c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004430:	4aa0      	ldr	r2, [pc, #640]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004432:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004436:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800443a:	4b9e      	ldr	r3, [pc, #632]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800443c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004444:	499b      	ldr	r1, [pc, #620]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00a      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004458:	4b96      	ldr	r3, [pc, #600]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800445a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004466:	4993      	ldr	r1, [pc, #588]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004468:	4313      	orrs	r3, r2
 800446a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00a      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800447a:	4b8e      	ldr	r3, [pc, #568]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800447c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004480:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004488:	498a      	ldr	r1, [pc, #552]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800448a:	4313      	orrs	r3, r2
 800448c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00a      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800449c:	4b85      	ldr	r3, [pc, #532]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800449e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044aa:	4982      	ldr	r1, [pc, #520]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044be:	4b7d      	ldr	r3, [pc, #500]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044cc:	4979      	ldr	r1, [pc, #484]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00a      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044e0:	4b74      	ldr	r3, [pc, #464]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e6:	f023 0203 	bic.w	r2, r3, #3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ee:	4971      	ldr	r1, [pc, #452]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004502:	4b6c      	ldr	r3, [pc, #432]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004508:	f023 020c 	bic.w	r2, r3, #12
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004510:	4968      	ldr	r1, [pc, #416]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00a      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004524:	4b63      	ldr	r3, [pc, #396]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004532:	4960      	ldr	r1, [pc, #384]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004534:	4313      	orrs	r3, r2
 8004536:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00a      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004546:	4b5b      	ldr	r3, [pc, #364]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004554:	4957      	ldr	r1, [pc, #348]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00a      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004568:	4b52      	ldr	r3, [pc, #328]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004576:	494f      	ldr	r1, [pc, #316]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004578:	4313      	orrs	r3, r2
 800457a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800458a:	4b4a      	ldr	r3, [pc, #296]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004590:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004598:	4946      	ldr	r1, [pc, #280]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800459a:	4313      	orrs	r3, r2
 800459c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00a      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80045ac:	4b41      	ldr	r3, [pc, #260]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ba:	493e      	ldr	r1, [pc, #248]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80045ce:	4b39      	ldr	r3, [pc, #228]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045dc:	4935      	ldr	r1, [pc, #212]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045f0:	4b30      	ldr	r3, [pc, #192]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045fe:	492d      	ldr	r1, [pc, #180]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d011      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004612:	4b28      	ldr	r3, [pc, #160]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004618:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004620:	4924      	ldr	r1, [pc, #144]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800462c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004630:	d101      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004632:	2301      	movs	r3, #1
 8004634:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004642:	2301      	movs	r3, #1
 8004644:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004652:	4b18      	ldr	r3, [pc, #96]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004658:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004660:	4914      	ldr	r1, [pc, #80]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00b      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004674:	4b0f      	ldr	r3, [pc, #60]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004684:	490b      	ldr	r1, [pc, #44]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004686:	4313      	orrs	r3, r2
 8004688:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00f      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004698:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800469a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a8:	4902      	ldr	r1, [pc, #8]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80046b0:	e002      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80046b2:	bf00      	nop
 80046b4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00b      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046c4:	4b8a      	ldr	r3, [pc, #552]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d4:	4986      	ldr	r1, [pc, #536]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00b      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80046e8:	4b81      	ldr	r3, [pc, #516]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046f8:	497d      	ldr	r1, [pc, #500]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d006      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 80d6 	beq.w	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004714:	4b76      	ldr	r3, [pc, #472]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a75      	ldr	r2, [pc, #468]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800471a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800471e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004720:	f7fd fdb0 	bl	8002284 <HAL_GetTick>
 8004724:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004726:	e008      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004728:	f7fd fdac 	bl	8002284 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b64      	cmp	r3, #100	; 0x64
 8004734:	d901      	bls.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e195      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800473a:	4b6d      	ldr	r3, [pc, #436]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1f0      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d021      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004756:	2b00      	cmp	r3, #0
 8004758:	d11d      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800475a:	4b65      	ldr	r3, [pc, #404]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800475c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004760:	0c1b      	lsrs	r3, r3, #16
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004768:	4b61      	ldr	r3, [pc, #388]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800476a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800476e:	0e1b      	lsrs	r3, r3, #24
 8004770:	f003 030f 	and.w	r3, r3, #15
 8004774:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	019a      	lsls	r2, r3, #6
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	041b      	lsls	r3, r3, #16
 8004780:	431a      	orrs	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	061b      	lsls	r3, r3, #24
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	071b      	lsls	r3, r3, #28
 800478e:	4958      	ldr	r1, [pc, #352]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d004      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x588>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047aa:	d00a      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d02e      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047c0:	d129      	bne.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047c2:	4b4b      	ldr	r3, [pc, #300]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c8:	0c1b      	lsrs	r3, r3, #16
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047d0:	4b47      	ldr	r3, [pc, #284]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d6:	0f1b      	lsrs	r3, r3, #28
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	019a      	lsls	r2, r3, #6
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	041b      	lsls	r3, r3, #16
 80047e8:	431a      	orrs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	061b      	lsls	r3, r3, #24
 80047f0:	431a      	orrs	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	071b      	lsls	r3, r3, #28
 80047f6:	493e      	ldr	r1, [pc, #248]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80047fe:	4b3c      	ldr	r3, [pc, #240]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004804:	f023 021f 	bic.w	r2, r3, #31
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	3b01      	subs	r3, #1
 800480e:	4938      	ldr	r1, [pc, #224]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d01d      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004822:	4b33      	ldr	r3, [pc, #204]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004828:	0e1b      	lsrs	r3, r3, #24
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004830:	4b2f      	ldr	r3, [pc, #188]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004836:	0f1b      	lsrs	r3, r3, #28
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	019a      	lsls	r2, r3, #6
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	041b      	lsls	r3, r3, #16
 800484a:	431a      	orrs	r2, r3
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	061b      	lsls	r3, r3, #24
 8004850:	431a      	orrs	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	071b      	lsls	r3, r3, #28
 8004856:	4926      	ldr	r1, [pc, #152]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004858:	4313      	orrs	r3, r2
 800485a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d011      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	019a      	lsls	r2, r3, #6
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	041b      	lsls	r3, r3, #16
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	061b      	lsls	r3, r3, #24
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	071b      	lsls	r3, r3, #28
 8004886:	491a      	ldr	r1, [pc, #104]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004888:	4313      	orrs	r3, r2
 800488a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800488e:	4b18      	ldr	r3, [pc, #96]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a17      	ldr	r2, [pc, #92]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004894:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004898:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800489a:	f7fd fcf3 	bl	8002284 <HAL_GetTick>
 800489e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048a0:	e008      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048a2:	f7fd fcef 	bl	8002284 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b64      	cmp	r3, #100	; 0x64
 80048ae:	d901      	bls.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e0d8      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048b4:	4b0e      	ldr	r3, [pc, #56]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0f0      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	f040 80ce 	bne.w	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80048c8:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a08      	ldr	r2, [pc, #32]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048d4:	f7fd fcd6 	bl	8002284 <HAL_GetTick>
 80048d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048da:	e00b      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048dc:	f7fd fcd2 	bl	8002284 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b64      	cmp	r3, #100	; 0x64
 80048e8:	d904      	bls.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e0bb      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80048ee:	bf00      	nop
 80048f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048f4:	4b5e      	ldr	r3, [pc, #376]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004900:	d0ec      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004912:	2b00      	cmp	r3, #0
 8004914:	d009      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800491e:	2b00      	cmp	r3, #0
 8004920:	d02e      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	2b00      	cmp	r3, #0
 8004928:	d12a      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800492a:	4b51      	ldr	r3, [pc, #324]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800492c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004930:	0c1b      	lsrs	r3, r3, #16
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004938:	4b4d      	ldr	r3, [pc, #308]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800493a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493e:	0f1b      	lsrs	r3, r3, #28
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	019a      	lsls	r2, r3, #6
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	041b      	lsls	r3, r3, #16
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	061b      	lsls	r3, r3, #24
 8004958:	431a      	orrs	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	071b      	lsls	r3, r3, #28
 800495e:	4944      	ldr	r1, [pc, #272]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004966:	4b42      	ldr	r3, [pc, #264]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800496c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004974:	3b01      	subs	r3, #1
 8004976:	021b      	lsls	r3, r3, #8
 8004978:	493d      	ldr	r1, [pc, #244]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d022      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004990:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004994:	d11d      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004996:	4b36      	ldr	r3, [pc, #216]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499c:	0e1b      	lsrs	r3, r3, #24
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049a4:	4b32      	ldr	r3, [pc, #200]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049aa:	0f1b      	lsrs	r3, r3, #28
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	019a      	lsls	r2, r3, #6
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	041b      	lsls	r3, r3, #16
 80049be:	431a      	orrs	r2, r3
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	061b      	lsls	r3, r3, #24
 80049c4:	431a      	orrs	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	071b      	lsls	r3, r3, #28
 80049ca:	4929      	ldr	r1, [pc, #164]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d028      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049de:	4b24      	ldr	r3, [pc, #144]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e4:	0e1b      	lsrs	r3, r3, #24
 80049e6:	f003 030f 	and.w	r3, r3, #15
 80049ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049ec:	4b20      	ldr	r3, [pc, #128]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f2:	0c1b      	lsrs	r3, r3, #16
 80049f4:	f003 0303 	and.w	r3, r3, #3
 80049f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	019a      	lsls	r2, r3, #6
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	041b      	lsls	r3, r3, #16
 8004a04:	431a      	orrs	r2, r3
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	061b      	lsls	r3, r3, #24
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	071b      	lsls	r3, r3, #28
 8004a12:	4917      	ldr	r1, [pc, #92]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004a1a:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a28:	4911      	ldr	r1, [pc, #68]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004a30:	4b0f      	ldr	r3, [pc, #60]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a0e      	ldr	r2, [pc, #56]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a3c:	f7fd fc22 	bl	8002284 <HAL_GetTick>
 8004a40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a42:	e008      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a44:	f7fd fc1e 	bl	8002284 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b64      	cmp	r3, #100	; 0x64
 8004a50:	d901      	bls.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e007      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a56:	4b06      	ldr	r3, [pc, #24]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a62:	d1ef      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3720      	adds	r7, #32
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	40023800 	.word	0x40023800

08004a74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e049      	b.n	8004b1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d106      	bne.n	8004aa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7fc fb60 	bl	8001160 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3304      	adds	r3, #4
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4610      	mov	r0, r2
 8004ab4:	f000 fdc8 	bl	8005648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d001      	beq.n	8004b3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e04c      	b.n	8004bd6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a26      	ldr	r2, [pc, #152]	; (8004be4 <HAL_TIM_Base_Start+0xc0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d022      	beq.n	8004b94 <HAL_TIM_Base_Start+0x70>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b56:	d01d      	beq.n	8004b94 <HAL_TIM_Base_Start+0x70>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a22      	ldr	r2, [pc, #136]	; (8004be8 <HAL_TIM_Base_Start+0xc4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d018      	beq.n	8004b94 <HAL_TIM_Base_Start+0x70>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a21      	ldr	r2, [pc, #132]	; (8004bec <HAL_TIM_Base_Start+0xc8>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d013      	beq.n	8004b94 <HAL_TIM_Base_Start+0x70>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a1f      	ldr	r2, [pc, #124]	; (8004bf0 <HAL_TIM_Base_Start+0xcc>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00e      	beq.n	8004b94 <HAL_TIM_Base_Start+0x70>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a1e      	ldr	r2, [pc, #120]	; (8004bf4 <HAL_TIM_Base_Start+0xd0>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d009      	beq.n	8004b94 <HAL_TIM_Base_Start+0x70>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a1c      	ldr	r2, [pc, #112]	; (8004bf8 <HAL_TIM_Base_Start+0xd4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d004      	beq.n	8004b94 <HAL_TIM_Base_Start+0x70>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a1b      	ldr	r2, [pc, #108]	; (8004bfc <HAL_TIM_Base_Start+0xd8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d115      	bne.n	8004bc0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	4b19      	ldr	r3, [pc, #100]	; (8004c00 <HAL_TIM_Base_Start+0xdc>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b06      	cmp	r3, #6
 8004ba4:	d015      	beq.n	8004bd2 <HAL_TIM_Base_Start+0xae>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bac:	d011      	beq.n	8004bd2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0201 	orr.w	r2, r2, #1
 8004bbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bbe:	e008      	b.n	8004bd2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	e000      	b.n	8004bd4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	40010000 	.word	0x40010000
 8004be8:	40000400 	.word	0x40000400
 8004bec:	40000800 	.word	0x40000800
 8004bf0:	40000c00 	.word	0x40000c00
 8004bf4:	40010400 	.word	0x40010400
 8004bf8:	40014000 	.word	0x40014000
 8004bfc:	40001800 	.word	0x40001800
 8004c00:	00010007 	.word	0x00010007

08004c04 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6a1a      	ldr	r2, [r3, #32]
 8004c12:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c16:	4013      	ands	r3, r2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10f      	bne.n	8004c3c <HAL_TIM_Base_Stop+0x38>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6a1a      	ldr	r2, [r3, #32]
 8004c22:	f240 4344 	movw	r3, #1092	; 0x444
 8004c26:	4013      	ands	r3, r2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d107      	bne.n	8004c3c <HAL_TIM_Base_Stop+0x38>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 0201 	bic.w	r2, r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
	...

08004c54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d001      	beq.n	8004c6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e054      	b.n	8004d16 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0201 	orr.w	r2, r2, #1
 8004c82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a26      	ldr	r2, [pc, #152]	; (8004d24 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d022      	beq.n	8004cd4 <HAL_TIM_Base_Start_IT+0x80>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c96:	d01d      	beq.n	8004cd4 <HAL_TIM_Base_Start_IT+0x80>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a22      	ldr	r2, [pc, #136]	; (8004d28 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d018      	beq.n	8004cd4 <HAL_TIM_Base_Start_IT+0x80>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a21      	ldr	r2, [pc, #132]	; (8004d2c <HAL_TIM_Base_Start_IT+0xd8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d013      	beq.n	8004cd4 <HAL_TIM_Base_Start_IT+0x80>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1f      	ldr	r2, [pc, #124]	; (8004d30 <HAL_TIM_Base_Start_IT+0xdc>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d00e      	beq.n	8004cd4 <HAL_TIM_Base_Start_IT+0x80>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a1e      	ldr	r2, [pc, #120]	; (8004d34 <HAL_TIM_Base_Start_IT+0xe0>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d009      	beq.n	8004cd4 <HAL_TIM_Base_Start_IT+0x80>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a1c      	ldr	r2, [pc, #112]	; (8004d38 <HAL_TIM_Base_Start_IT+0xe4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d004      	beq.n	8004cd4 <HAL_TIM_Base_Start_IT+0x80>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a1b      	ldr	r2, [pc, #108]	; (8004d3c <HAL_TIM_Base_Start_IT+0xe8>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d115      	bne.n	8004d00 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	4b19      	ldr	r3, [pc, #100]	; (8004d40 <HAL_TIM_Base_Start_IT+0xec>)
 8004cdc:	4013      	ands	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b06      	cmp	r3, #6
 8004ce4:	d015      	beq.n	8004d12 <HAL_TIM_Base_Start_IT+0xbe>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cec:	d011      	beq.n	8004d12 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f042 0201 	orr.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfe:	e008      	b.n	8004d12 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0201 	orr.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	e000      	b.n	8004d14 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	40010000 	.word	0x40010000
 8004d28:	40000400 	.word	0x40000400
 8004d2c:	40000800 	.word	0x40000800
 8004d30:	40000c00 	.word	0x40000c00
 8004d34:	40010400 	.word	0x40010400
 8004d38:	40014000 	.word	0x40014000
 8004d3c:	40001800 	.word	0x40001800
 8004d40:	00010007 	.word	0x00010007

08004d44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e049      	b.n	8004dea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d106      	bne.n	8004d70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f841 	bl	8004df2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3304      	adds	r3, #4
 8004d80:	4619      	mov	r1, r3
 8004d82:	4610      	mov	r0, r2
 8004d84:	f000 fc60 	bl	8005648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
	...

08004e08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d109      	bne.n	8004e2c <HAL_TIM_PWM_Start+0x24>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	bf14      	ite	ne
 8004e24:	2301      	movne	r3, #1
 8004e26:	2300      	moveq	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	e03c      	b.n	8004ea6 <HAL_TIM_PWM_Start+0x9e>
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d109      	bne.n	8004e46 <HAL_TIM_PWM_Start+0x3e>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	bf14      	ite	ne
 8004e3e:	2301      	movne	r3, #1
 8004e40:	2300      	moveq	r3, #0
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	e02f      	b.n	8004ea6 <HAL_TIM_PWM_Start+0x9e>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d109      	bne.n	8004e60 <HAL_TIM_PWM_Start+0x58>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	bf14      	ite	ne
 8004e58:	2301      	movne	r3, #1
 8004e5a:	2300      	moveq	r3, #0
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	e022      	b.n	8004ea6 <HAL_TIM_PWM_Start+0x9e>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2b0c      	cmp	r3, #12
 8004e64:	d109      	bne.n	8004e7a <HAL_TIM_PWM_Start+0x72>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	bf14      	ite	ne
 8004e72:	2301      	movne	r3, #1
 8004e74:	2300      	moveq	r3, #0
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	e015      	b.n	8004ea6 <HAL_TIM_PWM_Start+0x9e>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b10      	cmp	r3, #16
 8004e7e:	d109      	bne.n	8004e94 <HAL_TIM_PWM_Start+0x8c>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	bf14      	ite	ne
 8004e8c:	2301      	movne	r3, #1
 8004e8e:	2300      	moveq	r3, #0
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	e008      	b.n	8004ea6 <HAL_TIM_PWM_Start+0x9e>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	bf14      	ite	ne
 8004ea0:	2301      	movne	r3, #1
 8004ea2:	2300      	moveq	r3, #0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e092      	b.n	8004fd4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d104      	bne.n	8004ebe <HAL_TIM_PWM_Start+0xb6>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ebc:	e023      	b.n	8004f06 <HAL_TIM_PWM_Start+0xfe>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d104      	bne.n	8004ece <HAL_TIM_PWM_Start+0xc6>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ecc:	e01b      	b.n	8004f06 <HAL_TIM_PWM_Start+0xfe>
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d104      	bne.n	8004ede <HAL_TIM_PWM_Start+0xd6>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004edc:	e013      	b.n	8004f06 <HAL_TIM_PWM_Start+0xfe>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b0c      	cmp	r3, #12
 8004ee2:	d104      	bne.n	8004eee <HAL_TIM_PWM_Start+0xe6>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004eec:	e00b      	b.n	8004f06 <HAL_TIM_PWM_Start+0xfe>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b10      	cmp	r3, #16
 8004ef2:	d104      	bne.n	8004efe <HAL_TIM_PWM_Start+0xf6>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004efc:	e003      	b.n	8004f06 <HAL_TIM_PWM_Start+0xfe>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2202      	movs	r2, #2
 8004f02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	6839      	ldr	r1, [r7, #0]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 ff32 	bl	8005d78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a30      	ldr	r2, [pc, #192]	; (8004fdc <HAL_TIM_PWM_Start+0x1d4>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d004      	beq.n	8004f28 <HAL_TIM_PWM_Start+0x120>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a2f      	ldr	r2, [pc, #188]	; (8004fe0 <HAL_TIM_PWM_Start+0x1d8>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d101      	bne.n	8004f2c <HAL_TIM_PWM_Start+0x124>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e000      	b.n	8004f2e <HAL_TIM_PWM_Start+0x126>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d007      	beq.n	8004f42 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a25      	ldr	r2, [pc, #148]	; (8004fdc <HAL_TIM_PWM_Start+0x1d4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d022      	beq.n	8004f92 <HAL_TIM_PWM_Start+0x18a>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f54:	d01d      	beq.n	8004f92 <HAL_TIM_PWM_Start+0x18a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a22      	ldr	r2, [pc, #136]	; (8004fe4 <HAL_TIM_PWM_Start+0x1dc>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d018      	beq.n	8004f92 <HAL_TIM_PWM_Start+0x18a>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a20      	ldr	r2, [pc, #128]	; (8004fe8 <HAL_TIM_PWM_Start+0x1e0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d013      	beq.n	8004f92 <HAL_TIM_PWM_Start+0x18a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a1f      	ldr	r2, [pc, #124]	; (8004fec <HAL_TIM_PWM_Start+0x1e4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00e      	beq.n	8004f92 <HAL_TIM_PWM_Start+0x18a>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a19      	ldr	r2, [pc, #100]	; (8004fe0 <HAL_TIM_PWM_Start+0x1d8>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d009      	beq.n	8004f92 <HAL_TIM_PWM_Start+0x18a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a1b      	ldr	r2, [pc, #108]	; (8004ff0 <HAL_TIM_PWM_Start+0x1e8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d004      	beq.n	8004f92 <HAL_TIM_PWM_Start+0x18a>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a19      	ldr	r2, [pc, #100]	; (8004ff4 <HAL_TIM_PWM_Start+0x1ec>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d115      	bne.n	8004fbe <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	4b17      	ldr	r3, [pc, #92]	; (8004ff8 <HAL_TIM_PWM_Start+0x1f0>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2b06      	cmp	r3, #6
 8004fa2:	d015      	beq.n	8004fd0 <HAL_TIM_PWM_Start+0x1c8>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004faa:	d011      	beq.n	8004fd0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0201 	orr.w	r2, r2, #1
 8004fba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fbc:	e008      	b.n	8004fd0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f042 0201 	orr.w	r2, r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	e000      	b.n	8004fd2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	40010000 	.word	0x40010000
 8004fe0:	40010400 	.word	0x40010400
 8004fe4:	40000400 	.word	0x40000400
 8004fe8:	40000800 	.word	0x40000800
 8004fec:	40000c00 	.word	0x40000c00
 8004ff0:	40014000 	.word	0x40014000
 8004ff4:	40001800 	.word	0x40001800
 8004ff8:	00010007 	.word	0x00010007

08004ffc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b02      	cmp	r3, #2
 8005010:	d122      	bne.n	8005058 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b02      	cmp	r3, #2
 800501e:	d11b      	bne.n	8005058 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f06f 0202 	mvn.w	r2, #2
 8005028:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fae4 	bl	800560c <HAL_TIM_IC_CaptureCallback>
 8005044:	e005      	b.n	8005052 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fad6 	bl	80055f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 fae7 	bl	8005620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	2b04      	cmp	r3, #4
 8005064:	d122      	bne.n	80050ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b04      	cmp	r3, #4
 8005072:	d11b      	bne.n	80050ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f06f 0204 	mvn.w	r2, #4
 800507c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2202      	movs	r2, #2
 8005082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 faba 	bl	800560c <HAL_TIM_IC_CaptureCallback>
 8005098:	e005      	b.n	80050a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 faac 	bl	80055f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 fabd 	bl	8005620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0308 	and.w	r3, r3, #8
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d122      	bne.n	8005100 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f003 0308 	and.w	r3, r3, #8
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d11b      	bne.n	8005100 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f06f 0208 	mvn.w	r2, #8
 80050d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2204      	movs	r2, #4
 80050d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fa90 	bl	800560c <HAL_TIM_IC_CaptureCallback>
 80050ec:	e005      	b.n	80050fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fa82 	bl	80055f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fa93 	bl	8005620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f003 0310 	and.w	r3, r3, #16
 800510a:	2b10      	cmp	r3, #16
 800510c:	d122      	bne.n	8005154 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f003 0310 	and.w	r3, r3, #16
 8005118:	2b10      	cmp	r3, #16
 800511a:	d11b      	bne.n	8005154 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f06f 0210 	mvn.w	r2, #16
 8005124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2208      	movs	r2, #8
 800512a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 fa66 	bl	800560c <HAL_TIM_IC_CaptureCallback>
 8005140:	e005      	b.n	800514e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fa58 	bl	80055f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fa69 	bl	8005620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b01      	cmp	r3, #1
 8005160:	d10e      	bne.n	8005180 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b01      	cmp	r3, #1
 800516e:	d107      	bne.n	8005180 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0201 	mvn.w	r2, #1
 8005178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fb fc28 	bl	80009d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518a:	2b80      	cmp	r3, #128	; 0x80
 800518c:	d10e      	bne.n	80051ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005198:	2b80      	cmp	r3, #128	; 0x80
 800519a:	d107      	bne.n	80051ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fea4 	bl	8005ef4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ba:	d10e      	bne.n	80051da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c6:	2b80      	cmp	r3, #128	; 0x80
 80051c8:	d107      	bne.n	80051da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80051d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fe97 	bl	8005f08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e4:	2b40      	cmp	r3, #64	; 0x40
 80051e6:	d10e      	bne.n	8005206 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f2:	2b40      	cmp	r3, #64	; 0x40
 80051f4:	d107      	bne.n	8005206 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fa17 	bl	8005634 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	f003 0320 	and.w	r3, r3, #32
 8005210:	2b20      	cmp	r3, #32
 8005212:	d10e      	bne.n	8005232 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f003 0320 	and.w	r3, r3, #32
 800521e:	2b20      	cmp	r3, #32
 8005220:	d107      	bne.n	8005232 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f06f 0220 	mvn.w	r2, #32
 800522a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fe57 	bl	8005ee0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005232:	bf00      	nop
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005252:	2b01      	cmp	r3, #1
 8005254:	d101      	bne.n	800525a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005256:	2302      	movs	r3, #2
 8005258:	e0ff      	b.n	800545a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b14      	cmp	r3, #20
 8005266:	f200 80f0 	bhi.w	800544a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800526a:	a201      	add	r2, pc, #4	; (adr r2, 8005270 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800526c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005270:	080052c5 	.word	0x080052c5
 8005274:	0800544b 	.word	0x0800544b
 8005278:	0800544b 	.word	0x0800544b
 800527c:	0800544b 	.word	0x0800544b
 8005280:	08005305 	.word	0x08005305
 8005284:	0800544b 	.word	0x0800544b
 8005288:	0800544b 	.word	0x0800544b
 800528c:	0800544b 	.word	0x0800544b
 8005290:	08005347 	.word	0x08005347
 8005294:	0800544b 	.word	0x0800544b
 8005298:	0800544b 	.word	0x0800544b
 800529c:	0800544b 	.word	0x0800544b
 80052a0:	08005387 	.word	0x08005387
 80052a4:	0800544b 	.word	0x0800544b
 80052a8:	0800544b 	.word	0x0800544b
 80052ac:	0800544b 	.word	0x0800544b
 80052b0:	080053c9 	.word	0x080053c9
 80052b4:	0800544b 	.word	0x0800544b
 80052b8:	0800544b 	.word	0x0800544b
 80052bc:	0800544b 	.word	0x0800544b
 80052c0:	08005409 	.word	0x08005409
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fa5c 	bl	8005788 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699a      	ldr	r2, [r3, #24]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0208 	orr.w	r2, r2, #8
 80052de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699a      	ldr	r2, [r3, #24]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0204 	bic.w	r2, r2, #4
 80052ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6999      	ldr	r1, [r3, #24]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	691a      	ldr	r2, [r3, #16]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	619a      	str	r2, [r3, #24]
      break;
 8005302:	e0a5      	b.n	8005450 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68b9      	ldr	r1, [r7, #8]
 800530a:	4618      	mov	r0, r3
 800530c:	f000 faae 	bl	800586c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699a      	ldr	r2, [r3, #24]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800531e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699a      	ldr	r2, [r3, #24]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800532e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6999      	ldr	r1, [r3, #24]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	021a      	lsls	r2, r3, #8
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	619a      	str	r2, [r3, #24]
      break;
 8005344:	e084      	b.n	8005450 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68b9      	ldr	r1, [r7, #8]
 800534c:	4618      	mov	r0, r3
 800534e:	f000 fb05 	bl	800595c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69da      	ldr	r2, [r3, #28]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f042 0208 	orr.w	r2, r2, #8
 8005360:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	69da      	ldr	r2, [r3, #28]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0204 	bic.w	r2, r2, #4
 8005370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	69d9      	ldr	r1, [r3, #28]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	61da      	str	r2, [r3, #28]
      break;
 8005384:	e064      	b.n	8005450 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68b9      	ldr	r1, [r7, #8]
 800538c:	4618      	mov	r0, r3
 800538e:	f000 fb5b 	bl	8005a48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	69da      	ldr	r2, [r3, #28]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	69da      	ldr	r2, [r3, #28]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69d9      	ldr	r1, [r3, #28]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	021a      	lsls	r2, r3, #8
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	61da      	str	r2, [r3, #28]
      break;
 80053c6:	e043      	b.n	8005450 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68b9      	ldr	r1, [r7, #8]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 fb92 	bl	8005af8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0208 	orr.w	r2, r2, #8
 80053e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 0204 	bic.w	r2, r2, #4
 80053f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	691a      	ldr	r2, [r3, #16]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005406:	e023      	b.n	8005450 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68b9      	ldr	r1, [r7, #8]
 800540e:	4618      	mov	r0, r3
 8005410:	f000 fbc4 	bl	8005b9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005422:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005432:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	021a      	lsls	r2, r3, #8
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005448:	e002      	b.n	8005450 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	75fb      	strb	r3, [r7, #23]
      break;
 800544e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005458:	7dfb      	ldrb	r3, [r7, #23]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop

08005464 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800546e:	2300      	movs	r3, #0
 8005470:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005478:	2b01      	cmp	r3, #1
 800547a:	d101      	bne.n	8005480 <HAL_TIM_ConfigClockSource+0x1c>
 800547c:	2302      	movs	r3, #2
 800547e:	e0b4      	b.n	80055ea <HAL_TIM_ConfigClockSource+0x186>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	4b56      	ldr	r3, [pc, #344]	; (80055f4 <HAL_TIM_ConfigClockSource+0x190>)
 800549c:	4013      	ands	r3, r2
 800549e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054b8:	d03e      	beq.n	8005538 <HAL_TIM_ConfigClockSource+0xd4>
 80054ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054be:	f200 8087 	bhi.w	80055d0 <HAL_TIM_ConfigClockSource+0x16c>
 80054c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c6:	f000 8086 	beq.w	80055d6 <HAL_TIM_ConfigClockSource+0x172>
 80054ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ce:	d87f      	bhi.n	80055d0 <HAL_TIM_ConfigClockSource+0x16c>
 80054d0:	2b70      	cmp	r3, #112	; 0x70
 80054d2:	d01a      	beq.n	800550a <HAL_TIM_ConfigClockSource+0xa6>
 80054d4:	2b70      	cmp	r3, #112	; 0x70
 80054d6:	d87b      	bhi.n	80055d0 <HAL_TIM_ConfigClockSource+0x16c>
 80054d8:	2b60      	cmp	r3, #96	; 0x60
 80054da:	d050      	beq.n	800557e <HAL_TIM_ConfigClockSource+0x11a>
 80054dc:	2b60      	cmp	r3, #96	; 0x60
 80054de:	d877      	bhi.n	80055d0 <HAL_TIM_ConfigClockSource+0x16c>
 80054e0:	2b50      	cmp	r3, #80	; 0x50
 80054e2:	d03c      	beq.n	800555e <HAL_TIM_ConfigClockSource+0xfa>
 80054e4:	2b50      	cmp	r3, #80	; 0x50
 80054e6:	d873      	bhi.n	80055d0 <HAL_TIM_ConfigClockSource+0x16c>
 80054e8:	2b40      	cmp	r3, #64	; 0x40
 80054ea:	d058      	beq.n	800559e <HAL_TIM_ConfigClockSource+0x13a>
 80054ec:	2b40      	cmp	r3, #64	; 0x40
 80054ee:	d86f      	bhi.n	80055d0 <HAL_TIM_ConfigClockSource+0x16c>
 80054f0:	2b30      	cmp	r3, #48	; 0x30
 80054f2:	d064      	beq.n	80055be <HAL_TIM_ConfigClockSource+0x15a>
 80054f4:	2b30      	cmp	r3, #48	; 0x30
 80054f6:	d86b      	bhi.n	80055d0 <HAL_TIM_ConfigClockSource+0x16c>
 80054f8:	2b20      	cmp	r3, #32
 80054fa:	d060      	beq.n	80055be <HAL_TIM_ConfigClockSource+0x15a>
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d867      	bhi.n	80055d0 <HAL_TIM_ConfigClockSource+0x16c>
 8005500:	2b00      	cmp	r3, #0
 8005502:	d05c      	beq.n	80055be <HAL_TIM_ConfigClockSource+0x15a>
 8005504:	2b10      	cmp	r3, #16
 8005506:	d05a      	beq.n	80055be <HAL_TIM_ConfigClockSource+0x15a>
 8005508:	e062      	b.n	80055d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6818      	ldr	r0, [r3, #0]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	6899      	ldr	r1, [r3, #8]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f000 fc0d 	bl	8005d38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800552c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	609a      	str	r2, [r3, #8]
      break;
 8005536:	e04f      	b.n	80055d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6818      	ldr	r0, [r3, #0]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	6899      	ldr	r1, [r3, #8]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f000 fbf6 	bl	8005d38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689a      	ldr	r2, [r3, #8]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800555a:	609a      	str	r2, [r3, #8]
      break;
 800555c:	e03c      	b.n	80055d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6818      	ldr	r0, [r3, #0]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	6859      	ldr	r1, [r3, #4]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	461a      	mov	r2, r3
 800556c:	f000 fb6a 	bl	8005c44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2150      	movs	r1, #80	; 0x50
 8005576:	4618      	mov	r0, r3
 8005578:	f000 fbc3 	bl	8005d02 <TIM_ITRx_SetConfig>
      break;
 800557c:	e02c      	b.n	80055d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6818      	ldr	r0, [r3, #0]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	6859      	ldr	r1, [r3, #4]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	461a      	mov	r2, r3
 800558c:	f000 fb89 	bl	8005ca2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2160      	movs	r1, #96	; 0x60
 8005596:	4618      	mov	r0, r3
 8005598:	f000 fbb3 	bl	8005d02 <TIM_ITRx_SetConfig>
      break;
 800559c:	e01c      	b.n	80055d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6818      	ldr	r0, [r3, #0]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	6859      	ldr	r1, [r3, #4]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	461a      	mov	r2, r3
 80055ac:	f000 fb4a 	bl	8005c44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2140      	movs	r1, #64	; 0x40
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fba3 	bl	8005d02 <TIM_ITRx_SetConfig>
      break;
 80055bc:	e00c      	b.n	80055d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4619      	mov	r1, r3
 80055c8:	4610      	mov	r0, r2
 80055ca:	f000 fb9a 	bl	8005d02 <TIM_ITRx_SetConfig>
      break;
 80055ce:	e003      	b.n	80055d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	73fb      	strb	r3, [r7, #15]
      break;
 80055d4:	e000      	b.n	80055d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	fffeff88 	.word	0xfffeff88

080055f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a40      	ldr	r2, [pc, #256]	; (800575c <TIM_Base_SetConfig+0x114>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d013      	beq.n	8005688 <TIM_Base_SetConfig+0x40>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005666:	d00f      	beq.n	8005688 <TIM_Base_SetConfig+0x40>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a3d      	ldr	r2, [pc, #244]	; (8005760 <TIM_Base_SetConfig+0x118>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d00b      	beq.n	8005688 <TIM_Base_SetConfig+0x40>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a3c      	ldr	r2, [pc, #240]	; (8005764 <TIM_Base_SetConfig+0x11c>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d007      	beq.n	8005688 <TIM_Base_SetConfig+0x40>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a3b      	ldr	r2, [pc, #236]	; (8005768 <TIM_Base_SetConfig+0x120>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d003      	beq.n	8005688 <TIM_Base_SetConfig+0x40>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a3a      	ldr	r2, [pc, #232]	; (800576c <TIM_Base_SetConfig+0x124>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d108      	bne.n	800569a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a2f      	ldr	r2, [pc, #188]	; (800575c <TIM_Base_SetConfig+0x114>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d02b      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a8:	d027      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a2c      	ldr	r2, [pc, #176]	; (8005760 <TIM_Base_SetConfig+0x118>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d023      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a2b      	ldr	r2, [pc, #172]	; (8005764 <TIM_Base_SetConfig+0x11c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d01f      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a2a      	ldr	r2, [pc, #168]	; (8005768 <TIM_Base_SetConfig+0x120>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d01b      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a29      	ldr	r2, [pc, #164]	; (800576c <TIM_Base_SetConfig+0x124>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d017      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a28      	ldr	r2, [pc, #160]	; (8005770 <TIM_Base_SetConfig+0x128>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d013      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a27      	ldr	r2, [pc, #156]	; (8005774 <TIM_Base_SetConfig+0x12c>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d00f      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a26      	ldr	r2, [pc, #152]	; (8005778 <TIM_Base_SetConfig+0x130>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d00b      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a25      	ldr	r2, [pc, #148]	; (800577c <TIM_Base_SetConfig+0x134>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d007      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a24      	ldr	r2, [pc, #144]	; (8005780 <TIM_Base_SetConfig+0x138>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d003      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a23      	ldr	r2, [pc, #140]	; (8005784 <TIM_Base_SetConfig+0x13c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d108      	bne.n	800570c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	4313      	orrs	r3, r2
 800570a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a0a      	ldr	r2, [pc, #40]	; (800575c <TIM_Base_SetConfig+0x114>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d003      	beq.n	8005740 <TIM_Base_SetConfig+0xf8>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a0c      	ldr	r2, [pc, #48]	; (800576c <TIM_Base_SetConfig+0x124>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d103      	bne.n	8005748 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	691a      	ldr	r2, [r3, #16]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	615a      	str	r2, [r3, #20]
}
 800574e:	bf00      	nop
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	40010000 	.word	0x40010000
 8005760:	40000400 	.word	0x40000400
 8005764:	40000800 	.word	0x40000800
 8005768:	40000c00 	.word	0x40000c00
 800576c:	40010400 	.word	0x40010400
 8005770:	40014000 	.word	0x40014000
 8005774:	40014400 	.word	0x40014400
 8005778:	40014800 	.word	0x40014800
 800577c:	40001800 	.word	0x40001800
 8005780:	40001c00 	.word	0x40001c00
 8005784:	40002000 	.word	0x40002000

08005788 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	f023 0201 	bic.w	r2, r3, #1
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4b2b      	ldr	r3, [pc, #172]	; (8005860 <TIM_OC1_SetConfig+0xd8>)
 80057b4:	4013      	ands	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0303 	bic.w	r3, r3, #3
 80057be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f023 0302 	bic.w	r3, r3, #2
 80057d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	4313      	orrs	r3, r2
 80057da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a21      	ldr	r2, [pc, #132]	; (8005864 <TIM_OC1_SetConfig+0xdc>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d003      	beq.n	80057ec <TIM_OC1_SetConfig+0x64>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a20      	ldr	r2, [pc, #128]	; (8005868 <TIM_OC1_SetConfig+0xe0>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d10c      	bne.n	8005806 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f023 0308 	bic.w	r3, r3, #8
 80057f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f023 0304 	bic.w	r3, r3, #4
 8005804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a16      	ldr	r2, [pc, #88]	; (8005864 <TIM_OC1_SetConfig+0xdc>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d003      	beq.n	8005816 <TIM_OC1_SetConfig+0x8e>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a15      	ldr	r2, [pc, #84]	; (8005868 <TIM_OC1_SetConfig+0xe0>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d111      	bne.n	800583a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800581c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	4313      	orrs	r3, r2
 8005838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	621a      	str	r2, [r3, #32]
}
 8005854:	bf00      	nop
 8005856:	371c      	adds	r7, #28
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	fffeff8f 	.word	0xfffeff8f
 8005864:	40010000 	.word	0x40010000
 8005868:	40010400 	.word	0x40010400

0800586c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	f023 0210 	bic.w	r2, r3, #16
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4b2e      	ldr	r3, [pc, #184]	; (8005950 <TIM_OC2_SetConfig+0xe4>)
 8005898:	4013      	ands	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	021b      	lsls	r3, r3, #8
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f023 0320 	bic.w	r3, r3, #32
 80058b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	011b      	lsls	r3, r3, #4
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a23      	ldr	r2, [pc, #140]	; (8005954 <TIM_OC2_SetConfig+0xe8>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d003      	beq.n	80058d4 <TIM_OC2_SetConfig+0x68>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a22      	ldr	r2, [pc, #136]	; (8005958 <TIM_OC2_SetConfig+0xec>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d10d      	bne.n	80058f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	011b      	lsls	r3, r3, #4
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a18      	ldr	r2, [pc, #96]	; (8005954 <TIM_OC2_SetConfig+0xe8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d003      	beq.n	8005900 <TIM_OC2_SetConfig+0x94>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a17      	ldr	r2, [pc, #92]	; (8005958 <TIM_OC2_SetConfig+0xec>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d113      	bne.n	8005928 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005906:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800590e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	4313      	orrs	r3, r2
 800591a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	4313      	orrs	r3, r2
 8005926:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	621a      	str	r2, [r3, #32]
}
 8005942:	bf00      	nop
 8005944:	371c      	adds	r7, #28
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	feff8fff 	.word	0xfeff8fff
 8005954:	40010000 	.word	0x40010000
 8005958:	40010400 	.word	0x40010400

0800595c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4b2d      	ldr	r3, [pc, #180]	; (8005a3c <TIM_OC3_SetConfig+0xe0>)
 8005988:	4013      	ands	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 0303 	bic.w	r3, r3, #3
 8005992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	021b      	lsls	r3, r3, #8
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a22      	ldr	r2, [pc, #136]	; (8005a40 <TIM_OC3_SetConfig+0xe4>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d003      	beq.n	80059c2 <TIM_OC3_SetConfig+0x66>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a21      	ldr	r2, [pc, #132]	; (8005a44 <TIM_OC3_SetConfig+0xe8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d10d      	bne.n	80059de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	021b      	lsls	r3, r3, #8
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a17      	ldr	r2, [pc, #92]	; (8005a40 <TIM_OC3_SetConfig+0xe4>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d003      	beq.n	80059ee <TIM_OC3_SetConfig+0x92>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a16      	ldr	r2, [pc, #88]	; (8005a44 <TIM_OC3_SetConfig+0xe8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d113      	bne.n	8005a16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	621a      	str	r2, [r3, #32]
}
 8005a30:	bf00      	nop
 8005a32:	371c      	adds	r7, #28
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	fffeff8f 	.word	0xfffeff8f
 8005a40:	40010000 	.word	0x40010000
 8005a44:	40010400 	.word	0x40010400

08005a48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4b1e      	ldr	r3, [pc, #120]	; (8005aec <TIM_OC4_SetConfig+0xa4>)
 8005a74:	4013      	ands	r3, r2
 8005a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	021b      	lsls	r3, r3, #8
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	031b      	lsls	r3, r3, #12
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a13      	ldr	r2, [pc, #76]	; (8005af0 <TIM_OC4_SetConfig+0xa8>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d003      	beq.n	8005ab0 <TIM_OC4_SetConfig+0x68>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a12      	ldr	r2, [pc, #72]	; (8005af4 <TIM_OC4_SetConfig+0xac>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d109      	bne.n	8005ac4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ab6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	019b      	lsls	r3, r3, #6
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	621a      	str	r2, [r3, #32]
}
 8005ade:	bf00      	nop
 8005ae0:	371c      	adds	r7, #28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	feff8fff 	.word	0xfeff8fff
 8005af0:	40010000 	.word	0x40010000
 8005af4:	40010400 	.word	0x40010400

08005af8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4b1b      	ldr	r3, [pc, #108]	; (8005b90 <TIM_OC5_SetConfig+0x98>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	041b      	lsls	r3, r3, #16
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a12      	ldr	r2, [pc, #72]	; (8005b94 <TIM_OC5_SetConfig+0x9c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d003      	beq.n	8005b56 <TIM_OC5_SetConfig+0x5e>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a11      	ldr	r2, [pc, #68]	; (8005b98 <TIM_OC5_SetConfig+0xa0>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d109      	bne.n	8005b6a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	021b      	lsls	r3, r3, #8
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	621a      	str	r2, [r3, #32]
}
 8005b84:	bf00      	nop
 8005b86:	371c      	adds	r7, #28
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	fffeff8f 	.word	0xfffeff8f
 8005b94:	40010000 	.word	0x40010000
 8005b98:	40010400 	.word	0x40010400

08005b9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	4b1c      	ldr	r3, [pc, #112]	; (8005c38 <TIM_OC6_SetConfig+0x9c>)
 8005bc8:	4013      	ands	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	021b      	lsls	r3, r3, #8
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	051b      	lsls	r3, r3, #20
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a13      	ldr	r2, [pc, #76]	; (8005c3c <TIM_OC6_SetConfig+0xa0>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d003      	beq.n	8005bfc <TIM_OC6_SetConfig+0x60>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a12      	ldr	r2, [pc, #72]	; (8005c40 <TIM_OC6_SetConfig+0xa4>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d109      	bne.n	8005c10 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	029b      	lsls	r3, r3, #10
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	621a      	str	r2, [r3, #32]
}
 8005c2a:	bf00      	nop
 8005c2c:	371c      	adds	r7, #28
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	feff8fff 	.word	0xfeff8fff
 8005c3c:	40010000 	.word	0x40010000
 8005c40:	40010400 	.word	0x40010400

08005c44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	f023 0201 	bic.w	r2, r3, #1
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f023 030a 	bic.w	r3, r3, #10
 8005c80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	621a      	str	r2, [r3, #32]
}
 8005c96:	bf00      	nop
 8005c98:	371c      	adds	r7, #28
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b087      	sub	sp, #28
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	60f8      	str	r0, [r7, #12]
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	f023 0210 	bic.w	r2, r3, #16
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ccc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	031b      	lsls	r3, r3, #12
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	011b      	lsls	r3, r3, #4
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	621a      	str	r2, [r3, #32]
}
 8005cf6:	bf00      	nop
 8005cf8:	371c      	adds	r7, #28
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b085      	sub	sp, #20
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f043 0307 	orr.w	r3, r3, #7
 8005d24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	609a      	str	r2, [r3, #8]
}
 8005d2c:	bf00      	nop
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
 8005d44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	021a      	lsls	r2, r3, #8
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	609a      	str	r2, [r3, #8]
}
 8005d6c:	bf00      	nop
 8005d6e:	371c      	adds	r7, #28
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	f003 031f 	and.w	r3, r3, #31
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6a1a      	ldr	r2, [r3, #32]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	43db      	mvns	r3, r3
 8005d9a:	401a      	ands	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a1a      	ldr	r2, [r3, #32]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f003 031f 	and.w	r3, r3, #31
 8005daa:	6879      	ldr	r1, [r7, #4]
 8005dac:	fa01 f303 	lsl.w	r3, r1, r3
 8005db0:	431a      	orrs	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	621a      	str	r2, [r3, #32]
}
 8005db6:	bf00      	nop
 8005db8:	371c      	adds	r7, #28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
	...

08005dc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d101      	bne.n	8005ddc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dd8:	2302      	movs	r3, #2
 8005dda:	e06d      	b.n	8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2202      	movs	r2, #2
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a30      	ldr	r2, [pc, #192]	; (8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d004      	beq.n	8005e10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a2f      	ldr	r2, [pc, #188]	; (8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d108      	bne.n	8005e22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a20      	ldr	r2, [pc, #128]	; (8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d022      	beq.n	8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e4e:	d01d      	beq.n	8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a1d      	ldr	r2, [pc, #116]	; (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d018      	beq.n	8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a1c      	ldr	r2, [pc, #112]	; (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d013      	beq.n	8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a1a      	ldr	r2, [pc, #104]	; (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d00e      	beq.n	8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a15      	ldr	r2, [pc, #84]	; (8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d009      	beq.n	8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a16      	ldr	r2, [pc, #88]	; (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d004      	beq.n	8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a15      	ldr	r2, [pc, #84]	; (8005edc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d10c      	bne.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	40010000 	.word	0x40010000
 8005ec8:	40010400 	.word	0x40010400
 8005ecc:	40000400 	.word	0x40000400
 8005ed0:	40000800 	.word	0x40000800
 8005ed4:	40000c00 	.word	0x40000c00
 8005ed8:	40014000 	.word	0x40014000
 8005edc:	40001800 	.word	0x40001800

08005ee0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e040      	b.n	8005fb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d106      	bne.n	8005f44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7fb f9cc 	bl	80012dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2224      	movs	r2, #36	; 0x24
 8005f48:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 0201 	bic.w	r2, r2, #1
 8005f58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fc64 	bl	8006828 <UART_SetConfig>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d101      	bne.n	8005f6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e022      	b.n	8005fb0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d002      	beq.n	8005f78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 febc 	bl	8006cf0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689a      	ldr	r2, [r3, #8]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0201 	orr.w	r2, r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 ff43 	bl	8006e34 <UART_CheckIdleState>
 8005fae:	4603      	mov	r3, r0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08a      	sub	sp, #40	; 0x28
 8005fbc:	af02      	add	r7, sp, #8
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	603b      	str	r3, [r7, #0]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fcc:	2b20      	cmp	r3, #32
 8005fce:	d171      	bne.n	80060b4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d002      	beq.n	8005fdc <HAL_UART_Transmit+0x24>
 8005fd6:	88fb      	ldrh	r3, [r7, #6]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d101      	bne.n	8005fe0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e06a      	b.n	80060b6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2221      	movs	r2, #33	; 0x21
 8005fec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fee:	f7fc f949 	bl	8002284 <HAL_GetTick>
 8005ff2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	88fa      	ldrh	r2, [r7, #6]
 8005ff8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	88fa      	ldrh	r2, [r7, #6]
 8006000:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800600c:	d108      	bne.n	8006020 <HAL_UART_Transmit+0x68>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d104      	bne.n	8006020 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006016:	2300      	movs	r3, #0
 8006018:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	61bb      	str	r3, [r7, #24]
 800601e:	e003      	b.n	8006028 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006024:	2300      	movs	r3, #0
 8006026:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006028:	e02c      	b.n	8006084 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2200      	movs	r2, #0
 8006032:	2180      	movs	r1, #128	; 0x80
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 ff4a 	bl	8006ece <UART_WaitOnFlagUntilTimeout>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e038      	b.n	80060b6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10b      	bne.n	8006062 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006058:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	3302      	adds	r3, #2
 800605e:	61bb      	str	r3, [r7, #24]
 8006060:	e007      	b.n	8006072 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	781a      	ldrb	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	3301      	adds	r3, #1
 8006070:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006078:	b29b      	uxth	r3, r3
 800607a:	3b01      	subs	r3, #1
 800607c:	b29a      	uxth	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800608a:	b29b      	uxth	r3, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1cc      	bne.n	800602a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	2200      	movs	r2, #0
 8006098:	2140      	movs	r1, #64	; 0x40
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 ff17 	bl	8006ece <UART_WaitOnFlagUntilTimeout>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e005      	b.n	80060b6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2220      	movs	r2, #32
 80060ae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80060b0:	2300      	movs	r3, #0
 80060b2:	e000      	b.n	80060b6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80060b4:	2302      	movs	r3, #2
  }
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3720      	adds	r7, #32
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b08b      	sub	sp, #44	; 0x2c
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	4613      	mov	r3, r2
 80060cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060d2:	2b20      	cmp	r3, #32
 80060d4:	d147      	bne.n	8006166 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <HAL_UART_Transmit_IT+0x22>
 80060dc:	88fb      	ldrh	r3, [r7, #6]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e040      	b.n	8006168 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	88fa      	ldrh	r2, [r7, #6]
 80060f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	88fa      	ldrh	r2, [r7, #6]
 80060f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2221      	movs	r2, #33	; 0x21
 800610e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006118:	d107      	bne.n	800612a <HAL_UART_Transmit_IT+0x6a>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d103      	bne.n	800612a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	4a13      	ldr	r2, [pc, #76]	; (8006174 <HAL_UART_Transmit_IT+0xb4>)
 8006126:	66da      	str	r2, [r3, #108]	; 0x6c
 8006128:	e002      	b.n	8006130 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	4a12      	ldr	r2, [pc, #72]	; (8006178 <HAL_UART_Transmit_IT+0xb8>)
 800612e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	e853 3f00 	ldrex	r3, [r3]
 800613c:	613b      	str	r3, [r7, #16]
   return(result);
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006144:	627b      	str	r3, [r7, #36]	; 0x24
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	461a      	mov	r2, r3
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	623b      	str	r3, [r7, #32]
 8006150:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006152:	69f9      	ldr	r1, [r7, #28]
 8006154:	6a3a      	ldr	r2, [r7, #32]
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	61bb      	str	r3, [r7, #24]
   return(result);
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1e6      	bne.n	8006130 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8006162:	2300      	movs	r3, #0
 8006164:	e000      	b.n	8006168 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006166:	2302      	movs	r3, #2
  }
}
 8006168:	4618      	mov	r0, r3
 800616a:	372c      	adds	r7, #44	; 0x2c
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	08007393 	.word	0x08007393
 8006178:	080072dd 	.word	0x080072dd

0800617c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08a      	sub	sp, #40	; 0x28
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	4613      	mov	r3, r2
 8006188:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006190:	2b20      	cmp	r3, #32
 8006192:	d132      	bne.n	80061fa <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d002      	beq.n	80061a0 <HAL_UART_Receive_IT+0x24>
 800619a:	88fb      	ldrh	r3, [r7, #6]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e02b      	b.n	80061fc <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d018      	beq.n	80061ea <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	e853 3f00 	ldrex	r3, [r3]
 80061c4:	613b      	str	r3, [r7, #16]
   return(result);
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061cc:	627b      	str	r3, [r7, #36]	; 0x24
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	623b      	str	r3, [r7, #32]
 80061d8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061da:	69f9      	ldr	r1, [r7, #28]
 80061dc:	6a3a      	ldr	r2, [r7, #32]
 80061de:	e841 2300 	strex	r3, r2, [r1]
 80061e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1e6      	bne.n	80061b8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80061ea:	88fb      	ldrh	r3, [r7, #6]
 80061ec:	461a      	mov	r2, r3
 80061ee:	68b9      	ldr	r1, [r7, #8]
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 ff33 	bl	800705c <UART_Start_Receive_IT>
 80061f6:	4603      	mov	r3, r0
 80061f8:	e000      	b.n	80061fc <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80061fa:	2302      	movs	r3, #2
  }
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3728      	adds	r7, #40	; 0x28
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b0ba      	sub	sp, #232	; 0xe8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800622a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800622e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006232:	4013      	ands	r3, r2
 8006234:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006238:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800623c:	2b00      	cmp	r3, #0
 800623e:	d115      	bne.n	800626c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006244:	f003 0320 	and.w	r3, r3, #32
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00f      	beq.n	800626c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800624c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006250:	f003 0320 	and.w	r3, r3, #32
 8006254:	2b00      	cmp	r3, #0
 8006256:	d009      	beq.n	800626c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 82ac 	beq.w	80067ba <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	4798      	blx	r3
      }
      return;
 800626a:	e2a6      	b.n	80067ba <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800626c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 8117 	beq.w	80064a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b00      	cmp	r3, #0
 8006280:	d106      	bne.n	8006290 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006282:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006286:	4b85      	ldr	r3, [pc, #532]	; (800649c <HAL_UART_IRQHandler+0x298>)
 8006288:	4013      	ands	r3, r2
 800628a:	2b00      	cmp	r3, #0
 800628c:	f000 810a 	beq.w	80064a4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	2b00      	cmp	r3, #0
 800629a:	d011      	beq.n	80062c0 <HAL_UART_IRQHandler+0xbc>
 800629c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00b      	beq.n	80062c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2201      	movs	r2, #1
 80062ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062b6:	f043 0201 	orr.w	r2, r3, #1
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d011      	beq.n	80062f0 <HAL_UART_IRQHandler+0xec>
 80062cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062d0:	f003 0301 	and.w	r3, r3, #1
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00b      	beq.n	80062f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2202      	movs	r2, #2
 80062de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062e6:	f043 0204 	orr.w	r2, r3, #4
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d011      	beq.n	8006320 <HAL_UART_IRQHandler+0x11c>
 80062fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00b      	beq.n	8006320 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2204      	movs	r2, #4
 800630e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006316:	f043 0202 	orr.w	r2, r3, #2
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006324:	f003 0308 	and.w	r3, r3, #8
 8006328:	2b00      	cmp	r3, #0
 800632a:	d017      	beq.n	800635c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800632c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006330:	f003 0320 	and.w	r3, r3, #32
 8006334:	2b00      	cmp	r3, #0
 8006336:	d105      	bne.n	8006344 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800633c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00b      	beq.n	800635c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2208      	movs	r2, #8
 800634a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006352:	f043 0208 	orr.w	r2, r3, #8
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800635c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006364:	2b00      	cmp	r3, #0
 8006366:	d012      	beq.n	800638e <HAL_UART_IRQHandler+0x18a>
 8006368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800636c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00c      	beq.n	800638e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800637c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006384:	f043 0220 	orr.w	r2, r3, #32
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 8212 	beq.w	80067be <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800639a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800639e:	f003 0320 	and.w	r3, r3, #32
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00d      	beq.n	80063c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d007      	beq.n	80063c2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d6:	2b40      	cmp	r3, #64	; 0x40
 80063d8:	d005      	beq.n	80063e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80063da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d04f      	beq.n	8006486 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fefe 	bl	80071e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f6:	2b40      	cmp	r3, #64	; 0x40
 80063f8:	d141      	bne.n	800647e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	3308      	adds	r3, #8
 8006400:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006404:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006408:	e853 3f00 	ldrex	r3, [r3]
 800640c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006410:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006418:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	3308      	adds	r3, #8
 8006422:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006426:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800642a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006432:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006436:	e841 2300 	strex	r3, r2, [r1]
 800643a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800643e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1d9      	bne.n	80063fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800644a:	2b00      	cmp	r3, #0
 800644c:	d013      	beq.n	8006476 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006452:	4a13      	ldr	r2, [pc, #76]	; (80064a0 <HAL_UART_IRQHandler+0x29c>)
 8006454:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800645a:	4618      	mov	r0, r3
 800645c:	f7fc f8c3 	bl	80025e6 <HAL_DMA_Abort_IT>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d017      	beq.n	8006496 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800646a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006470:	4610      	mov	r0, r2
 8006472:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006474:	e00f      	b.n	8006496 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f9b6 	bl	80067e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800647c:	e00b      	b.n	8006496 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f9b2 	bl	80067e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006484:	e007      	b.n	8006496 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f9ae 	bl	80067e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006494:	e193      	b.n	80067be <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006496:	bf00      	nop
    return;
 8006498:	e191      	b.n	80067be <HAL_UART_IRQHandler+0x5ba>
 800649a:	bf00      	nop
 800649c:	04000120 	.word	0x04000120
 80064a0:	080072b1 	.word	0x080072b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	f040 814c 	bne.w	8006746 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80064ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b2:	f003 0310 	and.w	r3, r3, #16
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f000 8145 	beq.w	8006746 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80064bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064c0:	f003 0310 	and.w	r3, r3, #16
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 813e 	beq.w	8006746 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2210      	movs	r2, #16
 80064d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064dc:	2b40      	cmp	r3, #64	; 0x40
 80064de:	f040 80b6 	bne.w	800664e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 8165 	beq.w	80067c2 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80064fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006502:	429a      	cmp	r2, r3
 8006504:	f080 815d 	bcs.w	80067c2 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800650e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006516:	69db      	ldr	r3, [r3, #28]
 8006518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800651c:	f000 8086 	beq.w	800662c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006528:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800652c:	e853 3f00 	ldrex	r3, [r3]
 8006530:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006534:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800653c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	461a      	mov	r2, r3
 8006546:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800654a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800654e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006552:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006556:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800655a:	e841 2300 	strex	r3, r2, [r1]
 800655e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006562:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1da      	bne.n	8006520 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	3308      	adds	r3, #8
 8006570:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006574:	e853 3f00 	ldrex	r3, [r3]
 8006578:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800657a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800657c:	f023 0301 	bic.w	r3, r3, #1
 8006580:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3308      	adds	r3, #8
 800658a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800658e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006592:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006594:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006596:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80065a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e1      	bne.n	800656a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3308      	adds	r3, #8
 80065ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80065b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3308      	adds	r3, #8
 80065c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80065ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80065d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065d2:	e841 2300 	strex	r3, r2, [r1]
 80065d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80065d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1e3      	bne.n	80065a6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2220      	movs	r2, #32
 80065e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065f4:	e853 3f00 	ldrex	r3, [r3]
 80065f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065fc:	f023 0310 	bic.w	r3, r3, #16
 8006600:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	461a      	mov	r2, r3
 800660a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800660e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006610:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006612:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006614:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006616:	e841 2300 	strex	r3, r2, [r1]
 800661a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800661c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1e4      	bne.n	80065ec <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006626:	4618      	mov	r0, r3
 8006628:	f7fb ff6d 	bl	8002506 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2202      	movs	r2, #2
 8006630:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800663e:	b29b      	uxth	r3, r3
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	b29b      	uxth	r3, r3
 8006644:	4619      	mov	r1, r3
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f8d8 	bl	80067fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800664c:	e0b9      	b.n	80067c2 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800665a:	b29b      	uxth	r3, r3
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006668:	b29b      	uxth	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 80ab 	beq.w	80067c6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006670:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 80a6 	beq.w	80067c6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006682:	e853 3f00 	ldrex	r3, [r3]
 8006686:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800668a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800668e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800669c:	647b      	str	r3, [r7, #68]	; 0x44
 800669e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066a4:	e841 2300 	strex	r3, r2, [r1]
 80066a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1e4      	bne.n	800667a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3308      	adds	r3, #8
 80066b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ba:	e853 3f00 	ldrex	r3, [r3]
 80066be:	623b      	str	r3, [r7, #32]
   return(result);
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	f023 0301 	bic.w	r3, r3, #1
 80066c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	3308      	adds	r3, #8
 80066d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80066d4:	633a      	str	r2, [r7, #48]	; 0x30
 80066d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066dc:	e841 2300 	strex	r3, r2, [r1]
 80066e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1e3      	bne.n	80066b0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	e853 3f00 	ldrex	r3, [r3]
 8006708:	60fb      	str	r3, [r7, #12]
   return(result);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f023 0310 	bic.w	r3, r3, #16
 8006710:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	461a      	mov	r2, r3
 800671a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800671e:	61fb      	str	r3, [r7, #28]
 8006720:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006722:	69b9      	ldr	r1, [r7, #24]
 8006724:	69fa      	ldr	r2, [r7, #28]
 8006726:	e841 2300 	strex	r3, r2, [r1]
 800672a:	617b      	str	r3, [r7, #20]
   return(result);
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1e4      	bne.n	80066fc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2202      	movs	r2, #2
 8006736:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006738:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800673c:	4619      	mov	r1, r3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f85c 	bl	80067fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006744:	e03f      	b.n	80067c6 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800674a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00e      	beq.n	8006770 <HAL_UART_IRQHandler+0x56c>
 8006752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d008      	beq.n	8006770 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006766:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f853 	bl	8006814 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800676e:	e02d      	b.n	80067cc <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00e      	beq.n	800679a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800677c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006784:	2b00      	cmp	r3, #0
 8006786:	d008      	beq.n	800679a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800678c:	2b00      	cmp	r3, #0
 800678e:	d01c      	beq.n	80067ca <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	4798      	blx	r3
    }
    return;
 8006798:	e017      	b.n	80067ca <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800679a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800679e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d012      	beq.n	80067cc <HAL_UART_IRQHandler+0x5c8>
 80067a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00c      	beq.n	80067cc <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fe4d 	bl	8007452 <UART_EndTransmit_IT>
    return;
 80067b8:	e008      	b.n	80067cc <HAL_UART_IRQHandler+0x5c8>
      return;
 80067ba:	bf00      	nop
 80067bc:	e006      	b.n	80067cc <HAL_UART_IRQHandler+0x5c8>
    return;
 80067be:	bf00      	nop
 80067c0:	e004      	b.n	80067cc <HAL_UART_IRQHandler+0x5c8>
      return;
 80067c2:	bf00      	nop
 80067c4:	e002      	b.n	80067cc <HAL_UART_IRQHandler+0x5c8>
      return;
 80067c6:	bf00      	nop
 80067c8:	e000      	b.n	80067cc <HAL_UART_IRQHandler+0x5c8>
    return;
 80067ca:	bf00      	nop
  }

}
 80067cc:	37e8      	adds	r7, #232	; 0xe8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop

080067d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b088      	sub	sp, #32
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006830:	2300      	movs	r3, #0
 8006832:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689a      	ldr	r2, [r3, #8]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	431a      	orrs	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	431a      	orrs	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	69db      	ldr	r3, [r3, #28]
 8006848:	4313      	orrs	r3, r2
 800684a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	4ba6      	ldr	r3, [pc, #664]	; (8006aec <UART_SetConfig+0x2c4>)
 8006854:	4013      	ands	r3, r2
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	6812      	ldr	r2, [r2, #0]
 800685a:	6979      	ldr	r1, [r7, #20]
 800685c:	430b      	orrs	r3, r1
 800685e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	4313      	orrs	r3, r2
 8006884:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	430a      	orrs	r2, r1
 8006898:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a94      	ldr	r2, [pc, #592]	; (8006af0 <UART_SetConfig+0x2c8>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d120      	bne.n	80068e6 <UART_SetConfig+0xbe>
 80068a4:	4b93      	ldr	r3, [pc, #588]	; (8006af4 <UART_SetConfig+0x2cc>)
 80068a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068aa:	f003 0303 	and.w	r3, r3, #3
 80068ae:	2b03      	cmp	r3, #3
 80068b0:	d816      	bhi.n	80068e0 <UART_SetConfig+0xb8>
 80068b2:	a201      	add	r2, pc, #4	; (adr r2, 80068b8 <UART_SetConfig+0x90>)
 80068b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b8:	080068c9 	.word	0x080068c9
 80068bc:	080068d5 	.word	0x080068d5
 80068c0:	080068cf 	.word	0x080068cf
 80068c4:	080068db 	.word	0x080068db
 80068c8:	2301      	movs	r3, #1
 80068ca:	77fb      	strb	r3, [r7, #31]
 80068cc:	e150      	b.n	8006b70 <UART_SetConfig+0x348>
 80068ce:	2302      	movs	r3, #2
 80068d0:	77fb      	strb	r3, [r7, #31]
 80068d2:	e14d      	b.n	8006b70 <UART_SetConfig+0x348>
 80068d4:	2304      	movs	r3, #4
 80068d6:	77fb      	strb	r3, [r7, #31]
 80068d8:	e14a      	b.n	8006b70 <UART_SetConfig+0x348>
 80068da:	2308      	movs	r3, #8
 80068dc:	77fb      	strb	r3, [r7, #31]
 80068de:	e147      	b.n	8006b70 <UART_SetConfig+0x348>
 80068e0:	2310      	movs	r3, #16
 80068e2:	77fb      	strb	r3, [r7, #31]
 80068e4:	e144      	b.n	8006b70 <UART_SetConfig+0x348>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a83      	ldr	r2, [pc, #524]	; (8006af8 <UART_SetConfig+0x2d0>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d132      	bne.n	8006956 <UART_SetConfig+0x12e>
 80068f0:	4b80      	ldr	r3, [pc, #512]	; (8006af4 <UART_SetConfig+0x2cc>)
 80068f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068f6:	f003 030c 	and.w	r3, r3, #12
 80068fa:	2b0c      	cmp	r3, #12
 80068fc:	d828      	bhi.n	8006950 <UART_SetConfig+0x128>
 80068fe:	a201      	add	r2, pc, #4	; (adr r2, 8006904 <UART_SetConfig+0xdc>)
 8006900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006904:	08006939 	.word	0x08006939
 8006908:	08006951 	.word	0x08006951
 800690c:	08006951 	.word	0x08006951
 8006910:	08006951 	.word	0x08006951
 8006914:	08006945 	.word	0x08006945
 8006918:	08006951 	.word	0x08006951
 800691c:	08006951 	.word	0x08006951
 8006920:	08006951 	.word	0x08006951
 8006924:	0800693f 	.word	0x0800693f
 8006928:	08006951 	.word	0x08006951
 800692c:	08006951 	.word	0x08006951
 8006930:	08006951 	.word	0x08006951
 8006934:	0800694b 	.word	0x0800694b
 8006938:	2300      	movs	r3, #0
 800693a:	77fb      	strb	r3, [r7, #31]
 800693c:	e118      	b.n	8006b70 <UART_SetConfig+0x348>
 800693e:	2302      	movs	r3, #2
 8006940:	77fb      	strb	r3, [r7, #31]
 8006942:	e115      	b.n	8006b70 <UART_SetConfig+0x348>
 8006944:	2304      	movs	r3, #4
 8006946:	77fb      	strb	r3, [r7, #31]
 8006948:	e112      	b.n	8006b70 <UART_SetConfig+0x348>
 800694a:	2308      	movs	r3, #8
 800694c:	77fb      	strb	r3, [r7, #31]
 800694e:	e10f      	b.n	8006b70 <UART_SetConfig+0x348>
 8006950:	2310      	movs	r3, #16
 8006952:	77fb      	strb	r3, [r7, #31]
 8006954:	e10c      	b.n	8006b70 <UART_SetConfig+0x348>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a68      	ldr	r2, [pc, #416]	; (8006afc <UART_SetConfig+0x2d4>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d120      	bne.n	80069a2 <UART_SetConfig+0x17a>
 8006960:	4b64      	ldr	r3, [pc, #400]	; (8006af4 <UART_SetConfig+0x2cc>)
 8006962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006966:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800696a:	2b30      	cmp	r3, #48	; 0x30
 800696c:	d013      	beq.n	8006996 <UART_SetConfig+0x16e>
 800696e:	2b30      	cmp	r3, #48	; 0x30
 8006970:	d814      	bhi.n	800699c <UART_SetConfig+0x174>
 8006972:	2b20      	cmp	r3, #32
 8006974:	d009      	beq.n	800698a <UART_SetConfig+0x162>
 8006976:	2b20      	cmp	r3, #32
 8006978:	d810      	bhi.n	800699c <UART_SetConfig+0x174>
 800697a:	2b00      	cmp	r3, #0
 800697c:	d002      	beq.n	8006984 <UART_SetConfig+0x15c>
 800697e:	2b10      	cmp	r3, #16
 8006980:	d006      	beq.n	8006990 <UART_SetConfig+0x168>
 8006982:	e00b      	b.n	800699c <UART_SetConfig+0x174>
 8006984:	2300      	movs	r3, #0
 8006986:	77fb      	strb	r3, [r7, #31]
 8006988:	e0f2      	b.n	8006b70 <UART_SetConfig+0x348>
 800698a:	2302      	movs	r3, #2
 800698c:	77fb      	strb	r3, [r7, #31]
 800698e:	e0ef      	b.n	8006b70 <UART_SetConfig+0x348>
 8006990:	2304      	movs	r3, #4
 8006992:	77fb      	strb	r3, [r7, #31]
 8006994:	e0ec      	b.n	8006b70 <UART_SetConfig+0x348>
 8006996:	2308      	movs	r3, #8
 8006998:	77fb      	strb	r3, [r7, #31]
 800699a:	e0e9      	b.n	8006b70 <UART_SetConfig+0x348>
 800699c:	2310      	movs	r3, #16
 800699e:	77fb      	strb	r3, [r7, #31]
 80069a0:	e0e6      	b.n	8006b70 <UART_SetConfig+0x348>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a56      	ldr	r2, [pc, #344]	; (8006b00 <UART_SetConfig+0x2d8>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d120      	bne.n	80069ee <UART_SetConfig+0x1c6>
 80069ac:	4b51      	ldr	r3, [pc, #324]	; (8006af4 <UART_SetConfig+0x2cc>)
 80069ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069b6:	2bc0      	cmp	r3, #192	; 0xc0
 80069b8:	d013      	beq.n	80069e2 <UART_SetConfig+0x1ba>
 80069ba:	2bc0      	cmp	r3, #192	; 0xc0
 80069bc:	d814      	bhi.n	80069e8 <UART_SetConfig+0x1c0>
 80069be:	2b80      	cmp	r3, #128	; 0x80
 80069c0:	d009      	beq.n	80069d6 <UART_SetConfig+0x1ae>
 80069c2:	2b80      	cmp	r3, #128	; 0x80
 80069c4:	d810      	bhi.n	80069e8 <UART_SetConfig+0x1c0>
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d002      	beq.n	80069d0 <UART_SetConfig+0x1a8>
 80069ca:	2b40      	cmp	r3, #64	; 0x40
 80069cc:	d006      	beq.n	80069dc <UART_SetConfig+0x1b4>
 80069ce:	e00b      	b.n	80069e8 <UART_SetConfig+0x1c0>
 80069d0:	2300      	movs	r3, #0
 80069d2:	77fb      	strb	r3, [r7, #31]
 80069d4:	e0cc      	b.n	8006b70 <UART_SetConfig+0x348>
 80069d6:	2302      	movs	r3, #2
 80069d8:	77fb      	strb	r3, [r7, #31]
 80069da:	e0c9      	b.n	8006b70 <UART_SetConfig+0x348>
 80069dc:	2304      	movs	r3, #4
 80069de:	77fb      	strb	r3, [r7, #31]
 80069e0:	e0c6      	b.n	8006b70 <UART_SetConfig+0x348>
 80069e2:	2308      	movs	r3, #8
 80069e4:	77fb      	strb	r3, [r7, #31]
 80069e6:	e0c3      	b.n	8006b70 <UART_SetConfig+0x348>
 80069e8:	2310      	movs	r3, #16
 80069ea:	77fb      	strb	r3, [r7, #31]
 80069ec:	e0c0      	b.n	8006b70 <UART_SetConfig+0x348>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a44      	ldr	r2, [pc, #272]	; (8006b04 <UART_SetConfig+0x2dc>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d125      	bne.n	8006a44 <UART_SetConfig+0x21c>
 80069f8:	4b3e      	ldr	r3, [pc, #248]	; (8006af4 <UART_SetConfig+0x2cc>)
 80069fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a06:	d017      	beq.n	8006a38 <UART_SetConfig+0x210>
 8006a08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a0c:	d817      	bhi.n	8006a3e <UART_SetConfig+0x216>
 8006a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a12:	d00b      	beq.n	8006a2c <UART_SetConfig+0x204>
 8006a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a18:	d811      	bhi.n	8006a3e <UART_SetConfig+0x216>
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <UART_SetConfig+0x1fe>
 8006a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a22:	d006      	beq.n	8006a32 <UART_SetConfig+0x20a>
 8006a24:	e00b      	b.n	8006a3e <UART_SetConfig+0x216>
 8006a26:	2300      	movs	r3, #0
 8006a28:	77fb      	strb	r3, [r7, #31]
 8006a2a:	e0a1      	b.n	8006b70 <UART_SetConfig+0x348>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	77fb      	strb	r3, [r7, #31]
 8006a30:	e09e      	b.n	8006b70 <UART_SetConfig+0x348>
 8006a32:	2304      	movs	r3, #4
 8006a34:	77fb      	strb	r3, [r7, #31]
 8006a36:	e09b      	b.n	8006b70 <UART_SetConfig+0x348>
 8006a38:	2308      	movs	r3, #8
 8006a3a:	77fb      	strb	r3, [r7, #31]
 8006a3c:	e098      	b.n	8006b70 <UART_SetConfig+0x348>
 8006a3e:	2310      	movs	r3, #16
 8006a40:	77fb      	strb	r3, [r7, #31]
 8006a42:	e095      	b.n	8006b70 <UART_SetConfig+0x348>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a2f      	ldr	r2, [pc, #188]	; (8006b08 <UART_SetConfig+0x2e0>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d125      	bne.n	8006a9a <UART_SetConfig+0x272>
 8006a4e:	4b29      	ldr	r3, [pc, #164]	; (8006af4 <UART_SetConfig+0x2cc>)
 8006a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a5c:	d017      	beq.n	8006a8e <UART_SetConfig+0x266>
 8006a5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a62:	d817      	bhi.n	8006a94 <UART_SetConfig+0x26c>
 8006a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a68:	d00b      	beq.n	8006a82 <UART_SetConfig+0x25a>
 8006a6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a6e:	d811      	bhi.n	8006a94 <UART_SetConfig+0x26c>
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d003      	beq.n	8006a7c <UART_SetConfig+0x254>
 8006a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a78:	d006      	beq.n	8006a88 <UART_SetConfig+0x260>
 8006a7a:	e00b      	b.n	8006a94 <UART_SetConfig+0x26c>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	77fb      	strb	r3, [r7, #31]
 8006a80:	e076      	b.n	8006b70 <UART_SetConfig+0x348>
 8006a82:	2302      	movs	r3, #2
 8006a84:	77fb      	strb	r3, [r7, #31]
 8006a86:	e073      	b.n	8006b70 <UART_SetConfig+0x348>
 8006a88:	2304      	movs	r3, #4
 8006a8a:	77fb      	strb	r3, [r7, #31]
 8006a8c:	e070      	b.n	8006b70 <UART_SetConfig+0x348>
 8006a8e:	2308      	movs	r3, #8
 8006a90:	77fb      	strb	r3, [r7, #31]
 8006a92:	e06d      	b.n	8006b70 <UART_SetConfig+0x348>
 8006a94:	2310      	movs	r3, #16
 8006a96:	77fb      	strb	r3, [r7, #31]
 8006a98:	e06a      	b.n	8006b70 <UART_SetConfig+0x348>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a1b      	ldr	r2, [pc, #108]	; (8006b0c <UART_SetConfig+0x2e4>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d138      	bne.n	8006b16 <UART_SetConfig+0x2ee>
 8006aa4:	4b13      	ldr	r3, [pc, #76]	; (8006af4 <UART_SetConfig+0x2cc>)
 8006aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aaa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006aae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ab2:	d017      	beq.n	8006ae4 <UART_SetConfig+0x2bc>
 8006ab4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ab8:	d82a      	bhi.n	8006b10 <UART_SetConfig+0x2e8>
 8006aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006abe:	d00b      	beq.n	8006ad8 <UART_SetConfig+0x2b0>
 8006ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ac4:	d824      	bhi.n	8006b10 <UART_SetConfig+0x2e8>
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <UART_SetConfig+0x2aa>
 8006aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ace:	d006      	beq.n	8006ade <UART_SetConfig+0x2b6>
 8006ad0:	e01e      	b.n	8006b10 <UART_SetConfig+0x2e8>
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	77fb      	strb	r3, [r7, #31]
 8006ad6:	e04b      	b.n	8006b70 <UART_SetConfig+0x348>
 8006ad8:	2302      	movs	r3, #2
 8006ada:	77fb      	strb	r3, [r7, #31]
 8006adc:	e048      	b.n	8006b70 <UART_SetConfig+0x348>
 8006ade:	2304      	movs	r3, #4
 8006ae0:	77fb      	strb	r3, [r7, #31]
 8006ae2:	e045      	b.n	8006b70 <UART_SetConfig+0x348>
 8006ae4:	2308      	movs	r3, #8
 8006ae6:	77fb      	strb	r3, [r7, #31]
 8006ae8:	e042      	b.n	8006b70 <UART_SetConfig+0x348>
 8006aea:	bf00      	nop
 8006aec:	efff69f3 	.word	0xefff69f3
 8006af0:	40011000 	.word	0x40011000
 8006af4:	40023800 	.word	0x40023800
 8006af8:	40004400 	.word	0x40004400
 8006afc:	40004800 	.word	0x40004800
 8006b00:	40004c00 	.word	0x40004c00
 8006b04:	40005000 	.word	0x40005000
 8006b08:	40011400 	.word	0x40011400
 8006b0c:	40007800 	.word	0x40007800
 8006b10:	2310      	movs	r3, #16
 8006b12:	77fb      	strb	r3, [r7, #31]
 8006b14:	e02c      	b.n	8006b70 <UART_SetConfig+0x348>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a72      	ldr	r2, [pc, #456]	; (8006ce4 <UART_SetConfig+0x4bc>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d125      	bne.n	8006b6c <UART_SetConfig+0x344>
 8006b20:	4b71      	ldr	r3, [pc, #452]	; (8006ce8 <UART_SetConfig+0x4c0>)
 8006b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b26:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006b2a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b2e:	d017      	beq.n	8006b60 <UART_SetConfig+0x338>
 8006b30:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b34:	d817      	bhi.n	8006b66 <UART_SetConfig+0x33e>
 8006b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b3a:	d00b      	beq.n	8006b54 <UART_SetConfig+0x32c>
 8006b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b40:	d811      	bhi.n	8006b66 <UART_SetConfig+0x33e>
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <UART_SetConfig+0x326>
 8006b46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b4a:	d006      	beq.n	8006b5a <UART_SetConfig+0x332>
 8006b4c:	e00b      	b.n	8006b66 <UART_SetConfig+0x33e>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	77fb      	strb	r3, [r7, #31]
 8006b52:	e00d      	b.n	8006b70 <UART_SetConfig+0x348>
 8006b54:	2302      	movs	r3, #2
 8006b56:	77fb      	strb	r3, [r7, #31]
 8006b58:	e00a      	b.n	8006b70 <UART_SetConfig+0x348>
 8006b5a:	2304      	movs	r3, #4
 8006b5c:	77fb      	strb	r3, [r7, #31]
 8006b5e:	e007      	b.n	8006b70 <UART_SetConfig+0x348>
 8006b60:	2308      	movs	r3, #8
 8006b62:	77fb      	strb	r3, [r7, #31]
 8006b64:	e004      	b.n	8006b70 <UART_SetConfig+0x348>
 8006b66:	2310      	movs	r3, #16
 8006b68:	77fb      	strb	r3, [r7, #31]
 8006b6a:	e001      	b.n	8006b70 <UART_SetConfig+0x348>
 8006b6c:	2310      	movs	r3, #16
 8006b6e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	69db      	ldr	r3, [r3, #28]
 8006b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b78:	d15b      	bne.n	8006c32 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006b7a:	7ffb      	ldrb	r3, [r7, #31]
 8006b7c:	2b08      	cmp	r3, #8
 8006b7e:	d828      	bhi.n	8006bd2 <UART_SetConfig+0x3aa>
 8006b80:	a201      	add	r2, pc, #4	; (adr r2, 8006b88 <UART_SetConfig+0x360>)
 8006b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b86:	bf00      	nop
 8006b88:	08006bad 	.word	0x08006bad
 8006b8c:	08006bb5 	.word	0x08006bb5
 8006b90:	08006bbd 	.word	0x08006bbd
 8006b94:	08006bd3 	.word	0x08006bd3
 8006b98:	08006bc3 	.word	0x08006bc3
 8006b9c:	08006bd3 	.word	0x08006bd3
 8006ba0:	08006bd3 	.word	0x08006bd3
 8006ba4:	08006bd3 	.word	0x08006bd3
 8006ba8:	08006bcb 	.word	0x08006bcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bac:	f7fd fb12 	bl	80041d4 <HAL_RCC_GetPCLK1Freq>
 8006bb0:	61b8      	str	r0, [r7, #24]
        break;
 8006bb2:	e013      	b.n	8006bdc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bb4:	f7fd fb22 	bl	80041fc <HAL_RCC_GetPCLK2Freq>
 8006bb8:	61b8      	str	r0, [r7, #24]
        break;
 8006bba:	e00f      	b.n	8006bdc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bbc:	4b4b      	ldr	r3, [pc, #300]	; (8006cec <UART_SetConfig+0x4c4>)
 8006bbe:	61bb      	str	r3, [r7, #24]
        break;
 8006bc0:	e00c      	b.n	8006bdc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bc2:	f7fd f9f5 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8006bc6:	61b8      	str	r0, [r7, #24]
        break;
 8006bc8:	e008      	b.n	8006bdc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bce:	61bb      	str	r3, [r7, #24]
        break;
 8006bd0:	e004      	b.n	8006bdc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	77bb      	strb	r3, [r7, #30]
        break;
 8006bda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d074      	beq.n	8006ccc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	005a      	lsls	r2, r3, #1
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	085b      	lsrs	r3, r3, #1
 8006bec:	441a      	add	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	2b0f      	cmp	r3, #15
 8006bfc:	d916      	bls.n	8006c2c <UART_SetConfig+0x404>
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c04:	d212      	bcs.n	8006c2c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	f023 030f 	bic.w	r3, r3, #15
 8006c0e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	085b      	lsrs	r3, r3, #1
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	f003 0307 	and.w	r3, r3, #7
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	89fb      	ldrh	r3, [r7, #14]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	89fa      	ldrh	r2, [r7, #14]
 8006c28:	60da      	str	r2, [r3, #12]
 8006c2a:	e04f      	b.n	8006ccc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	77bb      	strb	r3, [r7, #30]
 8006c30:	e04c      	b.n	8006ccc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c32:	7ffb      	ldrb	r3, [r7, #31]
 8006c34:	2b08      	cmp	r3, #8
 8006c36:	d828      	bhi.n	8006c8a <UART_SetConfig+0x462>
 8006c38:	a201      	add	r2, pc, #4	; (adr r2, 8006c40 <UART_SetConfig+0x418>)
 8006c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3e:	bf00      	nop
 8006c40:	08006c65 	.word	0x08006c65
 8006c44:	08006c6d 	.word	0x08006c6d
 8006c48:	08006c75 	.word	0x08006c75
 8006c4c:	08006c8b 	.word	0x08006c8b
 8006c50:	08006c7b 	.word	0x08006c7b
 8006c54:	08006c8b 	.word	0x08006c8b
 8006c58:	08006c8b 	.word	0x08006c8b
 8006c5c:	08006c8b 	.word	0x08006c8b
 8006c60:	08006c83 	.word	0x08006c83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c64:	f7fd fab6 	bl	80041d4 <HAL_RCC_GetPCLK1Freq>
 8006c68:	61b8      	str	r0, [r7, #24]
        break;
 8006c6a:	e013      	b.n	8006c94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c6c:	f7fd fac6 	bl	80041fc <HAL_RCC_GetPCLK2Freq>
 8006c70:	61b8      	str	r0, [r7, #24]
        break;
 8006c72:	e00f      	b.n	8006c94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c74:	4b1d      	ldr	r3, [pc, #116]	; (8006cec <UART_SetConfig+0x4c4>)
 8006c76:	61bb      	str	r3, [r7, #24]
        break;
 8006c78:	e00c      	b.n	8006c94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c7a:	f7fd f999 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8006c7e:	61b8      	str	r0, [r7, #24]
        break;
 8006c80:	e008      	b.n	8006c94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c86:	61bb      	str	r3, [r7, #24]
        break;
 8006c88:	e004      	b.n	8006c94 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	77bb      	strb	r3, [r7, #30]
        break;
 8006c92:	bf00      	nop
    }

    if (pclk != 0U)
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d018      	beq.n	8006ccc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	085a      	lsrs	r2, r3, #1
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	441a      	add	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	2b0f      	cmp	r3, #15
 8006cb2:	d909      	bls.n	8006cc8 <UART_SetConfig+0x4a0>
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cba:	d205      	bcs.n	8006cc8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	60da      	str	r2, [r3, #12]
 8006cc6:	e001      	b.n	8006ccc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006cd8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3720      	adds	r7, #32
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	40007c00 	.word	0x40007c00
 8006ce8:	40023800 	.word	0x40023800
 8006cec:	00f42400 	.word	0x00f42400

08006cf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfc:	f003 0301 	and.w	r3, r3, #1
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00a      	beq.n	8006d1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00a      	beq.n	8006d3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	f003 0304 	and.w	r3, r3, #4
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00a      	beq.n	8006d5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d62:	f003 0308 	and.w	r3, r3, #8
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00a      	beq.n	8006d80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d84:	f003 0310 	and.w	r3, r3, #16
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00a      	beq.n	8006da2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da6:	f003 0320 	and.w	r3, r3, #32
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00a      	beq.n	8006dc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d01a      	beq.n	8006e06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dee:	d10a      	bne.n	8006e06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00a      	beq.n	8006e28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	430a      	orrs	r2, r1
 8006e26:	605a      	str	r2, [r3, #4]
  }
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af02      	add	r7, sp, #8
 8006e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e44:	f7fb fa1e 	bl	8002284 <HAL_GetTick>
 8006e48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0308 	and.w	r3, r3, #8
 8006e54:	2b08      	cmp	r3, #8
 8006e56:	d10e      	bne.n	8006e76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f831 	bl	8006ece <UART_WaitOnFlagUntilTimeout>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e027      	b.n	8006ec6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0304 	and.w	r3, r3, #4
 8006e80:	2b04      	cmp	r3, #4
 8006e82:	d10e      	bne.n	8006ea2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f81b 	bl	8006ece <UART_WaitOnFlagUntilTimeout>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e011      	b.n	8006ec6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b09c      	sub	sp, #112	; 0x70
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	60f8      	str	r0, [r7, #12]
 8006ed6:	60b9      	str	r1, [r7, #8]
 8006ed8:	603b      	str	r3, [r7, #0]
 8006eda:	4613      	mov	r3, r2
 8006edc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ede:	e0a7      	b.n	8007030 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee6:	f000 80a3 	beq.w	8007030 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eea:	f7fb f9cb 	bl	8002284 <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d302      	bcc.n	8006f00 <UART_WaitOnFlagUntilTimeout+0x32>
 8006efa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d13f      	bne.n	8006f80 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f08:	e853 3f00 	ldrex	r3, [r3]
 8006f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f14:	667b      	str	r3, [r7, #100]	; 0x64
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f20:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f26:	e841 2300 	strex	r3, r2, [r1]
 8006f2a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1e6      	bne.n	8006f00 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	3308      	adds	r3, #8
 8006f38:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3c:	e853 3f00 	ldrex	r3, [r3]
 8006f40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f44:	f023 0301 	bic.w	r3, r3, #1
 8006f48:	663b      	str	r3, [r7, #96]	; 0x60
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	3308      	adds	r3, #8
 8006f50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f52:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f5a:	e841 2300 	strex	r3, r2, [r1]
 8006f5e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1e5      	bne.n	8006f32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e068      	b.n	8007052 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0304 	and.w	r3, r3, #4
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d050      	beq.n	8007030 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f9c:	d148      	bne.n	8007030 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fa6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb0:	e853 3f00 	ldrex	r3, [r3]
 8006fb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8006fc8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fce:	e841 2300 	strex	r3, r2, [r1]
 8006fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1e6      	bne.n	8006fa8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	3308      	adds	r3, #8
 8006fe0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	e853 3f00 	ldrex	r3, [r3]
 8006fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	f023 0301 	bic.w	r3, r3, #1
 8006ff0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3308      	adds	r3, #8
 8006ff8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ffa:	623a      	str	r2, [r7, #32]
 8006ffc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffe:	69f9      	ldr	r1, [r7, #28]
 8007000:	6a3a      	ldr	r2, [r7, #32]
 8007002:	e841 2300 	strex	r3, r2, [r1]
 8007006:	61bb      	str	r3, [r7, #24]
   return(result);
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1e5      	bne.n	8006fda <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2220      	movs	r2, #32
 8007012:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2220      	movs	r2, #32
 8007018:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2220      	movs	r2, #32
 8007020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e010      	b.n	8007052 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	69da      	ldr	r2, [r3, #28]
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	4013      	ands	r3, r2
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	429a      	cmp	r2, r3
 800703e:	bf0c      	ite	eq
 8007040:	2301      	moveq	r3, #1
 8007042:	2300      	movne	r3, #0
 8007044:	b2db      	uxtb	r3, r3
 8007046:	461a      	mov	r2, r3
 8007048:	79fb      	ldrb	r3, [r7, #7]
 800704a:	429a      	cmp	r2, r3
 800704c:	f43f af48 	beq.w	8006ee0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3770      	adds	r7, #112	; 0x70
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
	...

0800705c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800705c:	b480      	push	{r7}
 800705e:	b097      	sub	sp, #92	; 0x5c
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	4613      	mov	r3, r2
 8007068:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	88fa      	ldrh	r2, [r7, #6]
 8007074:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	88fa      	ldrh	r2, [r7, #6]
 800707c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800708e:	d10e      	bne.n	80070ae <UART_Start_Receive_IT+0x52>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d105      	bne.n	80070a4 <UART_Start_Receive_IT+0x48>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800709e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070a2:	e02d      	b.n	8007100 <UART_Start_Receive_IT+0xa4>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	22ff      	movs	r2, #255	; 0xff
 80070a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070ac:	e028      	b.n	8007100 <UART_Start_Receive_IT+0xa4>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10d      	bne.n	80070d2 <UART_Start_Receive_IT+0x76>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d104      	bne.n	80070c8 <UART_Start_Receive_IT+0x6c>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	22ff      	movs	r2, #255	; 0xff
 80070c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070c6:	e01b      	b.n	8007100 <UART_Start_Receive_IT+0xa4>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	227f      	movs	r2, #127	; 0x7f
 80070cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070d0:	e016      	b.n	8007100 <UART_Start_Receive_IT+0xa4>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070da:	d10d      	bne.n	80070f8 <UART_Start_Receive_IT+0x9c>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d104      	bne.n	80070ee <UART_Start_Receive_IT+0x92>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	227f      	movs	r2, #127	; 0x7f
 80070e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070ec:	e008      	b.n	8007100 <UART_Start_Receive_IT+0xa4>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	223f      	movs	r2, #63	; 0x3f
 80070f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070f6:	e003      	b.n	8007100 <UART_Start_Receive_IT+0xa4>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2222      	movs	r2, #34	; 0x22
 800710c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3308      	adds	r3, #8
 8007116:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800711a:	e853 3f00 	ldrex	r3, [r3]
 800711e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007122:	f043 0301 	orr.w	r3, r3, #1
 8007126:	657b      	str	r3, [r7, #84]	; 0x54
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	3308      	adds	r3, #8
 800712e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007130:	64ba      	str	r2, [r7, #72]	; 0x48
 8007132:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007134:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007136:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007138:	e841 2300 	strex	r3, r2, [r1]
 800713c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800713e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1e5      	bne.n	8007110 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800714c:	d107      	bne.n	800715e <UART_Start_Receive_IT+0x102>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d103      	bne.n	800715e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	4a21      	ldr	r2, [pc, #132]	; (80071e0 <UART_Start_Receive_IT+0x184>)
 800715a:	669a      	str	r2, [r3, #104]	; 0x68
 800715c:	e002      	b.n	8007164 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	4a20      	ldr	r2, [pc, #128]	; (80071e4 <UART_Start_Receive_IT+0x188>)
 8007162:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d019      	beq.n	80071a0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007174:	e853 3f00 	ldrex	r3, [r3]
 8007178:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007180:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	461a      	mov	r2, r3
 8007188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800718a:	637b      	str	r3, [r7, #52]	; 0x34
 800718c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007190:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007192:	e841 2300 	strex	r3, r2, [r1]
 8007196:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1e6      	bne.n	800716c <UART_Start_Receive_IT+0x110>
 800719e:	e018      	b.n	80071d2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	e853 3f00 	ldrex	r3, [r3]
 80071ac:	613b      	str	r3, [r7, #16]
   return(result);
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f043 0320 	orr.w	r3, r3, #32
 80071b4:	653b      	str	r3, [r7, #80]	; 0x50
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	461a      	mov	r2, r3
 80071bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071be:	623b      	str	r3, [r7, #32]
 80071c0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c2:	69f9      	ldr	r1, [r7, #28]
 80071c4:	6a3a      	ldr	r2, [r7, #32]
 80071c6:	e841 2300 	strex	r3, r2, [r1]
 80071ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1e6      	bne.n	80071a0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	375c      	adds	r7, #92	; 0x5c
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr
 80071e0:	0800760d 	.word	0x0800760d
 80071e4:	080074a7 	.word	0x080074a7

080071e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b095      	sub	sp, #84	; 0x54
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f8:	e853 3f00 	ldrex	r3, [r3]
 80071fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007204:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800720e:	643b      	str	r3, [r7, #64]	; 0x40
 8007210:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007212:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007214:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007216:	e841 2300 	strex	r3, r2, [r1]
 800721a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800721c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1e6      	bne.n	80071f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3308      	adds	r3, #8
 8007228:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	e853 3f00 	ldrex	r3, [r3]
 8007230:	61fb      	str	r3, [r7, #28]
   return(result);
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	f023 0301 	bic.w	r3, r3, #1
 8007238:	64bb      	str	r3, [r7, #72]	; 0x48
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	3308      	adds	r3, #8
 8007240:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007242:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007244:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007246:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800724a:	e841 2300 	strex	r3, r2, [r1]
 800724e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1e5      	bne.n	8007222 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800725a:	2b01      	cmp	r3, #1
 800725c:	d118      	bne.n	8007290 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	e853 3f00 	ldrex	r3, [r3]
 800726a:	60bb      	str	r3, [r7, #8]
   return(result);
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f023 0310 	bic.w	r3, r3, #16
 8007272:	647b      	str	r3, [r7, #68]	; 0x44
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	461a      	mov	r2, r3
 800727a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800727c:	61bb      	str	r3, [r7, #24]
 800727e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007280:	6979      	ldr	r1, [r7, #20]
 8007282:	69ba      	ldr	r2, [r7, #24]
 8007284:	e841 2300 	strex	r3, r2, [r1]
 8007288:	613b      	str	r3, [r7, #16]
   return(result);
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1e6      	bne.n	800725e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2220      	movs	r2, #32
 8007294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80072a4:	bf00      	nop
 80072a6:	3754      	adds	r7, #84	; 0x54
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f7ff fa8a 	bl	80067e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072d4:	bf00      	nop
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80072dc:	b480      	push	{r7}
 80072de:	b08f      	sub	sp, #60	; 0x3c
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072e8:	2b21      	cmp	r3, #33	; 0x21
 80072ea:	d14c      	bne.n	8007386 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d132      	bne.n	800735e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	e853 3f00 	ldrex	r3, [r3]
 8007304:	61fb      	str	r3, [r7, #28]
   return(result);
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800730c:	637b      	str	r3, [r7, #52]	; 0x34
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	461a      	mov	r2, r3
 8007314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007318:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800731c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800731e:	e841 2300 	strex	r3, r2, [r1]
 8007322:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1e6      	bne.n	80072f8 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	e853 3f00 	ldrex	r3, [r3]
 8007336:	60bb      	str	r3, [r7, #8]
   return(result);
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800733e:	633b      	str	r3, [r7, #48]	; 0x30
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	461a      	mov	r2, r3
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	61bb      	str	r3, [r7, #24]
 800734a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734c:	6979      	ldr	r1, [r7, #20]
 800734e:	69ba      	ldr	r2, [r7, #24]
 8007350:	e841 2300 	strex	r3, r2, [r1]
 8007354:	613b      	str	r3, [r7, #16]
   return(result);
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1e6      	bne.n	800732a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800735c:	e013      	b.n	8007386 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007362:	781a      	ldrb	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800737a:	b29b      	uxth	r3, r3
 800737c:	3b01      	subs	r3, #1
 800737e:	b29a      	uxth	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007386:	bf00      	nop
 8007388:	373c      	adds	r7, #60	; 0x3c
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007392:	b480      	push	{r7}
 8007394:	b091      	sub	sp, #68	; 0x44
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800739e:	2b21      	cmp	r3, #33	; 0x21
 80073a0:	d151      	bne.n	8007446 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d132      	bne.n	8007414 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	e853 3f00 	ldrex	r3, [r3]
 80073ba:	623b      	str	r3, [r7, #32]
   return(result);
 80073bc:	6a3b      	ldr	r3, [r7, #32]
 80073be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	461a      	mov	r2, r3
 80073ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073cc:	633b      	str	r3, [r7, #48]	; 0x30
 80073ce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073d4:	e841 2300 	strex	r3, r2, [r1]
 80073d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1e6      	bne.n	80073ae <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	e853 3f00 	ldrex	r3, [r3]
 80073ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073f4:	637b      	str	r3, [r7, #52]	; 0x34
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	461a      	mov	r2, r3
 80073fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fe:	61fb      	str	r3, [r7, #28]
 8007400:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007402:	69b9      	ldr	r1, [r7, #24]
 8007404:	69fa      	ldr	r2, [r7, #28]
 8007406:	e841 2300 	strex	r3, r2, [r1]
 800740a:	617b      	str	r3, [r7, #20]
   return(result);
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1e6      	bne.n	80073e0 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007412:	e018      	b.n	8007446 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007418:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800741a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	461a      	mov	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007428:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800742e:	1c9a      	adds	r2, r3, #2
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800743a:	b29b      	uxth	r3, r3
 800743c:	3b01      	subs	r3, #1
 800743e:	b29a      	uxth	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007446:	bf00      	nop
 8007448:	3744      	adds	r7, #68	; 0x44
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b088      	sub	sp, #32
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	e853 3f00 	ldrex	r3, [r3]
 8007466:	60bb      	str	r3, [r7, #8]
   return(result);
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800746e:	61fb      	str	r3, [r7, #28]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	461a      	mov	r2, r3
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	61bb      	str	r3, [r7, #24]
 800747a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747c:	6979      	ldr	r1, [r7, #20]
 800747e:	69ba      	ldr	r2, [r7, #24]
 8007480:	e841 2300 	strex	r3, r2, [r1]
 8007484:	613b      	str	r3, [r7, #16]
   return(result);
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e6      	bne.n	800745a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2220      	movs	r2, #32
 8007490:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7ff f99b 	bl	80067d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800749e:	bf00      	nop
 80074a0:	3720      	adds	r7, #32
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b096      	sub	sp, #88	; 0x58
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074be:	2b22      	cmp	r3, #34	; 0x22
 80074c0:	f040 8098 	bne.w	80075f4 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ca:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80074ce:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80074d2:	b2d9      	uxtb	r1, r3
 80074d4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074de:	400a      	ands	r2, r1
 80074e0:	b2d2      	uxtb	r2, r2
 80074e2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e8:	1c5a      	adds	r2, r3, #1
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	3b01      	subs	r3, #1
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007506:	b29b      	uxth	r3, r3
 8007508:	2b00      	cmp	r3, #0
 800750a:	d17b      	bne.n	8007604 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800751a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800751c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007520:	653b      	str	r3, [r7, #80]	; 0x50
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	461a      	mov	r2, r3
 8007528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800752a:	647b      	str	r3, [r7, #68]	; 0x44
 800752c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007530:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e6      	bne.n	800750c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3308      	adds	r3, #8
 8007544:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	623b      	str	r3, [r7, #32]
   return(result);
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	f023 0301 	bic.w	r3, r3, #1
 8007554:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	3308      	adds	r3, #8
 800755c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800755e:	633a      	str	r2, [r7, #48]	; 0x30
 8007560:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007562:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007566:	e841 2300 	strex	r3, r2, [r1]
 800756a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800756c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1e5      	bne.n	800753e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2220      	movs	r2, #32
 8007576:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800758a:	2b01      	cmp	r3, #1
 800758c:	d12e      	bne.n	80075ec <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	e853 3f00 	ldrex	r3, [r3]
 80075a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f023 0310 	bic.w	r3, r3, #16
 80075a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075b2:	61fb      	str	r3, [r7, #28]
 80075b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b6:	69b9      	ldr	r1, [r7, #24]
 80075b8:	69fa      	ldr	r2, [r7, #28]
 80075ba:	e841 2300 	strex	r3, r2, [r1]
 80075be:	617b      	str	r3, [r7, #20]
   return(result);
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1e6      	bne.n	8007594 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	f003 0310 	and.w	r3, r3, #16
 80075d0:	2b10      	cmp	r3, #16
 80075d2:	d103      	bne.n	80075dc <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2210      	movs	r2, #16
 80075da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7ff f909 	bl	80067fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80075ea:	e00b      	b.n	8007604 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f7f9 fa65 	bl	8000abc <HAL_UART_RxCpltCallback>
}
 80075f2:	e007      	b.n	8007604 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	699a      	ldr	r2, [r3, #24]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f042 0208 	orr.w	r2, r2, #8
 8007602:	619a      	str	r2, [r3, #24]
}
 8007604:	bf00      	nop
 8007606:	3758      	adds	r7, #88	; 0x58
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b096      	sub	sp, #88	; 0x58
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800761a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007624:	2b22      	cmp	r3, #34	; 0x22
 8007626:	f040 8098 	bne.w	800775a <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007630:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007638:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800763a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800763e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007642:	4013      	ands	r3, r2
 8007644:	b29a      	uxth	r2, r3
 8007646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007648:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764e:	1c9a      	adds	r2, r3, #2
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800765a:	b29b      	uxth	r3, r3
 800765c:	3b01      	subs	r3, #1
 800765e:	b29a      	uxth	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800766c:	b29b      	uxth	r3, r3
 800766e:	2b00      	cmp	r3, #0
 8007670:	d17b      	bne.n	800776a <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800767a:	e853 3f00 	ldrex	r3, [r3]
 800767e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007682:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	461a      	mov	r2, r3
 800768e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007690:	643b      	str	r3, [r7, #64]	; 0x40
 8007692:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007694:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007696:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007698:	e841 2300 	strex	r3, r2, [r1]
 800769c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800769e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1e6      	bne.n	8007672 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3308      	adds	r3, #8
 80076aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	e853 3f00 	ldrex	r3, [r3]
 80076b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	f023 0301 	bic.w	r3, r3, #1
 80076ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3308      	adds	r3, #8
 80076c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076cc:	e841 2300 	strex	r3, r2, [r1]
 80076d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d1e5      	bne.n	80076a4 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2220      	movs	r2, #32
 80076dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d12e      	bne.n	8007752 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	e853 3f00 	ldrex	r3, [r3]
 8007706:	60bb      	str	r3, [r7, #8]
   return(result);
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	f023 0310 	bic.w	r3, r3, #16
 800770e:	647b      	str	r3, [r7, #68]	; 0x44
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	461a      	mov	r2, r3
 8007716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007718:	61bb      	str	r3, [r7, #24]
 800771a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771c:	6979      	ldr	r1, [r7, #20]
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	e841 2300 	strex	r3, r2, [r1]
 8007724:	613b      	str	r3, [r7, #16]
   return(result);
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1e6      	bne.n	80076fa <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	69db      	ldr	r3, [r3, #28]
 8007732:	f003 0310 	and.w	r3, r3, #16
 8007736:	2b10      	cmp	r3, #16
 8007738:	d103      	bne.n	8007742 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2210      	movs	r2, #16
 8007740:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007748:	4619      	mov	r1, r3
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7ff f856 	bl	80067fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007750:	e00b      	b.n	800776a <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7f9 f9b2 	bl	8000abc <HAL_UART_RxCpltCallback>
}
 8007758:	e007      	b.n	800776a <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	699a      	ldr	r2, [r3, #24]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f042 0208 	orr.w	r2, r2, #8
 8007768:	619a      	str	r2, [r3, #24]
}
 800776a:	bf00      	nop
 800776c:	3758      	adds	r7, #88	; 0x58
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007774:	b084      	sub	sp, #16
 8007776:	b580      	push	{r7, lr}
 8007778:	b084      	sub	sp, #16
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	f107 001c 	add.w	r0, r7, #28
 8007782:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	2b01      	cmp	r3, #1
 800778a:	d120      	bne.n	80077ce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007790:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	4b20      	ldr	r3, [pc, #128]	; (8007820 <USB_CoreInit+0xac>)
 800779e:	4013      	ands	r3, r2
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80077b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d105      	bne.n	80077c2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fa96 	bl	8007cf4 <USB_CoreReset>
 80077c8:	4603      	mov	r3, r0
 80077ca:	73fb      	strb	r3, [r7, #15]
 80077cc:	e010      	b.n	80077f0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fa8a 	bl	8007cf4 <USB_CoreReset>
 80077e0:	4603      	mov	r3, r0
 80077e2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80077f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d10b      	bne.n	800780e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f043 0206 	orr.w	r2, r3, #6
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f043 0220 	orr.w	r2, r3, #32
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800780e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800781a:	b004      	add	sp, #16
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	ffbdffbf 	.word	0xffbdffbf

08007824 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f023 0201 	bic.w	r2, r3, #1
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b084      	sub	sp, #16
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	460b      	mov	r3, r1
 8007850:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007852:	2300      	movs	r3, #0
 8007854:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007862:	78fb      	ldrb	r3, [r7, #3]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d115      	bne.n	8007894 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007874:	2001      	movs	r0, #1
 8007876:	f7fa fd11 	bl	800229c <HAL_Delay>
      ms++;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	3301      	adds	r3, #1
 800787e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fa29 	bl	8007cd8 <USB_GetMode>
 8007886:	4603      	mov	r3, r0
 8007888:	2b01      	cmp	r3, #1
 800788a:	d01e      	beq.n	80078ca <USB_SetCurrentMode+0x84>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2b31      	cmp	r3, #49	; 0x31
 8007890:	d9f0      	bls.n	8007874 <USB_SetCurrentMode+0x2e>
 8007892:	e01a      	b.n	80078ca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007894:	78fb      	ldrb	r3, [r7, #3]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d115      	bne.n	80078c6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80078a6:	2001      	movs	r0, #1
 80078a8:	f7fa fcf8 	bl	800229c <HAL_Delay>
      ms++;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	3301      	adds	r3, #1
 80078b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fa10 	bl	8007cd8 <USB_GetMode>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d005      	beq.n	80078ca <USB_SetCurrentMode+0x84>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2b31      	cmp	r3, #49	; 0x31
 80078c2:	d9f0      	bls.n	80078a6 <USB_SetCurrentMode+0x60>
 80078c4:	e001      	b.n	80078ca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e005      	b.n	80078d6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2b32      	cmp	r3, #50	; 0x32
 80078ce:	d101      	bne.n	80078d4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e000      	b.n	80078d6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
	...

080078e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078e0:	b084      	sub	sp, #16
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b086      	sub	sp, #24
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
 80078ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80078ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80078fa:	2300      	movs	r3, #0
 80078fc:	613b      	str	r3, [r7, #16]
 80078fe:	e009      	b.n	8007914 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	3340      	adds	r3, #64	; 0x40
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4413      	add	r3, r2
 800790a:	2200      	movs	r2, #0
 800790c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	3301      	adds	r3, #1
 8007912:	613b      	str	r3, [r7, #16]
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	2b0e      	cmp	r3, #14
 8007918:	d9f2      	bls.n	8007900 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800791a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800791c:	2b00      	cmp	r3, #0
 800791e:	d11c      	bne.n	800795a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800792e:	f043 0302 	orr.w	r3, r3, #2
 8007932:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007938:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	e005      	b.n	8007966 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800796c:	461a      	mov	r2, r3
 800796e:	2300      	movs	r3, #0
 8007970:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007978:	4619      	mov	r1, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007980:	461a      	mov	r2, r3
 8007982:	680b      	ldr	r3, [r1, #0]
 8007984:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007988:	2b01      	cmp	r3, #1
 800798a:	d10c      	bne.n	80079a6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800798c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798e:	2b00      	cmp	r3, #0
 8007990:	d104      	bne.n	800799c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007992:	2100      	movs	r1, #0
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f965 	bl	8007c64 <USB_SetDevSpeed>
 800799a:	e008      	b.n	80079ae <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800799c:	2101      	movs	r1, #1
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f960 	bl	8007c64 <USB_SetDevSpeed>
 80079a4:	e003      	b.n	80079ae <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80079a6:	2103      	movs	r1, #3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f95b 	bl	8007c64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80079ae:	2110      	movs	r1, #16
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f8f3 	bl	8007b9c <USB_FlushTxFifo>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d001      	beq.n	80079c0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f91f 	bl	8007c04 <USB_FlushRxFifo>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d001      	beq.n	80079d0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d6:	461a      	mov	r2, r3
 80079d8:	2300      	movs	r3, #0
 80079da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e2:	461a      	mov	r2, r3
 80079e4:	2300      	movs	r3, #0
 80079e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ee:	461a      	mov	r2, r3
 80079f0:	2300      	movs	r3, #0
 80079f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079f4:	2300      	movs	r3, #0
 80079f6:	613b      	str	r3, [r7, #16]
 80079f8:	e043      	b.n	8007a82 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	015a      	lsls	r2, r3, #5
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a10:	d118      	bne.n	8007a44 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10a      	bne.n	8007a2e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	015a      	lsls	r2, r3, #5
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a24:	461a      	mov	r2, r3
 8007a26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a2a:	6013      	str	r3, [r2, #0]
 8007a2c:	e013      	b.n	8007a56 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	015a      	lsls	r2, r3, #5
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	4413      	add	r3, r2
 8007a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a40:	6013      	str	r3, [r2, #0]
 8007a42:	e008      	b.n	8007a56 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a50:	461a      	mov	r2, r3
 8007a52:	2300      	movs	r3, #0
 8007a54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	015a      	lsls	r2, r3, #5
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a62:	461a      	mov	r2, r3
 8007a64:	2300      	movs	r3, #0
 8007a66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	015a      	lsls	r2, r3, #5
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4413      	add	r3, r2
 8007a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a74:	461a      	mov	r2, r3
 8007a76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	613b      	str	r3, [r7, #16]
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d3b7      	bcc.n	80079fa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	613b      	str	r3, [r7, #16]
 8007a8e:	e043      	b.n	8007b18 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	015a      	lsls	r2, r3, #5
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	4413      	add	r3, r2
 8007a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007aa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007aa6:	d118      	bne.n	8007ada <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10a      	bne.n	8007ac4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	015a      	lsls	r2, r3, #5
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aba:	461a      	mov	r2, r3
 8007abc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ac0:	6013      	str	r3, [r2, #0]
 8007ac2:	e013      	b.n	8007aec <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	015a      	lsls	r2, r3, #5
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ad6:	6013      	str	r3, [r2, #0]
 8007ad8:	e008      	b.n	8007aec <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	015a      	lsls	r2, r3, #5
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	2300      	movs	r3, #0
 8007aea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af8:	461a      	mov	r2, r3
 8007afa:	2300      	movs	r3, #0
 8007afc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	015a      	lsls	r2, r3, #5
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	4413      	add	r3, r2
 8007b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	3301      	adds	r3, #1
 8007b16:	613b      	str	r3, [r7, #16]
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	693a      	ldr	r2, [r7, #16]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d3b7      	bcc.n	8007a90 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b32:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007b40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d105      	bne.n	8007b54 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	f043 0210 	orr.w	r2, r3, #16
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	699a      	ldr	r2, [r3, #24]
 8007b58:	4b0e      	ldr	r3, [pc, #56]	; (8007b94 <USB_DevInit+0x2b4>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d005      	beq.n	8007b72 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	f043 0208 	orr.w	r2, r3, #8
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d105      	bne.n	8007b84 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	699a      	ldr	r2, [r3, #24]
 8007b7c:	4b06      	ldr	r3, [pc, #24]	; (8007b98 <USB_DevInit+0x2b8>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3718      	adds	r7, #24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b90:	b004      	add	sp, #16
 8007b92:	4770      	bx	lr
 8007b94:	803c3800 	.word	0x803c3800
 8007b98:	40000004 	.word	0x40000004

08007b9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3301      	adds	r3, #1
 8007bae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4a13      	ldr	r2, [pc, #76]	; (8007c00 <USB_FlushTxFifo+0x64>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d901      	bls.n	8007bbc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e01b      	b.n	8007bf4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	daf2      	bge.n	8007baa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	019b      	lsls	r3, r3, #6
 8007bcc:	f043 0220 	orr.w	r2, r3, #32
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	4a08      	ldr	r2, [pc, #32]	; (8007c00 <USB_FlushTxFifo+0x64>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d901      	bls.n	8007be6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e006      	b.n	8007bf4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	f003 0320 	and.w	r3, r3, #32
 8007bee:	2b20      	cmp	r3, #32
 8007bf0:	d0f0      	beq.n	8007bd4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr
 8007c00:	00030d40 	.word	0x00030d40

08007c04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	3301      	adds	r3, #1
 8007c14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	4a11      	ldr	r2, [pc, #68]	; (8007c60 <USB_FlushRxFifo+0x5c>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d901      	bls.n	8007c22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e018      	b.n	8007c54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	daf2      	bge.n	8007c10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2210      	movs	r2, #16
 8007c32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	3301      	adds	r3, #1
 8007c38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	4a08      	ldr	r2, [pc, #32]	; (8007c60 <USB_FlushRxFifo+0x5c>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d901      	bls.n	8007c46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c42:	2303      	movs	r3, #3
 8007c44:	e006      	b.n	8007c54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	f003 0310 	and.w	r3, r3, #16
 8007c4e:	2b10      	cmp	r3, #16
 8007c50:	d0f0      	beq.n	8007c34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr
 8007c60:	00030d40 	.word	0x00030d40

08007c64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	78fb      	ldrb	r3, [r7, #3]
 8007c7e:	68f9      	ldr	r1, [r7, #12]
 8007c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c84:	4313      	orrs	r3, r2
 8007c86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b085      	sub	sp, #20
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007cb0:	f023 0303 	bic.w	r3, r3, #3
 8007cb4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cc4:	f043 0302 	orr.w	r3, r3, #2
 8007cc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3714      	adds	r7, #20
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	695b      	ldr	r3, [r3, #20]
 8007ce4:	f003 0301 	and.w	r3, r3, #1
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	3301      	adds	r3, #1
 8007d04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	4a13      	ldr	r2, [pc, #76]	; (8007d58 <USB_CoreReset+0x64>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d901      	bls.n	8007d12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e01b      	b.n	8007d4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	daf2      	bge.n	8007d00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	f043 0201 	orr.w	r2, r3, #1
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4a09      	ldr	r2, [pc, #36]	; (8007d58 <USB_CoreReset+0x64>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d901      	bls.n	8007d3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e006      	b.n	8007d4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d0f0      	beq.n	8007d2a <USB_CoreReset+0x36>

  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	00030d40 	.word	0x00030d40

08007d5c <atoi>:
 8007d5c:	220a      	movs	r2, #10
 8007d5e:	2100      	movs	r1, #0
 8007d60:	f000 bd4a 	b.w	80087f8 <strtol>

08007d64 <__errno>:
 8007d64:	4b01      	ldr	r3, [pc, #4]	; (8007d6c <__errno+0x8>)
 8007d66:	6818      	ldr	r0, [r3, #0]
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	200003e8 	.word	0x200003e8

08007d70 <__libc_init_array>:
 8007d70:	b570      	push	{r4, r5, r6, lr}
 8007d72:	4d0d      	ldr	r5, [pc, #52]	; (8007da8 <__libc_init_array+0x38>)
 8007d74:	4c0d      	ldr	r4, [pc, #52]	; (8007dac <__libc_init_array+0x3c>)
 8007d76:	1b64      	subs	r4, r4, r5
 8007d78:	10a4      	asrs	r4, r4, #2
 8007d7a:	2600      	movs	r6, #0
 8007d7c:	42a6      	cmp	r6, r4
 8007d7e:	d109      	bne.n	8007d94 <__libc_init_array+0x24>
 8007d80:	4d0b      	ldr	r5, [pc, #44]	; (8007db0 <__libc_init_array+0x40>)
 8007d82:	4c0c      	ldr	r4, [pc, #48]	; (8007db4 <__libc_init_array+0x44>)
 8007d84:	f002 ff1c 	bl	800abc0 <_init>
 8007d88:	1b64      	subs	r4, r4, r5
 8007d8a:	10a4      	asrs	r4, r4, #2
 8007d8c:	2600      	movs	r6, #0
 8007d8e:	42a6      	cmp	r6, r4
 8007d90:	d105      	bne.n	8007d9e <__libc_init_array+0x2e>
 8007d92:	bd70      	pop	{r4, r5, r6, pc}
 8007d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d98:	4798      	blx	r3
 8007d9a:	3601      	adds	r6, #1
 8007d9c:	e7ee      	b.n	8007d7c <__libc_init_array+0xc>
 8007d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007da2:	4798      	blx	r3
 8007da4:	3601      	adds	r6, #1
 8007da6:	e7f2      	b.n	8007d8e <__libc_init_array+0x1e>
 8007da8:	0800b094 	.word	0x0800b094
 8007dac:	0800b094 	.word	0x0800b094
 8007db0:	0800b094 	.word	0x0800b094
 8007db4:	0800b098 	.word	0x0800b098

08007db8 <memset>:
 8007db8:	4402      	add	r2, r0
 8007dba:	4603      	mov	r3, r0
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d100      	bne.n	8007dc2 <memset+0xa>
 8007dc0:	4770      	bx	lr
 8007dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8007dc6:	e7f9      	b.n	8007dbc <memset+0x4>

08007dc8 <__cvt>:
 8007dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dca:	ed2d 8b02 	vpush	{d8}
 8007dce:	eeb0 8b40 	vmov.f64	d8, d0
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	4617      	mov	r7, r2
 8007dd6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007dd8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007dda:	ee18 2a90 	vmov	r2, s17
 8007dde:	f025 0520 	bic.w	r5, r5, #32
 8007de2:	2a00      	cmp	r2, #0
 8007de4:	bfb6      	itet	lt
 8007de6:	222d      	movlt	r2, #45	; 0x2d
 8007de8:	2200      	movge	r2, #0
 8007dea:	eeb1 8b40 	vneglt.f64	d8, d0
 8007dee:	2d46      	cmp	r5, #70	; 0x46
 8007df0:	460c      	mov	r4, r1
 8007df2:	701a      	strb	r2, [r3, #0]
 8007df4:	d004      	beq.n	8007e00 <__cvt+0x38>
 8007df6:	2d45      	cmp	r5, #69	; 0x45
 8007df8:	d100      	bne.n	8007dfc <__cvt+0x34>
 8007dfa:	3401      	adds	r4, #1
 8007dfc:	2102      	movs	r1, #2
 8007dfe:	e000      	b.n	8007e02 <__cvt+0x3a>
 8007e00:	2103      	movs	r1, #3
 8007e02:	ab03      	add	r3, sp, #12
 8007e04:	9301      	str	r3, [sp, #4]
 8007e06:	ab02      	add	r3, sp, #8
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	4622      	mov	r2, r4
 8007e0c:	4633      	mov	r3, r6
 8007e0e:	eeb0 0b48 	vmov.f64	d0, d8
 8007e12:	f000 fd89 	bl	8008928 <_dtoa_r>
 8007e16:	2d47      	cmp	r5, #71	; 0x47
 8007e18:	d101      	bne.n	8007e1e <__cvt+0x56>
 8007e1a:	07fb      	lsls	r3, r7, #31
 8007e1c:	d51a      	bpl.n	8007e54 <__cvt+0x8c>
 8007e1e:	2d46      	cmp	r5, #70	; 0x46
 8007e20:	eb00 0204 	add.w	r2, r0, r4
 8007e24:	d10c      	bne.n	8007e40 <__cvt+0x78>
 8007e26:	7803      	ldrb	r3, [r0, #0]
 8007e28:	2b30      	cmp	r3, #48	; 0x30
 8007e2a:	d107      	bne.n	8007e3c <__cvt+0x74>
 8007e2c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e34:	bf1c      	itt	ne
 8007e36:	f1c4 0401 	rsbne	r4, r4, #1
 8007e3a:	6034      	strne	r4, [r6, #0]
 8007e3c:	6833      	ldr	r3, [r6, #0]
 8007e3e:	441a      	add	r2, r3
 8007e40:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e48:	bf08      	it	eq
 8007e4a:	9203      	streq	r2, [sp, #12]
 8007e4c:	2130      	movs	r1, #48	; 0x30
 8007e4e:	9b03      	ldr	r3, [sp, #12]
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d307      	bcc.n	8007e64 <__cvt+0x9c>
 8007e54:	9b03      	ldr	r3, [sp, #12]
 8007e56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e58:	1a1b      	subs	r3, r3, r0
 8007e5a:	6013      	str	r3, [r2, #0]
 8007e5c:	b005      	add	sp, #20
 8007e5e:	ecbd 8b02 	vpop	{d8}
 8007e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e64:	1c5c      	adds	r4, r3, #1
 8007e66:	9403      	str	r4, [sp, #12]
 8007e68:	7019      	strb	r1, [r3, #0]
 8007e6a:	e7f0      	b.n	8007e4e <__cvt+0x86>

08007e6c <__exponent>:
 8007e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2900      	cmp	r1, #0
 8007e72:	bfb8      	it	lt
 8007e74:	4249      	neglt	r1, r1
 8007e76:	f803 2b02 	strb.w	r2, [r3], #2
 8007e7a:	bfb4      	ite	lt
 8007e7c:	222d      	movlt	r2, #45	; 0x2d
 8007e7e:	222b      	movge	r2, #43	; 0x2b
 8007e80:	2909      	cmp	r1, #9
 8007e82:	7042      	strb	r2, [r0, #1]
 8007e84:	dd2a      	ble.n	8007edc <__exponent+0x70>
 8007e86:	f10d 0407 	add.w	r4, sp, #7
 8007e8a:	46a4      	mov	ip, r4
 8007e8c:	270a      	movs	r7, #10
 8007e8e:	46a6      	mov	lr, r4
 8007e90:	460a      	mov	r2, r1
 8007e92:	fb91 f6f7 	sdiv	r6, r1, r7
 8007e96:	fb07 1516 	mls	r5, r7, r6, r1
 8007e9a:	3530      	adds	r5, #48	; 0x30
 8007e9c:	2a63      	cmp	r2, #99	; 0x63
 8007e9e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007ea2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007ea6:	4631      	mov	r1, r6
 8007ea8:	dcf1      	bgt.n	8007e8e <__exponent+0x22>
 8007eaa:	3130      	adds	r1, #48	; 0x30
 8007eac:	f1ae 0502 	sub.w	r5, lr, #2
 8007eb0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007eb4:	1c44      	adds	r4, r0, #1
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	4561      	cmp	r1, ip
 8007eba:	d30a      	bcc.n	8007ed2 <__exponent+0x66>
 8007ebc:	f10d 0209 	add.w	r2, sp, #9
 8007ec0:	eba2 020e 	sub.w	r2, r2, lr
 8007ec4:	4565      	cmp	r5, ip
 8007ec6:	bf88      	it	hi
 8007ec8:	2200      	movhi	r2, #0
 8007eca:	4413      	add	r3, r2
 8007ecc:	1a18      	subs	r0, r3, r0
 8007ece:	b003      	add	sp, #12
 8007ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ed2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ed6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007eda:	e7ed      	b.n	8007eb8 <__exponent+0x4c>
 8007edc:	2330      	movs	r3, #48	; 0x30
 8007ede:	3130      	adds	r1, #48	; 0x30
 8007ee0:	7083      	strb	r3, [r0, #2]
 8007ee2:	70c1      	strb	r1, [r0, #3]
 8007ee4:	1d03      	adds	r3, r0, #4
 8007ee6:	e7f1      	b.n	8007ecc <__exponent+0x60>

08007ee8 <_printf_float>:
 8007ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eec:	b08b      	sub	sp, #44	; 0x2c
 8007eee:	460c      	mov	r4, r1
 8007ef0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007ef4:	4616      	mov	r6, r2
 8007ef6:	461f      	mov	r7, r3
 8007ef8:	4605      	mov	r5, r0
 8007efa:	f001 fa83 	bl	8009404 <_localeconv_r>
 8007efe:	f8d0 b000 	ldr.w	fp, [r0]
 8007f02:	4658      	mov	r0, fp
 8007f04:	f7f8 f99c 	bl	8000240 <strlen>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	9308      	str	r3, [sp, #32]
 8007f0c:	f8d8 3000 	ldr.w	r3, [r8]
 8007f10:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007f14:	6822      	ldr	r2, [r4, #0]
 8007f16:	3307      	adds	r3, #7
 8007f18:	f023 0307 	bic.w	r3, r3, #7
 8007f1c:	f103 0108 	add.w	r1, r3, #8
 8007f20:	f8c8 1000 	str.w	r1, [r8]
 8007f24:	4682      	mov	sl, r0
 8007f26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f2a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007f2e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008190 <_printf_float+0x2a8>
 8007f32:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007f36:	eeb0 6bc0 	vabs.f64	d6, d0
 8007f3a:	eeb4 6b47 	vcmp.f64	d6, d7
 8007f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f42:	dd24      	ble.n	8007f8e <_printf_float+0xa6>
 8007f44:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f4c:	d502      	bpl.n	8007f54 <_printf_float+0x6c>
 8007f4e:	232d      	movs	r3, #45	; 0x2d
 8007f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f54:	4b90      	ldr	r3, [pc, #576]	; (8008198 <_printf_float+0x2b0>)
 8007f56:	4891      	ldr	r0, [pc, #580]	; (800819c <_printf_float+0x2b4>)
 8007f58:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007f5c:	bf94      	ite	ls
 8007f5e:	4698      	movls	r8, r3
 8007f60:	4680      	movhi	r8, r0
 8007f62:	2303      	movs	r3, #3
 8007f64:	6123      	str	r3, [r4, #16]
 8007f66:	f022 0204 	bic.w	r2, r2, #4
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	6022      	str	r2, [r4, #0]
 8007f6e:	9304      	str	r3, [sp, #16]
 8007f70:	9700      	str	r7, [sp, #0]
 8007f72:	4633      	mov	r3, r6
 8007f74:	aa09      	add	r2, sp, #36	; 0x24
 8007f76:	4621      	mov	r1, r4
 8007f78:	4628      	mov	r0, r5
 8007f7a:	f000 f9d3 	bl	8008324 <_printf_common>
 8007f7e:	3001      	adds	r0, #1
 8007f80:	f040 808a 	bne.w	8008098 <_printf_float+0x1b0>
 8007f84:	f04f 30ff 	mov.w	r0, #4294967295
 8007f88:	b00b      	add	sp, #44	; 0x2c
 8007f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f8e:	eeb4 0b40 	vcmp.f64	d0, d0
 8007f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f96:	d709      	bvc.n	8007fac <_printf_float+0xc4>
 8007f98:	ee10 3a90 	vmov	r3, s1
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	bfbc      	itt	lt
 8007fa0:	232d      	movlt	r3, #45	; 0x2d
 8007fa2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007fa6:	487e      	ldr	r0, [pc, #504]	; (80081a0 <_printf_float+0x2b8>)
 8007fa8:	4b7e      	ldr	r3, [pc, #504]	; (80081a4 <_printf_float+0x2bc>)
 8007faa:	e7d5      	b.n	8007f58 <_printf_float+0x70>
 8007fac:	6863      	ldr	r3, [r4, #4]
 8007fae:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007fb2:	9104      	str	r1, [sp, #16]
 8007fb4:	1c59      	adds	r1, r3, #1
 8007fb6:	d13c      	bne.n	8008032 <_printf_float+0x14a>
 8007fb8:	2306      	movs	r3, #6
 8007fba:	6063      	str	r3, [r4, #4]
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	9303      	str	r3, [sp, #12]
 8007fc0:	ab08      	add	r3, sp, #32
 8007fc2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007fc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007fca:	ab07      	add	r3, sp, #28
 8007fcc:	6861      	ldr	r1, [r4, #4]
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	6022      	str	r2, [r4, #0]
 8007fd2:	f10d 031b 	add.w	r3, sp, #27
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	f7ff fef6 	bl	8007dc8 <__cvt>
 8007fdc:	9b04      	ldr	r3, [sp, #16]
 8007fde:	9907      	ldr	r1, [sp, #28]
 8007fe0:	2b47      	cmp	r3, #71	; 0x47
 8007fe2:	4680      	mov	r8, r0
 8007fe4:	d108      	bne.n	8007ff8 <_printf_float+0x110>
 8007fe6:	1cc8      	adds	r0, r1, #3
 8007fe8:	db02      	blt.n	8007ff0 <_printf_float+0x108>
 8007fea:	6863      	ldr	r3, [r4, #4]
 8007fec:	4299      	cmp	r1, r3
 8007fee:	dd41      	ble.n	8008074 <_printf_float+0x18c>
 8007ff0:	f1a9 0902 	sub.w	r9, r9, #2
 8007ff4:	fa5f f989 	uxtb.w	r9, r9
 8007ff8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007ffc:	d820      	bhi.n	8008040 <_printf_float+0x158>
 8007ffe:	3901      	subs	r1, #1
 8008000:	464a      	mov	r2, r9
 8008002:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008006:	9107      	str	r1, [sp, #28]
 8008008:	f7ff ff30 	bl	8007e6c <__exponent>
 800800c:	9a08      	ldr	r2, [sp, #32]
 800800e:	9004      	str	r0, [sp, #16]
 8008010:	1813      	adds	r3, r2, r0
 8008012:	2a01      	cmp	r2, #1
 8008014:	6123      	str	r3, [r4, #16]
 8008016:	dc02      	bgt.n	800801e <_printf_float+0x136>
 8008018:	6822      	ldr	r2, [r4, #0]
 800801a:	07d2      	lsls	r2, r2, #31
 800801c:	d501      	bpl.n	8008022 <_printf_float+0x13a>
 800801e:	3301      	adds	r3, #1
 8008020:	6123      	str	r3, [r4, #16]
 8008022:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d0a2      	beq.n	8007f70 <_printf_float+0x88>
 800802a:	232d      	movs	r3, #45	; 0x2d
 800802c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008030:	e79e      	b.n	8007f70 <_printf_float+0x88>
 8008032:	9904      	ldr	r1, [sp, #16]
 8008034:	2947      	cmp	r1, #71	; 0x47
 8008036:	d1c1      	bne.n	8007fbc <_printf_float+0xd4>
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1bf      	bne.n	8007fbc <_printf_float+0xd4>
 800803c:	2301      	movs	r3, #1
 800803e:	e7bc      	b.n	8007fba <_printf_float+0xd2>
 8008040:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008044:	d118      	bne.n	8008078 <_printf_float+0x190>
 8008046:	2900      	cmp	r1, #0
 8008048:	6863      	ldr	r3, [r4, #4]
 800804a:	dd0b      	ble.n	8008064 <_printf_float+0x17c>
 800804c:	6121      	str	r1, [r4, #16]
 800804e:	b913      	cbnz	r3, 8008056 <_printf_float+0x16e>
 8008050:	6822      	ldr	r2, [r4, #0]
 8008052:	07d0      	lsls	r0, r2, #31
 8008054:	d502      	bpl.n	800805c <_printf_float+0x174>
 8008056:	3301      	adds	r3, #1
 8008058:	440b      	add	r3, r1
 800805a:	6123      	str	r3, [r4, #16]
 800805c:	2300      	movs	r3, #0
 800805e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008060:	9304      	str	r3, [sp, #16]
 8008062:	e7de      	b.n	8008022 <_printf_float+0x13a>
 8008064:	b913      	cbnz	r3, 800806c <_printf_float+0x184>
 8008066:	6822      	ldr	r2, [r4, #0]
 8008068:	07d2      	lsls	r2, r2, #31
 800806a:	d501      	bpl.n	8008070 <_printf_float+0x188>
 800806c:	3302      	adds	r3, #2
 800806e:	e7f4      	b.n	800805a <_printf_float+0x172>
 8008070:	2301      	movs	r3, #1
 8008072:	e7f2      	b.n	800805a <_printf_float+0x172>
 8008074:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008078:	9b08      	ldr	r3, [sp, #32]
 800807a:	4299      	cmp	r1, r3
 800807c:	db05      	blt.n	800808a <_printf_float+0x1a2>
 800807e:	6823      	ldr	r3, [r4, #0]
 8008080:	6121      	str	r1, [r4, #16]
 8008082:	07d8      	lsls	r0, r3, #31
 8008084:	d5ea      	bpl.n	800805c <_printf_float+0x174>
 8008086:	1c4b      	adds	r3, r1, #1
 8008088:	e7e7      	b.n	800805a <_printf_float+0x172>
 800808a:	2900      	cmp	r1, #0
 800808c:	bfd4      	ite	le
 800808e:	f1c1 0202 	rsble	r2, r1, #2
 8008092:	2201      	movgt	r2, #1
 8008094:	4413      	add	r3, r2
 8008096:	e7e0      	b.n	800805a <_printf_float+0x172>
 8008098:	6823      	ldr	r3, [r4, #0]
 800809a:	055a      	lsls	r2, r3, #21
 800809c:	d407      	bmi.n	80080ae <_printf_float+0x1c6>
 800809e:	6923      	ldr	r3, [r4, #16]
 80080a0:	4642      	mov	r2, r8
 80080a2:	4631      	mov	r1, r6
 80080a4:	4628      	mov	r0, r5
 80080a6:	47b8      	blx	r7
 80080a8:	3001      	adds	r0, #1
 80080aa:	d12a      	bne.n	8008102 <_printf_float+0x21a>
 80080ac:	e76a      	b.n	8007f84 <_printf_float+0x9c>
 80080ae:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80080b2:	f240 80e2 	bls.w	800827a <_printf_float+0x392>
 80080b6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80080ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80080be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080c2:	d133      	bne.n	800812c <_printf_float+0x244>
 80080c4:	4a38      	ldr	r2, [pc, #224]	; (80081a8 <_printf_float+0x2c0>)
 80080c6:	2301      	movs	r3, #1
 80080c8:	4631      	mov	r1, r6
 80080ca:	4628      	mov	r0, r5
 80080cc:	47b8      	blx	r7
 80080ce:	3001      	adds	r0, #1
 80080d0:	f43f af58 	beq.w	8007f84 <_printf_float+0x9c>
 80080d4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80080d8:	429a      	cmp	r2, r3
 80080da:	db02      	blt.n	80080e2 <_printf_float+0x1fa>
 80080dc:	6823      	ldr	r3, [r4, #0]
 80080de:	07d8      	lsls	r0, r3, #31
 80080e0:	d50f      	bpl.n	8008102 <_printf_float+0x21a>
 80080e2:	4653      	mov	r3, sl
 80080e4:	465a      	mov	r2, fp
 80080e6:	4631      	mov	r1, r6
 80080e8:	4628      	mov	r0, r5
 80080ea:	47b8      	blx	r7
 80080ec:	3001      	adds	r0, #1
 80080ee:	f43f af49 	beq.w	8007f84 <_printf_float+0x9c>
 80080f2:	f04f 0800 	mov.w	r8, #0
 80080f6:	f104 091a 	add.w	r9, r4, #26
 80080fa:	9b08      	ldr	r3, [sp, #32]
 80080fc:	3b01      	subs	r3, #1
 80080fe:	4543      	cmp	r3, r8
 8008100:	dc09      	bgt.n	8008116 <_printf_float+0x22e>
 8008102:	6823      	ldr	r3, [r4, #0]
 8008104:	079b      	lsls	r3, r3, #30
 8008106:	f100 8108 	bmi.w	800831a <_printf_float+0x432>
 800810a:	68e0      	ldr	r0, [r4, #12]
 800810c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800810e:	4298      	cmp	r0, r3
 8008110:	bfb8      	it	lt
 8008112:	4618      	movlt	r0, r3
 8008114:	e738      	b.n	8007f88 <_printf_float+0xa0>
 8008116:	2301      	movs	r3, #1
 8008118:	464a      	mov	r2, r9
 800811a:	4631      	mov	r1, r6
 800811c:	4628      	mov	r0, r5
 800811e:	47b8      	blx	r7
 8008120:	3001      	adds	r0, #1
 8008122:	f43f af2f 	beq.w	8007f84 <_printf_float+0x9c>
 8008126:	f108 0801 	add.w	r8, r8, #1
 800812a:	e7e6      	b.n	80080fa <_printf_float+0x212>
 800812c:	9b07      	ldr	r3, [sp, #28]
 800812e:	2b00      	cmp	r3, #0
 8008130:	dc3c      	bgt.n	80081ac <_printf_float+0x2c4>
 8008132:	4a1d      	ldr	r2, [pc, #116]	; (80081a8 <_printf_float+0x2c0>)
 8008134:	2301      	movs	r3, #1
 8008136:	4631      	mov	r1, r6
 8008138:	4628      	mov	r0, r5
 800813a:	47b8      	blx	r7
 800813c:	3001      	adds	r0, #1
 800813e:	f43f af21 	beq.w	8007f84 <_printf_float+0x9c>
 8008142:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008146:	4313      	orrs	r3, r2
 8008148:	d102      	bne.n	8008150 <_printf_float+0x268>
 800814a:	6823      	ldr	r3, [r4, #0]
 800814c:	07d9      	lsls	r1, r3, #31
 800814e:	d5d8      	bpl.n	8008102 <_printf_float+0x21a>
 8008150:	4653      	mov	r3, sl
 8008152:	465a      	mov	r2, fp
 8008154:	4631      	mov	r1, r6
 8008156:	4628      	mov	r0, r5
 8008158:	47b8      	blx	r7
 800815a:	3001      	adds	r0, #1
 800815c:	f43f af12 	beq.w	8007f84 <_printf_float+0x9c>
 8008160:	f04f 0900 	mov.w	r9, #0
 8008164:	f104 0a1a 	add.w	sl, r4, #26
 8008168:	9b07      	ldr	r3, [sp, #28]
 800816a:	425b      	negs	r3, r3
 800816c:	454b      	cmp	r3, r9
 800816e:	dc01      	bgt.n	8008174 <_printf_float+0x28c>
 8008170:	9b08      	ldr	r3, [sp, #32]
 8008172:	e795      	b.n	80080a0 <_printf_float+0x1b8>
 8008174:	2301      	movs	r3, #1
 8008176:	4652      	mov	r2, sl
 8008178:	4631      	mov	r1, r6
 800817a:	4628      	mov	r0, r5
 800817c:	47b8      	blx	r7
 800817e:	3001      	adds	r0, #1
 8008180:	f43f af00 	beq.w	8007f84 <_printf_float+0x9c>
 8008184:	f109 0901 	add.w	r9, r9, #1
 8008188:	e7ee      	b.n	8008168 <_printf_float+0x280>
 800818a:	bf00      	nop
 800818c:	f3af 8000 	nop.w
 8008190:	ffffffff 	.word	0xffffffff
 8008194:	7fefffff 	.word	0x7fefffff
 8008198:	0800acb0 	.word	0x0800acb0
 800819c:	0800acb4 	.word	0x0800acb4
 80081a0:	0800acbc 	.word	0x0800acbc
 80081a4:	0800acb8 	.word	0x0800acb8
 80081a8:	0800acc0 	.word	0x0800acc0
 80081ac:	9a08      	ldr	r2, [sp, #32]
 80081ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081b0:	429a      	cmp	r2, r3
 80081b2:	bfa8      	it	ge
 80081b4:	461a      	movge	r2, r3
 80081b6:	2a00      	cmp	r2, #0
 80081b8:	4691      	mov	r9, r2
 80081ba:	dc38      	bgt.n	800822e <_printf_float+0x346>
 80081bc:	2300      	movs	r3, #0
 80081be:	9305      	str	r3, [sp, #20]
 80081c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081c4:	f104 021a 	add.w	r2, r4, #26
 80081c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081ca:	9905      	ldr	r1, [sp, #20]
 80081cc:	9304      	str	r3, [sp, #16]
 80081ce:	eba3 0309 	sub.w	r3, r3, r9
 80081d2:	428b      	cmp	r3, r1
 80081d4:	dc33      	bgt.n	800823e <_printf_float+0x356>
 80081d6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80081da:	429a      	cmp	r2, r3
 80081dc:	db3c      	blt.n	8008258 <_printf_float+0x370>
 80081de:	6823      	ldr	r3, [r4, #0]
 80081e0:	07da      	lsls	r2, r3, #31
 80081e2:	d439      	bmi.n	8008258 <_printf_float+0x370>
 80081e4:	9b08      	ldr	r3, [sp, #32]
 80081e6:	9a04      	ldr	r2, [sp, #16]
 80081e8:	9907      	ldr	r1, [sp, #28]
 80081ea:	1a9a      	subs	r2, r3, r2
 80081ec:	eba3 0901 	sub.w	r9, r3, r1
 80081f0:	4591      	cmp	r9, r2
 80081f2:	bfa8      	it	ge
 80081f4:	4691      	movge	r9, r2
 80081f6:	f1b9 0f00 	cmp.w	r9, #0
 80081fa:	dc35      	bgt.n	8008268 <_printf_float+0x380>
 80081fc:	f04f 0800 	mov.w	r8, #0
 8008200:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008204:	f104 0a1a 	add.w	sl, r4, #26
 8008208:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800820c:	1a9b      	subs	r3, r3, r2
 800820e:	eba3 0309 	sub.w	r3, r3, r9
 8008212:	4543      	cmp	r3, r8
 8008214:	f77f af75 	ble.w	8008102 <_printf_float+0x21a>
 8008218:	2301      	movs	r3, #1
 800821a:	4652      	mov	r2, sl
 800821c:	4631      	mov	r1, r6
 800821e:	4628      	mov	r0, r5
 8008220:	47b8      	blx	r7
 8008222:	3001      	adds	r0, #1
 8008224:	f43f aeae 	beq.w	8007f84 <_printf_float+0x9c>
 8008228:	f108 0801 	add.w	r8, r8, #1
 800822c:	e7ec      	b.n	8008208 <_printf_float+0x320>
 800822e:	4613      	mov	r3, r2
 8008230:	4631      	mov	r1, r6
 8008232:	4642      	mov	r2, r8
 8008234:	4628      	mov	r0, r5
 8008236:	47b8      	blx	r7
 8008238:	3001      	adds	r0, #1
 800823a:	d1bf      	bne.n	80081bc <_printf_float+0x2d4>
 800823c:	e6a2      	b.n	8007f84 <_printf_float+0x9c>
 800823e:	2301      	movs	r3, #1
 8008240:	4631      	mov	r1, r6
 8008242:	4628      	mov	r0, r5
 8008244:	9204      	str	r2, [sp, #16]
 8008246:	47b8      	blx	r7
 8008248:	3001      	adds	r0, #1
 800824a:	f43f ae9b 	beq.w	8007f84 <_printf_float+0x9c>
 800824e:	9b05      	ldr	r3, [sp, #20]
 8008250:	9a04      	ldr	r2, [sp, #16]
 8008252:	3301      	adds	r3, #1
 8008254:	9305      	str	r3, [sp, #20]
 8008256:	e7b7      	b.n	80081c8 <_printf_float+0x2e0>
 8008258:	4653      	mov	r3, sl
 800825a:	465a      	mov	r2, fp
 800825c:	4631      	mov	r1, r6
 800825e:	4628      	mov	r0, r5
 8008260:	47b8      	blx	r7
 8008262:	3001      	adds	r0, #1
 8008264:	d1be      	bne.n	80081e4 <_printf_float+0x2fc>
 8008266:	e68d      	b.n	8007f84 <_printf_float+0x9c>
 8008268:	9a04      	ldr	r2, [sp, #16]
 800826a:	464b      	mov	r3, r9
 800826c:	4442      	add	r2, r8
 800826e:	4631      	mov	r1, r6
 8008270:	4628      	mov	r0, r5
 8008272:	47b8      	blx	r7
 8008274:	3001      	adds	r0, #1
 8008276:	d1c1      	bne.n	80081fc <_printf_float+0x314>
 8008278:	e684      	b.n	8007f84 <_printf_float+0x9c>
 800827a:	9a08      	ldr	r2, [sp, #32]
 800827c:	2a01      	cmp	r2, #1
 800827e:	dc01      	bgt.n	8008284 <_printf_float+0x39c>
 8008280:	07db      	lsls	r3, r3, #31
 8008282:	d537      	bpl.n	80082f4 <_printf_float+0x40c>
 8008284:	2301      	movs	r3, #1
 8008286:	4642      	mov	r2, r8
 8008288:	4631      	mov	r1, r6
 800828a:	4628      	mov	r0, r5
 800828c:	47b8      	blx	r7
 800828e:	3001      	adds	r0, #1
 8008290:	f43f ae78 	beq.w	8007f84 <_printf_float+0x9c>
 8008294:	4653      	mov	r3, sl
 8008296:	465a      	mov	r2, fp
 8008298:	4631      	mov	r1, r6
 800829a:	4628      	mov	r0, r5
 800829c:	47b8      	blx	r7
 800829e:	3001      	adds	r0, #1
 80082a0:	f43f ae70 	beq.w	8007f84 <_printf_float+0x9c>
 80082a4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80082a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80082ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082b0:	d01b      	beq.n	80082ea <_printf_float+0x402>
 80082b2:	9b08      	ldr	r3, [sp, #32]
 80082b4:	f108 0201 	add.w	r2, r8, #1
 80082b8:	3b01      	subs	r3, #1
 80082ba:	4631      	mov	r1, r6
 80082bc:	4628      	mov	r0, r5
 80082be:	47b8      	blx	r7
 80082c0:	3001      	adds	r0, #1
 80082c2:	d10e      	bne.n	80082e2 <_printf_float+0x3fa>
 80082c4:	e65e      	b.n	8007f84 <_printf_float+0x9c>
 80082c6:	2301      	movs	r3, #1
 80082c8:	464a      	mov	r2, r9
 80082ca:	4631      	mov	r1, r6
 80082cc:	4628      	mov	r0, r5
 80082ce:	47b8      	blx	r7
 80082d0:	3001      	adds	r0, #1
 80082d2:	f43f ae57 	beq.w	8007f84 <_printf_float+0x9c>
 80082d6:	f108 0801 	add.w	r8, r8, #1
 80082da:	9b08      	ldr	r3, [sp, #32]
 80082dc:	3b01      	subs	r3, #1
 80082de:	4543      	cmp	r3, r8
 80082e0:	dcf1      	bgt.n	80082c6 <_printf_float+0x3de>
 80082e2:	9b04      	ldr	r3, [sp, #16]
 80082e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80082e8:	e6db      	b.n	80080a2 <_printf_float+0x1ba>
 80082ea:	f04f 0800 	mov.w	r8, #0
 80082ee:	f104 091a 	add.w	r9, r4, #26
 80082f2:	e7f2      	b.n	80082da <_printf_float+0x3f2>
 80082f4:	2301      	movs	r3, #1
 80082f6:	4642      	mov	r2, r8
 80082f8:	e7df      	b.n	80082ba <_printf_float+0x3d2>
 80082fa:	2301      	movs	r3, #1
 80082fc:	464a      	mov	r2, r9
 80082fe:	4631      	mov	r1, r6
 8008300:	4628      	mov	r0, r5
 8008302:	47b8      	blx	r7
 8008304:	3001      	adds	r0, #1
 8008306:	f43f ae3d 	beq.w	8007f84 <_printf_float+0x9c>
 800830a:	f108 0801 	add.w	r8, r8, #1
 800830e:	68e3      	ldr	r3, [r4, #12]
 8008310:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008312:	1a5b      	subs	r3, r3, r1
 8008314:	4543      	cmp	r3, r8
 8008316:	dcf0      	bgt.n	80082fa <_printf_float+0x412>
 8008318:	e6f7      	b.n	800810a <_printf_float+0x222>
 800831a:	f04f 0800 	mov.w	r8, #0
 800831e:	f104 0919 	add.w	r9, r4, #25
 8008322:	e7f4      	b.n	800830e <_printf_float+0x426>

08008324 <_printf_common>:
 8008324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008328:	4616      	mov	r6, r2
 800832a:	4699      	mov	r9, r3
 800832c:	688a      	ldr	r2, [r1, #8]
 800832e:	690b      	ldr	r3, [r1, #16]
 8008330:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008334:	4293      	cmp	r3, r2
 8008336:	bfb8      	it	lt
 8008338:	4613      	movlt	r3, r2
 800833a:	6033      	str	r3, [r6, #0]
 800833c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008340:	4607      	mov	r7, r0
 8008342:	460c      	mov	r4, r1
 8008344:	b10a      	cbz	r2, 800834a <_printf_common+0x26>
 8008346:	3301      	adds	r3, #1
 8008348:	6033      	str	r3, [r6, #0]
 800834a:	6823      	ldr	r3, [r4, #0]
 800834c:	0699      	lsls	r1, r3, #26
 800834e:	bf42      	ittt	mi
 8008350:	6833      	ldrmi	r3, [r6, #0]
 8008352:	3302      	addmi	r3, #2
 8008354:	6033      	strmi	r3, [r6, #0]
 8008356:	6825      	ldr	r5, [r4, #0]
 8008358:	f015 0506 	ands.w	r5, r5, #6
 800835c:	d106      	bne.n	800836c <_printf_common+0x48>
 800835e:	f104 0a19 	add.w	sl, r4, #25
 8008362:	68e3      	ldr	r3, [r4, #12]
 8008364:	6832      	ldr	r2, [r6, #0]
 8008366:	1a9b      	subs	r3, r3, r2
 8008368:	42ab      	cmp	r3, r5
 800836a:	dc26      	bgt.n	80083ba <_printf_common+0x96>
 800836c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008370:	1e13      	subs	r3, r2, #0
 8008372:	6822      	ldr	r2, [r4, #0]
 8008374:	bf18      	it	ne
 8008376:	2301      	movne	r3, #1
 8008378:	0692      	lsls	r2, r2, #26
 800837a:	d42b      	bmi.n	80083d4 <_printf_common+0xb0>
 800837c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008380:	4649      	mov	r1, r9
 8008382:	4638      	mov	r0, r7
 8008384:	47c0      	blx	r8
 8008386:	3001      	adds	r0, #1
 8008388:	d01e      	beq.n	80083c8 <_printf_common+0xa4>
 800838a:	6823      	ldr	r3, [r4, #0]
 800838c:	68e5      	ldr	r5, [r4, #12]
 800838e:	6832      	ldr	r2, [r6, #0]
 8008390:	f003 0306 	and.w	r3, r3, #6
 8008394:	2b04      	cmp	r3, #4
 8008396:	bf08      	it	eq
 8008398:	1aad      	subeq	r5, r5, r2
 800839a:	68a3      	ldr	r3, [r4, #8]
 800839c:	6922      	ldr	r2, [r4, #16]
 800839e:	bf0c      	ite	eq
 80083a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083a4:	2500      	movne	r5, #0
 80083a6:	4293      	cmp	r3, r2
 80083a8:	bfc4      	itt	gt
 80083aa:	1a9b      	subgt	r3, r3, r2
 80083ac:	18ed      	addgt	r5, r5, r3
 80083ae:	2600      	movs	r6, #0
 80083b0:	341a      	adds	r4, #26
 80083b2:	42b5      	cmp	r5, r6
 80083b4:	d11a      	bne.n	80083ec <_printf_common+0xc8>
 80083b6:	2000      	movs	r0, #0
 80083b8:	e008      	b.n	80083cc <_printf_common+0xa8>
 80083ba:	2301      	movs	r3, #1
 80083bc:	4652      	mov	r2, sl
 80083be:	4649      	mov	r1, r9
 80083c0:	4638      	mov	r0, r7
 80083c2:	47c0      	blx	r8
 80083c4:	3001      	adds	r0, #1
 80083c6:	d103      	bne.n	80083d0 <_printf_common+0xac>
 80083c8:	f04f 30ff 	mov.w	r0, #4294967295
 80083cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d0:	3501      	adds	r5, #1
 80083d2:	e7c6      	b.n	8008362 <_printf_common+0x3e>
 80083d4:	18e1      	adds	r1, r4, r3
 80083d6:	1c5a      	adds	r2, r3, #1
 80083d8:	2030      	movs	r0, #48	; 0x30
 80083da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083de:	4422      	add	r2, r4
 80083e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083e8:	3302      	adds	r3, #2
 80083ea:	e7c7      	b.n	800837c <_printf_common+0x58>
 80083ec:	2301      	movs	r3, #1
 80083ee:	4622      	mov	r2, r4
 80083f0:	4649      	mov	r1, r9
 80083f2:	4638      	mov	r0, r7
 80083f4:	47c0      	blx	r8
 80083f6:	3001      	adds	r0, #1
 80083f8:	d0e6      	beq.n	80083c8 <_printf_common+0xa4>
 80083fa:	3601      	adds	r6, #1
 80083fc:	e7d9      	b.n	80083b2 <_printf_common+0x8e>
	...

08008400 <_printf_i>:
 8008400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008404:	7e0f      	ldrb	r7, [r1, #24]
 8008406:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008408:	2f78      	cmp	r7, #120	; 0x78
 800840a:	4691      	mov	r9, r2
 800840c:	4680      	mov	r8, r0
 800840e:	460c      	mov	r4, r1
 8008410:	469a      	mov	sl, r3
 8008412:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008416:	d807      	bhi.n	8008428 <_printf_i+0x28>
 8008418:	2f62      	cmp	r7, #98	; 0x62
 800841a:	d80a      	bhi.n	8008432 <_printf_i+0x32>
 800841c:	2f00      	cmp	r7, #0
 800841e:	f000 80d8 	beq.w	80085d2 <_printf_i+0x1d2>
 8008422:	2f58      	cmp	r7, #88	; 0x58
 8008424:	f000 80a3 	beq.w	800856e <_printf_i+0x16e>
 8008428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800842c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008430:	e03a      	b.n	80084a8 <_printf_i+0xa8>
 8008432:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008436:	2b15      	cmp	r3, #21
 8008438:	d8f6      	bhi.n	8008428 <_printf_i+0x28>
 800843a:	a101      	add	r1, pc, #4	; (adr r1, 8008440 <_printf_i+0x40>)
 800843c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008440:	08008499 	.word	0x08008499
 8008444:	080084ad 	.word	0x080084ad
 8008448:	08008429 	.word	0x08008429
 800844c:	08008429 	.word	0x08008429
 8008450:	08008429 	.word	0x08008429
 8008454:	08008429 	.word	0x08008429
 8008458:	080084ad 	.word	0x080084ad
 800845c:	08008429 	.word	0x08008429
 8008460:	08008429 	.word	0x08008429
 8008464:	08008429 	.word	0x08008429
 8008468:	08008429 	.word	0x08008429
 800846c:	080085b9 	.word	0x080085b9
 8008470:	080084dd 	.word	0x080084dd
 8008474:	0800859b 	.word	0x0800859b
 8008478:	08008429 	.word	0x08008429
 800847c:	08008429 	.word	0x08008429
 8008480:	080085db 	.word	0x080085db
 8008484:	08008429 	.word	0x08008429
 8008488:	080084dd 	.word	0x080084dd
 800848c:	08008429 	.word	0x08008429
 8008490:	08008429 	.word	0x08008429
 8008494:	080085a3 	.word	0x080085a3
 8008498:	682b      	ldr	r3, [r5, #0]
 800849a:	1d1a      	adds	r2, r3, #4
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	602a      	str	r2, [r5, #0]
 80084a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084a8:	2301      	movs	r3, #1
 80084aa:	e0a3      	b.n	80085f4 <_printf_i+0x1f4>
 80084ac:	6820      	ldr	r0, [r4, #0]
 80084ae:	6829      	ldr	r1, [r5, #0]
 80084b0:	0606      	lsls	r6, r0, #24
 80084b2:	f101 0304 	add.w	r3, r1, #4
 80084b6:	d50a      	bpl.n	80084ce <_printf_i+0xce>
 80084b8:	680e      	ldr	r6, [r1, #0]
 80084ba:	602b      	str	r3, [r5, #0]
 80084bc:	2e00      	cmp	r6, #0
 80084be:	da03      	bge.n	80084c8 <_printf_i+0xc8>
 80084c0:	232d      	movs	r3, #45	; 0x2d
 80084c2:	4276      	negs	r6, r6
 80084c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084c8:	485e      	ldr	r0, [pc, #376]	; (8008644 <_printf_i+0x244>)
 80084ca:	230a      	movs	r3, #10
 80084cc:	e019      	b.n	8008502 <_printf_i+0x102>
 80084ce:	680e      	ldr	r6, [r1, #0]
 80084d0:	602b      	str	r3, [r5, #0]
 80084d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80084d6:	bf18      	it	ne
 80084d8:	b236      	sxthne	r6, r6
 80084da:	e7ef      	b.n	80084bc <_printf_i+0xbc>
 80084dc:	682b      	ldr	r3, [r5, #0]
 80084de:	6820      	ldr	r0, [r4, #0]
 80084e0:	1d19      	adds	r1, r3, #4
 80084e2:	6029      	str	r1, [r5, #0]
 80084e4:	0601      	lsls	r1, r0, #24
 80084e6:	d501      	bpl.n	80084ec <_printf_i+0xec>
 80084e8:	681e      	ldr	r6, [r3, #0]
 80084ea:	e002      	b.n	80084f2 <_printf_i+0xf2>
 80084ec:	0646      	lsls	r6, r0, #25
 80084ee:	d5fb      	bpl.n	80084e8 <_printf_i+0xe8>
 80084f0:	881e      	ldrh	r6, [r3, #0]
 80084f2:	4854      	ldr	r0, [pc, #336]	; (8008644 <_printf_i+0x244>)
 80084f4:	2f6f      	cmp	r7, #111	; 0x6f
 80084f6:	bf0c      	ite	eq
 80084f8:	2308      	moveq	r3, #8
 80084fa:	230a      	movne	r3, #10
 80084fc:	2100      	movs	r1, #0
 80084fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008502:	6865      	ldr	r5, [r4, #4]
 8008504:	60a5      	str	r5, [r4, #8]
 8008506:	2d00      	cmp	r5, #0
 8008508:	bfa2      	ittt	ge
 800850a:	6821      	ldrge	r1, [r4, #0]
 800850c:	f021 0104 	bicge.w	r1, r1, #4
 8008510:	6021      	strge	r1, [r4, #0]
 8008512:	b90e      	cbnz	r6, 8008518 <_printf_i+0x118>
 8008514:	2d00      	cmp	r5, #0
 8008516:	d04d      	beq.n	80085b4 <_printf_i+0x1b4>
 8008518:	4615      	mov	r5, r2
 800851a:	fbb6 f1f3 	udiv	r1, r6, r3
 800851e:	fb03 6711 	mls	r7, r3, r1, r6
 8008522:	5dc7      	ldrb	r7, [r0, r7]
 8008524:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008528:	4637      	mov	r7, r6
 800852a:	42bb      	cmp	r3, r7
 800852c:	460e      	mov	r6, r1
 800852e:	d9f4      	bls.n	800851a <_printf_i+0x11a>
 8008530:	2b08      	cmp	r3, #8
 8008532:	d10b      	bne.n	800854c <_printf_i+0x14c>
 8008534:	6823      	ldr	r3, [r4, #0]
 8008536:	07de      	lsls	r6, r3, #31
 8008538:	d508      	bpl.n	800854c <_printf_i+0x14c>
 800853a:	6923      	ldr	r3, [r4, #16]
 800853c:	6861      	ldr	r1, [r4, #4]
 800853e:	4299      	cmp	r1, r3
 8008540:	bfde      	ittt	le
 8008542:	2330      	movle	r3, #48	; 0x30
 8008544:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008548:	f105 35ff 	addle.w	r5, r5, #4294967295
 800854c:	1b52      	subs	r2, r2, r5
 800854e:	6122      	str	r2, [r4, #16]
 8008550:	f8cd a000 	str.w	sl, [sp]
 8008554:	464b      	mov	r3, r9
 8008556:	aa03      	add	r2, sp, #12
 8008558:	4621      	mov	r1, r4
 800855a:	4640      	mov	r0, r8
 800855c:	f7ff fee2 	bl	8008324 <_printf_common>
 8008560:	3001      	adds	r0, #1
 8008562:	d14c      	bne.n	80085fe <_printf_i+0x1fe>
 8008564:	f04f 30ff 	mov.w	r0, #4294967295
 8008568:	b004      	add	sp, #16
 800856a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800856e:	4835      	ldr	r0, [pc, #212]	; (8008644 <_printf_i+0x244>)
 8008570:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008574:	6829      	ldr	r1, [r5, #0]
 8008576:	6823      	ldr	r3, [r4, #0]
 8008578:	f851 6b04 	ldr.w	r6, [r1], #4
 800857c:	6029      	str	r1, [r5, #0]
 800857e:	061d      	lsls	r5, r3, #24
 8008580:	d514      	bpl.n	80085ac <_printf_i+0x1ac>
 8008582:	07df      	lsls	r7, r3, #31
 8008584:	bf44      	itt	mi
 8008586:	f043 0320 	orrmi.w	r3, r3, #32
 800858a:	6023      	strmi	r3, [r4, #0]
 800858c:	b91e      	cbnz	r6, 8008596 <_printf_i+0x196>
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	f023 0320 	bic.w	r3, r3, #32
 8008594:	6023      	str	r3, [r4, #0]
 8008596:	2310      	movs	r3, #16
 8008598:	e7b0      	b.n	80084fc <_printf_i+0xfc>
 800859a:	6823      	ldr	r3, [r4, #0]
 800859c:	f043 0320 	orr.w	r3, r3, #32
 80085a0:	6023      	str	r3, [r4, #0]
 80085a2:	2378      	movs	r3, #120	; 0x78
 80085a4:	4828      	ldr	r0, [pc, #160]	; (8008648 <_printf_i+0x248>)
 80085a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085aa:	e7e3      	b.n	8008574 <_printf_i+0x174>
 80085ac:	0659      	lsls	r1, r3, #25
 80085ae:	bf48      	it	mi
 80085b0:	b2b6      	uxthmi	r6, r6
 80085b2:	e7e6      	b.n	8008582 <_printf_i+0x182>
 80085b4:	4615      	mov	r5, r2
 80085b6:	e7bb      	b.n	8008530 <_printf_i+0x130>
 80085b8:	682b      	ldr	r3, [r5, #0]
 80085ba:	6826      	ldr	r6, [r4, #0]
 80085bc:	6961      	ldr	r1, [r4, #20]
 80085be:	1d18      	adds	r0, r3, #4
 80085c0:	6028      	str	r0, [r5, #0]
 80085c2:	0635      	lsls	r5, r6, #24
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	d501      	bpl.n	80085cc <_printf_i+0x1cc>
 80085c8:	6019      	str	r1, [r3, #0]
 80085ca:	e002      	b.n	80085d2 <_printf_i+0x1d2>
 80085cc:	0670      	lsls	r0, r6, #25
 80085ce:	d5fb      	bpl.n	80085c8 <_printf_i+0x1c8>
 80085d0:	8019      	strh	r1, [r3, #0]
 80085d2:	2300      	movs	r3, #0
 80085d4:	6123      	str	r3, [r4, #16]
 80085d6:	4615      	mov	r5, r2
 80085d8:	e7ba      	b.n	8008550 <_printf_i+0x150>
 80085da:	682b      	ldr	r3, [r5, #0]
 80085dc:	1d1a      	adds	r2, r3, #4
 80085de:	602a      	str	r2, [r5, #0]
 80085e0:	681d      	ldr	r5, [r3, #0]
 80085e2:	6862      	ldr	r2, [r4, #4]
 80085e4:	2100      	movs	r1, #0
 80085e6:	4628      	mov	r0, r5
 80085e8:	f7f7 fe32 	bl	8000250 <memchr>
 80085ec:	b108      	cbz	r0, 80085f2 <_printf_i+0x1f2>
 80085ee:	1b40      	subs	r0, r0, r5
 80085f0:	6060      	str	r0, [r4, #4]
 80085f2:	6863      	ldr	r3, [r4, #4]
 80085f4:	6123      	str	r3, [r4, #16]
 80085f6:	2300      	movs	r3, #0
 80085f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085fc:	e7a8      	b.n	8008550 <_printf_i+0x150>
 80085fe:	6923      	ldr	r3, [r4, #16]
 8008600:	462a      	mov	r2, r5
 8008602:	4649      	mov	r1, r9
 8008604:	4640      	mov	r0, r8
 8008606:	47d0      	blx	sl
 8008608:	3001      	adds	r0, #1
 800860a:	d0ab      	beq.n	8008564 <_printf_i+0x164>
 800860c:	6823      	ldr	r3, [r4, #0]
 800860e:	079b      	lsls	r3, r3, #30
 8008610:	d413      	bmi.n	800863a <_printf_i+0x23a>
 8008612:	68e0      	ldr	r0, [r4, #12]
 8008614:	9b03      	ldr	r3, [sp, #12]
 8008616:	4298      	cmp	r0, r3
 8008618:	bfb8      	it	lt
 800861a:	4618      	movlt	r0, r3
 800861c:	e7a4      	b.n	8008568 <_printf_i+0x168>
 800861e:	2301      	movs	r3, #1
 8008620:	4632      	mov	r2, r6
 8008622:	4649      	mov	r1, r9
 8008624:	4640      	mov	r0, r8
 8008626:	47d0      	blx	sl
 8008628:	3001      	adds	r0, #1
 800862a:	d09b      	beq.n	8008564 <_printf_i+0x164>
 800862c:	3501      	adds	r5, #1
 800862e:	68e3      	ldr	r3, [r4, #12]
 8008630:	9903      	ldr	r1, [sp, #12]
 8008632:	1a5b      	subs	r3, r3, r1
 8008634:	42ab      	cmp	r3, r5
 8008636:	dcf2      	bgt.n	800861e <_printf_i+0x21e>
 8008638:	e7eb      	b.n	8008612 <_printf_i+0x212>
 800863a:	2500      	movs	r5, #0
 800863c:	f104 0619 	add.w	r6, r4, #25
 8008640:	e7f5      	b.n	800862e <_printf_i+0x22e>
 8008642:	bf00      	nop
 8008644:	0800acc2 	.word	0x0800acc2
 8008648:	0800acd3 	.word	0x0800acd3

0800864c <sniprintf>:
 800864c:	b40c      	push	{r2, r3}
 800864e:	b530      	push	{r4, r5, lr}
 8008650:	4b17      	ldr	r3, [pc, #92]	; (80086b0 <sniprintf+0x64>)
 8008652:	1e0c      	subs	r4, r1, #0
 8008654:	681d      	ldr	r5, [r3, #0]
 8008656:	b09d      	sub	sp, #116	; 0x74
 8008658:	da08      	bge.n	800866c <sniprintf+0x20>
 800865a:	238b      	movs	r3, #139	; 0x8b
 800865c:	602b      	str	r3, [r5, #0]
 800865e:	f04f 30ff 	mov.w	r0, #4294967295
 8008662:	b01d      	add	sp, #116	; 0x74
 8008664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008668:	b002      	add	sp, #8
 800866a:	4770      	bx	lr
 800866c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008670:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008674:	bf14      	ite	ne
 8008676:	f104 33ff 	addne.w	r3, r4, #4294967295
 800867a:	4623      	moveq	r3, r4
 800867c:	9304      	str	r3, [sp, #16]
 800867e:	9307      	str	r3, [sp, #28]
 8008680:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008684:	9002      	str	r0, [sp, #8]
 8008686:	9006      	str	r0, [sp, #24]
 8008688:	f8ad 3016 	strh.w	r3, [sp, #22]
 800868c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800868e:	ab21      	add	r3, sp, #132	; 0x84
 8008690:	a902      	add	r1, sp, #8
 8008692:	4628      	mov	r0, r5
 8008694:	9301      	str	r3, [sp, #4]
 8008696:	f001 fba5 	bl	8009de4 <_svfiprintf_r>
 800869a:	1c43      	adds	r3, r0, #1
 800869c:	bfbc      	itt	lt
 800869e:	238b      	movlt	r3, #139	; 0x8b
 80086a0:	602b      	strlt	r3, [r5, #0]
 80086a2:	2c00      	cmp	r4, #0
 80086a4:	d0dd      	beq.n	8008662 <sniprintf+0x16>
 80086a6:	9b02      	ldr	r3, [sp, #8]
 80086a8:	2200      	movs	r2, #0
 80086aa:	701a      	strb	r2, [r3, #0]
 80086ac:	e7d9      	b.n	8008662 <sniprintf+0x16>
 80086ae:	bf00      	nop
 80086b0:	200003e8 	.word	0x200003e8

080086b4 <siprintf>:
 80086b4:	b40e      	push	{r1, r2, r3}
 80086b6:	b500      	push	{lr}
 80086b8:	b09c      	sub	sp, #112	; 0x70
 80086ba:	ab1d      	add	r3, sp, #116	; 0x74
 80086bc:	9002      	str	r0, [sp, #8]
 80086be:	9006      	str	r0, [sp, #24]
 80086c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086c4:	4809      	ldr	r0, [pc, #36]	; (80086ec <siprintf+0x38>)
 80086c6:	9107      	str	r1, [sp, #28]
 80086c8:	9104      	str	r1, [sp, #16]
 80086ca:	4909      	ldr	r1, [pc, #36]	; (80086f0 <siprintf+0x3c>)
 80086cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80086d0:	9105      	str	r1, [sp, #20]
 80086d2:	6800      	ldr	r0, [r0, #0]
 80086d4:	9301      	str	r3, [sp, #4]
 80086d6:	a902      	add	r1, sp, #8
 80086d8:	f001 fb84 	bl	8009de4 <_svfiprintf_r>
 80086dc:	9b02      	ldr	r3, [sp, #8]
 80086de:	2200      	movs	r2, #0
 80086e0:	701a      	strb	r2, [r3, #0]
 80086e2:	b01c      	add	sp, #112	; 0x70
 80086e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80086e8:	b003      	add	sp, #12
 80086ea:	4770      	bx	lr
 80086ec:	200003e8 	.word	0x200003e8
 80086f0:	ffff0208 	.word	0xffff0208

080086f4 <_strtol_l.constprop.0>:
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086fa:	d001      	beq.n	8008700 <_strtol_l.constprop.0+0xc>
 80086fc:	2b24      	cmp	r3, #36	; 0x24
 80086fe:	d906      	bls.n	800870e <_strtol_l.constprop.0+0x1a>
 8008700:	f7ff fb30 	bl	8007d64 <__errno>
 8008704:	2316      	movs	r3, #22
 8008706:	6003      	str	r3, [r0, #0]
 8008708:	2000      	movs	r0, #0
 800870a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800870e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80087f4 <_strtol_l.constprop.0+0x100>
 8008712:	460d      	mov	r5, r1
 8008714:	462e      	mov	r6, r5
 8008716:	f815 4b01 	ldrb.w	r4, [r5], #1
 800871a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800871e:	f017 0708 	ands.w	r7, r7, #8
 8008722:	d1f7      	bne.n	8008714 <_strtol_l.constprop.0+0x20>
 8008724:	2c2d      	cmp	r4, #45	; 0x2d
 8008726:	d132      	bne.n	800878e <_strtol_l.constprop.0+0x9a>
 8008728:	782c      	ldrb	r4, [r5, #0]
 800872a:	2701      	movs	r7, #1
 800872c:	1cb5      	adds	r5, r6, #2
 800872e:	2b00      	cmp	r3, #0
 8008730:	d05b      	beq.n	80087ea <_strtol_l.constprop.0+0xf6>
 8008732:	2b10      	cmp	r3, #16
 8008734:	d109      	bne.n	800874a <_strtol_l.constprop.0+0x56>
 8008736:	2c30      	cmp	r4, #48	; 0x30
 8008738:	d107      	bne.n	800874a <_strtol_l.constprop.0+0x56>
 800873a:	782c      	ldrb	r4, [r5, #0]
 800873c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008740:	2c58      	cmp	r4, #88	; 0x58
 8008742:	d14d      	bne.n	80087e0 <_strtol_l.constprop.0+0xec>
 8008744:	786c      	ldrb	r4, [r5, #1]
 8008746:	2310      	movs	r3, #16
 8008748:	3502      	adds	r5, #2
 800874a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800874e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008752:	f04f 0c00 	mov.w	ip, #0
 8008756:	fbb8 f9f3 	udiv	r9, r8, r3
 800875a:	4666      	mov	r6, ip
 800875c:	fb03 8a19 	mls	sl, r3, r9, r8
 8008760:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008764:	f1be 0f09 	cmp.w	lr, #9
 8008768:	d816      	bhi.n	8008798 <_strtol_l.constprop.0+0xa4>
 800876a:	4674      	mov	r4, lr
 800876c:	42a3      	cmp	r3, r4
 800876e:	dd24      	ble.n	80087ba <_strtol_l.constprop.0+0xc6>
 8008770:	f1bc 0f00 	cmp.w	ip, #0
 8008774:	db1e      	blt.n	80087b4 <_strtol_l.constprop.0+0xc0>
 8008776:	45b1      	cmp	r9, r6
 8008778:	d31c      	bcc.n	80087b4 <_strtol_l.constprop.0+0xc0>
 800877a:	d101      	bne.n	8008780 <_strtol_l.constprop.0+0x8c>
 800877c:	45a2      	cmp	sl, r4
 800877e:	db19      	blt.n	80087b4 <_strtol_l.constprop.0+0xc0>
 8008780:	fb06 4603 	mla	r6, r6, r3, r4
 8008784:	f04f 0c01 	mov.w	ip, #1
 8008788:	f815 4b01 	ldrb.w	r4, [r5], #1
 800878c:	e7e8      	b.n	8008760 <_strtol_l.constprop.0+0x6c>
 800878e:	2c2b      	cmp	r4, #43	; 0x2b
 8008790:	bf04      	itt	eq
 8008792:	782c      	ldrbeq	r4, [r5, #0]
 8008794:	1cb5      	addeq	r5, r6, #2
 8008796:	e7ca      	b.n	800872e <_strtol_l.constprop.0+0x3a>
 8008798:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800879c:	f1be 0f19 	cmp.w	lr, #25
 80087a0:	d801      	bhi.n	80087a6 <_strtol_l.constprop.0+0xb2>
 80087a2:	3c37      	subs	r4, #55	; 0x37
 80087a4:	e7e2      	b.n	800876c <_strtol_l.constprop.0+0x78>
 80087a6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80087aa:	f1be 0f19 	cmp.w	lr, #25
 80087ae:	d804      	bhi.n	80087ba <_strtol_l.constprop.0+0xc6>
 80087b0:	3c57      	subs	r4, #87	; 0x57
 80087b2:	e7db      	b.n	800876c <_strtol_l.constprop.0+0x78>
 80087b4:	f04f 3cff 	mov.w	ip, #4294967295
 80087b8:	e7e6      	b.n	8008788 <_strtol_l.constprop.0+0x94>
 80087ba:	f1bc 0f00 	cmp.w	ip, #0
 80087be:	da05      	bge.n	80087cc <_strtol_l.constprop.0+0xd8>
 80087c0:	2322      	movs	r3, #34	; 0x22
 80087c2:	6003      	str	r3, [r0, #0]
 80087c4:	4646      	mov	r6, r8
 80087c6:	b942      	cbnz	r2, 80087da <_strtol_l.constprop.0+0xe6>
 80087c8:	4630      	mov	r0, r6
 80087ca:	e79e      	b.n	800870a <_strtol_l.constprop.0+0x16>
 80087cc:	b107      	cbz	r7, 80087d0 <_strtol_l.constprop.0+0xdc>
 80087ce:	4276      	negs	r6, r6
 80087d0:	2a00      	cmp	r2, #0
 80087d2:	d0f9      	beq.n	80087c8 <_strtol_l.constprop.0+0xd4>
 80087d4:	f1bc 0f00 	cmp.w	ip, #0
 80087d8:	d000      	beq.n	80087dc <_strtol_l.constprop.0+0xe8>
 80087da:	1e69      	subs	r1, r5, #1
 80087dc:	6011      	str	r1, [r2, #0]
 80087de:	e7f3      	b.n	80087c8 <_strtol_l.constprop.0+0xd4>
 80087e0:	2430      	movs	r4, #48	; 0x30
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1b1      	bne.n	800874a <_strtol_l.constprop.0+0x56>
 80087e6:	2308      	movs	r3, #8
 80087e8:	e7af      	b.n	800874a <_strtol_l.constprop.0+0x56>
 80087ea:	2c30      	cmp	r4, #48	; 0x30
 80087ec:	d0a5      	beq.n	800873a <_strtol_l.constprop.0+0x46>
 80087ee:	230a      	movs	r3, #10
 80087f0:	e7ab      	b.n	800874a <_strtol_l.constprop.0+0x56>
 80087f2:	bf00      	nop
 80087f4:	0800ace5 	.word	0x0800ace5

080087f8 <strtol>:
 80087f8:	4613      	mov	r3, r2
 80087fa:	460a      	mov	r2, r1
 80087fc:	4601      	mov	r1, r0
 80087fe:	4802      	ldr	r0, [pc, #8]	; (8008808 <strtol+0x10>)
 8008800:	6800      	ldr	r0, [r0, #0]
 8008802:	f7ff bf77 	b.w	80086f4 <_strtol_l.constprop.0>
 8008806:	bf00      	nop
 8008808:	200003e8 	.word	0x200003e8

0800880c <quorem>:
 800880c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008810:	6903      	ldr	r3, [r0, #16]
 8008812:	690c      	ldr	r4, [r1, #16]
 8008814:	42a3      	cmp	r3, r4
 8008816:	4607      	mov	r7, r0
 8008818:	f2c0 8081 	blt.w	800891e <quorem+0x112>
 800881c:	3c01      	subs	r4, #1
 800881e:	f101 0814 	add.w	r8, r1, #20
 8008822:	f100 0514 	add.w	r5, r0, #20
 8008826:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800882a:	9301      	str	r3, [sp, #4]
 800882c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008830:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008834:	3301      	adds	r3, #1
 8008836:	429a      	cmp	r2, r3
 8008838:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800883c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008840:	fbb2 f6f3 	udiv	r6, r2, r3
 8008844:	d331      	bcc.n	80088aa <quorem+0x9e>
 8008846:	f04f 0e00 	mov.w	lr, #0
 800884a:	4640      	mov	r0, r8
 800884c:	46ac      	mov	ip, r5
 800884e:	46f2      	mov	sl, lr
 8008850:	f850 2b04 	ldr.w	r2, [r0], #4
 8008854:	b293      	uxth	r3, r2
 8008856:	fb06 e303 	mla	r3, r6, r3, lr
 800885a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800885e:	b29b      	uxth	r3, r3
 8008860:	ebaa 0303 	sub.w	r3, sl, r3
 8008864:	f8dc a000 	ldr.w	sl, [ip]
 8008868:	0c12      	lsrs	r2, r2, #16
 800886a:	fa13 f38a 	uxtah	r3, r3, sl
 800886e:	fb06 e202 	mla	r2, r6, r2, lr
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	9b00      	ldr	r3, [sp, #0]
 8008876:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800887a:	b292      	uxth	r2, r2
 800887c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008880:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008884:	f8bd 3000 	ldrh.w	r3, [sp]
 8008888:	4581      	cmp	r9, r0
 800888a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800888e:	f84c 3b04 	str.w	r3, [ip], #4
 8008892:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008896:	d2db      	bcs.n	8008850 <quorem+0x44>
 8008898:	f855 300b 	ldr.w	r3, [r5, fp]
 800889c:	b92b      	cbnz	r3, 80088aa <quorem+0x9e>
 800889e:	9b01      	ldr	r3, [sp, #4]
 80088a0:	3b04      	subs	r3, #4
 80088a2:	429d      	cmp	r5, r3
 80088a4:	461a      	mov	r2, r3
 80088a6:	d32e      	bcc.n	8008906 <quorem+0xfa>
 80088a8:	613c      	str	r4, [r7, #16]
 80088aa:	4638      	mov	r0, r7
 80088ac:	f001 f846 	bl	800993c <__mcmp>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	db24      	blt.n	80088fe <quorem+0xf2>
 80088b4:	3601      	adds	r6, #1
 80088b6:	4628      	mov	r0, r5
 80088b8:	f04f 0c00 	mov.w	ip, #0
 80088bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80088c0:	f8d0 e000 	ldr.w	lr, [r0]
 80088c4:	b293      	uxth	r3, r2
 80088c6:	ebac 0303 	sub.w	r3, ip, r3
 80088ca:	0c12      	lsrs	r2, r2, #16
 80088cc:	fa13 f38e 	uxtah	r3, r3, lr
 80088d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80088d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088d8:	b29b      	uxth	r3, r3
 80088da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088de:	45c1      	cmp	r9, r8
 80088e0:	f840 3b04 	str.w	r3, [r0], #4
 80088e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80088e8:	d2e8      	bcs.n	80088bc <quorem+0xb0>
 80088ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088f2:	b922      	cbnz	r2, 80088fe <quorem+0xf2>
 80088f4:	3b04      	subs	r3, #4
 80088f6:	429d      	cmp	r5, r3
 80088f8:	461a      	mov	r2, r3
 80088fa:	d30a      	bcc.n	8008912 <quorem+0x106>
 80088fc:	613c      	str	r4, [r7, #16]
 80088fe:	4630      	mov	r0, r6
 8008900:	b003      	add	sp, #12
 8008902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008906:	6812      	ldr	r2, [r2, #0]
 8008908:	3b04      	subs	r3, #4
 800890a:	2a00      	cmp	r2, #0
 800890c:	d1cc      	bne.n	80088a8 <quorem+0x9c>
 800890e:	3c01      	subs	r4, #1
 8008910:	e7c7      	b.n	80088a2 <quorem+0x96>
 8008912:	6812      	ldr	r2, [r2, #0]
 8008914:	3b04      	subs	r3, #4
 8008916:	2a00      	cmp	r2, #0
 8008918:	d1f0      	bne.n	80088fc <quorem+0xf0>
 800891a:	3c01      	subs	r4, #1
 800891c:	e7eb      	b.n	80088f6 <quorem+0xea>
 800891e:	2000      	movs	r0, #0
 8008920:	e7ee      	b.n	8008900 <quorem+0xf4>
 8008922:	0000      	movs	r0, r0
 8008924:	0000      	movs	r0, r0
	...

08008928 <_dtoa_r>:
 8008928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800892c:	ed2d 8b02 	vpush	{d8}
 8008930:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008932:	b091      	sub	sp, #68	; 0x44
 8008934:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008938:	ec59 8b10 	vmov	r8, r9, d0
 800893c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800893e:	9106      	str	r1, [sp, #24]
 8008940:	4606      	mov	r6, r0
 8008942:	9208      	str	r2, [sp, #32]
 8008944:	930c      	str	r3, [sp, #48]	; 0x30
 8008946:	b975      	cbnz	r5, 8008966 <_dtoa_r+0x3e>
 8008948:	2010      	movs	r0, #16
 800894a:	f000 fd5f 	bl	800940c <malloc>
 800894e:	4602      	mov	r2, r0
 8008950:	6270      	str	r0, [r6, #36]	; 0x24
 8008952:	b920      	cbnz	r0, 800895e <_dtoa_r+0x36>
 8008954:	4baa      	ldr	r3, [pc, #680]	; (8008c00 <_dtoa_r+0x2d8>)
 8008956:	21ea      	movs	r1, #234	; 0xea
 8008958:	48aa      	ldr	r0, [pc, #680]	; (8008c04 <_dtoa_r+0x2dc>)
 800895a:	f001 fb53 	bl	800a004 <__assert_func>
 800895e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008962:	6005      	str	r5, [r0, #0]
 8008964:	60c5      	str	r5, [r0, #12]
 8008966:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008968:	6819      	ldr	r1, [r3, #0]
 800896a:	b151      	cbz	r1, 8008982 <_dtoa_r+0x5a>
 800896c:	685a      	ldr	r2, [r3, #4]
 800896e:	604a      	str	r2, [r1, #4]
 8008970:	2301      	movs	r3, #1
 8008972:	4093      	lsls	r3, r2
 8008974:	608b      	str	r3, [r1, #8]
 8008976:	4630      	mov	r0, r6
 8008978:	f000 fd9e 	bl	80094b8 <_Bfree>
 800897c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800897e:	2200      	movs	r2, #0
 8008980:	601a      	str	r2, [r3, #0]
 8008982:	f1b9 0300 	subs.w	r3, r9, #0
 8008986:	bfbb      	ittet	lt
 8008988:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800898c:	9303      	strlt	r3, [sp, #12]
 800898e:	2300      	movge	r3, #0
 8008990:	2201      	movlt	r2, #1
 8008992:	bfac      	ite	ge
 8008994:	6023      	strge	r3, [r4, #0]
 8008996:	6022      	strlt	r2, [r4, #0]
 8008998:	4b9b      	ldr	r3, [pc, #620]	; (8008c08 <_dtoa_r+0x2e0>)
 800899a:	9c03      	ldr	r4, [sp, #12]
 800899c:	43a3      	bics	r3, r4
 800899e:	d11c      	bne.n	80089da <_dtoa_r+0xb2>
 80089a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80089a6:	6013      	str	r3, [r2, #0]
 80089a8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80089ac:	ea53 0308 	orrs.w	r3, r3, r8
 80089b0:	f000 84fd 	beq.w	80093ae <_dtoa_r+0xa86>
 80089b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80089b6:	b963      	cbnz	r3, 80089d2 <_dtoa_r+0xaa>
 80089b8:	4b94      	ldr	r3, [pc, #592]	; (8008c0c <_dtoa_r+0x2e4>)
 80089ba:	e01f      	b.n	80089fc <_dtoa_r+0xd4>
 80089bc:	4b94      	ldr	r3, [pc, #592]	; (8008c10 <_dtoa_r+0x2e8>)
 80089be:	9301      	str	r3, [sp, #4]
 80089c0:	3308      	adds	r3, #8
 80089c2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80089c4:	6013      	str	r3, [r2, #0]
 80089c6:	9801      	ldr	r0, [sp, #4]
 80089c8:	b011      	add	sp, #68	; 0x44
 80089ca:	ecbd 8b02 	vpop	{d8}
 80089ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d2:	4b8e      	ldr	r3, [pc, #568]	; (8008c0c <_dtoa_r+0x2e4>)
 80089d4:	9301      	str	r3, [sp, #4]
 80089d6:	3303      	adds	r3, #3
 80089d8:	e7f3      	b.n	80089c2 <_dtoa_r+0x9a>
 80089da:	ed9d 8b02 	vldr	d8, [sp, #8]
 80089de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80089e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089e6:	d10b      	bne.n	8008a00 <_dtoa_r+0xd8>
 80089e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089ea:	2301      	movs	r3, #1
 80089ec:	6013      	str	r3, [r2, #0]
 80089ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 84d9 	beq.w	80093a8 <_dtoa_r+0xa80>
 80089f6:	4887      	ldr	r0, [pc, #540]	; (8008c14 <_dtoa_r+0x2ec>)
 80089f8:	6018      	str	r0, [r3, #0]
 80089fa:	1e43      	subs	r3, r0, #1
 80089fc:	9301      	str	r3, [sp, #4]
 80089fe:	e7e2      	b.n	80089c6 <_dtoa_r+0x9e>
 8008a00:	a90f      	add	r1, sp, #60	; 0x3c
 8008a02:	aa0e      	add	r2, sp, #56	; 0x38
 8008a04:	4630      	mov	r0, r6
 8008a06:	eeb0 0b48 	vmov.f64	d0, d8
 8008a0a:	f001 f83d 	bl	8009a88 <__d2b>
 8008a0e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8008a12:	4605      	mov	r5, r0
 8008a14:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008a16:	2900      	cmp	r1, #0
 8008a18:	d046      	beq.n	8008aa8 <_dtoa_r+0x180>
 8008a1a:	ee18 4a90 	vmov	r4, s17
 8008a1e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008a22:	ec53 2b18 	vmov	r2, r3, d8
 8008a26:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8008a2a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008a2e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008a32:	2400      	movs	r4, #0
 8008a34:	ec43 2b16 	vmov	d6, r2, r3
 8008a38:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8008a3c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008be8 <_dtoa_r+0x2c0>
 8008a40:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008a44:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8008bf0 <_dtoa_r+0x2c8>
 8008a48:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008a4c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008bf8 <_dtoa_r+0x2d0>
 8008a50:	ee07 1a90 	vmov	s15, r1
 8008a54:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008a58:	eeb0 7b46 	vmov.f64	d7, d6
 8008a5c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008a60:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008a64:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a6c:	ee16 ba90 	vmov	fp, s13
 8008a70:	940a      	str	r4, [sp, #40]	; 0x28
 8008a72:	d508      	bpl.n	8008a86 <_dtoa_r+0x15e>
 8008a74:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008a78:	eeb4 6b47 	vcmp.f64	d6, d7
 8008a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a80:	bf18      	it	ne
 8008a82:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008a86:	f1bb 0f16 	cmp.w	fp, #22
 8008a8a:	d82f      	bhi.n	8008aec <_dtoa_r+0x1c4>
 8008a8c:	4b62      	ldr	r3, [pc, #392]	; (8008c18 <_dtoa_r+0x2f0>)
 8008a8e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a92:	ed93 7b00 	vldr	d7, [r3]
 8008a96:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a9e:	d501      	bpl.n	8008aa4 <_dtoa_r+0x17c>
 8008aa0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	e022      	b.n	8008aee <_dtoa_r+0x1c6>
 8008aa8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008aaa:	4401      	add	r1, r0
 8008aac:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8008ab0:	2b20      	cmp	r3, #32
 8008ab2:	bfc1      	itttt	gt
 8008ab4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008ab8:	fa04 f303 	lslgt.w	r3, r4, r3
 8008abc:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008ac0:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008ac4:	bfd6      	itet	le
 8008ac6:	f1c3 0320 	rsble	r3, r3, #32
 8008aca:	ea43 0808 	orrgt.w	r8, r3, r8
 8008ace:	fa08 f803 	lslle.w	r8, r8, r3
 8008ad2:	ee07 8a90 	vmov	s15, r8
 8008ad6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008ada:	3901      	subs	r1, #1
 8008adc:	ee17 4a90 	vmov	r4, s15
 8008ae0:	ec53 2b17 	vmov	r2, r3, d7
 8008ae4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008ae8:	2401      	movs	r4, #1
 8008aea:	e7a3      	b.n	8008a34 <_dtoa_r+0x10c>
 8008aec:	2301      	movs	r3, #1
 8008aee:	930b      	str	r3, [sp, #44]	; 0x2c
 8008af0:	1a43      	subs	r3, r0, r1
 8008af2:	1e5a      	subs	r2, r3, #1
 8008af4:	bf45      	ittet	mi
 8008af6:	f1c3 0301 	rsbmi	r3, r3, #1
 8008afa:	9304      	strmi	r3, [sp, #16]
 8008afc:	2300      	movpl	r3, #0
 8008afe:	2300      	movmi	r3, #0
 8008b00:	9205      	str	r2, [sp, #20]
 8008b02:	bf54      	ite	pl
 8008b04:	9304      	strpl	r3, [sp, #16]
 8008b06:	9305      	strmi	r3, [sp, #20]
 8008b08:	f1bb 0f00 	cmp.w	fp, #0
 8008b0c:	db18      	blt.n	8008b40 <_dtoa_r+0x218>
 8008b0e:	9b05      	ldr	r3, [sp, #20]
 8008b10:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8008b14:	445b      	add	r3, fp
 8008b16:	9305      	str	r3, [sp, #20]
 8008b18:	2300      	movs	r3, #0
 8008b1a:	9a06      	ldr	r2, [sp, #24]
 8008b1c:	2a09      	cmp	r2, #9
 8008b1e:	d849      	bhi.n	8008bb4 <_dtoa_r+0x28c>
 8008b20:	2a05      	cmp	r2, #5
 8008b22:	bfc4      	itt	gt
 8008b24:	3a04      	subgt	r2, #4
 8008b26:	9206      	strgt	r2, [sp, #24]
 8008b28:	9a06      	ldr	r2, [sp, #24]
 8008b2a:	f1a2 0202 	sub.w	r2, r2, #2
 8008b2e:	bfcc      	ite	gt
 8008b30:	2400      	movgt	r4, #0
 8008b32:	2401      	movle	r4, #1
 8008b34:	2a03      	cmp	r2, #3
 8008b36:	d848      	bhi.n	8008bca <_dtoa_r+0x2a2>
 8008b38:	e8df f002 	tbb	[pc, r2]
 8008b3c:	3a2c2e0b 	.word	0x3a2c2e0b
 8008b40:	9b04      	ldr	r3, [sp, #16]
 8008b42:	2200      	movs	r2, #0
 8008b44:	eba3 030b 	sub.w	r3, r3, fp
 8008b48:	9304      	str	r3, [sp, #16]
 8008b4a:	9209      	str	r2, [sp, #36]	; 0x24
 8008b4c:	f1cb 0300 	rsb	r3, fp, #0
 8008b50:	e7e3      	b.n	8008b1a <_dtoa_r+0x1f2>
 8008b52:	2200      	movs	r2, #0
 8008b54:	9207      	str	r2, [sp, #28]
 8008b56:	9a08      	ldr	r2, [sp, #32]
 8008b58:	2a00      	cmp	r2, #0
 8008b5a:	dc39      	bgt.n	8008bd0 <_dtoa_r+0x2a8>
 8008b5c:	f04f 0a01 	mov.w	sl, #1
 8008b60:	46d1      	mov	r9, sl
 8008b62:	4652      	mov	r2, sl
 8008b64:	f8cd a020 	str.w	sl, [sp, #32]
 8008b68:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	6079      	str	r1, [r7, #4]
 8008b6e:	2004      	movs	r0, #4
 8008b70:	f100 0c14 	add.w	ip, r0, #20
 8008b74:	4594      	cmp	ip, r2
 8008b76:	6879      	ldr	r1, [r7, #4]
 8008b78:	d92f      	bls.n	8008bda <_dtoa_r+0x2b2>
 8008b7a:	4630      	mov	r0, r6
 8008b7c:	930d      	str	r3, [sp, #52]	; 0x34
 8008b7e:	f000 fc5b 	bl	8009438 <_Balloc>
 8008b82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b84:	9001      	str	r0, [sp, #4]
 8008b86:	4602      	mov	r2, r0
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d149      	bne.n	8008c20 <_dtoa_r+0x2f8>
 8008b8c:	4b23      	ldr	r3, [pc, #140]	; (8008c1c <_dtoa_r+0x2f4>)
 8008b8e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008b92:	e6e1      	b.n	8008958 <_dtoa_r+0x30>
 8008b94:	2201      	movs	r2, #1
 8008b96:	e7dd      	b.n	8008b54 <_dtoa_r+0x22c>
 8008b98:	2200      	movs	r2, #0
 8008b9a:	9207      	str	r2, [sp, #28]
 8008b9c:	9a08      	ldr	r2, [sp, #32]
 8008b9e:	eb0b 0a02 	add.w	sl, fp, r2
 8008ba2:	f10a 0901 	add.w	r9, sl, #1
 8008ba6:	464a      	mov	r2, r9
 8008ba8:	2a01      	cmp	r2, #1
 8008baa:	bfb8      	it	lt
 8008bac:	2201      	movlt	r2, #1
 8008bae:	e7db      	b.n	8008b68 <_dtoa_r+0x240>
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	e7f2      	b.n	8008b9a <_dtoa_r+0x272>
 8008bb4:	2401      	movs	r4, #1
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8008bbc:	f04f 3aff 	mov.w	sl, #4294967295
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	46d1      	mov	r9, sl
 8008bc4:	2212      	movs	r2, #18
 8008bc6:	9108      	str	r1, [sp, #32]
 8008bc8:	e7ce      	b.n	8008b68 <_dtoa_r+0x240>
 8008bca:	2201      	movs	r2, #1
 8008bcc:	9207      	str	r2, [sp, #28]
 8008bce:	e7f5      	b.n	8008bbc <_dtoa_r+0x294>
 8008bd0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008bd4:	46d1      	mov	r9, sl
 8008bd6:	4652      	mov	r2, sl
 8008bd8:	e7c6      	b.n	8008b68 <_dtoa_r+0x240>
 8008bda:	3101      	adds	r1, #1
 8008bdc:	6079      	str	r1, [r7, #4]
 8008bde:	0040      	lsls	r0, r0, #1
 8008be0:	e7c6      	b.n	8008b70 <_dtoa_r+0x248>
 8008be2:	bf00      	nop
 8008be4:	f3af 8000 	nop.w
 8008be8:	636f4361 	.word	0x636f4361
 8008bec:	3fd287a7 	.word	0x3fd287a7
 8008bf0:	8b60c8b3 	.word	0x8b60c8b3
 8008bf4:	3fc68a28 	.word	0x3fc68a28
 8008bf8:	509f79fb 	.word	0x509f79fb
 8008bfc:	3fd34413 	.word	0x3fd34413
 8008c00:	0800adf2 	.word	0x0800adf2
 8008c04:	0800ae09 	.word	0x0800ae09
 8008c08:	7ff00000 	.word	0x7ff00000
 8008c0c:	0800adee 	.word	0x0800adee
 8008c10:	0800ade5 	.word	0x0800ade5
 8008c14:	0800acc1 	.word	0x0800acc1
 8008c18:	0800af00 	.word	0x0800af00
 8008c1c:	0800ae64 	.word	0x0800ae64
 8008c20:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008c22:	9901      	ldr	r1, [sp, #4]
 8008c24:	6011      	str	r1, [r2, #0]
 8008c26:	f1b9 0f0e 	cmp.w	r9, #14
 8008c2a:	d86c      	bhi.n	8008d06 <_dtoa_r+0x3de>
 8008c2c:	2c00      	cmp	r4, #0
 8008c2e:	d06a      	beq.n	8008d06 <_dtoa_r+0x3de>
 8008c30:	f1bb 0f00 	cmp.w	fp, #0
 8008c34:	f340 80a0 	ble.w	8008d78 <_dtoa_r+0x450>
 8008c38:	49c1      	ldr	r1, [pc, #772]	; (8008f40 <_dtoa_r+0x618>)
 8008c3a:	f00b 020f 	and.w	r2, fp, #15
 8008c3e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008c42:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008c46:	ed92 7b00 	vldr	d7, [r2]
 8008c4a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8008c4e:	f000 8087 	beq.w	8008d60 <_dtoa_r+0x438>
 8008c52:	4abc      	ldr	r2, [pc, #752]	; (8008f44 <_dtoa_r+0x61c>)
 8008c54:	ed92 6b08 	vldr	d6, [r2, #32]
 8008c58:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008c5c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008c60:	f001 010f 	and.w	r1, r1, #15
 8008c64:	2203      	movs	r2, #3
 8008c66:	48b7      	ldr	r0, [pc, #732]	; (8008f44 <_dtoa_r+0x61c>)
 8008c68:	2900      	cmp	r1, #0
 8008c6a:	d17b      	bne.n	8008d64 <_dtoa_r+0x43c>
 8008c6c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008c70:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008c74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008c78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c7a:	2900      	cmp	r1, #0
 8008c7c:	f000 80a2 	beq.w	8008dc4 <_dtoa_r+0x49c>
 8008c80:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008c84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c88:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c90:	f140 8098 	bpl.w	8008dc4 <_dtoa_r+0x49c>
 8008c94:	f1b9 0f00 	cmp.w	r9, #0
 8008c98:	f000 8094 	beq.w	8008dc4 <_dtoa_r+0x49c>
 8008c9c:	f1ba 0f00 	cmp.w	sl, #0
 8008ca0:	dd2f      	ble.n	8008d02 <_dtoa_r+0x3da>
 8008ca2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008ca6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008caa:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008cae:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008cb2:	3201      	adds	r2, #1
 8008cb4:	4650      	mov	r0, sl
 8008cb6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008cba:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008cbe:	ee07 2a90 	vmov	s15, r2
 8008cc2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008cc6:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008cca:	ee15 4a90 	vmov	r4, s11
 8008cce:	ec52 1b15 	vmov	r1, r2, d5
 8008cd2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	d177      	bne.n	8008dca <_dtoa_r+0x4a2>
 8008cda:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008cde:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008ce2:	ec42 1b17 	vmov	d7, r1, r2
 8008ce6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cee:	f300 8263 	bgt.w	80091b8 <_dtoa_r+0x890>
 8008cf2:	eeb1 7b47 	vneg.f64	d7, d7
 8008cf6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cfe:	f100 8258 	bmi.w	80091b2 <_dtoa_r+0x88a>
 8008d02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008d06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d08:	2a00      	cmp	r2, #0
 8008d0a:	f2c0 811d 	blt.w	8008f48 <_dtoa_r+0x620>
 8008d0e:	f1bb 0f0e 	cmp.w	fp, #14
 8008d12:	f300 8119 	bgt.w	8008f48 <_dtoa_r+0x620>
 8008d16:	4b8a      	ldr	r3, [pc, #552]	; (8008f40 <_dtoa_r+0x618>)
 8008d18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008d1c:	ed93 6b00 	vldr	d6, [r3]
 8008d20:	9b08      	ldr	r3, [sp, #32]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	f280 80b7 	bge.w	8008e96 <_dtoa_r+0x56e>
 8008d28:	f1b9 0f00 	cmp.w	r9, #0
 8008d2c:	f300 80b3 	bgt.w	8008e96 <_dtoa_r+0x56e>
 8008d30:	f040 823f 	bne.w	80091b2 <_dtoa_r+0x88a>
 8008d34:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008d38:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008d3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d40:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d48:	464c      	mov	r4, r9
 8008d4a:	464f      	mov	r7, r9
 8008d4c:	f280 8215 	bge.w	800917a <_dtoa_r+0x852>
 8008d50:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008d54:	2331      	movs	r3, #49	; 0x31
 8008d56:	f808 3b01 	strb.w	r3, [r8], #1
 8008d5a:	f10b 0b01 	add.w	fp, fp, #1
 8008d5e:	e211      	b.n	8009184 <_dtoa_r+0x85c>
 8008d60:	2202      	movs	r2, #2
 8008d62:	e780      	b.n	8008c66 <_dtoa_r+0x33e>
 8008d64:	07cc      	lsls	r4, r1, #31
 8008d66:	d504      	bpl.n	8008d72 <_dtoa_r+0x44a>
 8008d68:	ed90 6b00 	vldr	d6, [r0]
 8008d6c:	3201      	adds	r2, #1
 8008d6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008d72:	1049      	asrs	r1, r1, #1
 8008d74:	3008      	adds	r0, #8
 8008d76:	e777      	b.n	8008c68 <_dtoa_r+0x340>
 8008d78:	d022      	beq.n	8008dc0 <_dtoa_r+0x498>
 8008d7a:	f1cb 0100 	rsb	r1, fp, #0
 8008d7e:	4a70      	ldr	r2, [pc, #448]	; (8008f40 <_dtoa_r+0x618>)
 8008d80:	f001 000f 	and.w	r0, r1, #15
 8008d84:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008d88:	ed92 7b00 	vldr	d7, [r2]
 8008d8c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008d90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008d94:	486b      	ldr	r0, [pc, #428]	; (8008f44 <_dtoa_r+0x61c>)
 8008d96:	1109      	asrs	r1, r1, #4
 8008d98:	2400      	movs	r4, #0
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	b929      	cbnz	r1, 8008daa <_dtoa_r+0x482>
 8008d9e:	2c00      	cmp	r4, #0
 8008da0:	f43f af6a 	beq.w	8008c78 <_dtoa_r+0x350>
 8008da4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008da8:	e766      	b.n	8008c78 <_dtoa_r+0x350>
 8008daa:	07cf      	lsls	r7, r1, #31
 8008dac:	d505      	bpl.n	8008dba <_dtoa_r+0x492>
 8008dae:	ed90 6b00 	vldr	d6, [r0]
 8008db2:	3201      	adds	r2, #1
 8008db4:	2401      	movs	r4, #1
 8008db6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008dba:	1049      	asrs	r1, r1, #1
 8008dbc:	3008      	adds	r0, #8
 8008dbe:	e7ed      	b.n	8008d9c <_dtoa_r+0x474>
 8008dc0:	2202      	movs	r2, #2
 8008dc2:	e759      	b.n	8008c78 <_dtoa_r+0x350>
 8008dc4:	465f      	mov	r7, fp
 8008dc6:	4648      	mov	r0, r9
 8008dc8:	e775      	b.n	8008cb6 <_dtoa_r+0x38e>
 8008dca:	ec42 1b17 	vmov	d7, r1, r2
 8008dce:	4a5c      	ldr	r2, [pc, #368]	; (8008f40 <_dtoa_r+0x618>)
 8008dd0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008dd4:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008dd8:	9a01      	ldr	r2, [sp, #4]
 8008dda:	1814      	adds	r4, r2, r0
 8008ddc:	9a07      	ldr	r2, [sp, #28]
 8008dde:	b352      	cbz	r2, 8008e36 <_dtoa_r+0x50e>
 8008de0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008de4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008de8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008dec:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008df0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008df4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008df8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008dfc:	ee14 2a90 	vmov	r2, s9
 8008e00:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008e04:	3230      	adds	r2, #48	; 0x30
 8008e06:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008e0a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e12:	f808 2b01 	strb.w	r2, [r8], #1
 8008e16:	d439      	bmi.n	8008e8c <_dtoa_r+0x564>
 8008e18:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008e1c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e24:	d472      	bmi.n	8008f0c <_dtoa_r+0x5e4>
 8008e26:	45a0      	cmp	r8, r4
 8008e28:	f43f af6b 	beq.w	8008d02 <_dtoa_r+0x3da>
 8008e2c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008e30:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008e34:	e7e0      	b.n	8008df8 <_dtoa_r+0x4d0>
 8008e36:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008e3a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008e3e:	4621      	mov	r1, r4
 8008e40:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008e44:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008e48:	ee14 2a90 	vmov	r2, s9
 8008e4c:	3230      	adds	r2, #48	; 0x30
 8008e4e:	f808 2b01 	strb.w	r2, [r8], #1
 8008e52:	45a0      	cmp	r8, r4
 8008e54:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008e58:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008e5c:	d118      	bne.n	8008e90 <_dtoa_r+0x568>
 8008e5e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008e62:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008e66:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e6e:	dc4d      	bgt.n	8008f0c <_dtoa_r+0x5e4>
 8008e70:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008e74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e7c:	f57f af41 	bpl.w	8008d02 <_dtoa_r+0x3da>
 8008e80:	4688      	mov	r8, r1
 8008e82:	3901      	subs	r1, #1
 8008e84:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008e88:	2b30      	cmp	r3, #48	; 0x30
 8008e8a:	d0f9      	beq.n	8008e80 <_dtoa_r+0x558>
 8008e8c:	46bb      	mov	fp, r7
 8008e8e:	e02a      	b.n	8008ee6 <_dtoa_r+0x5be>
 8008e90:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008e94:	e7d6      	b.n	8008e44 <_dtoa_r+0x51c>
 8008e96:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e9a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008e9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008ea2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008ea6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008eaa:	ee15 3a10 	vmov	r3, s10
 8008eae:	3330      	adds	r3, #48	; 0x30
 8008eb0:	f808 3b01 	strb.w	r3, [r8], #1
 8008eb4:	9b01      	ldr	r3, [sp, #4]
 8008eb6:	eba8 0303 	sub.w	r3, r8, r3
 8008eba:	4599      	cmp	r9, r3
 8008ebc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008ec0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008ec4:	d133      	bne.n	8008f2e <_dtoa_r+0x606>
 8008ec6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008eca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ed2:	dc1a      	bgt.n	8008f0a <_dtoa_r+0x5e2>
 8008ed4:	eeb4 7b46 	vcmp.f64	d7, d6
 8008ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008edc:	d103      	bne.n	8008ee6 <_dtoa_r+0x5be>
 8008ede:	ee15 3a10 	vmov	r3, s10
 8008ee2:	07d9      	lsls	r1, r3, #31
 8008ee4:	d411      	bmi.n	8008f0a <_dtoa_r+0x5e2>
 8008ee6:	4629      	mov	r1, r5
 8008ee8:	4630      	mov	r0, r6
 8008eea:	f000 fae5 	bl	80094b8 <_Bfree>
 8008eee:	2300      	movs	r3, #0
 8008ef0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ef2:	f888 3000 	strb.w	r3, [r8]
 8008ef6:	f10b 0301 	add.w	r3, fp, #1
 8008efa:	6013      	str	r3, [r2, #0]
 8008efc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f43f ad61 	beq.w	80089c6 <_dtoa_r+0x9e>
 8008f04:	f8c3 8000 	str.w	r8, [r3]
 8008f08:	e55d      	b.n	80089c6 <_dtoa_r+0x9e>
 8008f0a:	465f      	mov	r7, fp
 8008f0c:	4643      	mov	r3, r8
 8008f0e:	4698      	mov	r8, r3
 8008f10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f14:	2a39      	cmp	r2, #57	; 0x39
 8008f16:	d106      	bne.n	8008f26 <_dtoa_r+0x5fe>
 8008f18:	9a01      	ldr	r2, [sp, #4]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d1f7      	bne.n	8008f0e <_dtoa_r+0x5e6>
 8008f1e:	9901      	ldr	r1, [sp, #4]
 8008f20:	2230      	movs	r2, #48	; 0x30
 8008f22:	3701      	adds	r7, #1
 8008f24:	700a      	strb	r2, [r1, #0]
 8008f26:	781a      	ldrb	r2, [r3, #0]
 8008f28:	3201      	adds	r2, #1
 8008f2a:	701a      	strb	r2, [r3, #0]
 8008f2c:	e7ae      	b.n	8008e8c <_dtoa_r+0x564>
 8008f2e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008f32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f3a:	d1b2      	bne.n	8008ea2 <_dtoa_r+0x57a>
 8008f3c:	e7d3      	b.n	8008ee6 <_dtoa_r+0x5be>
 8008f3e:	bf00      	nop
 8008f40:	0800af00 	.word	0x0800af00
 8008f44:	0800aed8 	.word	0x0800aed8
 8008f48:	9907      	ldr	r1, [sp, #28]
 8008f4a:	2900      	cmp	r1, #0
 8008f4c:	f000 80d0 	beq.w	80090f0 <_dtoa_r+0x7c8>
 8008f50:	9906      	ldr	r1, [sp, #24]
 8008f52:	2901      	cmp	r1, #1
 8008f54:	f300 80b4 	bgt.w	80090c0 <_dtoa_r+0x798>
 8008f58:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008f5a:	2900      	cmp	r1, #0
 8008f5c:	f000 80ac 	beq.w	80090b8 <_dtoa_r+0x790>
 8008f60:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008f64:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008f68:	461c      	mov	r4, r3
 8008f6a:	930a      	str	r3, [sp, #40]	; 0x28
 8008f6c:	9b04      	ldr	r3, [sp, #16]
 8008f6e:	4413      	add	r3, r2
 8008f70:	9304      	str	r3, [sp, #16]
 8008f72:	9b05      	ldr	r3, [sp, #20]
 8008f74:	2101      	movs	r1, #1
 8008f76:	4413      	add	r3, r2
 8008f78:	4630      	mov	r0, r6
 8008f7a:	9305      	str	r3, [sp, #20]
 8008f7c:	f000 fb54 	bl	8009628 <__i2b>
 8008f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f82:	4607      	mov	r7, r0
 8008f84:	f1b8 0f00 	cmp.w	r8, #0
 8008f88:	dd0d      	ble.n	8008fa6 <_dtoa_r+0x67e>
 8008f8a:	9a05      	ldr	r2, [sp, #20]
 8008f8c:	2a00      	cmp	r2, #0
 8008f8e:	dd0a      	ble.n	8008fa6 <_dtoa_r+0x67e>
 8008f90:	4542      	cmp	r2, r8
 8008f92:	9904      	ldr	r1, [sp, #16]
 8008f94:	bfa8      	it	ge
 8008f96:	4642      	movge	r2, r8
 8008f98:	1a89      	subs	r1, r1, r2
 8008f9a:	9104      	str	r1, [sp, #16]
 8008f9c:	9905      	ldr	r1, [sp, #20]
 8008f9e:	eba8 0802 	sub.w	r8, r8, r2
 8008fa2:	1a8a      	subs	r2, r1, r2
 8008fa4:	9205      	str	r2, [sp, #20]
 8008fa6:	b303      	cbz	r3, 8008fea <_dtoa_r+0x6c2>
 8008fa8:	9a07      	ldr	r2, [sp, #28]
 8008faa:	2a00      	cmp	r2, #0
 8008fac:	f000 80a5 	beq.w	80090fa <_dtoa_r+0x7d2>
 8008fb0:	2c00      	cmp	r4, #0
 8008fb2:	dd13      	ble.n	8008fdc <_dtoa_r+0x6b4>
 8008fb4:	4639      	mov	r1, r7
 8008fb6:	4622      	mov	r2, r4
 8008fb8:	4630      	mov	r0, r6
 8008fba:	930d      	str	r3, [sp, #52]	; 0x34
 8008fbc:	f000 fbf4 	bl	80097a8 <__pow5mult>
 8008fc0:	462a      	mov	r2, r5
 8008fc2:	4601      	mov	r1, r0
 8008fc4:	4607      	mov	r7, r0
 8008fc6:	4630      	mov	r0, r6
 8008fc8:	f000 fb44 	bl	8009654 <__multiply>
 8008fcc:	4629      	mov	r1, r5
 8008fce:	900a      	str	r0, [sp, #40]	; 0x28
 8008fd0:	4630      	mov	r0, r6
 8008fd2:	f000 fa71 	bl	80094b8 <_Bfree>
 8008fd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fda:	4615      	mov	r5, r2
 8008fdc:	1b1a      	subs	r2, r3, r4
 8008fde:	d004      	beq.n	8008fea <_dtoa_r+0x6c2>
 8008fe0:	4629      	mov	r1, r5
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	f000 fbe0 	bl	80097a8 <__pow5mult>
 8008fe8:	4605      	mov	r5, r0
 8008fea:	2101      	movs	r1, #1
 8008fec:	4630      	mov	r0, r6
 8008fee:	f000 fb1b 	bl	8009628 <__i2b>
 8008ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	4604      	mov	r4, r0
 8008ff8:	f340 8081 	ble.w	80090fe <_dtoa_r+0x7d6>
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	4601      	mov	r1, r0
 8009000:	4630      	mov	r0, r6
 8009002:	f000 fbd1 	bl	80097a8 <__pow5mult>
 8009006:	9b06      	ldr	r3, [sp, #24]
 8009008:	2b01      	cmp	r3, #1
 800900a:	4604      	mov	r4, r0
 800900c:	dd7a      	ble.n	8009104 <_dtoa_r+0x7dc>
 800900e:	2300      	movs	r3, #0
 8009010:	930a      	str	r3, [sp, #40]	; 0x28
 8009012:	6922      	ldr	r2, [r4, #16]
 8009014:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009018:	6910      	ldr	r0, [r2, #16]
 800901a:	f000 fab5 	bl	8009588 <__hi0bits>
 800901e:	f1c0 0020 	rsb	r0, r0, #32
 8009022:	9b05      	ldr	r3, [sp, #20]
 8009024:	4418      	add	r0, r3
 8009026:	f010 001f 	ands.w	r0, r0, #31
 800902a:	f000 808c 	beq.w	8009146 <_dtoa_r+0x81e>
 800902e:	f1c0 0220 	rsb	r2, r0, #32
 8009032:	2a04      	cmp	r2, #4
 8009034:	f340 8085 	ble.w	8009142 <_dtoa_r+0x81a>
 8009038:	f1c0 001c 	rsb	r0, r0, #28
 800903c:	9b04      	ldr	r3, [sp, #16]
 800903e:	4403      	add	r3, r0
 8009040:	9304      	str	r3, [sp, #16]
 8009042:	9b05      	ldr	r3, [sp, #20]
 8009044:	4403      	add	r3, r0
 8009046:	4480      	add	r8, r0
 8009048:	9305      	str	r3, [sp, #20]
 800904a:	9b04      	ldr	r3, [sp, #16]
 800904c:	2b00      	cmp	r3, #0
 800904e:	dd05      	ble.n	800905c <_dtoa_r+0x734>
 8009050:	4629      	mov	r1, r5
 8009052:	461a      	mov	r2, r3
 8009054:	4630      	mov	r0, r6
 8009056:	f000 fc01 	bl	800985c <__lshift>
 800905a:	4605      	mov	r5, r0
 800905c:	9b05      	ldr	r3, [sp, #20]
 800905e:	2b00      	cmp	r3, #0
 8009060:	dd05      	ble.n	800906e <_dtoa_r+0x746>
 8009062:	4621      	mov	r1, r4
 8009064:	461a      	mov	r2, r3
 8009066:	4630      	mov	r0, r6
 8009068:	f000 fbf8 	bl	800985c <__lshift>
 800906c:	4604      	mov	r4, r0
 800906e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009070:	2b00      	cmp	r3, #0
 8009072:	d06a      	beq.n	800914a <_dtoa_r+0x822>
 8009074:	4621      	mov	r1, r4
 8009076:	4628      	mov	r0, r5
 8009078:	f000 fc60 	bl	800993c <__mcmp>
 800907c:	2800      	cmp	r0, #0
 800907e:	da64      	bge.n	800914a <_dtoa_r+0x822>
 8009080:	2300      	movs	r3, #0
 8009082:	4629      	mov	r1, r5
 8009084:	220a      	movs	r2, #10
 8009086:	4630      	mov	r0, r6
 8009088:	f000 fa38 	bl	80094fc <__multadd>
 800908c:	9b07      	ldr	r3, [sp, #28]
 800908e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009092:	4605      	mov	r5, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	f000 8191 	beq.w	80093bc <_dtoa_r+0xa94>
 800909a:	4639      	mov	r1, r7
 800909c:	2300      	movs	r3, #0
 800909e:	220a      	movs	r2, #10
 80090a0:	4630      	mov	r0, r6
 80090a2:	f000 fa2b 	bl	80094fc <__multadd>
 80090a6:	f1ba 0f00 	cmp.w	sl, #0
 80090aa:	4607      	mov	r7, r0
 80090ac:	f300 808d 	bgt.w	80091ca <_dtoa_r+0x8a2>
 80090b0:	9b06      	ldr	r3, [sp, #24]
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	dc50      	bgt.n	8009158 <_dtoa_r+0x830>
 80090b6:	e088      	b.n	80091ca <_dtoa_r+0x8a2>
 80090b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090ba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80090be:	e751      	b.n	8008f64 <_dtoa_r+0x63c>
 80090c0:	f109 34ff 	add.w	r4, r9, #4294967295
 80090c4:	42a3      	cmp	r3, r4
 80090c6:	bfbf      	itttt	lt
 80090c8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80090ca:	1ae3      	sublt	r3, r4, r3
 80090cc:	18d2      	addlt	r2, r2, r3
 80090ce:	9209      	strlt	r2, [sp, #36]	; 0x24
 80090d0:	bfb6      	itet	lt
 80090d2:	4623      	movlt	r3, r4
 80090d4:	1b1c      	subge	r4, r3, r4
 80090d6:	2400      	movlt	r4, #0
 80090d8:	f1b9 0f00 	cmp.w	r9, #0
 80090dc:	bfb5      	itete	lt
 80090de:	9a04      	ldrlt	r2, [sp, #16]
 80090e0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80090e4:	eba2 0809 	sublt.w	r8, r2, r9
 80090e8:	464a      	movge	r2, r9
 80090ea:	bfb8      	it	lt
 80090ec:	2200      	movlt	r2, #0
 80090ee:	e73c      	b.n	8008f6a <_dtoa_r+0x642>
 80090f0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80090f4:	9f07      	ldr	r7, [sp, #28]
 80090f6:	461c      	mov	r4, r3
 80090f8:	e744      	b.n	8008f84 <_dtoa_r+0x65c>
 80090fa:	461a      	mov	r2, r3
 80090fc:	e770      	b.n	8008fe0 <_dtoa_r+0x6b8>
 80090fe:	9b06      	ldr	r3, [sp, #24]
 8009100:	2b01      	cmp	r3, #1
 8009102:	dc18      	bgt.n	8009136 <_dtoa_r+0x80e>
 8009104:	9b02      	ldr	r3, [sp, #8]
 8009106:	b9b3      	cbnz	r3, 8009136 <_dtoa_r+0x80e>
 8009108:	9b03      	ldr	r3, [sp, #12]
 800910a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800910e:	b9a2      	cbnz	r2, 800913a <_dtoa_r+0x812>
 8009110:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009114:	0d12      	lsrs	r2, r2, #20
 8009116:	0512      	lsls	r2, r2, #20
 8009118:	b18a      	cbz	r2, 800913e <_dtoa_r+0x816>
 800911a:	9b04      	ldr	r3, [sp, #16]
 800911c:	3301      	adds	r3, #1
 800911e:	9304      	str	r3, [sp, #16]
 8009120:	9b05      	ldr	r3, [sp, #20]
 8009122:	3301      	adds	r3, #1
 8009124:	9305      	str	r3, [sp, #20]
 8009126:	2301      	movs	r3, #1
 8009128:	930a      	str	r3, [sp, #40]	; 0x28
 800912a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800912c:	2b00      	cmp	r3, #0
 800912e:	f47f af70 	bne.w	8009012 <_dtoa_r+0x6ea>
 8009132:	2001      	movs	r0, #1
 8009134:	e775      	b.n	8009022 <_dtoa_r+0x6fa>
 8009136:	2300      	movs	r3, #0
 8009138:	e7f6      	b.n	8009128 <_dtoa_r+0x800>
 800913a:	9b02      	ldr	r3, [sp, #8]
 800913c:	e7f4      	b.n	8009128 <_dtoa_r+0x800>
 800913e:	920a      	str	r2, [sp, #40]	; 0x28
 8009140:	e7f3      	b.n	800912a <_dtoa_r+0x802>
 8009142:	d082      	beq.n	800904a <_dtoa_r+0x722>
 8009144:	4610      	mov	r0, r2
 8009146:	301c      	adds	r0, #28
 8009148:	e778      	b.n	800903c <_dtoa_r+0x714>
 800914a:	f1b9 0f00 	cmp.w	r9, #0
 800914e:	dc37      	bgt.n	80091c0 <_dtoa_r+0x898>
 8009150:	9b06      	ldr	r3, [sp, #24]
 8009152:	2b02      	cmp	r3, #2
 8009154:	dd34      	ble.n	80091c0 <_dtoa_r+0x898>
 8009156:	46ca      	mov	sl, r9
 8009158:	f1ba 0f00 	cmp.w	sl, #0
 800915c:	d10d      	bne.n	800917a <_dtoa_r+0x852>
 800915e:	4621      	mov	r1, r4
 8009160:	4653      	mov	r3, sl
 8009162:	2205      	movs	r2, #5
 8009164:	4630      	mov	r0, r6
 8009166:	f000 f9c9 	bl	80094fc <__multadd>
 800916a:	4601      	mov	r1, r0
 800916c:	4604      	mov	r4, r0
 800916e:	4628      	mov	r0, r5
 8009170:	f000 fbe4 	bl	800993c <__mcmp>
 8009174:	2800      	cmp	r0, #0
 8009176:	f73f adeb 	bgt.w	8008d50 <_dtoa_r+0x428>
 800917a:	9b08      	ldr	r3, [sp, #32]
 800917c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009180:	ea6f 0b03 	mvn.w	fp, r3
 8009184:	f04f 0900 	mov.w	r9, #0
 8009188:	4621      	mov	r1, r4
 800918a:	4630      	mov	r0, r6
 800918c:	f000 f994 	bl	80094b8 <_Bfree>
 8009190:	2f00      	cmp	r7, #0
 8009192:	f43f aea8 	beq.w	8008ee6 <_dtoa_r+0x5be>
 8009196:	f1b9 0f00 	cmp.w	r9, #0
 800919a:	d005      	beq.n	80091a8 <_dtoa_r+0x880>
 800919c:	45b9      	cmp	r9, r7
 800919e:	d003      	beq.n	80091a8 <_dtoa_r+0x880>
 80091a0:	4649      	mov	r1, r9
 80091a2:	4630      	mov	r0, r6
 80091a4:	f000 f988 	bl	80094b8 <_Bfree>
 80091a8:	4639      	mov	r1, r7
 80091aa:	4630      	mov	r0, r6
 80091ac:	f000 f984 	bl	80094b8 <_Bfree>
 80091b0:	e699      	b.n	8008ee6 <_dtoa_r+0x5be>
 80091b2:	2400      	movs	r4, #0
 80091b4:	4627      	mov	r7, r4
 80091b6:	e7e0      	b.n	800917a <_dtoa_r+0x852>
 80091b8:	46bb      	mov	fp, r7
 80091ba:	4604      	mov	r4, r0
 80091bc:	4607      	mov	r7, r0
 80091be:	e5c7      	b.n	8008d50 <_dtoa_r+0x428>
 80091c0:	9b07      	ldr	r3, [sp, #28]
 80091c2:	46ca      	mov	sl, r9
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f000 8100 	beq.w	80093ca <_dtoa_r+0xaa2>
 80091ca:	f1b8 0f00 	cmp.w	r8, #0
 80091ce:	dd05      	ble.n	80091dc <_dtoa_r+0x8b4>
 80091d0:	4639      	mov	r1, r7
 80091d2:	4642      	mov	r2, r8
 80091d4:	4630      	mov	r0, r6
 80091d6:	f000 fb41 	bl	800985c <__lshift>
 80091da:	4607      	mov	r7, r0
 80091dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d05d      	beq.n	800929e <_dtoa_r+0x976>
 80091e2:	6879      	ldr	r1, [r7, #4]
 80091e4:	4630      	mov	r0, r6
 80091e6:	f000 f927 	bl	8009438 <_Balloc>
 80091ea:	4680      	mov	r8, r0
 80091ec:	b928      	cbnz	r0, 80091fa <_dtoa_r+0x8d2>
 80091ee:	4b82      	ldr	r3, [pc, #520]	; (80093f8 <_dtoa_r+0xad0>)
 80091f0:	4602      	mov	r2, r0
 80091f2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80091f6:	f7ff bbaf 	b.w	8008958 <_dtoa_r+0x30>
 80091fa:	693a      	ldr	r2, [r7, #16]
 80091fc:	3202      	adds	r2, #2
 80091fe:	0092      	lsls	r2, r2, #2
 8009200:	f107 010c 	add.w	r1, r7, #12
 8009204:	300c      	adds	r0, #12
 8009206:	f000 f909 	bl	800941c <memcpy>
 800920a:	2201      	movs	r2, #1
 800920c:	4641      	mov	r1, r8
 800920e:	4630      	mov	r0, r6
 8009210:	f000 fb24 	bl	800985c <__lshift>
 8009214:	9b01      	ldr	r3, [sp, #4]
 8009216:	3301      	adds	r3, #1
 8009218:	9304      	str	r3, [sp, #16]
 800921a:	9b01      	ldr	r3, [sp, #4]
 800921c:	4453      	add	r3, sl
 800921e:	9308      	str	r3, [sp, #32]
 8009220:	9b02      	ldr	r3, [sp, #8]
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	46b9      	mov	r9, r7
 8009228:	9307      	str	r3, [sp, #28]
 800922a:	4607      	mov	r7, r0
 800922c:	9b04      	ldr	r3, [sp, #16]
 800922e:	4621      	mov	r1, r4
 8009230:	3b01      	subs	r3, #1
 8009232:	4628      	mov	r0, r5
 8009234:	9302      	str	r3, [sp, #8]
 8009236:	f7ff fae9 	bl	800880c <quorem>
 800923a:	4603      	mov	r3, r0
 800923c:	3330      	adds	r3, #48	; 0x30
 800923e:	9005      	str	r0, [sp, #20]
 8009240:	4649      	mov	r1, r9
 8009242:	4628      	mov	r0, r5
 8009244:	9309      	str	r3, [sp, #36]	; 0x24
 8009246:	f000 fb79 	bl	800993c <__mcmp>
 800924a:	463a      	mov	r2, r7
 800924c:	4682      	mov	sl, r0
 800924e:	4621      	mov	r1, r4
 8009250:	4630      	mov	r0, r6
 8009252:	f000 fb8f 	bl	8009974 <__mdiff>
 8009256:	68c2      	ldr	r2, [r0, #12]
 8009258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800925a:	4680      	mov	r8, r0
 800925c:	bb0a      	cbnz	r2, 80092a2 <_dtoa_r+0x97a>
 800925e:	4601      	mov	r1, r0
 8009260:	4628      	mov	r0, r5
 8009262:	f000 fb6b 	bl	800993c <__mcmp>
 8009266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009268:	4602      	mov	r2, r0
 800926a:	4641      	mov	r1, r8
 800926c:	4630      	mov	r0, r6
 800926e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8009272:	f000 f921 	bl	80094b8 <_Bfree>
 8009276:	9b06      	ldr	r3, [sp, #24]
 8009278:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800927a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800927e:	ea43 0102 	orr.w	r1, r3, r2
 8009282:	9b07      	ldr	r3, [sp, #28]
 8009284:	430b      	orrs	r3, r1
 8009286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009288:	d10d      	bne.n	80092a6 <_dtoa_r+0x97e>
 800928a:	2b39      	cmp	r3, #57	; 0x39
 800928c:	d029      	beq.n	80092e2 <_dtoa_r+0x9ba>
 800928e:	f1ba 0f00 	cmp.w	sl, #0
 8009292:	dd01      	ble.n	8009298 <_dtoa_r+0x970>
 8009294:	9b05      	ldr	r3, [sp, #20]
 8009296:	3331      	adds	r3, #49	; 0x31
 8009298:	9a02      	ldr	r2, [sp, #8]
 800929a:	7013      	strb	r3, [r2, #0]
 800929c:	e774      	b.n	8009188 <_dtoa_r+0x860>
 800929e:	4638      	mov	r0, r7
 80092a0:	e7b8      	b.n	8009214 <_dtoa_r+0x8ec>
 80092a2:	2201      	movs	r2, #1
 80092a4:	e7e1      	b.n	800926a <_dtoa_r+0x942>
 80092a6:	f1ba 0f00 	cmp.w	sl, #0
 80092aa:	db06      	blt.n	80092ba <_dtoa_r+0x992>
 80092ac:	9906      	ldr	r1, [sp, #24]
 80092ae:	ea41 0a0a 	orr.w	sl, r1, sl
 80092b2:	9907      	ldr	r1, [sp, #28]
 80092b4:	ea5a 0101 	orrs.w	r1, sl, r1
 80092b8:	d120      	bne.n	80092fc <_dtoa_r+0x9d4>
 80092ba:	2a00      	cmp	r2, #0
 80092bc:	ddec      	ble.n	8009298 <_dtoa_r+0x970>
 80092be:	4629      	mov	r1, r5
 80092c0:	2201      	movs	r2, #1
 80092c2:	4630      	mov	r0, r6
 80092c4:	9304      	str	r3, [sp, #16]
 80092c6:	f000 fac9 	bl	800985c <__lshift>
 80092ca:	4621      	mov	r1, r4
 80092cc:	4605      	mov	r5, r0
 80092ce:	f000 fb35 	bl	800993c <__mcmp>
 80092d2:	2800      	cmp	r0, #0
 80092d4:	9b04      	ldr	r3, [sp, #16]
 80092d6:	dc02      	bgt.n	80092de <_dtoa_r+0x9b6>
 80092d8:	d1de      	bne.n	8009298 <_dtoa_r+0x970>
 80092da:	07da      	lsls	r2, r3, #31
 80092dc:	d5dc      	bpl.n	8009298 <_dtoa_r+0x970>
 80092de:	2b39      	cmp	r3, #57	; 0x39
 80092e0:	d1d8      	bne.n	8009294 <_dtoa_r+0x96c>
 80092e2:	9a02      	ldr	r2, [sp, #8]
 80092e4:	2339      	movs	r3, #57	; 0x39
 80092e6:	7013      	strb	r3, [r2, #0]
 80092e8:	4643      	mov	r3, r8
 80092ea:	4698      	mov	r8, r3
 80092ec:	3b01      	subs	r3, #1
 80092ee:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80092f2:	2a39      	cmp	r2, #57	; 0x39
 80092f4:	d051      	beq.n	800939a <_dtoa_r+0xa72>
 80092f6:	3201      	adds	r2, #1
 80092f8:	701a      	strb	r2, [r3, #0]
 80092fa:	e745      	b.n	8009188 <_dtoa_r+0x860>
 80092fc:	2a00      	cmp	r2, #0
 80092fe:	dd03      	ble.n	8009308 <_dtoa_r+0x9e0>
 8009300:	2b39      	cmp	r3, #57	; 0x39
 8009302:	d0ee      	beq.n	80092e2 <_dtoa_r+0x9ba>
 8009304:	3301      	adds	r3, #1
 8009306:	e7c7      	b.n	8009298 <_dtoa_r+0x970>
 8009308:	9a04      	ldr	r2, [sp, #16]
 800930a:	9908      	ldr	r1, [sp, #32]
 800930c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009310:	428a      	cmp	r2, r1
 8009312:	d02b      	beq.n	800936c <_dtoa_r+0xa44>
 8009314:	4629      	mov	r1, r5
 8009316:	2300      	movs	r3, #0
 8009318:	220a      	movs	r2, #10
 800931a:	4630      	mov	r0, r6
 800931c:	f000 f8ee 	bl	80094fc <__multadd>
 8009320:	45b9      	cmp	r9, r7
 8009322:	4605      	mov	r5, r0
 8009324:	f04f 0300 	mov.w	r3, #0
 8009328:	f04f 020a 	mov.w	r2, #10
 800932c:	4649      	mov	r1, r9
 800932e:	4630      	mov	r0, r6
 8009330:	d107      	bne.n	8009342 <_dtoa_r+0xa1a>
 8009332:	f000 f8e3 	bl	80094fc <__multadd>
 8009336:	4681      	mov	r9, r0
 8009338:	4607      	mov	r7, r0
 800933a:	9b04      	ldr	r3, [sp, #16]
 800933c:	3301      	adds	r3, #1
 800933e:	9304      	str	r3, [sp, #16]
 8009340:	e774      	b.n	800922c <_dtoa_r+0x904>
 8009342:	f000 f8db 	bl	80094fc <__multadd>
 8009346:	4639      	mov	r1, r7
 8009348:	4681      	mov	r9, r0
 800934a:	2300      	movs	r3, #0
 800934c:	220a      	movs	r2, #10
 800934e:	4630      	mov	r0, r6
 8009350:	f000 f8d4 	bl	80094fc <__multadd>
 8009354:	4607      	mov	r7, r0
 8009356:	e7f0      	b.n	800933a <_dtoa_r+0xa12>
 8009358:	f1ba 0f00 	cmp.w	sl, #0
 800935c:	9a01      	ldr	r2, [sp, #4]
 800935e:	bfcc      	ite	gt
 8009360:	46d0      	movgt	r8, sl
 8009362:	f04f 0801 	movle.w	r8, #1
 8009366:	4490      	add	r8, r2
 8009368:	f04f 0900 	mov.w	r9, #0
 800936c:	4629      	mov	r1, r5
 800936e:	2201      	movs	r2, #1
 8009370:	4630      	mov	r0, r6
 8009372:	9302      	str	r3, [sp, #8]
 8009374:	f000 fa72 	bl	800985c <__lshift>
 8009378:	4621      	mov	r1, r4
 800937a:	4605      	mov	r5, r0
 800937c:	f000 fade 	bl	800993c <__mcmp>
 8009380:	2800      	cmp	r0, #0
 8009382:	dcb1      	bgt.n	80092e8 <_dtoa_r+0x9c0>
 8009384:	d102      	bne.n	800938c <_dtoa_r+0xa64>
 8009386:	9b02      	ldr	r3, [sp, #8]
 8009388:	07db      	lsls	r3, r3, #31
 800938a:	d4ad      	bmi.n	80092e8 <_dtoa_r+0x9c0>
 800938c:	4643      	mov	r3, r8
 800938e:	4698      	mov	r8, r3
 8009390:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009394:	2a30      	cmp	r2, #48	; 0x30
 8009396:	d0fa      	beq.n	800938e <_dtoa_r+0xa66>
 8009398:	e6f6      	b.n	8009188 <_dtoa_r+0x860>
 800939a:	9a01      	ldr	r2, [sp, #4]
 800939c:	429a      	cmp	r2, r3
 800939e:	d1a4      	bne.n	80092ea <_dtoa_r+0x9c2>
 80093a0:	f10b 0b01 	add.w	fp, fp, #1
 80093a4:	2331      	movs	r3, #49	; 0x31
 80093a6:	e778      	b.n	800929a <_dtoa_r+0x972>
 80093a8:	4b14      	ldr	r3, [pc, #80]	; (80093fc <_dtoa_r+0xad4>)
 80093aa:	f7ff bb27 	b.w	80089fc <_dtoa_r+0xd4>
 80093ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f47f ab03 	bne.w	80089bc <_dtoa_r+0x94>
 80093b6:	4b12      	ldr	r3, [pc, #72]	; (8009400 <_dtoa_r+0xad8>)
 80093b8:	f7ff bb20 	b.w	80089fc <_dtoa_r+0xd4>
 80093bc:	f1ba 0f00 	cmp.w	sl, #0
 80093c0:	dc03      	bgt.n	80093ca <_dtoa_r+0xaa2>
 80093c2:	9b06      	ldr	r3, [sp, #24]
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	f73f aec7 	bgt.w	8009158 <_dtoa_r+0x830>
 80093ca:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80093ce:	4621      	mov	r1, r4
 80093d0:	4628      	mov	r0, r5
 80093d2:	f7ff fa1b 	bl	800880c <quorem>
 80093d6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80093da:	f808 3b01 	strb.w	r3, [r8], #1
 80093de:	9a01      	ldr	r2, [sp, #4]
 80093e0:	eba8 0202 	sub.w	r2, r8, r2
 80093e4:	4592      	cmp	sl, r2
 80093e6:	ddb7      	ble.n	8009358 <_dtoa_r+0xa30>
 80093e8:	4629      	mov	r1, r5
 80093ea:	2300      	movs	r3, #0
 80093ec:	220a      	movs	r2, #10
 80093ee:	4630      	mov	r0, r6
 80093f0:	f000 f884 	bl	80094fc <__multadd>
 80093f4:	4605      	mov	r5, r0
 80093f6:	e7ea      	b.n	80093ce <_dtoa_r+0xaa6>
 80093f8:	0800ae64 	.word	0x0800ae64
 80093fc:	0800acc0 	.word	0x0800acc0
 8009400:	0800ade5 	.word	0x0800ade5

08009404 <_localeconv_r>:
 8009404:	4800      	ldr	r0, [pc, #0]	; (8009408 <_localeconv_r+0x4>)
 8009406:	4770      	bx	lr
 8009408:	2000053c 	.word	0x2000053c

0800940c <malloc>:
 800940c:	4b02      	ldr	r3, [pc, #8]	; (8009418 <malloc+0xc>)
 800940e:	4601      	mov	r1, r0
 8009410:	6818      	ldr	r0, [r3, #0]
 8009412:	f000 bc17 	b.w	8009c44 <_malloc_r>
 8009416:	bf00      	nop
 8009418:	200003e8 	.word	0x200003e8

0800941c <memcpy>:
 800941c:	440a      	add	r2, r1
 800941e:	4291      	cmp	r1, r2
 8009420:	f100 33ff 	add.w	r3, r0, #4294967295
 8009424:	d100      	bne.n	8009428 <memcpy+0xc>
 8009426:	4770      	bx	lr
 8009428:	b510      	push	{r4, lr}
 800942a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800942e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009432:	4291      	cmp	r1, r2
 8009434:	d1f9      	bne.n	800942a <memcpy+0xe>
 8009436:	bd10      	pop	{r4, pc}

08009438 <_Balloc>:
 8009438:	b570      	push	{r4, r5, r6, lr}
 800943a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800943c:	4604      	mov	r4, r0
 800943e:	460d      	mov	r5, r1
 8009440:	b976      	cbnz	r6, 8009460 <_Balloc+0x28>
 8009442:	2010      	movs	r0, #16
 8009444:	f7ff ffe2 	bl	800940c <malloc>
 8009448:	4602      	mov	r2, r0
 800944a:	6260      	str	r0, [r4, #36]	; 0x24
 800944c:	b920      	cbnz	r0, 8009458 <_Balloc+0x20>
 800944e:	4b18      	ldr	r3, [pc, #96]	; (80094b0 <_Balloc+0x78>)
 8009450:	4818      	ldr	r0, [pc, #96]	; (80094b4 <_Balloc+0x7c>)
 8009452:	2166      	movs	r1, #102	; 0x66
 8009454:	f000 fdd6 	bl	800a004 <__assert_func>
 8009458:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800945c:	6006      	str	r6, [r0, #0]
 800945e:	60c6      	str	r6, [r0, #12]
 8009460:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009462:	68f3      	ldr	r3, [r6, #12]
 8009464:	b183      	cbz	r3, 8009488 <_Balloc+0x50>
 8009466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800946e:	b9b8      	cbnz	r0, 80094a0 <_Balloc+0x68>
 8009470:	2101      	movs	r1, #1
 8009472:	fa01 f605 	lsl.w	r6, r1, r5
 8009476:	1d72      	adds	r2, r6, #5
 8009478:	0092      	lsls	r2, r2, #2
 800947a:	4620      	mov	r0, r4
 800947c:	f000 fb60 	bl	8009b40 <_calloc_r>
 8009480:	b160      	cbz	r0, 800949c <_Balloc+0x64>
 8009482:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009486:	e00e      	b.n	80094a6 <_Balloc+0x6e>
 8009488:	2221      	movs	r2, #33	; 0x21
 800948a:	2104      	movs	r1, #4
 800948c:	4620      	mov	r0, r4
 800948e:	f000 fb57 	bl	8009b40 <_calloc_r>
 8009492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009494:	60f0      	str	r0, [r6, #12]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1e4      	bne.n	8009466 <_Balloc+0x2e>
 800949c:	2000      	movs	r0, #0
 800949e:	bd70      	pop	{r4, r5, r6, pc}
 80094a0:	6802      	ldr	r2, [r0, #0]
 80094a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80094a6:	2300      	movs	r3, #0
 80094a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80094ac:	e7f7      	b.n	800949e <_Balloc+0x66>
 80094ae:	bf00      	nop
 80094b0:	0800adf2 	.word	0x0800adf2
 80094b4:	0800ae75 	.word	0x0800ae75

080094b8 <_Bfree>:
 80094b8:	b570      	push	{r4, r5, r6, lr}
 80094ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80094bc:	4605      	mov	r5, r0
 80094be:	460c      	mov	r4, r1
 80094c0:	b976      	cbnz	r6, 80094e0 <_Bfree+0x28>
 80094c2:	2010      	movs	r0, #16
 80094c4:	f7ff ffa2 	bl	800940c <malloc>
 80094c8:	4602      	mov	r2, r0
 80094ca:	6268      	str	r0, [r5, #36]	; 0x24
 80094cc:	b920      	cbnz	r0, 80094d8 <_Bfree+0x20>
 80094ce:	4b09      	ldr	r3, [pc, #36]	; (80094f4 <_Bfree+0x3c>)
 80094d0:	4809      	ldr	r0, [pc, #36]	; (80094f8 <_Bfree+0x40>)
 80094d2:	218a      	movs	r1, #138	; 0x8a
 80094d4:	f000 fd96 	bl	800a004 <__assert_func>
 80094d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094dc:	6006      	str	r6, [r0, #0]
 80094de:	60c6      	str	r6, [r0, #12]
 80094e0:	b13c      	cbz	r4, 80094f2 <_Bfree+0x3a>
 80094e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80094e4:	6862      	ldr	r2, [r4, #4]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094ec:	6021      	str	r1, [r4, #0]
 80094ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094f2:	bd70      	pop	{r4, r5, r6, pc}
 80094f4:	0800adf2 	.word	0x0800adf2
 80094f8:	0800ae75 	.word	0x0800ae75

080094fc <__multadd>:
 80094fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009500:	690d      	ldr	r5, [r1, #16]
 8009502:	4607      	mov	r7, r0
 8009504:	460c      	mov	r4, r1
 8009506:	461e      	mov	r6, r3
 8009508:	f101 0c14 	add.w	ip, r1, #20
 800950c:	2000      	movs	r0, #0
 800950e:	f8dc 3000 	ldr.w	r3, [ip]
 8009512:	b299      	uxth	r1, r3
 8009514:	fb02 6101 	mla	r1, r2, r1, r6
 8009518:	0c1e      	lsrs	r6, r3, #16
 800951a:	0c0b      	lsrs	r3, r1, #16
 800951c:	fb02 3306 	mla	r3, r2, r6, r3
 8009520:	b289      	uxth	r1, r1
 8009522:	3001      	adds	r0, #1
 8009524:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009528:	4285      	cmp	r5, r0
 800952a:	f84c 1b04 	str.w	r1, [ip], #4
 800952e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009532:	dcec      	bgt.n	800950e <__multadd+0x12>
 8009534:	b30e      	cbz	r6, 800957a <__multadd+0x7e>
 8009536:	68a3      	ldr	r3, [r4, #8]
 8009538:	42ab      	cmp	r3, r5
 800953a:	dc19      	bgt.n	8009570 <__multadd+0x74>
 800953c:	6861      	ldr	r1, [r4, #4]
 800953e:	4638      	mov	r0, r7
 8009540:	3101      	adds	r1, #1
 8009542:	f7ff ff79 	bl	8009438 <_Balloc>
 8009546:	4680      	mov	r8, r0
 8009548:	b928      	cbnz	r0, 8009556 <__multadd+0x5a>
 800954a:	4602      	mov	r2, r0
 800954c:	4b0c      	ldr	r3, [pc, #48]	; (8009580 <__multadd+0x84>)
 800954e:	480d      	ldr	r0, [pc, #52]	; (8009584 <__multadd+0x88>)
 8009550:	21b5      	movs	r1, #181	; 0xb5
 8009552:	f000 fd57 	bl	800a004 <__assert_func>
 8009556:	6922      	ldr	r2, [r4, #16]
 8009558:	3202      	adds	r2, #2
 800955a:	f104 010c 	add.w	r1, r4, #12
 800955e:	0092      	lsls	r2, r2, #2
 8009560:	300c      	adds	r0, #12
 8009562:	f7ff ff5b 	bl	800941c <memcpy>
 8009566:	4621      	mov	r1, r4
 8009568:	4638      	mov	r0, r7
 800956a:	f7ff ffa5 	bl	80094b8 <_Bfree>
 800956e:	4644      	mov	r4, r8
 8009570:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009574:	3501      	adds	r5, #1
 8009576:	615e      	str	r6, [r3, #20]
 8009578:	6125      	str	r5, [r4, #16]
 800957a:	4620      	mov	r0, r4
 800957c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009580:	0800ae64 	.word	0x0800ae64
 8009584:	0800ae75 	.word	0x0800ae75

08009588 <__hi0bits>:
 8009588:	0c03      	lsrs	r3, r0, #16
 800958a:	041b      	lsls	r3, r3, #16
 800958c:	b9d3      	cbnz	r3, 80095c4 <__hi0bits+0x3c>
 800958e:	0400      	lsls	r0, r0, #16
 8009590:	2310      	movs	r3, #16
 8009592:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009596:	bf04      	itt	eq
 8009598:	0200      	lsleq	r0, r0, #8
 800959a:	3308      	addeq	r3, #8
 800959c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80095a0:	bf04      	itt	eq
 80095a2:	0100      	lsleq	r0, r0, #4
 80095a4:	3304      	addeq	r3, #4
 80095a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80095aa:	bf04      	itt	eq
 80095ac:	0080      	lsleq	r0, r0, #2
 80095ae:	3302      	addeq	r3, #2
 80095b0:	2800      	cmp	r0, #0
 80095b2:	db05      	blt.n	80095c0 <__hi0bits+0x38>
 80095b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80095b8:	f103 0301 	add.w	r3, r3, #1
 80095bc:	bf08      	it	eq
 80095be:	2320      	moveq	r3, #32
 80095c0:	4618      	mov	r0, r3
 80095c2:	4770      	bx	lr
 80095c4:	2300      	movs	r3, #0
 80095c6:	e7e4      	b.n	8009592 <__hi0bits+0xa>

080095c8 <__lo0bits>:
 80095c8:	6803      	ldr	r3, [r0, #0]
 80095ca:	f013 0207 	ands.w	r2, r3, #7
 80095ce:	4601      	mov	r1, r0
 80095d0:	d00b      	beq.n	80095ea <__lo0bits+0x22>
 80095d2:	07da      	lsls	r2, r3, #31
 80095d4:	d423      	bmi.n	800961e <__lo0bits+0x56>
 80095d6:	0798      	lsls	r0, r3, #30
 80095d8:	bf49      	itett	mi
 80095da:	085b      	lsrmi	r3, r3, #1
 80095dc:	089b      	lsrpl	r3, r3, #2
 80095de:	2001      	movmi	r0, #1
 80095e0:	600b      	strmi	r3, [r1, #0]
 80095e2:	bf5c      	itt	pl
 80095e4:	600b      	strpl	r3, [r1, #0]
 80095e6:	2002      	movpl	r0, #2
 80095e8:	4770      	bx	lr
 80095ea:	b298      	uxth	r0, r3
 80095ec:	b9a8      	cbnz	r0, 800961a <__lo0bits+0x52>
 80095ee:	0c1b      	lsrs	r3, r3, #16
 80095f0:	2010      	movs	r0, #16
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	b90a      	cbnz	r2, 80095fa <__lo0bits+0x32>
 80095f6:	3008      	adds	r0, #8
 80095f8:	0a1b      	lsrs	r3, r3, #8
 80095fa:	071a      	lsls	r2, r3, #28
 80095fc:	bf04      	itt	eq
 80095fe:	091b      	lsreq	r3, r3, #4
 8009600:	3004      	addeq	r0, #4
 8009602:	079a      	lsls	r2, r3, #30
 8009604:	bf04      	itt	eq
 8009606:	089b      	lsreq	r3, r3, #2
 8009608:	3002      	addeq	r0, #2
 800960a:	07da      	lsls	r2, r3, #31
 800960c:	d403      	bmi.n	8009616 <__lo0bits+0x4e>
 800960e:	085b      	lsrs	r3, r3, #1
 8009610:	f100 0001 	add.w	r0, r0, #1
 8009614:	d005      	beq.n	8009622 <__lo0bits+0x5a>
 8009616:	600b      	str	r3, [r1, #0]
 8009618:	4770      	bx	lr
 800961a:	4610      	mov	r0, r2
 800961c:	e7e9      	b.n	80095f2 <__lo0bits+0x2a>
 800961e:	2000      	movs	r0, #0
 8009620:	4770      	bx	lr
 8009622:	2020      	movs	r0, #32
 8009624:	4770      	bx	lr
	...

08009628 <__i2b>:
 8009628:	b510      	push	{r4, lr}
 800962a:	460c      	mov	r4, r1
 800962c:	2101      	movs	r1, #1
 800962e:	f7ff ff03 	bl	8009438 <_Balloc>
 8009632:	4602      	mov	r2, r0
 8009634:	b928      	cbnz	r0, 8009642 <__i2b+0x1a>
 8009636:	4b05      	ldr	r3, [pc, #20]	; (800964c <__i2b+0x24>)
 8009638:	4805      	ldr	r0, [pc, #20]	; (8009650 <__i2b+0x28>)
 800963a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800963e:	f000 fce1 	bl	800a004 <__assert_func>
 8009642:	2301      	movs	r3, #1
 8009644:	6144      	str	r4, [r0, #20]
 8009646:	6103      	str	r3, [r0, #16]
 8009648:	bd10      	pop	{r4, pc}
 800964a:	bf00      	nop
 800964c:	0800ae64 	.word	0x0800ae64
 8009650:	0800ae75 	.word	0x0800ae75

08009654 <__multiply>:
 8009654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009658:	4691      	mov	r9, r2
 800965a:	690a      	ldr	r2, [r1, #16]
 800965c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009660:	429a      	cmp	r2, r3
 8009662:	bfb8      	it	lt
 8009664:	460b      	movlt	r3, r1
 8009666:	460c      	mov	r4, r1
 8009668:	bfbc      	itt	lt
 800966a:	464c      	movlt	r4, r9
 800966c:	4699      	movlt	r9, r3
 800966e:	6927      	ldr	r7, [r4, #16]
 8009670:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009674:	68a3      	ldr	r3, [r4, #8]
 8009676:	6861      	ldr	r1, [r4, #4]
 8009678:	eb07 060a 	add.w	r6, r7, sl
 800967c:	42b3      	cmp	r3, r6
 800967e:	b085      	sub	sp, #20
 8009680:	bfb8      	it	lt
 8009682:	3101      	addlt	r1, #1
 8009684:	f7ff fed8 	bl	8009438 <_Balloc>
 8009688:	b930      	cbnz	r0, 8009698 <__multiply+0x44>
 800968a:	4602      	mov	r2, r0
 800968c:	4b44      	ldr	r3, [pc, #272]	; (80097a0 <__multiply+0x14c>)
 800968e:	4845      	ldr	r0, [pc, #276]	; (80097a4 <__multiply+0x150>)
 8009690:	f240 115d 	movw	r1, #349	; 0x15d
 8009694:	f000 fcb6 	bl	800a004 <__assert_func>
 8009698:	f100 0514 	add.w	r5, r0, #20
 800969c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80096a0:	462b      	mov	r3, r5
 80096a2:	2200      	movs	r2, #0
 80096a4:	4543      	cmp	r3, r8
 80096a6:	d321      	bcc.n	80096ec <__multiply+0x98>
 80096a8:	f104 0314 	add.w	r3, r4, #20
 80096ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80096b0:	f109 0314 	add.w	r3, r9, #20
 80096b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80096b8:	9202      	str	r2, [sp, #8]
 80096ba:	1b3a      	subs	r2, r7, r4
 80096bc:	3a15      	subs	r2, #21
 80096be:	f022 0203 	bic.w	r2, r2, #3
 80096c2:	3204      	adds	r2, #4
 80096c4:	f104 0115 	add.w	r1, r4, #21
 80096c8:	428f      	cmp	r7, r1
 80096ca:	bf38      	it	cc
 80096cc:	2204      	movcc	r2, #4
 80096ce:	9201      	str	r2, [sp, #4]
 80096d0:	9a02      	ldr	r2, [sp, #8]
 80096d2:	9303      	str	r3, [sp, #12]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d80c      	bhi.n	80096f2 <__multiply+0x9e>
 80096d8:	2e00      	cmp	r6, #0
 80096da:	dd03      	ble.n	80096e4 <__multiply+0x90>
 80096dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d05a      	beq.n	800979a <__multiply+0x146>
 80096e4:	6106      	str	r6, [r0, #16]
 80096e6:	b005      	add	sp, #20
 80096e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ec:	f843 2b04 	str.w	r2, [r3], #4
 80096f0:	e7d8      	b.n	80096a4 <__multiply+0x50>
 80096f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80096f6:	f1ba 0f00 	cmp.w	sl, #0
 80096fa:	d024      	beq.n	8009746 <__multiply+0xf2>
 80096fc:	f104 0e14 	add.w	lr, r4, #20
 8009700:	46a9      	mov	r9, r5
 8009702:	f04f 0c00 	mov.w	ip, #0
 8009706:	f85e 2b04 	ldr.w	r2, [lr], #4
 800970a:	f8d9 1000 	ldr.w	r1, [r9]
 800970e:	fa1f fb82 	uxth.w	fp, r2
 8009712:	b289      	uxth	r1, r1
 8009714:	fb0a 110b 	mla	r1, sl, fp, r1
 8009718:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800971c:	f8d9 2000 	ldr.w	r2, [r9]
 8009720:	4461      	add	r1, ip
 8009722:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009726:	fb0a c20b 	mla	r2, sl, fp, ip
 800972a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800972e:	b289      	uxth	r1, r1
 8009730:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009734:	4577      	cmp	r7, lr
 8009736:	f849 1b04 	str.w	r1, [r9], #4
 800973a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800973e:	d8e2      	bhi.n	8009706 <__multiply+0xb2>
 8009740:	9a01      	ldr	r2, [sp, #4]
 8009742:	f845 c002 	str.w	ip, [r5, r2]
 8009746:	9a03      	ldr	r2, [sp, #12]
 8009748:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800974c:	3304      	adds	r3, #4
 800974e:	f1b9 0f00 	cmp.w	r9, #0
 8009752:	d020      	beq.n	8009796 <__multiply+0x142>
 8009754:	6829      	ldr	r1, [r5, #0]
 8009756:	f104 0c14 	add.w	ip, r4, #20
 800975a:	46ae      	mov	lr, r5
 800975c:	f04f 0a00 	mov.w	sl, #0
 8009760:	f8bc b000 	ldrh.w	fp, [ip]
 8009764:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009768:	fb09 220b 	mla	r2, r9, fp, r2
 800976c:	4492      	add	sl, r2
 800976e:	b289      	uxth	r1, r1
 8009770:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009774:	f84e 1b04 	str.w	r1, [lr], #4
 8009778:	f85c 2b04 	ldr.w	r2, [ip], #4
 800977c:	f8be 1000 	ldrh.w	r1, [lr]
 8009780:	0c12      	lsrs	r2, r2, #16
 8009782:	fb09 1102 	mla	r1, r9, r2, r1
 8009786:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800978a:	4567      	cmp	r7, ip
 800978c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009790:	d8e6      	bhi.n	8009760 <__multiply+0x10c>
 8009792:	9a01      	ldr	r2, [sp, #4]
 8009794:	50a9      	str	r1, [r5, r2]
 8009796:	3504      	adds	r5, #4
 8009798:	e79a      	b.n	80096d0 <__multiply+0x7c>
 800979a:	3e01      	subs	r6, #1
 800979c:	e79c      	b.n	80096d8 <__multiply+0x84>
 800979e:	bf00      	nop
 80097a0:	0800ae64 	.word	0x0800ae64
 80097a4:	0800ae75 	.word	0x0800ae75

080097a8 <__pow5mult>:
 80097a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097ac:	4615      	mov	r5, r2
 80097ae:	f012 0203 	ands.w	r2, r2, #3
 80097b2:	4606      	mov	r6, r0
 80097b4:	460f      	mov	r7, r1
 80097b6:	d007      	beq.n	80097c8 <__pow5mult+0x20>
 80097b8:	4c25      	ldr	r4, [pc, #148]	; (8009850 <__pow5mult+0xa8>)
 80097ba:	3a01      	subs	r2, #1
 80097bc:	2300      	movs	r3, #0
 80097be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80097c2:	f7ff fe9b 	bl	80094fc <__multadd>
 80097c6:	4607      	mov	r7, r0
 80097c8:	10ad      	asrs	r5, r5, #2
 80097ca:	d03d      	beq.n	8009848 <__pow5mult+0xa0>
 80097cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80097ce:	b97c      	cbnz	r4, 80097f0 <__pow5mult+0x48>
 80097d0:	2010      	movs	r0, #16
 80097d2:	f7ff fe1b 	bl	800940c <malloc>
 80097d6:	4602      	mov	r2, r0
 80097d8:	6270      	str	r0, [r6, #36]	; 0x24
 80097da:	b928      	cbnz	r0, 80097e8 <__pow5mult+0x40>
 80097dc:	4b1d      	ldr	r3, [pc, #116]	; (8009854 <__pow5mult+0xac>)
 80097de:	481e      	ldr	r0, [pc, #120]	; (8009858 <__pow5mult+0xb0>)
 80097e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80097e4:	f000 fc0e 	bl	800a004 <__assert_func>
 80097e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097ec:	6004      	str	r4, [r0, #0]
 80097ee:	60c4      	str	r4, [r0, #12]
 80097f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80097f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80097f8:	b94c      	cbnz	r4, 800980e <__pow5mult+0x66>
 80097fa:	f240 2171 	movw	r1, #625	; 0x271
 80097fe:	4630      	mov	r0, r6
 8009800:	f7ff ff12 	bl	8009628 <__i2b>
 8009804:	2300      	movs	r3, #0
 8009806:	f8c8 0008 	str.w	r0, [r8, #8]
 800980a:	4604      	mov	r4, r0
 800980c:	6003      	str	r3, [r0, #0]
 800980e:	f04f 0900 	mov.w	r9, #0
 8009812:	07eb      	lsls	r3, r5, #31
 8009814:	d50a      	bpl.n	800982c <__pow5mult+0x84>
 8009816:	4639      	mov	r1, r7
 8009818:	4622      	mov	r2, r4
 800981a:	4630      	mov	r0, r6
 800981c:	f7ff ff1a 	bl	8009654 <__multiply>
 8009820:	4639      	mov	r1, r7
 8009822:	4680      	mov	r8, r0
 8009824:	4630      	mov	r0, r6
 8009826:	f7ff fe47 	bl	80094b8 <_Bfree>
 800982a:	4647      	mov	r7, r8
 800982c:	106d      	asrs	r5, r5, #1
 800982e:	d00b      	beq.n	8009848 <__pow5mult+0xa0>
 8009830:	6820      	ldr	r0, [r4, #0]
 8009832:	b938      	cbnz	r0, 8009844 <__pow5mult+0x9c>
 8009834:	4622      	mov	r2, r4
 8009836:	4621      	mov	r1, r4
 8009838:	4630      	mov	r0, r6
 800983a:	f7ff ff0b 	bl	8009654 <__multiply>
 800983e:	6020      	str	r0, [r4, #0]
 8009840:	f8c0 9000 	str.w	r9, [r0]
 8009844:	4604      	mov	r4, r0
 8009846:	e7e4      	b.n	8009812 <__pow5mult+0x6a>
 8009848:	4638      	mov	r0, r7
 800984a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800984e:	bf00      	nop
 8009850:	0800afc8 	.word	0x0800afc8
 8009854:	0800adf2 	.word	0x0800adf2
 8009858:	0800ae75 	.word	0x0800ae75

0800985c <__lshift>:
 800985c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009860:	460c      	mov	r4, r1
 8009862:	6849      	ldr	r1, [r1, #4]
 8009864:	6923      	ldr	r3, [r4, #16]
 8009866:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800986a:	68a3      	ldr	r3, [r4, #8]
 800986c:	4607      	mov	r7, r0
 800986e:	4691      	mov	r9, r2
 8009870:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009874:	f108 0601 	add.w	r6, r8, #1
 8009878:	42b3      	cmp	r3, r6
 800987a:	db0b      	blt.n	8009894 <__lshift+0x38>
 800987c:	4638      	mov	r0, r7
 800987e:	f7ff fddb 	bl	8009438 <_Balloc>
 8009882:	4605      	mov	r5, r0
 8009884:	b948      	cbnz	r0, 800989a <__lshift+0x3e>
 8009886:	4602      	mov	r2, r0
 8009888:	4b2a      	ldr	r3, [pc, #168]	; (8009934 <__lshift+0xd8>)
 800988a:	482b      	ldr	r0, [pc, #172]	; (8009938 <__lshift+0xdc>)
 800988c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009890:	f000 fbb8 	bl	800a004 <__assert_func>
 8009894:	3101      	adds	r1, #1
 8009896:	005b      	lsls	r3, r3, #1
 8009898:	e7ee      	b.n	8009878 <__lshift+0x1c>
 800989a:	2300      	movs	r3, #0
 800989c:	f100 0114 	add.w	r1, r0, #20
 80098a0:	f100 0210 	add.w	r2, r0, #16
 80098a4:	4618      	mov	r0, r3
 80098a6:	4553      	cmp	r3, sl
 80098a8:	db37      	blt.n	800991a <__lshift+0xbe>
 80098aa:	6920      	ldr	r0, [r4, #16]
 80098ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80098b0:	f104 0314 	add.w	r3, r4, #20
 80098b4:	f019 091f 	ands.w	r9, r9, #31
 80098b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80098bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80098c0:	d02f      	beq.n	8009922 <__lshift+0xc6>
 80098c2:	f1c9 0e20 	rsb	lr, r9, #32
 80098c6:	468a      	mov	sl, r1
 80098c8:	f04f 0c00 	mov.w	ip, #0
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	fa02 f209 	lsl.w	r2, r2, r9
 80098d2:	ea42 020c 	orr.w	r2, r2, ip
 80098d6:	f84a 2b04 	str.w	r2, [sl], #4
 80098da:	f853 2b04 	ldr.w	r2, [r3], #4
 80098de:	4298      	cmp	r0, r3
 80098e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80098e4:	d8f2      	bhi.n	80098cc <__lshift+0x70>
 80098e6:	1b03      	subs	r3, r0, r4
 80098e8:	3b15      	subs	r3, #21
 80098ea:	f023 0303 	bic.w	r3, r3, #3
 80098ee:	3304      	adds	r3, #4
 80098f0:	f104 0215 	add.w	r2, r4, #21
 80098f4:	4290      	cmp	r0, r2
 80098f6:	bf38      	it	cc
 80098f8:	2304      	movcc	r3, #4
 80098fa:	f841 c003 	str.w	ip, [r1, r3]
 80098fe:	f1bc 0f00 	cmp.w	ip, #0
 8009902:	d001      	beq.n	8009908 <__lshift+0xac>
 8009904:	f108 0602 	add.w	r6, r8, #2
 8009908:	3e01      	subs	r6, #1
 800990a:	4638      	mov	r0, r7
 800990c:	612e      	str	r6, [r5, #16]
 800990e:	4621      	mov	r1, r4
 8009910:	f7ff fdd2 	bl	80094b8 <_Bfree>
 8009914:	4628      	mov	r0, r5
 8009916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800991a:	f842 0f04 	str.w	r0, [r2, #4]!
 800991e:	3301      	adds	r3, #1
 8009920:	e7c1      	b.n	80098a6 <__lshift+0x4a>
 8009922:	3904      	subs	r1, #4
 8009924:	f853 2b04 	ldr.w	r2, [r3], #4
 8009928:	f841 2f04 	str.w	r2, [r1, #4]!
 800992c:	4298      	cmp	r0, r3
 800992e:	d8f9      	bhi.n	8009924 <__lshift+0xc8>
 8009930:	e7ea      	b.n	8009908 <__lshift+0xac>
 8009932:	bf00      	nop
 8009934:	0800ae64 	.word	0x0800ae64
 8009938:	0800ae75 	.word	0x0800ae75

0800993c <__mcmp>:
 800993c:	b530      	push	{r4, r5, lr}
 800993e:	6902      	ldr	r2, [r0, #16]
 8009940:	690c      	ldr	r4, [r1, #16]
 8009942:	1b12      	subs	r2, r2, r4
 8009944:	d10e      	bne.n	8009964 <__mcmp+0x28>
 8009946:	f100 0314 	add.w	r3, r0, #20
 800994a:	3114      	adds	r1, #20
 800994c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009950:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009954:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009958:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800995c:	42a5      	cmp	r5, r4
 800995e:	d003      	beq.n	8009968 <__mcmp+0x2c>
 8009960:	d305      	bcc.n	800996e <__mcmp+0x32>
 8009962:	2201      	movs	r2, #1
 8009964:	4610      	mov	r0, r2
 8009966:	bd30      	pop	{r4, r5, pc}
 8009968:	4283      	cmp	r3, r0
 800996a:	d3f3      	bcc.n	8009954 <__mcmp+0x18>
 800996c:	e7fa      	b.n	8009964 <__mcmp+0x28>
 800996e:	f04f 32ff 	mov.w	r2, #4294967295
 8009972:	e7f7      	b.n	8009964 <__mcmp+0x28>

08009974 <__mdiff>:
 8009974:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009978:	460c      	mov	r4, r1
 800997a:	4606      	mov	r6, r0
 800997c:	4611      	mov	r1, r2
 800997e:	4620      	mov	r0, r4
 8009980:	4690      	mov	r8, r2
 8009982:	f7ff ffdb 	bl	800993c <__mcmp>
 8009986:	1e05      	subs	r5, r0, #0
 8009988:	d110      	bne.n	80099ac <__mdiff+0x38>
 800998a:	4629      	mov	r1, r5
 800998c:	4630      	mov	r0, r6
 800998e:	f7ff fd53 	bl	8009438 <_Balloc>
 8009992:	b930      	cbnz	r0, 80099a2 <__mdiff+0x2e>
 8009994:	4b3a      	ldr	r3, [pc, #232]	; (8009a80 <__mdiff+0x10c>)
 8009996:	4602      	mov	r2, r0
 8009998:	f240 2132 	movw	r1, #562	; 0x232
 800999c:	4839      	ldr	r0, [pc, #228]	; (8009a84 <__mdiff+0x110>)
 800999e:	f000 fb31 	bl	800a004 <__assert_func>
 80099a2:	2301      	movs	r3, #1
 80099a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80099a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ac:	bfa4      	itt	ge
 80099ae:	4643      	movge	r3, r8
 80099b0:	46a0      	movge	r8, r4
 80099b2:	4630      	mov	r0, r6
 80099b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80099b8:	bfa6      	itte	ge
 80099ba:	461c      	movge	r4, r3
 80099bc:	2500      	movge	r5, #0
 80099be:	2501      	movlt	r5, #1
 80099c0:	f7ff fd3a 	bl	8009438 <_Balloc>
 80099c4:	b920      	cbnz	r0, 80099d0 <__mdiff+0x5c>
 80099c6:	4b2e      	ldr	r3, [pc, #184]	; (8009a80 <__mdiff+0x10c>)
 80099c8:	4602      	mov	r2, r0
 80099ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 80099ce:	e7e5      	b.n	800999c <__mdiff+0x28>
 80099d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80099d4:	6926      	ldr	r6, [r4, #16]
 80099d6:	60c5      	str	r5, [r0, #12]
 80099d8:	f104 0914 	add.w	r9, r4, #20
 80099dc:	f108 0514 	add.w	r5, r8, #20
 80099e0:	f100 0e14 	add.w	lr, r0, #20
 80099e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80099e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80099ec:	f108 0210 	add.w	r2, r8, #16
 80099f0:	46f2      	mov	sl, lr
 80099f2:	2100      	movs	r1, #0
 80099f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80099f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80099fc:	fa1f f883 	uxth.w	r8, r3
 8009a00:	fa11 f18b 	uxtah	r1, r1, fp
 8009a04:	0c1b      	lsrs	r3, r3, #16
 8009a06:	eba1 0808 	sub.w	r8, r1, r8
 8009a0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009a0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009a12:	fa1f f888 	uxth.w	r8, r8
 8009a16:	1419      	asrs	r1, r3, #16
 8009a18:	454e      	cmp	r6, r9
 8009a1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009a1e:	f84a 3b04 	str.w	r3, [sl], #4
 8009a22:	d8e7      	bhi.n	80099f4 <__mdiff+0x80>
 8009a24:	1b33      	subs	r3, r6, r4
 8009a26:	3b15      	subs	r3, #21
 8009a28:	f023 0303 	bic.w	r3, r3, #3
 8009a2c:	3304      	adds	r3, #4
 8009a2e:	3415      	adds	r4, #21
 8009a30:	42a6      	cmp	r6, r4
 8009a32:	bf38      	it	cc
 8009a34:	2304      	movcc	r3, #4
 8009a36:	441d      	add	r5, r3
 8009a38:	4473      	add	r3, lr
 8009a3a:	469e      	mov	lr, r3
 8009a3c:	462e      	mov	r6, r5
 8009a3e:	4566      	cmp	r6, ip
 8009a40:	d30e      	bcc.n	8009a60 <__mdiff+0xec>
 8009a42:	f10c 0203 	add.w	r2, ip, #3
 8009a46:	1b52      	subs	r2, r2, r5
 8009a48:	f022 0203 	bic.w	r2, r2, #3
 8009a4c:	3d03      	subs	r5, #3
 8009a4e:	45ac      	cmp	ip, r5
 8009a50:	bf38      	it	cc
 8009a52:	2200      	movcc	r2, #0
 8009a54:	441a      	add	r2, r3
 8009a56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009a5a:	b17b      	cbz	r3, 8009a7c <__mdiff+0x108>
 8009a5c:	6107      	str	r7, [r0, #16]
 8009a5e:	e7a3      	b.n	80099a8 <__mdiff+0x34>
 8009a60:	f856 8b04 	ldr.w	r8, [r6], #4
 8009a64:	fa11 f288 	uxtah	r2, r1, r8
 8009a68:	1414      	asrs	r4, r2, #16
 8009a6a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009a6e:	b292      	uxth	r2, r2
 8009a70:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009a74:	f84e 2b04 	str.w	r2, [lr], #4
 8009a78:	1421      	asrs	r1, r4, #16
 8009a7a:	e7e0      	b.n	8009a3e <__mdiff+0xca>
 8009a7c:	3f01      	subs	r7, #1
 8009a7e:	e7ea      	b.n	8009a56 <__mdiff+0xe2>
 8009a80:	0800ae64 	.word	0x0800ae64
 8009a84:	0800ae75 	.word	0x0800ae75

08009a88 <__d2b>:
 8009a88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a8c:	4689      	mov	r9, r1
 8009a8e:	2101      	movs	r1, #1
 8009a90:	ec57 6b10 	vmov	r6, r7, d0
 8009a94:	4690      	mov	r8, r2
 8009a96:	f7ff fccf 	bl	8009438 <_Balloc>
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	b930      	cbnz	r0, 8009aac <__d2b+0x24>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	4b25      	ldr	r3, [pc, #148]	; (8009b38 <__d2b+0xb0>)
 8009aa2:	4826      	ldr	r0, [pc, #152]	; (8009b3c <__d2b+0xb4>)
 8009aa4:	f240 310a 	movw	r1, #778	; 0x30a
 8009aa8:	f000 faac 	bl	800a004 <__assert_func>
 8009aac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009ab0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ab4:	bb35      	cbnz	r5, 8009b04 <__d2b+0x7c>
 8009ab6:	2e00      	cmp	r6, #0
 8009ab8:	9301      	str	r3, [sp, #4]
 8009aba:	d028      	beq.n	8009b0e <__d2b+0x86>
 8009abc:	4668      	mov	r0, sp
 8009abe:	9600      	str	r6, [sp, #0]
 8009ac0:	f7ff fd82 	bl	80095c8 <__lo0bits>
 8009ac4:	9900      	ldr	r1, [sp, #0]
 8009ac6:	b300      	cbz	r0, 8009b0a <__d2b+0x82>
 8009ac8:	9a01      	ldr	r2, [sp, #4]
 8009aca:	f1c0 0320 	rsb	r3, r0, #32
 8009ace:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad2:	430b      	orrs	r3, r1
 8009ad4:	40c2      	lsrs	r2, r0
 8009ad6:	6163      	str	r3, [r4, #20]
 8009ad8:	9201      	str	r2, [sp, #4]
 8009ada:	9b01      	ldr	r3, [sp, #4]
 8009adc:	61a3      	str	r3, [r4, #24]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	bf14      	ite	ne
 8009ae2:	2202      	movne	r2, #2
 8009ae4:	2201      	moveq	r2, #1
 8009ae6:	6122      	str	r2, [r4, #16]
 8009ae8:	b1d5      	cbz	r5, 8009b20 <__d2b+0x98>
 8009aea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009aee:	4405      	add	r5, r0
 8009af0:	f8c9 5000 	str.w	r5, [r9]
 8009af4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009af8:	f8c8 0000 	str.w	r0, [r8]
 8009afc:	4620      	mov	r0, r4
 8009afe:	b003      	add	sp, #12
 8009b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b08:	e7d5      	b.n	8009ab6 <__d2b+0x2e>
 8009b0a:	6161      	str	r1, [r4, #20]
 8009b0c:	e7e5      	b.n	8009ada <__d2b+0x52>
 8009b0e:	a801      	add	r0, sp, #4
 8009b10:	f7ff fd5a 	bl	80095c8 <__lo0bits>
 8009b14:	9b01      	ldr	r3, [sp, #4]
 8009b16:	6163      	str	r3, [r4, #20]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	6122      	str	r2, [r4, #16]
 8009b1c:	3020      	adds	r0, #32
 8009b1e:	e7e3      	b.n	8009ae8 <__d2b+0x60>
 8009b20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b28:	f8c9 0000 	str.w	r0, [r9]
 8009b2c:	6918      	ldr	r0, [r3, #16]
 8009b2e:	f7ff fd2b 	bl	8009588 <__hi0bits>
 8009b32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b36:	e7df      	b.n	8009af8 <__d2b+0x70>
 8009b38:	0800ae64 	.word	0x0800ae64
 8009b3c:	0800ae75 	.word	0x0800ae75

08009b40 <_calloc_r>:
 8009b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b42:	fba1 2402 	umull	r2, r4, r1, r2
 8009b46:	b94c      	cbnz	r4, 8009b5c <_calloc_r+0x1c>
 8009b48:	4611      	mov	r1, r2
 8009b4a:	9201      	str	r2, [sp, #4]
 8009b4c:	f000 f87a 	bl	8009c44 <_malloc_r>
 8009b50:	9a01      	ldr	r2, [sp, #4]
 8009b52:	4605      	mov	r5, r0
 8009b54:	b930      	cbnz	r0, 8009b64 <_calloc_r+0x24>
 8009b56:	4628      	mov	r0, r5
 8009b58:	b003      	add	sp, #12
 8009b5a:	bd30      	pop	{r4, r5, pc}
 8009b5c:	220c      	movs	r2, #12
 8009b5e:	6002      	str	r2, [r0, #0]
 8009b60:	2500      	movs	r5, #0
 8009b62:	e7f8      	b.n	8009b56 <_calloc_r+0x16>
 8009b64:	4621      	mov	r1, r4
 8009b66:	f7fe f927 	bl	8007db8 <memset>
 8009b6a:	e7f4      	b.n	8009b56 <_calloc_r+0x16>

08009b6c <_free_r>:
 8009b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b6e:	2900      	cmp	r1, #0
 8009b70:	d044      	beq.n	8009bfc <_free_r+0x90>
 8009b72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b76:	9001      	str	r0, [sp, #4]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f1a1 0404 	sub.w	r4, r1, #4
 8009b7e:	bfb8      	it	lt
 8009b80:	18e4      	addlt	r4, r4, r3
 8009b82:	f000 fa9b 	bl	800a0bc <__malloc_lock>
 8009b86:	4a1e      	ldr	r2, [pc, #120]	; (8009c00 <_free_r+0x94>)
 8009b88:	9801      	ldr	r0, [sp, #4]
 8009b8a:	6813      	ldr	r3, [r2, #0]
 8009b8c:	b933      	cbnz	r3, 8009b9c <_free_r+0x30>
 8009b8e:	6063      	str	r3, [r4, #4]
 8009b90:	6014      	str	r4, [r2, #0]
 8009b92:	b003      	add	sp, #12
 8009b94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b98:	f000 ba96 	b.w	800a0c8 <__malloc_unlock>
 8009b9c:	42a3      	cmp	r3, r4
 8009b9e:	d908      	bls.n	8009bb2 <_free_r+0x46>
 8009ba0:	6825      	ldr	r5, [r4, #0]
 8009ba2:	1961      	adds	r1, r4, r5
 8009ba4:	428b      	cmp	r3, r1
 8009ba6:	bf01      	itttt	eq
 8009ba8:	6819      	ldreq	r1, [r3, #0]
 8009baa:	685b      	ldreq	r3, [r3, #4]
 8009bac:	1949      	addeq	r1, r1, r5
 8009bae:	6021      	streq	r1, [r4, #0]
 8009bb0:	e7ed      	b.n	8009b8e <_free_r+0x22>
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	b10b      	cbz	r3, 8009bbc <_free_r+0x50>
 8009bb8:	42a3      	cmp	r3, r4
 8009bba:	d9fa      	bls.n	8009bb2 <_free_r+0x46>
 8009bbc:	6811      	ldr	r1, [r2, #0]
 8009bbe:	1855      	adds	r5, r2, r1
 8009bc0:	42a5      	cmp	r5, r4
 8009bc2:	d10b      	bne.n	8009bdc <_free_r+0x70>
 8009bc4:	6824      	ldr	r4, [r4, #0]
 8009bc6:	4421      	add	r1, r4
 8009bc8:	1854      	adds	r4, r2, r1
 8009bca:	42a3      	cmp	r3, r4
 8009bcc:	6011      	str	r1, [r2, #0]
 8009bce:	d1e0      	bne.n	8009b92 <_free_r+0x26>
 8009bd0:	681c      	ldr	r4, [r3, #0]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	6053      	str	r3, [r2, #4]
 8009bd6:	4421      	add	r1, r4
 8009bd8:	6011      	str	r1, [r2, #0]
 8009bda:	e7da      	b.n	8009b92 <_free_r+0x26>
 8009bdc:	d902      	bls.n	8009be4 <_free_r+0x78>
 8009bde:	230c      	movs	r3, #12
 8009be0:	6003      	str	r3, [r0, #0]
 8009be2:	e7d6      	b.n	8009b92 <_free_r+0x26>
 8009be4:	6825      	ldr	r5, [r4, #0]
 8009be6:	1961      	adds	r1, r4, r5
 8009be8:	428b      	cmp	r3, r1
 8009bea:	bf04      	itt	eq
 8009bec:	6819      	ldreq	r1, [r3, #0]
 8009bee:	685b      	ldreq	r3, [r3, #4]
 8009bf0:	6063      	str	r3, [r4, #4]
 8009bf2:	bf04      	itt	eq
 8009bf4:	1949      	addeq	r1, r1, r5
 8009bf6:	6021      	streq	r1, [r4, #0]
 8009bf8:	6054      	str	r4, [r2, #4]
 8009bfa:	e7ca      	b.n	8009b92 <_free_r+0x26>
 8009bfc:	b003      	add	sp, #12
 8009bfe:	bd30      	pop	{r4, r5, pc}
 8009c00:	20000d48 	.word	0x20000d48

08009c04 <sbrk_aligned>:
 8009c04:	b570      	push	{r4, r5, r6, lr}
 8009c06:	4e0e      	ldr	r6, [pc, #56]	; (8009c40 <sbrk_aligned+0x3c>)
 8009c08:	460c      	mov	r4, r1
 8009c0a:	6831      	ldr	r1, [r6, #0]
 8009c0c:	4605      	mov	r5, r0
 8009c0e:	b911      	cbnz	r1, 8009c16 <sbrk_aligned+0x12>
 8009c10:	f000 f9e8 	bl	8009fe4 <_sbrk_r>
 8009c14:	6030      	str	r0, [r6, #0]
 8009c16:	4621      	mov	r1, r4
 8009c18:	4628      	mov	r0, r5
 8009c1a:	f000 f9e3 	bl	8009fe4 <_sbrk_r>
 8009c1e:	1c43      	adds	r3, r0, #1
 8009c20:	d00a      	beq.n	8009c38 <sbrk_aligned+0x34>
 8009c22:	1cc4      	adds	r4, r0, #3
 8009c24:	f024 0403 	bic.w	r4, r4, #3
 8009c28:	42a0      	cmp	r0, r4
 8009c2a:	d007      	beq.n	8009c3c <sbrk_aligned+0x38>
 8009c2c:	1a21      	subs	r1, r4, r0
 8009c2e:	4628      	mov	r0, r5
 8009c30:	f000 f9d8 	bl	8009fe4 <_sbrk_r>
 8009c34:	3001      	adds	r0, #1
 8009c36:	d101      	bne.n	8009c3c <sbrk_aligned+0x38>
 8009c38:	f04f 34ff 	mov.w	r4, #4294967295
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	bd70      	pop	{r4, r5, r6, pc}
 8009c40:	20000d4c 	.word	0x20000d4c

08009c44 <_malloc_r>:
 8009c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c48:	1ccd      	adds	r5, r1, #3
 8009c4a:	f025 0503 	bic.w	r5, r5, #3
 8009c4e:	3508      	adds	r5, #8
 8009c50:	2d0c      	cmp	r5, #12
 8009c52:	bf38      	it	cc
 8009c54:	250c      	movcc	r5, #12
 8009c56:	2d00      	cmp	r5, #0
 8009c58:	4607      	mov	r7, r0
 8009c5a:	db01      	blt.n	8009c60 <_malloc_r+0x1c>
 8009c5c:	42a9      	cmp	r1, r5
 8009c5e:	d905      	bls.n	8009c6c <_malloc_r+0x28>
 8009c60:	230c      	movs	r3, #12
 8009c62:	603b      	str	r3, [r7, #0]
 8009c64:	2600      	movs	r6, #0
 8009c66:	4630      	mov	r0, r6
 8009c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c6c:	4e2e      	ldr	r6, [pc, #184]	; (8009d28 <_malloc_r+0xe4>)
 8009c6e:	f000 fa25 	bl	800a0bc <__malloc_lock>
 8009c72:	6833      	ldr	r3, [r6, #0]
 8009c74:	461c      	mov	r4, r3
 8009c76:	bb34      	cbnz	r4, 8009cc6 <_malloc_r+0x82>
 8009c78:	4629      	mov	r1, r5
 8009c7a:	4638      	mov	r0, r7
 8009c7c:	f7ff ffc2 	bl	8009c04 <sbrk_aligned>
 8009c80:	1c43      	adds	r3, r0, #1
 8009c82:	4604      	mov	r4, r0
 8009c84:	d14d      	bne.n	8009d22 <_malloc_r+0xde>
 8009c86:	6834      	ldr	r4, [r6, #0]
 8009c88:	4626      	mov	r6, r4
 8009c8a:	2e00      	cmp	r6, #0
 8009c8c:	d140      	bne.n	8009d10 <_malloc_r+0xcc>
 8009c8e:	6823      	ldr	r3, [r4, #0]
 8009c90:	4631      	mov	r1, r6
 8009c92:	4638      	mov	r0, r7
 8009c94:	eb04 0803 	add.w	r8, r4, r3
 8009c98:	f000 f9a4 	bl	8009fe4 <_sbrk_r>
 8009c9c:	4580      	cmp	r8, r0
 8009c9e:	d13a      	bne.n	8009d16 <_malloc_r+0xd2>
 8009ca0:	6821      	ldr	r1, [r4, #0]
 8009ca2:	3503      	adds	r5, #3
 8009ca4:	1a6d      	subs	r5, r5, r1
 8009ca6:	f025 0503 	bic.w	r5, r5, #3
 8009caa:	3508      	adds	r5, #8
 8009cac:	2d0c      	cmp	r5, #12
 8009cae:	bf38      	it	cc
 8009cb0:	250c      	movcc	r5, #12
 8009cb2:	4629      	mov	r1, r5
 8009cb4:	4638      	mov	r0, r7
 8009cb6:	f7ff ffa5 	bl	8009c04 <sbrk_aligned>
 8009cba:	3001      	adds	r0, #1
 8009cbc:	d02b      	beq.n	8009d16 <_malloc_r+0xd2>
 8009cbe:	6823      	ldr	r3, [r4, #0]
 8009cc0:	442b      	add	r3, r5
 8009cc2:	6023      	str	r3, [r4, #0]
 8009cc4:	e00e      	b.n	8009ce4 <_malloc_r+0xa0>
 8009cc6:	6822      	ldr	r2, [r4, #0]
 8009cc8:	1b52      	subs	r2, r2, r5
 8009cca:	d41e      	bmi.n	8009d0a <_malloc_r+0xc6>
 8009ccc:	2a0b      	cmp	r2, #11
 8009cce:	d916      	bls.n	8009cfe <_malloc_r+0xba>
 8009cd0:	1961      	adds	r1, r4, r5
 8009cd2:	42a3      	cmp	r3, r4
 8009cd4:	6025      	str	r5, [r4, #0]
 8009cd6:	bf18      	it	ne
 8009cd8:	6059      	strne	r1, [r3, #4]
 8009cda:	6863      	ldr	r3, [r4, #4]
 8009cdc:	bf08      	it	eq
 8009cde:	6031      	streq	r1, [r6, #0]
 8009ce0:	5162      	str	r2, [r4, r5]
 8009ce2:	604b      	str	r3, [r1, #4]
 8009ce4:	4638      	mov	r0, r7
 8009ce6:	f104 060b 	add.w	r6, r4, #11
 8009cea:	f000 f9ed 	bl	800a0c8 <__malloc_unlock>
 8009cee:	f026 0607 	bic.w	r6, r6, #7
 8009cf2:	1d23      	adds	r3, r4, #4
 8009cf4:	1af2      	subs	r2, r6, r3
 8009cf6:	d0b6      	beq.n	8009c66 <_malloc_r+0x22>
 8009cf8:	1b9b      	subs	r3, r3, r6
 8009cfa:	50a3      	str	r3, [r4, r2]
 8009cfc:	e7b3      	b.n	8009c66 <_malloc_r+0x22>
 8009cfe:	6862      	ldr	r2, [r4, #4]
 8009d00:	42a3      	cmp	r3, r4
 8009d02:	bf0c      	ite	eq
 8009d04:	6032      	streq	r2, [r6, #0]
 8009d06:	605a      	strne	r2, [r3, #4]
 8009d08:	e7ec      	b.n	8009ce4 <_malloc_r+0xa0>
 8009d0a:	4623      	mov	r3, r4
 8009d0c:	6864      	ldr	r4, [r4, #4]
 8009d0e:	e7b2      	b.n	8009c76 <_malloc_r+0x32>
 8009d10:	4634      	mov	r4, r6
 8009d12:	6876      	ldr	r6, [r6, #4]
 8009d14:	e7b9      	b.n	8009c8a <_malloc_r+0x46>
 8009d16:	230c      	movs	r3, #12
 8009d18:	603b      	str	r3, [r7, #0]
 8009d1a:	4638      	mov	r0, r7
 8009d1c:	f000 f9d4 	bl	800a0c8 <__malloc_unlock>
 8009d20:	e7a1      	b.n	8009c66 <_malloc_r+0x22>
 8009d22:	6025      	str	r5, [r4, #0]
 8009d24:	e7de      	b.n	8009ce4 <_malloc_r+0xa0>
 8009d26:	bf00      	nop
 8009d28:	20000d48 	.word	0x20000d48

08009d2c <__ssputs_r>:
 8009d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d30:	688e      	ldr	r6, [r1, #8]
 8009d32:	429e      	cmp	r6, r3
 8009d34:	4682      	mov	sl, r0
 8009d36:	460c      	mov	r4, r1
 8009d38:	4690      	mov	r8, r2
 8009d3a:	461f      	mov	r7, r3
 8009d3c:	d838      	bhi.n	8009db0 <__ssputs_r+0x84>
 8009d3e:	898a      	ldrh	r2, [r1, #12]
 8009d40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d44:	d032      	beq.n	8009dac <__ssputs_r+0x80>
 8009d46:	6825      	ldr	r5, [r4, #0]
 8009d48:	6909      	ldr	r1, [r1, #16]
 8009d4a:	eba5 0901 	sub.w	r9, r5, r1
 8009d4e:	6965      	ldr	r5, [r4, #20]
 8009d50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d58:	3301      	adds	r3, #1
 8009d5a:	444b      	add	r3, r9
 8009d5c:	106d      	asrs	r5, r5, #1
 8009d5e:	429d      	cmp	r5, r3
 8009d60:	bf38      	it	cc
 8009d62:	461d      	movcc	r5, r3
 8009d64:	0553      	lsls	r3, r2, #21
 8009d66:	d531      	bpl.n	8009dcc <__ssputs_r+0xa0>
 8009d68:	4629      	mov	r1, r5
 8009d6a:	f7ff ff6b 	bl	8009c44 <_malloc_r>
 8009d6e:	4606      	mov	r6, r0
 8009d70:	b950      	cbnz	r0, 8009d88 <__ssputs_r+0x5c>
 8009d72:	230c      	movs	r3, #12
 8009d74:	f8ca 3000 	str.w	r3, [sl]
 8009d78:	89a3      	ldrh	r3, [r4, #12]
 8009d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d7e:	81a3      	strh	r3, [r4, #12]
 8009d80:	f04f 30ff 	mov.w	r0, #4294967295
 8009d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d88:	6921      	ldr	r1, [r4, #16]
 8009d8a:	464a      	mov	r2, r9
 8009d8c:	f7ff fb46 	bl	800941c <memcpy>
 8009d90:	89a3      	ldrh	r3, [r4, #12]
 8009d92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d9a:	81a3      	strh	r3, [r4, #12]
 8009d9c:	6126      	str	r6, [r4, #16]
 8009d9e:	6165      	str	r5, [r4, #20]
 8009da0:	444e      	add	r6, r9
 8009da2:	eba5 0509 	sub.w	r5, r5, r9
 8009da6:	6026      	str	r6, [r4, #0]
 8009da8:	60a5      	str	r5, [r4, #8]
 8009daa:	463e      	mov	r6, r7
 8009dac:	42be      	cmp	r6, r7
 8009dae:	d900      	bls.n	8009db2 <__ssputs_r+0x86>
 8009db0:	463e      	mov	r6, r7
 8009db2:	6820      	ldr	r0, [r4, #0]
 8009db4:	4632      	mov	r2, r6
 8009db6:	4641      	mov	r1, r8
 8009db8:	f000 f966 	bl	800a088 <memmove>
 8009dbc:	68a3      	ldr	r3, [r4, #8]
 8009dbe:	1b9b      	subs	r3, r3, r6
 8009dc0:	60a3      	str	r3, [r4, #8]
 8009dc2:	6823      	ldr	r3, [r4, #0]
 8009dc4:	4433      	add	r3, r6
 8009dc6:	6023      	str	r3, [r4, #0]
 8009dc8:	2000      	movs	r0, #0
 8009dca:	e7db      	b.n	8009d84 <__ssputs_r+0x58>
 8009dcc:	462a      	mov	r2, r5
 8009dce:	f000 f981 	bl	800a0d4 <_realloc_r>
 8009dd2:	4606      	mov	r6, r0
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	d1e1      	bne.n	8009d9c <__ssputs_r+0x70>
 8009dd8:	6921      	ldr	r1, [r4, #16]
 8009dda:	4650      	mov	r0, sl
 8009ddc:	f7ff fec6 	bl	8009b6c <_free_r>
 8009de0:	e7c7      	b.n	8009d72 <__ssputs_r+0x46>
	...

08009de4 <_svfiprintf_r>:
 8009de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de8:	4698      	mov	r8, r3
 8009dea:	898b      	ldrh	r3, [r1, #12]
 8009dec:	061b      	lsls	r3, r3, #24
 8009dee:	b09d      	sub	sp, #116	; 0x74
 8009df0:	4607      	mov	r7, r0
 8009df2:	460d      	mov	r5, r1
 8009df4:	4614      	mov	r4, r2
 8009df6:	d50e      	bpl.n	8009e16 <_svfiprintf_r+0x32>
 8009df8:	690b      	ldr	r3, [r1, #16]
 8009dfa:	b963      	cbnz	r3, 8009e16 <_svfiprintf_r+0x32>
 8009dfc:	2140      	movs	r1, #64	; 0x40
 8009dfe:	f7ff ff21 	bl	8009c44 <_malloc_r>
 8009e02:	6028      	str	r0, [r5, #0]
 8009e04:	6128      	str	r0, [r5, #16]
 8009e06:	b920      	cbnz	r0, 8009e12 <_svfiprintf_r+0x2e>
 8009e08:	230c      	movs	r3, #12
 8009e0a:	603b      	str	r3, [r7, #0]
 8009e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e10:	e0d1      	b.n	8009fb6 <_svfiprintf_r+0x1d2>
 8009e12:	2340      	movs	r3, #64	; 0x40
 8009e14:	616b      	str	r3, [r5, #20]
 8009e16:	2300      	movs	r3, #0
 8009e18:	9309      	str	r3, [sp, #36]	; 0x24
 8009e1a:	2320      	movs	r3, #32
 8009e1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e20:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e24:	2330      	movs	r3, #48	; 0x30
 8009e26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009fd0 <_svfiprintf_r+0x1ec>
 8009e2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e2e:	f04f 0901 	mov.w	r9, #1
 8009e32:	4623      	mov	r3, r4
 8009e34:	469a      	mov	sl, r3
 8009e36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e3a:	b10a      	cbz	r2, 8009e40 <_svfiprintf_r+0x5c>
 8009e3c:	2a25      	cmp	r2, #37	; 0x25
 8009e3e:	d1f9      	bne.n	8009e34 <_svfiprintf_r+0x50>
 8009e40:	ebba 0b04 	subs.w	fp, sl, r4
 8009e44:	d00b      	beq.n	8009e5e <_svfiprintf_r+0x7a>
 8009e46:	465b      	mov	r3, fp
 8009e48:	4622      	mov	r2, r4
 8009e4a:	4629      	mov	r1, r5
 8009e4c:	4638      	mov	r0, r7
 8009e4e:	f7ff ff6d 	bl	8009d2c <__ssputs_r>
 8009e52:	3001      	adds	r0, #1
 8009e54:	f000 80aa 	beq.w	8009fac <_svfiprintf_r+0x1c8>
 8009e58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e5a:	445a      	add	r2, fp
 8009e5c:	9209      	str	r2, [sp, #36]	; 0x24
 8009e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	f000 80a2 	beq.w	8009fac <_svfiprintf_r+0x1c8>
 8009e68:	2300      	movs	r3, #0
 8009e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e72:	f10a 0a01 	add.w	sl, sl, #1
 8009e76:	9304      	str	r3, [sp, #16]
 8009e78:	9307      	str	r3, [sp, #28]
 8009e7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e7e:	931a      	str	r3, [sp, #104]	; 0x68
 8009e80:	4654      	mov	r4, sl
 8009e82:	2205      	movs	r2, #5
 8009e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e88:	4851      	ldr	r0, [pc, #324]	; (8009fd0 <_svfiprintf_r+0x1ec>)
 8009e8a:	f7f6 f9e1 	bl	8000250 <memchr>
 8009e8e:	9a04      	ldr	r2, [sp, #16]
 8009e90:	b9d8      	cbnz	r0, 8009eca <_svfiprintf_r+0xe6>
 8009e92:	06d0      	lsls	r0, r2, #27
 8009e94:	bf44      	itt	mi
 8009e96:	2320      	movmi	r3, #32
 8009e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e9c:	0711      	lsls	r1, r2, #28
 8009e9e:	bf44      	itt	mi
 8009ea0:	232b      	movmi	r3, #43	; 0x2b
 8009ea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ea6:	f89a 3000 	ldrb.w	r3, [sl]
 8009eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8009eac:	d015      	beq.n	8009eda <_svfiprintf_r+0xf6>
 8009eae:	9a07      	ldr	r2, [sp, #28]
 8009eb0:	4654      	mov	r4, sl
 8009eb2:	2000      	movs	r0, #0
 8009eb4:	f04f 0c0a 	mov.w	ip, #10
 8009eb8:	4621      	mov	r1, r4
 8009eba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ebe:	3b30      	subs	r3, #48	; 0x30
 8009ec0:	2b09      	cmp	r3, #9
 8009ec2:	d94e      	bls.n	8009f62 <_svfiprintf_r+0x17e>
 8009ec4:	b1b0      	cbz	r0, 8009ef4 <_svfiprintf_r+0x110>
 8009ec6:	9207      	str	r2, [sp, #28]
 8009ec8:	e014      	b.n	8009ef4 <_svfiprintf_r+0x110>
 8009eca:	eba0 0308 	sub.w	r3, r0, r8
 8009ece:	fa09 f303 	lsl.w	r3, r9, r3
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	9304      	str	r3, [sp, #16]
 8009ed6:	46a2      	mov	sl, r4
 8009ed8:	e7d2      	b.n	8009e80 <_svfiprintf_r+0x9c>
 8009eda:	9b03      	ldr	r3, [sp, #12]
 8009edc:	1d19      	adds	r1, r3, #4
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	9103      	str	r1, [sp, #12]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	bfbb      	ittet	lt
 8009ee6:	425b      	neglt	r3, r3
 8009ee8:	f042 0202 	orrlt.w	r2, r2, #2
 8009eec:	9307      	strge	r3, [sp, #28]
 8009eee:	9307      	strlt	r3, [sp, #28]
 8009ef0:	bfb8      	it	lt
 8009ef2:	9204      	strlt	r2, [sp, #16]
 8009ef4:	7823      	ldrb	r3, [r4, #0]
 8009ef6:	2b2e      	cmp	r3, #46	; 0x2e
 8009ef8:	d10c      	bne.n	8009f14 <_svfiprintf_r+0x130>
 8009efa:	7863      	ldrb	r3, [r4, #1]
 8009efc:	2b2a      	cmp	r3, #42	; 0x2a
 8009efe:	d135      	bne.n	8009f6c <_svfiprintf_r+0x188>
 8009f00:	9b03      	ldr	r3, [sp, #12]
 8009f02:	1d1a      	adds	r2, r3, #4
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	9203      	str	r2, [sp, #12]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	bfb8      	it	lt
 8009f0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f10:	3402      	adds	r4, #2
 8009f12:	9305      	str	r3, [sp, #20]
 8009f14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009fe0 <_svfiprintf_r+0x1fc>
 8009f18:	7821      	ldrb	r1, [r4, #0]
 8009f1a:	2203      	movs	r2, #3
 8009f1c:	4650      	mov	r0, sl
 8009f1e:	f7f6 f997 	bl	8000250 <memchr>
 8009f22:	b140      	cbz	r0, 8009f36 <_svfiprintf_r+0x152>
 8009f24:	2340      	movs	r3, #64	; 0x40
 8009f26:	eba0 000a 	sub.w	r0, r0, sl
 8009f2a:	fa03 f000 	lsl.w	r0, r3, r0
 8009f2e:	9b04      	ldr	r3, [sp, #16]
 8009f30:	4303      	orrs	r3, r0
 8009f32:	3401      	adds	r4, #1
 8009f34:	9304      	str	r3, [sp, #16]
 8009f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f3a:	4826      	ldr	r0, [pc, #152]	; (8009fd4 <_svfiprintf_r+0x1f0>)
 8009f3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f40:	2206      	movs	r2, #6
 8009f42:	f7f6 f985 	bl	8000250 <memchr>
 8009f46:	2800      	cmp	r0, #0
 8009f48:	d038      	beq.n	8009fbc <_svfiprintf_r+0x1d8>
 8009f4a:	4b23      	ldr	r3, [pc, #140]	; (8009fd8 <_svfiprintf_r+0x1f4>)
 8009f4c:	bb1b      	cbnz	r3, 8009f96 <_svfiprintf_r+0x1b2>
 8009f4e:	9b03      	ldr	r3, [sp, #12]
 8009f50:	3307      	adds	r3, #7
 8009f52:	f023 0307 	bic.w	r3, r3, #7
 8009f56:	3308      	adds	r3, #8
 8009f58:	9303      	str	r3, [sp, #12]
 8009f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f5c:	4433      	add	r3, r6
 8009f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f60:	e767      	b.n	8009e32 <_svfiprintf_r+0x4e>
 8009f62:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f66:	460c      	mov	r4, r1
 8009f68:	2001      	movs	r0, #1
 8009f6a:	e7a5      	b.n	8009eb8 <_svfiprintf_r+0xd4>
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	3401      	adds	r4, #1
 8009f70:	9305      	str	r3, [sp, #20]
 8009f72:	4619      	mov	r1, r3
 8009f74:	f04f 0c0a 	mov.w	ip, #10
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f7e:	3a30      	subs	r2, #48	; 0x30
 8009f80:	2a09      	cmp	r2, #9
 8009f82:	d903      	bls.n	8009f8c <_svfiprintf_r+0x1a8>
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d0c5      	beq.n	8009f14 <_svfiprintf_r+0x130>
 8009f88:	9105      	str	r1, [sp, #20]
 8009f8a:	e7c3      	b.n	8009f14 <_svfiprintf_r+0x130>
 8009f8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f90:	4604      	mov	r4, r0
 8009f92:	2301      	movs	r3, #1
 8009f94:	e7f0      	b.n	8009f78 <_svfiprintf_r+0x194>
 8009f96:	ab03      	add	r3, sp, #12
 8009f98:	9300      	str	r3, [sp, #0]
 8009f9a:	462a      	mov	r2, r5
 8009f9c:	4b0f      	ldr	r3, [pc, #60]	; (8009fdc <_svfiprintf_r+0x1f8>)
 8009f9e:	a904      	add	r1, sp, #16
 8009fa0:	4638      	mov	r0, r7
 8009fa2:	f7fd ffa1 	bl	8007ee8 <_printf_float>
 8009fa6:	1c42      	adds	r2, r0, #1
 8009fa8:	4606      	mov	r6, r0
 8009faa:	d1d6      	bne.n	8009f5a <_svfiprintf_r+0x176>
 8009fac:	89ab      	ldrh	r3, [r5, #12]
 8009fae:	065b      	lsls	r3, r3, #25
 8009fb0:	f53f af2c 	bmi.w	8009e0c <_svfiprintf_r+0x28>
 8009fb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fb6:	b01d      	add	sp, #116	; 0x74
 8009fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fbc:	ab03      	add	r3, sp, #12
 8009fbe:	9300      	str	r3, [sp, #0]
 8009fc0:	462a      	mov	r2, r5
 8009fc2:	4b06      	ldr	r3, [pc, #24]	; (8009fdc <_svfiprintf_r+0x1f8>)
 8009fc4:	a904      	add	r1, sp, #16
 8009fc6:	4638      	mov	r0, r7
 8009fc8:	f7fe fa1a 	bl	8008400 <_printf_i>
 8009fcc:	e7eb      	b.n	8009fa6 <_svfiprintf_r+0x1c2>
 8009fce:	bf00      	nop
 8009fd0:	0800afd4 	.word	0x0800afd4
 8009fd4:	0800afde 	.word	0x0800afde
 8009fd8:	08007ee9 	.word	0x08007ee9
 8009fdc:	08009d2d 	.word	0x08009d2d
 8009fe0:	0800afda 	.word	0x0800afda

08009fe4 <_sbrk_r>:
 8009fe4:	b538      	push	{r3, r4, r5, lr}
 8009fe6:	4d06      	ldr	r5, [pc, #24]	; (800a000 <_sbrk_r+0x1c>)
 8009fe8:	2300      	movs	r3, #0
 8009fea:	4604      	mov	r4, r0
 8009fec:	4608      	mov	r0, r1
 8009fee:	602b      	str	r3, [r5, #0]
 8009ff0:	f7f6 ff9a 	bl	8000f28 <_sbrk>
 8009ff4:	1c43      	adds	r3, r0, #1
 8009ff6:	d102      	bne.n	8009ffe <_sbrk_r+0x1a>
 8009ff8:	682b      	ldr	r3, [r5, #0]
 8009ffa:	b103      	cbz	r3, 8009ffe <_sbrk_r+0x1a>
 8009ffc:	6023      	str	r3, [r4, #0]
 8009ffe:	bd38      	pop	{r3, r4, r5, pc}
 800a000:	20000d50 	.word	0x20000d50

0800a004 <__assert_func>:
 800a004:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a006:	4614      	mov	r4, r2
 800a008:	461a      	mov	r2, r3
 800a00a:	4b09      	ldr	r3, [pc, #36]	; (800a030 <__assert_func+0x2c>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4605      	mov	r5, r0
 800a010:	68d8      	ldr	r0, [r3, #12]
 800a012:	b14c      	cbz	r4, 800a028 <__assert_func+0x24>
 800a014:	4b07      	ldr	r3, [pc, #28]	; (800a034 <__assert_func+0x30>)
 800a016:	9100      	str	r1, [sp, #0]
 800a018:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a01c:	4906      	ldr	r1, [pc, #24]	; (800a038 <__assert_func+0x34>)
 800a01e:	462b      	mov	r3, r5
 800a020:	f000 f80e 	bl	800a040 <fiprintf>
 800a024:	f000 faac 	bl	800a580 <abort>
 800a028:	4b04      	ldr	r3, [pc, #16]	; (800a03c <__assert_func+0x38>)
 800a02a:	461c      	mov	r4, r3
 800a02c:	e7f3      	b.n	800a016 <__assert_func+0x12>
 800a02e:	bf00      	nop
 800a030:	200003e8 	.word	0x200003e8
 800a034:	0800afe5 	.word	0x0800afe5
 800a038:	0800aff2 	.word	0x0800aff2
 800a03c:	0800b020 	.word	0x0800b020

0800a040 <fiprintf>:
 800a040:	b40e      	push	{r1, r2, r3}
 800a042:	b503      	push	{r0, r1, lr}
 800a044:	4601      	mov	r1, r0
 800a046:	ab03      	add	r3, sp, #12
 800a048:	4805      	ldr	r0, [pc, #20]	; (800a060 <fiprintf+0x20>)
 800a04a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a04e:	6800      	ldr	r0, [r0, #0]
 800a050:	9301      	str	r3, [sp, #4]
 800a052:	f000 f897 	bl	800a184 <_vfiprintf_r>
 800a056:	b002      	add	sp, #8
 800a058:	f85d eb04 	ldr.w	lr, [sp], #4
 800a05c:	b003      	add	sp, #12
 800a05e:	4770      	bx	lr
 800a060:	200003e8 	.word	0x200003e8

0800a064 <__ascii_mbtowc>:
 800a064:	b082      	sub	sp, #8
 800a066:	b901      	cbnz	r1, 800a06a <__ascii_mbtowc+0x6>
 800a068:	a901      	add	r1, sp, #4
 800a06a:	b142      	cbz	r2, 800a07e <__ascii_mbtowc+0x1a>
 800a06c:	b14b      	cbz	r3, 800a082 <__ascii_mbtowc+0x1e>
 800a06e:	7813      	ldrb	r3, [r2, #0]
 800a070:	600b      	str	r3, [r1, #0]
 800a072:	7812      	ldrb	r2, [r2, #0]
 800a074:	1e10      	subs	r0, r2, #0
 800a076:	bf18      	it	ne
 800a078:	2001      	movne	r0, #1
 800a07a:	b002      	add	sp, #8
 800a07c:	4770      	bx	lr
 800a07e:	4610      	mov	r0, r2
 800a080:	e7fb      	b.n	800a07a <__ascii_mbtowc+0x16>
 800a082:	f06f 0001 	mvn.w	r0, #1
 800a086:	e7f8      	b.n	800a07a <__ascii_mbtowc+0x16>

0800a088 <memmove>:
 800a088:	4288      	cmp	r0, r1
 800a08a:	b510      	push	{r4, lr}
 800a08c:	eb01 0402 	add.w	r4, r1, r2
 800a090:	d902      	bls.n	800a098 <memmove+0x10>
 800a092:	4284      	cmp	r4, r0
 800a094:	4623      	mov	r3, r4
 800a096:	d807      	bhi.n	800a0a8 <memmove+0x20>
 800a098:	1e43      	subs	r3, r0, #1
 800a09a:	42a1      	cmp	r1, r4
 800a09c:	d008      	beq.n	800a0b0 <memmove+0x28>
 800a09e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0a6:	e7f8      	b.n	800a09a <memmove+0x12>
 800a0a8:	4402      	add	r2, r0
 800a0aa:	4601      	mov	r1, r0
 800a0ac:	428a      	cmp	r2, r1
 800a0ae:	d100      	bne.n	800a0b2 <memmove+0x2a>
 800a0b0:	bd10      	pop	{r4, pc}
 800a0b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0ba:	e7f7      	b.n	800a0ac <memmove+0x24>

0800a0bc <__malloc_lock>:
 800a0bc:	4801      	ldr	r0, [pc, #4]	; (800a0c4 <__malloc_lock+0x8>)
 800a0be:	f000 bc1f 	b.w	800a900 <__retarget_lock_acquire_recursive>
 800a0c2:	bf00      	nop
 800a0c4:	20000d54 	.word	0x20000d54

0800a0c8 <__malloc_unlock>:
 800a0c8:	4801      	ldr	r0, [pc, #4]	; (800a0d0 <__malloc_unlock+0x8>)
 800a0ca:	f000 bc1a 	b.w	800a902 <__retarget_lock_release_recursive>
 800a0ce:	bf00      	nop
 800a0d0:	20000d54 	.word	0x20000d54

0800a0d4 <_realloc_r>:
 800a0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0d8:	4680      	mov	r8, r0
 800a0da:	4614      	mov	r4, r2
 800a0dc:	460e      	mov	r6, r1
 800a0de:	b921      	cbnz	r1, 800a0ea <_realloc_r+0x16>
 800a0e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0e4:	4611      	mov	r1, r2
 800a0e6:	f7ff bdad 	b.w	8009c44 <_malloc_r>
 800a0ea:	b92a      	cbnz	r2, 800a0f8 <_realloc_r+0x24>
 800a0ec:	f7ff fd3e 	bl	8009b6c <_free_r>
 800a0f0:	4625      	mov	r5, r4
 800a0f2:	4628      	mov	r0, r5
 800a0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0f8:	f000 fc6a 	bl	800a9d0 <_malloc_usable_size_r>
 800a0fc:	4284      	cmp	r4, r0
 800a0fe:	4607      	mov	r7, r0
 800a100:	d802      	bhi.n	800a108 <_realloc_r+0x34>
 800a102:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a106:	d812      	bhi.n	800a12e <_realloc_r+0x5a>
 800a108:	4621      	mov	r1, r4
 800a10a:	4640      	mov	r0, r8
 800a10c:	f7ff fd9a 	bl	8009c44 <_malloc_r>
 800a110:	4605      	mov	r5, r0
 800a112:	2800      	cmp	r0, #0
 800a114:	d0ed      	beq.n	800a0f2 <_realloc_r+0x1e>
 800a116:	42bc      	cmp	r4, r7
 800a118:	4622      	mov	r2, r4
 800a11a:	4631      	mov	r1, r6
 800a11c:	bf28      	it	cs
 800a11e:	463a      	movcs	r2, r7
 800a120:	f7ff f97c 	bl	800941c <memcpy>
 800a124:	4631      	mov	r1, r6
 800a126:	4640      	mov	r0, r8
 800a128:	f7ff fd20 	bl	8009b6c <_free_r>
 800a12c:	e7e1      	b.n	800a0f2 <_realloc_r+0x1e>
 800a12e:	4635      	mov	r5, r6
 800a130:	e7df      	b.n	800a0f2 <_realloc_r+0x1e>

0800a132 <__sfputc_r>:
 800a132:	6893      	ldr	r3, [r2, #8]
 800a134:	3b01      	subs	r3, #1
 800a136:	2b00      	cmp	r3, #0
 800a138:	b410      	push	{r4}
 800a13a:	6093      	str	r3, [r2, #8]
 800a13c:	da08      	bge.n	800a150 <__sfputc_r+0x1e>
 800a13e:	6994      	ldr	r4, [r2, #24]
 800a140:	42a3      	cmp	r3, r4
 800a142:	db01      	blt.n	800a148 <__sfputc_r+0x16>
 800a144:	290a      	cmp	r1, #10
 800a146:	d103      	bne.n	800a150 <__sfputc_r+0x1e>
 800a148:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a14c:	f000 b94a 	b.w	800a3e4 <__swbuf_r>
 800a150:	6813      	ldr	r3, [r2, #0]
 800a152:	1c58      	adds	r0, r3, #1
 800a154:	6010      	str	r0, [r2, #0]
 800a156:	7019      	strb	r1, [r3, #0]
 800a158:	4608      	mov	r0, r1
 800a15a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <__sfputs_r>:
 800a160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a162:	4606      	mov	r6, r0
 800a164:	460f      	mov	r7, r1
 800a166:	4614      	mov	r4, r2
 800a168:	18d5      	adds	r5, r2, r3
 800a16a:	42ac      	cmp	r4, r5
 800a16c:	d101      	bne.n	800a172 <__sfputs_r+0x12>
 800a16e:	2000      	movs	r0, #0
 800a170:	e007      	b.n	800a182 <__sfputs_r+0x22>
 800a172:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a176:	463a      	mov	r2, r7
 800a178:	4630      	mov	r0, r6
 800a17a:	f7ff ffda 	bl	800a132 <__sfputc_r>
 800a17e:	1c43      	adds	r3, r0, #1
 800a180:	d1f3      	bne.n	800a16a <__sfputs_r+0xa>
 800a182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a184 <_vfiprintf_r>:
 800a184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a188:	460d      	mov	r5, r1
 800a18a:	b09d      	sub	sp, #116	; 0x74
 800a18c:	4614      	mov	r4, r2
 800a18e:	4698      	mov	r8, r3
 800a190:	4606      	mov	r6, r0
 800a192:	b118      	cbz	r0, 800a19c <_vfiprintf_r+0x18>
 800a194:	6983      	ldr	r3, [r0, #24]
 800a196:	b90b      	cbnz	r3, 800a19c <_vfiprintf_r+0x18>
 800a198:	f000 fb14 	bl	800a7c4 <__sinit>
 800a19c:	4b89      	ldr	r3, [pc, #548]	; (800a3c4 <_vfiprintf_r+0x240>)
 800a19e:	429d      	cmp	r5, r3
 800a1a0:	d11b      	bne.n	800a1da <_vfiprintf_r+0x56>
 800a1a2:	6875      	ldr	r5, [r6, #4]
 800a1a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1a6:	07d9      	lsls	r1, r3, #31
 800a1a8:	d405      	bmi.n	800a1b6 <_vfiprintf_r+0x32>
 800a1aa:	89ab      	ldrh	r3, [r5, #12]
 800a1ac:	059a      	lsls	r2, r3, #22
 800a1ae:	d402      	bmi.n	800a1b6 <_vfiprintf_r+0x32>
 800a1b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1b2:	f000 fba5 	bl	800a900 <__retarget_lock_acquire_recursive>
 800a1b6:	89ab      	ldrh	r3, [r5, #12]
 800a1b8:	071b      	lsls	r3, r3, #28
 800a1ba:	d501      	bpl.n	800a1c0 <_vfiprintf_r+0x3c>
 800a1bc:	692b      	ldr	r3, [r5, #16]
 800a1be:	b9eb      	cbnz	r3, 800a1fc <_vfiprintf_r+0x78>
 800a1c0:	4629      	mov	r1, r5
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	f000 f96e 	bl	800a4a4 <__swsetup_r>
 800a1c8:	b1c0      	cbz	r0, 800a1fc <_vfiprintf_r+0x78>
 800a1ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1cc:	07dc      	lsls	r4, r3, #31
 800a1ce:	d50e      	bpl.n	800a1ee <_vfiprintf_r+0x6a>
 800a1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d4:	b01d      	add	sp, #116	; 0x74
 800a1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1da:	4b7b      	ldr	r3, [pc, #492]	; (800a3c8 <_vfiprintf_r+0x244>)
 800a1dc:	429d      	cmp	r5, r3
 800a1de:	d101      	bne.n	800a1e4 <_vfiprintf_r+0x60>
 800a1e0:	68b5      	ldr	r5, [r6, #8]
 800a1e2:	e7df      	b.n	800a1a4 <_vfiprintf_r+0x20>
 800a1e4:	4b79      	ldr	r3, [pc, #484]	; (800a3cc <_vfiprintf_r+0x248>)
 800a1e6:	429d      	cmp	r5, r3
 800a1e8:	bf08      	it	eq
 800a1ea:	68f5      	ldreq	r5, [r6, #12]
 800a1ec:	e7da      	b.n	800a1a4 <_vfiprintf_r+0x20>
 800a1ee:	89ab      	ldrh	r3, [r5, #12]
 800a1f0:	0598      	lsls	r0, r3, #22
 800a1f2:	d4ed      	bmi.n	800a1d0 <_vfiprintf_r+0x4c>
 800a1f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1f6:	f000 fb84 	bl	800a902 <__retarget_lock_release_recursive>
 800a1fa:	e7e9      	b.n	800a1d0 <_vfiprintf_r+0x4c>
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a200:	2320      	movs	r3, #32
 800a202:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a206:	f8cd 800c 	str.w	r8, [sp, #12]
 800a20a:	2330      	movs	r3, #48	; 0x30
 800a20c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a3d0 <_vfiprintf_r+0x24c>
 800a210:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a214:	f04f 0901 	mov.w	r9, #1
 800a218:	4623      	mov	r3, r4
 800a21a:	469a      	mov	sl, r3
 800a21c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a220:	b10a      	cbz	r2, 800a226 <_vfiprintf_r+0xa2>
 800a222:	2a25      	cmp	r2, #37	; 0x25
 800a224:	d1f9      	bne.n	800a21a <_vfiprintf_r+0x96>
 800a226:	ebba 0b04 	subs.w	fp, sl, r4
 800a22a:	d00b      	beq.n	800a244 <_vfiprintf_r+0xc0>
 800a22c:	465b      	mov	r3, fp
 800a22e:	4622      	mov	r2, r4
 800a230:	4629      	mov	r1, r5
 800a232:	4630      	mov	r0, r6
 800a234:	f7ff ff94 	bl	800a160 <__sfputs_r>
 800a238:	3001      	adds	r0, #1
 800a23a:	f000 80aa 	beq.w	800a392 <_vfiprintf_r+0x20e>
 800a23e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a240:	445a      	add	r2, fp
 800a242:	9209      	str	r2, [sp, #36]	; 0x24
 800a244:	f89a 3000 	ldrb.w	r3, [sl]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f000 80a2 	beq.w	800a392 <_vfiprintf_r+0x20e>
 800a24e:	2300      	movs	r3, #0
 800a250:	f04f 32ff 	mov.w	r2, #4294967295
 800a254:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a258:	f10a 0a01 	add.w	sl, sl, #1
 800a25c:	9304      	str	r3, [sp, #16]
 800a25e:	9307      	str	r3, [sp, #28]
 800a260:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a264:	931a      	str	r3, [sp, #104]	; 0x68
 800a266:	4654      	mov	r4, sl
 800a268:	2205      	movs	r2, #5
 800a26a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a26e:	4858      	ldr	r0, [pc, #352]	; (800a3d0 <_vfiprintf_r+0x24c>)
 800a270:	f7f5 ffee 	bl	8000250 <memchr>
 800a274:	9a04      	ldr	r2, [sp, #16]
 800a276:	b9d8      	cbnz	r0, 800a2b0 <_vfiprintf_r+0x12c>
 800a278:	06d1      	lsls	r1, r2, #27
 800a27a:	bf44      	itt	mi
 800a27c:	2320      	movmi	r3, #32
 800a27e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a282:	0713      	lsls	r3, r2, #28
 800a284:	bf44      	itt	mi
 800a286:	232b      	movmi	r3, #43	; 0x2b
 800a288:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a28c:	f89a 3000 	ldrb.w	r3, [sl]
 800a290:	2b2a      	cmp	r3, #42	; 0x2a
 800a292:	d015      	beq.n	800a2c0 <_vfiprintf_r+0x13c>
 800a294:	9a07      	ldr	r2, [sp, #28]
 800a296:	4654      	mov	r4, sl
 800a298:	2000      	movs	r0, #0
 800a29a:	f04f 0c0a 	mov.w	ip, #10
 800a29e:	4621      	mov	r1, r4
 800a2a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2a4:	3b30      	subs	r3, #48	; 0x30
 800a2a6:	2b09      	cmp	r3, #9
 800a2a8:	d94e      	bls.n	800a348 <_vfiprintf_r+0x1c4>
 800a2aa:	b1b0      	cbz	r0, 800a2da <_vfiprintf_r+0x156>
 800a2ac:	9207      	str	r2, [sp, #28]
 800a2ae:	e014      	b.n	800a2da <_vfiprintf_r+0x156>
 800a2b0:	eba0 0308 	sub.w	r3, r0, r8
 800a2b4:	fa09 f303 	lsl.w	r3, r9, r3
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	9304      	str	r3, [sp, #16]
 800a2bc:	46a2      	mov	sl, r4
 800a2be:	e7d2      	b.n	800a266 <_vfiprintf_r+0xe2>
 800a2c0:	9b03      	ldr	r3, [sp, #12]
 800a2c2:	1d19      	adds	r1, r3, #4
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	9103      	str	r1, [sp, #12]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	bfbb      	ittet	lt
 800a2cc:	425b      	neglt	r3, r3
 800a2ce:	f042 0202 	orrlt.w	r2, r2, #2
 800a2d2:	9307      	strge	r3, [sp, #28]
 800a2d4:	9307      	strlt	r3, [sp, #28]
 800a2d6:	bfb8      	it	lt
 800a2d8:	9204      	strlt	r2, [sp, #16]
 800a2da:	7823      	ldrb	r3, [r4, #0]
 800a2dc:	2b2e      	cmp	r3, #46	; 0x2e
 800a2de:	d10c      	bne.n	800a2fa <_vfiprintf_r+0x176>
 800a2e0:	7863      	ldrb	r3, [r4, #1]
 800a2e2:	2b2a      	cmp	r3, #42	; 0x2a
 800a2e4:	d135      	bne.n	800a352 <_vfiprintf_r+0x1ce>
 800a2e6:	9b03      	ldr	r3, [sp, #12]
 800a2e8:	1d1a      	adds	r2, r3, #4
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	9203      	str	r2, [sp, #12]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	bfb8      	it	lt
 800a2f2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2f6:	3402      	adds	r4, #2
 800a2f8:	9305      	str	r3, [sp, #20]
 800a2fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a3e0 <_vfiprintf_r+0x25c>
 800a2fe:	7821      	ldrb	r1, [r4, #0]
 800a300:	2203      	movs	r2, #3
 800a302:	4650      	mov	r0, sl
 800a304:	f7f5 ffa4 	bl	8000250 <memchr>
 800a308:	b140      	cbz	r0, 800a31c <_vfiprintf_r+0x198>
 800a30a:	2340      	movs	r3, #64	; 0x40
 800a30c:	eba0 000a 	sub.w	r0, r0, sl
 800a310:	fa03 f000 	lsl.w	r0, r3, r0
 800a314:	9b04      	ldr	r3, [sp, #16]
 800a316:	4303      	orrs	r3, r0
 800a318:	3401      	adds	r4, #1
 800a31a:	9304      	str	r3, [sp, #16]
 800a31c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a320:	482c      	ldr	r0, [pc, #176]	; (800a3d4 <_vfiprintf_r+0x250>)
 800a322:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a326:	2206      	movs	r2, #6
 800a328:	f7f5 ff92 	bl	8000250 <memchr>
 800a32c:	2800      	cmp	r0, #0
 800a32e:	d03f      	beq.n	800a3b0 <_vfiprintf_r+0x22c>
 800a330:	4b29      	ldr	r3, [pc, #164]	; (800a3d8 <_vfiprintf_r+0x254>)
 800a332:	bb1b      	cbnz	r3, 800a37c <_vfiprintf_r+0x1f8>
 800a334:	9b03      	ldr	r3, [sp, #12]
 800a336:	3307      	adds	r3, #7
 800a338:	f023 0307 	bic.w	r3, r3, #7
 800a33c:	3308      	adds	r3, #8
 800a33e:	9303      	str	r3, [sp, #12]
 800a340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a342:	443b      	add	r3, r7
 800a344:	9309      	str	r3, [sp, #36]	; 0x24
 800a346:	e767      	b.n	800a218 <_vfiprintf_r+0x94>
 800a348:	fb0c 3202 	mla	r2, ip, r2, r3
 800a34c:	460c      	mov	r4, r1
 800a34e:	2001      	movs	r0, #1
 800a350:	e7a5      	b.n	800a29e <_vfiprintf_r+0x11a>
 800a352:	2300      	movs	r3, #0
 800a354:	3401      	adds	r4, #1
 800a356:	9305      	str	r3, [sp, #20]
 800a358:	4619      	mov	r1, r3
 800a35a:	f04f 0c0a 	mov.w	ip, #10
 800a35e:	4620      	mov	r0, r4
 800a360:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a364:	3a30      	subs	r2, #48	; 0x30
 800a366:	2a09      	cmp	r2, #9
 800a368:	d903      	bls.n	800a372 <_vfiprintf_r+0x1ee>
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d0c5      	beq.n	800a2fa <_vfiprintf_r+0x176>
 800a36e:	9105      	str	r1, [sp, #20]
 800a370:	e7c3      	b.n	800a2fa <_vfiprintf_r+0x176>
 800a372:	fb0c 2101 	mla	r1, ip, r1, r2
 800a376:	4604      	mov	r4, r0
 800a378:	2301      	movs	r3, #1
 800a37a:	e7f0      	b.n	800a35e <_vfiprintf_r+0x1da>
 800a37c:	ab03      	add	r3, sp, #12
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	462a      	mov	r2, r5
 800a382:	4b16      	ldr	r3, [pc, #88]	; (800a3dc <_vfiprintf_r+0x258>)
 800a384:	a904      	add	r1, sp, #16
 800a386:	4630      	mov	r0, r6
 800a388:	f7fd fdae 	bl	8007ee8 <_printf_float>
 800a38c:	4607      	mov	r7, r0
 800a38e:	1c78      	adds	r0, r7, #1
 800a390:	d1d6      	bne.n	800a340 <_vfiprintf_r+0x1bc>
 800a392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a394:	07d9      	lsls	r1, r3, #31
 800a396:	d405      	bmi.n	800a3a4 <_vfiprintf_r+0x220>
 800a398:	89ab      	ldrh	r3, [r5, #12]
 800a39a:	059a      	lsls	r2, r3, #22
 800a39c:	d402      	bmi.n	800a3a4 <_vfiprintf_r+0x220>
 800a39e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3a0:	f000 faaf 	bl	800a902 <__retarget_lock_release_recursive>
 800a3a4:	89ab      	ldrh	r3, [r5, #12]
 800a3a6:	065b      	lsls	r3, r3, #25
 800a3a8:	f53f af12 	bmi.w	800a1d0 <_vfiprintf_r+0x4c>
 800a3ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3ae:	e711      	b.n	800a1d4 <_vfiprintf_r+0x50>
 800a3b0:	ab03      	add	r3, sp, #12
 800a3b2:	9300      	str	r3, [sp, #0]
 800a3b4:	462a      	mov	r2, r5
 800a3b6:	4b09      	ldr	r3, [pc, #36]	; (800a3dc <_vfiprintf_r+0x258>)
 800a3b8:	a904      	add	r1, sp, #16
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	f7fe f820 	bl	8008400 <_printf_i>
 800a3c0:	e7e4      	b.n	800a38c <_vfiprintf_r+0x208>
 800a3c2:	bf00      	nop
 800a3c4:	0800b04c 	.word	0x0800b04c
 800a3c8:	0800b06c 	.word	0x0800b06c
 800a3cc:	0800b02c 	.word	0x0800b02c
 800a3d0:	0800afd4 	.word	0x0800afd4
 800a3d4:	0800afde 	.word	0x0800afde
 800a3d8:	08007ee9 	.word	0x08007ee9
 800a3dc:	0800a161 	.word	0x0800a161
 800a3e0:	0800afda 	.word	0x0800afda

0800a3e4 <__swbuf_r>:
 800a3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3e6:	460e      	mov	r6, r1
 800a3e8:	4614      	mov	r4, r2
 800a3ea:	4605      	mov	r5, r0
 800a3ec:	b118      	cbz	r0, 800a3f6 <__swbuf_r+0x12>
 800a3ee:	6983      	ldr	r3, [r0, #24]
 800a3f0:	b90b      	cbnz	r3, 800a3f6 <__swbuf_r+0x12>
 800a3f2:	f000 f9e7 	bl	800a7c4 <__sinit>
 800a3f6:	4b21      	ldr	r3, [pc, #132]	; (800a47c <__swbuf_r+0x98>)
 800a3f8:	429c      	cmp	r4, r3
 800a3fa:	d12b      	bne.n	800a454 <__swbuf_r+0x70>
 800a3fc:	686c      	ldr	r4, [r5, #4]
 800a3fe:	69a3      	ldr	r3, [r4, #24]
 800a400:	60a3      	str	r3, [r4, #8]
 800a402:	89a3      	ldrh	r3, [r4, #12]
 800a404:	071a      	lsls	r2, r3, #28
 800a406:	d52f      	bpl.n	800a468 <__swbuf_r+0x84>
 800a408:	6923      	ldr	r3, [r4, #16]
 800a40a:	b36b      	cbz	r3, 800a468 <__swbuf_r+0x84>
 800a40c:	6923      	ldr	r3, [r4, #16]
 800a40e:	6820      	ldr	r0, [r4, #0]
 800a410:	1ac0      	subs	r0, r0, r3
 800a412:	6963      	ldr	r3, [r4, #20]
 800a414:	b2f6      	uxtb	r6, r6
 800a416:	4283      	cmp	r3, r0
 800a418:	4637      	mov	r7, r6
 800a41a:	dc04      	bgt.n	800a426 <__swbuf_r+0x42>
 800a41c:	4621      	mov	r1, r4
 800a41e:	4628      	mov	r0, r5
 800a420:	f000 f93c 	bl	800a69c <_fflush_r>
 800a424:	bb30      	cbnz	r0, 800a474 <__swbuf_r+0x90>
 800a426:	68a3      	ldr	r3, [r4, #8]
 800a428:	3b01      	subs	r3, #1
 800a42a:	60a3      	str	r3, [r4, #8]
 800a42c:	6823      	ldr	r3, [r4, #0]
 800a42e:	1c5a      	adds	r2, r3, #1
 800a430:	6022      	str	r2, [r4, #0]
 800a432:	701e      	strb	r6, [r3, #0]
 800a434:	6963      	ldr	r3, [r4, #20]
 800a436:	3001      	adds	r0, #1
 800a438:	4283      	cmp	r3, r0
 800a43a:	d004      	beq.n	800a446 <__swbuf_r+0x62>
 800a43c:	89a3      	ldrh	r3, [r4, #12]
 800a43e:	07db      	lsls	r3, r3, #31
 800a440:	d506      	bpl.n	800a450 <__swbuf_r+0x6c>
 800a442:	2e0a      	cmp	r6, #10
 800a444:	d104      	bne.n	800a450 <__swbuf_r+0x6c>
 800a446:	4621      	mov	r1, r4
 800a448:	4628      	mov	r0, r5
 800a44a:	f000 f927 	bl	800a69c <_fflush_r>
 800a44e:	b988      	cbnz	r0, 800a474 <__swbuf_r+0x90>
 800a450:	4638      	mov	r0, r7
 800a452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a454:	4b0a      	ldr	r3, [pc, #40]	; (800a480 <__swbuf_r+0x9c>)
 800a456:	429c      	cmp	r4, r3
 800a458:	d101      	bne.n	800a45e <__swbuf_r+0x7a>
 800a45a:	68ac      	ldr	r4, [r5, #8]
 800a45c:	e7cf      	b.n	800a3fe <__swbuf_r+0x1a>
 800a45e:	4b09      	ldr	r3, [pc, #36]	; (800a484 <__swbuf_r+0xa0>)
 800a460:	429c      	cmp	r4, r3
 800a462:	bf08      	it	eq
 800a464:	68ec      	ldreq	r4, [r5, #12]
 800a466:	e7ca      	b.n	800a3fe <__swbuf_r+0x1a>
 800a468:	4621      	mov	r1, r4
 800a46a:	4628      	mov	r0, r5
 800a46c:	f000 f81a 	bl	800a4a4 <__swsetup_r>
 800a470:	2800      	cmp	r0, #0
 800a472:	d0cb      	beq.n	800a40c <__swbuf_r+0x28>
 800a474:	f04f 37ff 	mov.w	r7, #4294967295
 800a478:	e7ea      	b.n	800a450 <__swbuf_r+0x6c>
 800a47a:	bf00      	nop
 800a47c:	0800b04c 	.word	0x0800b04c
 800a480:	0800b06c 	.word	0x0800b06c
 800a484:	0800b02c 	.word	0x0800b02c

0800a488 <__ascii_wctomb>:
 800a488:	b149      	cbz	r1, 800a49e <__ascii_wctomb+0x16>
 800a48a:	2aff      	cmp	r2, #255	; 0xff
 800a48c:	bf85      	ittet	hi
 800a48e:	238a      	movhi	r3, #138	; 0x8a
 800a490:	6003      	strhi	r3, [r0, #0]
 800a492:	700a      	strbls	r2, [r1, #0]
 800a494:	f04f 30ff 	movhi.w	r0, #4294967295
 800a498:	bf98      	it	ls
 800a49a:	2001      	movls	r0, #1
 800a49c:	4770      	bx	lr
 800a49e:	4608      	mov	r0, r1
 800a4a0:	4770      	bx	lr
	...

0800a4a4 <__swsetup_r>:
 800a4a4:	4b32      	ldr	r3, [pc, #200]	; (800a570 <__swsetup_r+0xcc>)
 800a4a6:	b570      	push	{r4, r5, r6, lr}
 800a4a8:	681d      	ldr	r5, [r3, #0]
 800a4aa:	4606      	mov	r6, r0
 800a4ac:	460c      	mov	r4, r1
 800a4ae:	b125      	cbz	r5, 800a4ba <__swsetup_r+0x16>
 800a4b0:	69ab      	ldr	r3, [r5, #24]
 800a4b2:	b913      	cbnz	r3, 800a4ba <__swsetup_r+0x16>
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	f000 f985 	bl	800a7c4 <__sinit>
 800a4ba:	4b2e      	ldr	r3, [pc, #184]	; (800a574 <__swsetup_r+0xd0>)
 800a4bc:	429c      	cmp	r4, r3
 800a4be:	d10f      	bne.n	800a4e0 <__swsetup_r+0x3c>
 800a4c0:	686c      	ldr	r4, [r5, #4]
 800a4c2:	89a3      	ldrh	r3, [r4, #12]
 800a4c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4c8:	0719      	lsls	r1, r3, #28
 800a4ca:	d42c      	bmi.n	800a526 <__swsetup_r+0x82>
 800a4cc:	06dd      	lsls	r5, r3, #27
 800a4ce:	d411      	bmi.n	800a4f4 <__swsetup_r+0x50>
 800a4d0:	2309      	movs	r3, #9
 800a4d2:	6033      	str	r3, [r6, #0]
 800a4d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a4d8:	81a3      	strh	r3, [r4, #12]
 800a4da:	f04f 30ff 	mov.w	r0, #4294967295
 800a4de:	e03e      	b.n	800a55e <__swsetup_r+0xba>
 800a4e0:	4b25      	ldr	r3, [pc, #148]	; (800a578 <__swsetup_r+0xd4>)
 800a4e2:	429c      	cmp	r4, r3
 800a4e4:	d101      	bne.n	800a4ea <__swsetup_r+0x46>
 800a4e6:	68ac      	ldr	r4, [r5, #8]
 800a4e8:	e7eb      	b.n	800a4c2 <__swsetup_r+0x1e>
 800a4ea:	4b24      	ldr	r3, [pc, #144]	; (800a57c <__swsetup_r+0xd8>)
 800a4ec:	429c      	cmp	r4, r3
 800a4ee:	bf08      	it	eq
 800a4f0:	68ec      	ldreq	r4, [r5, #12]
 800a4f2:	e7e6      	b.n	800a4c2 <__swsetup_r+0x1e>
 800a4f4:	0758      	lsls	r0, r3, #29
 800a4f6:	d512      	bpl.n	800a51e <__swsetup_r+0x7a>
 800a4f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4fa:	b141      	cbz	r1, 800a50e <__swsetup_r+0x6a>
 800a4fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a500:	4299      	cmp	r1, r3
 800a502:	d002      	beq.n	800a50a <__swsetup_r+0x66>
 800a504:	4630      	mov	r0, r6
 800a506:	f7ff fb31 	bl	8009b6c <_free_r>
 800a50a:	2300      	movs	r3, #0
 800a50c:	6363      	str	r3, [r4, #52]	; 0x34
 800a50e:	89a3      	ldrh	r3, [r4, #12]
 800a510:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a514:	81a3      	strh	r3, [r4, #12]
 800a516:	2300      	movs	r3, #0
 800a518:	6063      	str	r3, [r4, #4]
 800a51a:	6923      	ldr	r3, [r4, #16]
 800a51c:	6023      	str	r3, [r4, #0]
 800a51e:	89a3      	ldrh	r3, [r4, #12]
 800a520:	f043 0308 	orr.w	r3, r3, #8
 800a524:	81a3      	strh	r3, [r4, #12]
 800a526:	6923      	ldr	r3, [r4, #16]
 800a528:	b94b      	cbnz	r3, 800a53e <__swsetup_r+0x9a>
 800a52a:	89a3      	ldrh	r3, [r4, #12]
 800a52c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a534:	d003      	beq.n	800a53e <__swsetup_r+0x9a>
 800a536:	4621      	mov	r1, r4
 800a538:	4630      	mov	r0, r6
 800a53a:	f000 fa09 	bl	800a950 <__smakebuf_r>
 800a53e:	89a0      	ldrh	r0, [r4, #12]
 800a540:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a544:	f010 0301 	ands.w	r3, r0, #1
 800a548:	d00a      	beq.n	800a560 <__swsetup_r+0xbc>
 800a54a:	2300      	movs	r3, #0
 800a54c:	60a3      	str	r3, [r4, #8]
 800a54e:	6963      	ldr	r3, [r4, #20]
 800a550:	425b      	negs	r3, r3
 800a552:	61a3      	str	r3, [r4, #24]
 800a554:	6923      	ldr	r3, [r4, #16]
 800a556:	b943      	cbnz	r3, 800a56a <__swsetup_r+0xc6>
 800a558:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a55c:	d1ba      	bne.n	800a4d4 <__swsetup_r+0x30>
 800a55e:	bd70      	pop	{r4, r5, r6, pc}
 800a560:	0781      	lsls	r1, r0, #30
 800a562:	bf58      	it	pl
 800a564:	6963      	ldrpl	r3, [r4, #20]
 800a566:	60a3      	str	r3, [r4, #8]
 800a568:	e7f4      	b.n	800a554 <__swsetup_r+0xb0>
 800a56a:	2000      	movs	r0, #0
 800a56c:	e7f7      	b.n	800a55e <__swsetup_r+0xba>
 800a56e:	bf00      	nop
 800a570:	200003e8 	.word	0x200003e8
 800a574:	0800b04c 	.word	0x0800b04c
 800a578:	0800b06c 	.word	0x0800b06c
 800a57c:	0800b02c 	.word	0x0800b02c

0800a580 <abort>:
 800a580:	b508      	push	{r3, lr}
 800a582:	2006      	movs	r0, #6
 800a584:	f000 fa54 	bl	800aa30 <raise>
 800a588:	2001      	movs	r0, #1
 800a58a:	f7f6 fc55 	bl	8000e38 <_exit>
	...

0800a590 <__sflush_r>:
 800a590:	898a      	ldrh	r2, [r1, #12]
 800a592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a596:	4605      	mov	r5, r0
 800a598:	0710      	lsls	r0, r2, #28
 800a59a:	460c      	mov	r4, r1
 800a59c:	d458      	bmi.n	800a650 <__sflush_r+0xc0>
 800a59e:	684b      	ldr	r3, [r1, #4]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	dc05      	bgt.n	800a5b0 <__sflush_r+0x20>
 800a5a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	dc02      	bgt.n	800a5b0 <__sflush_r+0x20>
 800a5aa:	2000      	movs	r0, #0
 800a5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5b2:	2e00      	cmp	r6, #0
 800a5b4:	d0f9      	beq.n	800a5aa <__sflush_r+0x1a>
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a5bc:	682f      	ldr	r7, [r5, #0]
 800a5be:	602b      	str	r3, [r5, #0]
 800a5c0:	d032      	beq.n	800a628 <__sflush_r+0x98>
 800a5c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a5c4:	89a3      	ldrh	r3, [r4, #12]
 800a5c6:	075a      	lsls	r2, r3, #29
 800a5c8:	d505      	bpl.n	800a5d6 <__sflush_r+0x46>
 800a5ca:	6863      	ldr	r3, [r4, #4]
 800a5cc:	1ac0      	subs	r0, r0, r3
 800a5ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5d0:	b10b      	cbz	r3, 800a5d6 <__sflush_r+0x46>
 800a5d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5d4:	1ac0      	subs	r0, r0, r3
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	4602      	mov	r2, r0
 800a5da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5dc:	6a21      	ldr	r1, [r4, #32]
 800a5de:	4628      	mov	r0, r5
 800a5e0:	47b0      	blx	r6
 800a5e2:	1c43      	adds	r3, r0, #1
 800a5e4:	89a3      	ldrh	r3, [r4, #12]
 800a5e6:	d106      	bne.n	800a5f6 <__sflush_r+0x66>
 800a5e8:	6829      	ldr	r1, [r5, #0]
 800a5ea:	291d      	cmp	r1, #29
 800a5ec:	d82c      	bhi.n	800a648 <__sflush_r+0xb8>
 800a5ee:	4a2a      	ldr	r2, [pc, #168]	; (800a698 <__sflush_r+0x108>)
 800a5f0:	40ca      	lsrs	r2, r1
 800a5f2:	07d6      	lsls	r6, r2, #31
 800a5f4:	d528      	bpl.n	800a648 <__sflush_r+0xb8>
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	6062      	str	r2, [r4, #4]
 800a5fa:	04d9      	lsls	r1, r3, #19
 800a5fc:	6922      	ldr	r2, [r4, #16]
 800a5fe:	6022      	str	r2, [r4, #0]
 800a600:	d504      	bpl.n	800a60c <__sflush_r+0x7c>
 800a602:	1c42      	adds	r2, r0, #1
 800a604:	d101      	bne.n	800a60a <__sflush_r+0x7a>
 800a606:	682b      	ldr	r3, [r5, #0]
 800a608:	b903      	cbnz	r3, 800a60c <__sflush_r+0x7c>
 800a60a:	6560      	str	r0, [r4, #84]	; 0x54
 800a60c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a60e:	602f      	str	r7, [r5, #0]
 800a610:	2900      	cmp	r1, #0
 800a612:	d0ca      	beq.n	800a5aa <__sflush_r+0x1a>
 800a614:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a618:	4299      	cmp	r1, r3
 800a61a:	d002      	beq.n	800a622 <__sflush_r+0x92>
 800a61c:	4628      	mov	r0, r5
 800a61e:	f7ff faa5 	bl	8009b6c <_free_r>
 800a622:	2000      	movs	r0, #0
 800a624:	6360      	str	r0, [r4, #52]	; 0x34
 800a626:	e7c1      	b.n	800a5ac <__sflush_r+0x1c>
 800a628:	6a21      	ldr	r1, [r4, #32]
 800a62a:	2301      	movs	r3, #1
 800a62c:	4628      	mov	r0, r5
 800a62e:	47b0      	blx	r6
 800a630:	1c41      	adds	r1, r0, #1
 800a632:	d1c7      	bne.n	800a5c4 <__sflush_r+0x34>
 800a634:	682b      	ldr	r3, [r5, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d0c4      	beq.n	800a5c4 <__sflush_r+0x34>
 800a63a:	2b1d      	cmp	r3, #29
 800a63c:	d001      	beq.n	800a642 <__sflush_r+0xb2>
 800a63e:	2b16      	cmp	r3, #22
 800a640:	d101      	bne.n	800a646 <__sflush_r+0xb6>
 800a642:	602f      	str	r7, [r5, #0]
 800a644:	e7b1      	b.n	800a5aa <__sflush_r+0x1a>
 800a646:	89a3      	ldrh	r3, [r4, #12]
 800a648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a64c:	81a3      	strh	r3, [r4, #12]
 800a64e:	e7ad      	b.n	800a5ac <__sflush_r+0x1c>
 800a650:	690f      	ldr	r7, [r1, #16]
 800a652:	2f00      	cmp	r7, #0
 800a654:	d0a9      	beq.n	800a5aa <__sflush_r+0x1a>
 800a656:	0793      	lsls	r3, r2, #30
 800a658:	680e      	ldr	r6, [r1, #0]
 800a65a:	bf08      	it	eq
 800a65c:	694b      	ldreq	r3, [r1, #20]
 800a65e:	600f      	str	r7, [r1, #0]
 800a660:	bf18      	it	ne
 800a662:	2300      	movne	r3, #0
 800a664:	eba6 0807 	sub.w	r8, r6, r7
 800a668:	608b      	str	r3, [r1, #8]
 800a66a:	f1b8 0f00 	cmp.w	r8, #0
 800a66e:	dd9c      	ble.n	800a5aa <__sflush_r+0x1a>
 800a670:	6a21      	ldr	r1, [r4, #32]
 800a672:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a674:	4643      	mov	r3, r8
 800a676:	463a      	mov	r2, r7
 800a678:	4628      	mov	r0, r5
 800a67a:	47b0      	blx	r6
 800a67c:	2800      	cmp	r0, #0
 800a67e:	dc06      	bgt.n	800a68e <__sflush_r+0xfe>
 800a680:	89a3      	ldrh	r3, [r4, #12]
 800a682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a686:	81a3      	strh	r3, [r4, #12]
 800a688:	f04f 30ff 	mov.w	r0, #4294967295
 800a68c:	e78e      	b.n	800a5ac <__sflush_r+0x1c>
 800a68e:	4407      	add	r7, r0
 800a690:	eba8 0800 	sub.w	r8, r8, r0
 800a694:	e7e9      	b.n	800a66a <__sflush_r+0xda>
 800a696:	bf00      	nop
 800a698:	20400001 	.word	0x20400001

0800a69c <_fflush_r>:
 800a69c:	b538      	push	{r3, r4, r5, lr}
 800a69e:	690b      	ldr	r3, [r1, #16]
 800a6a0:	4605      	mov	r5, r0
 800a6a2:	460c      	mov	r4, r1
 800a6a4:	b913      	cbnz	r3, 800a6ac <_fflush_r+0x10>
 800a6a6:	2500      	movs	r5, #0
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	bd38      	pop	{r3, r4, r5, pc}
 800a6ac:	b118      	cbz	r0, 800a6b6 <_fflush_r+0x1a>
 800a6ae:	6983      	ldr	r3, [r0, #24]
 800a6b0:	b90b      	cbnz	r3, 800a6b6 <_fflush_r+0x1a>
 800a6b2:	f000 f887 	bl	800a7c4 <__sinit>
 800a6b6:	4b14      	ldr	r3, [pc, #80]	; (800a708 <_fflush_r+0x6c>)
 800a6b8:	429c      	cmp	r4, r3
 800a6ba:	d11b      	bne.n	800a6f4 <_fflush_r+0x58>
 800a6bc:	686c      	ldr	r4, [r5, #4]
 800a6be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d0ef      	beq.n	800a6a6 <_fflush_r+0xa>
 800a6c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a6c8:	07d0      	lsls	r0, r2, #31
 800a6ca:	d404      	bmi.n	800a6d6 <_fflush_r+0x3a>
 800a6cc:	0599      	lsls	r1, r3, #22
 800a6ce:	d402      	bmi.n	800a6d6 <_fflush_r+0x3a>
 800a6d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6d2:	f000 f915 	bl	800a900 <__retarget_lock_acquire_recursive>
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	4621      	mov	r1, r4
 800a6da:	f7ff ff59 	bl	800a590 <__sflush_r>
 800a6de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6e0:	07da      	lsls	r2, r3, #31
 800a6e2:	4605      	mov	r5, r0
 800a6e4:	d4e0      	bmi.n	800a6a8 <_fflush_r+0xc>
 800a6e6:	89a3      	ldrh	r3, [r4, #12]
 800a6e8:	059b      	lsls	r3, r3, #22
 800a6ea:	d4dd      	bmi.n	800a6a8 <_fflush_r+0xc>
 800a6ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6ee:	f000 f908 	bl	800a902 <__retarget_lock_release_recursive>
 800a6f2:	e7d9      	b.n	800a6a8 <_fflush_r+0xc>
 800a6f4:	4b05      	ldr	r3, [pc, #20]	; (800a70c <_fflush_r+0x70>)
 800a6f6:	429c      	cmp	r4, r3
 800a6f8:	d101      	bne.n	800a6fe <_fflush_r+0x62>
 800a6fa:	68ac      	ldr	r4, [r5, #8]
 800a6fc:	e7df      	b.n	800a6be <_fflush_r+0x22>
 800a6fe:	4b04      	ldr	r3, [pc, #16]	; (800a710 <_fflush_r+0x74>)
 800a700:	429c      	cmp	r4, r3
 800a702:	bf08      	it	eq
 800a704:	68ec      	ldreq	r4, [r5, #12]
 800a706:	e7da      	b.n	800a6be <_fflush_r+0x22>
 800a708:	0800b04c 	.word	0x0800b04c
 800a70c:	0800b06c 	.word	0x0800b06c
 800a710:	0800b02c 	.word	0x0800b02c

0800a714 <std>:
 800a714:	2300      	movs	r3, #0
 800a716:	b510      	push	{r4, lr}
 800a718:	4604      	mov	r4, r0
 800a71a:	e9c0 3300 	strd	r3, r3, [r0]
 800a71e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a722:	6083      	str	r3, [r0, #8]
 800a724:	8181      	strh	r1, [r0, #12]
 800a726:	6643      	str	r3, [r0, #100]	; 0x64
 800a728:	81c2      	strh	r2, [r0, #14]
 800a72a:	6183      	str	r3, [r0, #24]
 800a72c:	4619      	mov	r1, r3
 800a72e:	2208      	movs	r2, #8
 800a730:	305c      	adds	r0, #92	; 0x5c
 800a732:	f7fd fb41 	bl	8007db8 <memset>
 800a736:	4b05      	ldr	r3, [pc, #20]	; (800a74c <std+0x38>)
 800a738:	6263      	str	r3, [r4, #36]	; 0x24
 800a73a:	4b05      	ldr	r3, [pc, #20]	; (800a750 <std+0x3c>)
 800a73c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a73e:	4b05      	ldr	r3, [pc, #20]	; (800a754 <std+0x40>)
 800a740:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a742:	4b05      	ldr	r3, [pc, #20]	; (800a758 <std+0x44>)
 800a744:	6224      	str	r4, [r4, #32]
 800a746:	6323      	str	r3, [r4, #48]	; 0x30
 800a748:	bd10      	pop	{r4, pc}
 800a74a:	bf00      	nop
 800a74c:	0800aa69 	.word	0x0800aa69
 800a750:	0800aa8b 	.word	0x0800aa8b
 800a754:	0800aac3 	.word	0x0800aac3
 800a758:	0800aae7 	.word	0x0800aae7

0800a75c <_cleanup_r>:
 800a75c:	4901      	ldr	r1, [pc, #4]	; (800a764 <_cleanup_r+0x8>)
 800a75e:	f000 b8af 	b.w	800a8c0 <_fwalk_reent>
 800a762:	bf00      	nop
 800a764:	0800a69d 	.word	0x0800a69d

0800a768 <__sfmoreglue>:
 800a768:	b570      	push	{r4, r5, r6, lr}
 800a76a:	2268      	movs	r2, #104	; 0x68
 800a76c:	1e4d      	subs	r5, r1, #1
 800a76e:	4355      	muls	r5, r2
 800a770:	460e      	mov	r6, r1
 800a772:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a776:	f7ff fa65 	bl	8009c44 <_malloc_r>
 800a77a:	4604      	mov	r4, r0
 800a77c:	b140      	cbz	r0, 800a790 <__sfmoreglue+0x28>
 800a77e:	2100      	movs	r1, #0
 800a780:	e9c0 1600 	strd	r1, r6, [r0]
 800a784:	300c      	adds	r0, #12
 800a786:	60a0      	str	r0, [r4, #8]
 800a788:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a78c:	f7fd fb14 	bl	8007db8 <memset>
 800a790:	4620      	mov	r0, r4
 800a792:	bd70      	pop	{r4, r5, r6, pc}

0800a794 <__sfp_lock_acquire>:
 800a794:	4801      	ldr	r0, [pc, #4]	; (800a79c <__sfp_lock_acquire+0x8>)
 800a796:	f000 b8b3 	b.w	800a900 <__retarget_lock_acquire_recursive>
 800a79a:	bf00      	nop
 800a79c:	20000d55 	.word	0x20000d55

0800a7a0 <__sfp_lock_release>:
 800a7a0:	4801      	ldr	r0, [pc, #4]	; (800a7a8 <__sfp_lock_release+0x8>)
 800a7a2:	f000 b8ae 	b.w	800a902 <__retarget_lock_release_recursive>
 800a7a6:	bf00      	nop
 800a7a8:	20000d55 	.word	0x20000d55

0800a7ac <__sinit_lock_acquire>:
 800a7ac:	4801      	ldr	r0, [pc, #4]	; (800a7b4 <__sinit_lock_acquire+0x8>)
 800a7ae:	f000 b8a7 	b.w	800a900 <__retarget_lock_acquire_recursive>
 800a7b2:	bf00      	nop
 800a7b4:	20000d56 	.word	0x20000d56

0800a7b8 <__sinit_lock_release>:
 800a7b8:	4801      	ldr	r0, [pc, #4]	; (800a7c0 <__sinit_lock_release+0x8>)
 800a7ba:	f000 b8a2 	b.w	800a902 <__retarget_lock_release_recursive>
 800a7be:	bf00      	nop
 800a7c0:	20000d56 	.word	0x20000d56

0800a7c4 <__sinit>:
 800a7c4:	b510      	push	{r4, lr}
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	f7ff fff0 	bl	800a7ac <__sinit_lock_acquire>
 800a7cc:	69a3      	ldr	r3, [r4, #24]
 800a7ce:	b11b      	cbz	r3, 800a7d8 <__sinit+0x14>
 800a7d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7d4:	f7ff bff0 	b.w	800a7b8 <__sinit_lock_release>
 800a7d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a7dc:	6523      	str	r3, [r4, #80]	; 0x50
 800a7de:	4b13      	ldr	r3, [pc, #76]	; (800a82c <__sinit+0x68>)
 800a7e0:	4a13      	ldr	r2, [pc, #76]	; (800a830 <__sinit+0x6c>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a7e6:	42a3      	cmp	r3, r4
 800a7e8:	bf04      	itt	eq
 800a7ea:	2301      	moveq	r3, #1
 800a7ec:	61a3      	streq	r3, [r4, #24]
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f000 f820 	bl	800a834 <__sfp>
 800a7f4:	6060      	str	r0, [r4, #4]
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	f000 f81c 	bl	800a834 <__sfp>
 800a7fc:	60a0      	str	r0, [r4, #8]
 800a7fe:	4620      	mov	r0, r4
 800a800:	f000 f818 	bl	800a834 <__sfp>
 800a804:	2200      	movs	r2, #0
 800a806:	60e0      	str	r0, [r4, #12]
 800a808:	2104      	movs	r1, #4
 800a80a:	6860      	ldr	r0, [r4, #4]
 800a80c:	f7ff ff82 	bl	800a714 <std>
 800a810:	68a0      	ldr	r0, [r4, #8]
 800a812:	2201      	movs	r2, #1
 800a814:	2109      	movs	r1, #9
 800a816:	f7ff ff7d 	bl	800a714 <std>
 800a81a:	68e0      	ldr	r0, [r4, #12]
 800a81c:	2202      	movs	r2, #2
 800a81e:	2112      	movs	r1, #18
 800a820:	f7ff ff78 	bl	800a714 <std>
 800a824:	2301      	movs	r3, #1
 800a826:	61a3      	str	r3, [r4, #24]
 800a828:	e7d2      	b.n	800a7d0 <__sinit+0xc>
 800a82a:	bf00      	nop
 800a82c:	0800acac 	.word	0x0800acac
 800a830:	0800a75d 	.word	0x0800a75d

0800a834 <__sfp>:
 800a834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a836:	4607      	mov	r7, r0
 800a838:	f7ff ffac 	bl	800a794 <__sfp_lock_acquire>
 800a83c:	4b1e      	ldr	r3, [pc, #120]	; (800a8b8 <__sfp+0x84>)
 800a83e:	681e      	ldr	r6, [r3, #0]
 800a840:	69b3      	ldr	r3, [r6, #24]
 800a842:	b913      	cbnz	r3, 800a84a <__sfp+0x16>
 800a844:	4630      	mov	r0, r6
 800a846:	f7ff ffbd 	bl	800a7c4 <__sinit>
 800a84a:	3648      	adds	r6, #72	; 0x48
 800a84c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a850:	3b01      	subs	r3, #1
 800a852:	d503      	bpl.n	800a85c <__sfp+0x28>
 800a854:	6833      	ldr	r3, [r6, #0]
 800a856:	b30b      	cbz	r3, 800a89c <__sfp+0x68>
 800a858:	6836      	ldr	r6, [r6, #0]
 800a85a:	e7f7      	b.n	800a84c <__sfp+0x18>
 800a85c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a860:	b9d5      	cbnz	r5, 800a898 <__sfp+0x64>
 800a862:	4b16      	ldr	r3, [pc, #88]	; (800a8bc <__sfp+0x88>)
 800a864:	60e3      	str	r3, [r4, #12]
 800a866:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a86a:	6665      	str	r5, [r4, #100]	; 0x64
 800a86c:	f000 f847 	bl	800a8fe <__retarget_lock_init_recursive>
 800a870:	f7ff ff96 	bl	800a7a0 <__sfp_lock_release>
 800a874:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a878:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a87c:	6025      	str	r5, [r4, #0]
 800a87e:	61a5      	str	r5, [r4, #24]
 800a880:	2208      	movs	r2, #8
 800a882:	4629      	mov	r1, r5
 800a884:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a888:	f7fd fa96 	bl	8007db8 <memset>
 800a88c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a890:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a894:	4620      	mov	r0, r4
 800a896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a898:	3468      	adds	r4, #104	; 0x68
 800a89a:	e7d9      	b.n	800a850 <__sfp+0x1c>
 800a89c:	2104      	movs	r1, #4
 800a89e:	4638      	mov	r0, r7
 800a8a0:	f7ff ff62 	bl	800a768 <__sfmoreglue>
 800a8a4:	4604      	mov	r4, r0
 800a8a6:	6030      	str	r0, [r6, #0]
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	d1d5      	bne.n	800a858 <__sfp+0x24>
 800a8ac:	f7ff ff78 	bl	800a7a0 <__sfp_lock_release>
 800a8b0:	230c      	movs	r3, #12
 800a8b2:	603b      	str	r3, [r7, #0]
 800a8b4:	e7ee      	b.n	800a894 <__sfp+0x60>
 800a8b6:	bf00      	nop
 800a8b8:	0800acac 	.word	0x0800acac
 800a8bc:	ffff0001 	.word	0xffff0001

0800a8c0 <_fwalk_reent>:
 800a8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8c4:	4606      	mov	r6, r0
 800a8c6:	4688      	mov	r8, r1
 800a8c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a8cc:	2700      	movs	r7, #0
 800a8ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8d2:	f1b9 0901 	subs.w	r9, r9, #1
 800a8d6:	d505      	bpl.n	800a8e4 <_fwalk_reent+0x24>
 800a8d8:	6824      	ldr	r4, [r4, #0]
 800a8da:	2c00      	cmp	r4, #0
 800a8dc:	d1f7      	bne.n	800a8ce <_fwalk_reent+0xe>
 800a8de:	4638      	mov	r0, r7
 800a8e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8e4:	89ab      	ldrh	r3, [r5, #12]
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d907      	bls.n	800a8fa <_fwalk_reent+0x3a>
 800a8ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	d003      	beq.n	800a8fa <_fwalk_reent+0x3a>
 800a8f2:	4629      	mov	r1, r5
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	47c0      	blx	r8
 800a8f8:	4307      	orrs	r7, r0
 800a8fa:	3568      	adds	r5, #104	; 0x68
 800a8fc:	e7e9      	b.n	800a8d2 <_fwalk_reent+0x12>

0800a8fe <__retarget_lock_init_recursive>:
 800a8fe:	4770      	bx	lr

0800a900 <__retarget_lock_acquire_recursive>:
 800a900:	4770      	bx	lr

0800a902 <__retarget_lock_release_recursive>:
 800a902:	4770      	bx	lr

0800a904 <__swhatbuf_r>:
 800a904:	b570      	push	{r4, r5, r6, lr}
 800a906:	460e      	mov	r6, r1
 800a908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a90c:	2900      	cmp	r1, #0
 800a90e:	b096      	sub	sp, #88	; 0x58
 800a910:	4614      	mov	r4, r2
 800a912:	461d      	mov	r5, r3
 800a914:	da08      	bge.n	800a928 <__swhatbuf_r+0x24>
 800a916:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a91a:	2200      	movs	r2, #0
 800a91c:	602a      	str	r2, [r5, #0]
 800a91e:	061a      	lsls	r2, r3, #24
 800a920:	d410      	bmi.n	800a944 <__swhatbuf_r+0x40>
 800a922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a926:	e00e      	b.n	800a946 <__swhatbuf_r+0x42>
 800a928:	466a      	mov	r2, sp
 800a92a:	f000 f903 	bl	800ab34 <_fstat_r>
 800a92e:	2800      	cmp	r0, #0
 800a930:	dbf1      	blt.n	800a916 <__swhatbuf_r+0x12>
 800a932:	9a01      	ldr	r2, [sp, #4]
 800a934:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a938:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a93c:	425a      	negs	r2, r3
 800a93e:	415a      	adcs	r2, r3
 800a940:	602a      	str	r2, [r5, #0]
 800a942:	e7ee      	b.n	800a922 <__swhatbuf_r+0x1e>
 800a944:	2340      	movs	r3, #64	; 0x40
 800a946:	2000      	movs	r0, #0
 800a948:	6023      	str	r3, [r4, #0]
 800a94a:	b016      	add	sp, #88	; 0x58
 800a94c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a950 <__smakebuf_r>:
 800a950:	898b      	ldrh	r3, [r1, #12]
 800a952:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a954:	079d      	lsls	r5, r3, #30
 800a956:	4606      	mov	r6, r0
 800a958:	460c      	mov	r4, r1
 800a95a:	d507      	bpl.n	800a96c <__smakebuf_r+0x1c>
 800a95c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a960:	6023      	str	r3, [r4, #0]
 800a962:	6123      	str	r3, [r4, #16]
 800a964:	2301      	movs	r3, #1
 800a966:	6163      	str	r3, [r4, #20]
 800a968:	b002      	add	sp, #8
 800a96a:	bd70      	pop	{r4, r5, r6, pc}
 800a96c:	ab01      	add	r3, sp, #4
 800a96e:	466a      	mov	r2, sp
 800a970:	f7ff ffc8 	bl	800a904 <__swhatbuf_r>
 800a974:	9900      	ldr	r1, [sp, #0]
 800a976:	4605      	mov	r5, r0
 800a978:	4630      	mov	r0, r6
 800a97a:	f7ff f963 	bl	8009c44 <_malloc_r>
 800a97e:	b948      	cbnz	r0, 800a994 <__smakebuf_r+0x44>
 800a980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a984:	059a      	lsls	r2, r3, #22
 800a986:	d4ef      	bmi.n	800a968 <__smakebuf_r+0x18>
 800a988:	f023 0303 	bic.w	r3, r3, #3
 800a98c:	f043 0302 	orr.w	r3, r3, #2
 800a990:	81a3      	strh	r3, [r4, #12]
 800a992:	e7e3      	b.n	800a95c <__smakebuf_r+0xc>
 800a994:	4b0d      	ldr	r3, [pc, #52]	; (800a9cc <__smakebuf_r+0x7c>)
 800a996:	62b3      	str	r3, [r6, #40]	; 0x28
 800a998:	89a3      	ldrh	r3, [r4, #12]
 800a99a:	6020      	str	r0, [r4, #0]
 800a99c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9a0:	81a3      	strh	r3, [r4, #12]
 800a9a2:	9b00      	ldr	r3, [sp, #0]
 800a9a4:	6163      	str	r3, [r4, #20]
 800a9a6:	9b01      	ldr	r3, [sp, #4]
 800a9a8:	6120      	str	r0, [r4, #16]
 800a9aa:	b15b      	cbz	r3, 800a9c4 <__smakebuf_r+0x74>
 800a9ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9b0:	4630      	mov	r0, r6
 800a9b2:	f000 f8d1 	bl	800ab58 <_isatty_r>
 800a9b6:	b128      	cbz	r0, 800a9c4 <__smakebuf_r+0x74>
 800a9b8:	89a3      	ldrh	r3, [r4, #12]
 800a9ba:	f023 0303 	bic.w	r3, r3, #3
 800a9be:	f043 0301 	orr.w	r3, r3, #1
 800a9c2:	81a3      	strh	r3, [r4, #12]
 800a9c4:	89a0      	ldrh	r0, [r4, #12]
 800a9c6:	4305      	orrs	r5, r0
 800a9c8:	81a5      	strh	r5, [r4, #12]
 800a9ca:	e7cd      	b.n	800a968 <__smakebuf_r+0x18>
 800a9cc:	0800a75d 	.word	0x0800a75d

0800a9d0 <_malloc_usable_size_r>:
 800a9d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9d4:	1f18      	subs	r0, r3, #4
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	bfbc      	itt	lt
 800a9da:	580b      	ldrlt	r3, [r1, r0]
 800a9dc:	18c0      	addlt	r0, r0, r3
 800a9de:	4770      	bx	lr

0800a9e0 <_raise_r>:
 800a9e0:	291f      	cmp	r1, #31
 800a9e2:	b538      	push	{r3, r4, r5, lr}
 800a9e4:	4604      	mov	r4, r0
 800a9e6:	460d      	mov	r5, r1
 800a9e8:	d904      	bls.n	800a9f4 <_raise_r+0x14>
 800a9ea:	2316      	movs	r3, #22
 800a9ec:	6003      	str	r3, [r0, #0]
 800a9ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f2:	bd38      	pop	{r3, r4, r5, pc}
 800a9f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a9f6:	b112      	cbz	r2, 800a9fe <_raise_r+0x1e>
 800a9f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9fc:	b94b      	cbnz	r3, 800aa12 <_raise_r+0x32>
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f000 f830 	bl	800aa64 <_getpid_r>
 800aa04:	462a      	mov	r2, r5
 800aa06:	4601      	mov	r1, r0
 800aa08:	4620      	mov	r0, r4
 800aa0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa0e:	f000 b817 	b.w	800aa40 <_kill_r>
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d00a      	beq.n	800aa2c <_raise_r+0x4c>
 800aa16:	1c59      	adds	r1, r3, #1
 800aa18:	d103      	bne.n	800aa22 <_raise_r+0x42>
 800aa1a:	2316      	movs	r3, #22
 800aa1c:	6003      	str	r3, [r0, #0]
 800aa1e:	2001      	movs	r0, #1
 800aa20:	e7e7      	b.n	800a9f2 <_raise_r+0x12>
 800aa22:	2400      	movs	r4, #0
 800aa24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa28:	4628      	mov	r0, r5
 800aa2a:	4798      	blx	r3
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	e7e0      	b.n	800a9f2 <_raise_r+0x12>

0800aa30 <raise>:
 800aa30:	4b02      	ldr	r3, [pc, #8]	; (800aa3c <raise+0xc>)
 800aa32:	4601      	mov	r1, r0
 800aa34:	6818      	ldr	r0, [r3, #0]
 800aa36:	f7ff bfd3 	b.w	800a9e0 <_raise_r>
 800aa3a:	bf00      	nop
 800aa3c:	200003e8 	.word	0x200003e8

0800aa40 <_kill_r>:
 800aa40:	b538      	push	{r3, r4, r5, lr}
 800aa42:	4d07      	ldr	r5, [pc, #28]	; (800aa60 <_kill_r+0x20>)
 800aa44:	2300      	movs	r3, #0
 800aa46:	4604      	mov	r4, r0
 800aa48:	4608      	mov	r0, r1
 800aa4a:	4611      	mov	r1, r2
 800aa4c:	602b      	str	r3, [r5, #0]
 800aa4e:	f7f6 f9e3 	bl	8000e18 <_kill>
 800aa52:	1c43      	adds	r3, r0, #1
 800aa54:	d102      	bne.n	800aa5c <_kill_r+0x1c>
 800aa56:	682b      	ldr	r3, [r5, #0]
 800aa58:	b103      	cbz	r3, 800aa5c <_kill_r+0x1c>
 800aa5a:	6023      	str	r3, [r4, #0]
 800aa5c:	bd38      	pop	{r3, r4, r5, pc}
 800aa5e:	bf00      	nop
 800aa60:	20000d50 	.word	0x20000d50

0800aa64 <_getpid_r>:
 800aa64:	f7f6 b9d0 	b.w	8000e08 <_getpid>

0800aa68 <__sread>:
 800aa68:	b510      	push	{r4, lr}
 800aa6a:	460c      	mov	r4, r1
 800aa6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa70:	f000 f894 	bl	800ab9c <_read_r>
 800aa74:	2800      	cmp	r0, #0
 800aa76:	bfab      	itete	ge
 800aa78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa7a:	89a3      	ldrhlt	r3, [r4, #12]
 800aa7c:	181b      	addge	r3, r3, r0
 800aa7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa82:	bfac      	ite	ge
 800aa84:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa86:	81a3      	strhlt	r3, [r4, #12]
 800aa88:	bd10      	pop	{r4, pc}

0800aa8a <__swrite>:
 800aa8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa8e:	461f      	mov	r7, r3
 800aa90:	898b      	ldrh	r3, [r1, #12]
 800aa92:	05db      	lsls	r3, r3, #23
 800aa94:	4605      	mov	r5, r0
 800aa96:	460c      	mov	r4, r1
 800aa98:	4616      	mov	r6, r2
 800aa9a:	d505      	bpl.n	800aaa8 <__swrite+0x1e>
 800aa9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaa0:	2302      	movs	r3, #2
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f000 f868 	bl	800ab78 <_lseek_r>
 800aaa8:	89a3      	ldrh	r3, [r4, #12]
 800aaaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aaae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aab2:	81a3      	strh	r3, [r4, #12]
 800aab4:	4632      	mov	r2, r6
 800aab6:	463b      	mov	r3, r7
 800aab8:	4628      	mov	r0, r5
 800aaba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aabe:	f000 b817 	b.w	800aaf0 <_write_r>

0800aac2 <__sseek>:
 800aac2:	b510      	push	{r4, lr}
 800aac4:	460c      	mov	r4, r1
 800aac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaca:	f000 f855 	bl	800ab78 <_lseek_r>
 800aace:	1c43      	adds	r3, r0, #1
 800aad0:	89a3      	ldrh	r3, [r4, #12]
 800aad2:	bf15      	itete	ne
 800aad4:	6560      	strne	r0, [r4, #84]	; 0x54
 800aad6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aada:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aade:	81a3      	strheq	r3, [r4, #12]
 800aae0:	bf18      	it	ne
 800aae2:	81a3      	strhne	r3, [r4, #12]
 800aae4:	bd10      	pop	{r4, pc}

0800aae6 <__sclose>:
 800aae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaea:	f000 b813 	b.w	800ab14 <_close_r>
	...

0800aaf0 <_write_r>:
 800aaf0:	b538      	push	{r3, r4, r5, lr}
 800aaf2:	4d07      	ldr	r5, [pc, #28]	; (800ab10 <_write_r+0x20>)
 800aaf4:	4604      	mov	r4, r0
 800aaf6:	4608      	mov	r0, r1
 800aaf8:	4611      	mov	r1, r2
 800aafa:	2200      	movs	r2, #0
 800aafc:	602a      	str	r2, [r5, #0]
 800aafe:	461a      	mov	r2, r3
 800ab00:	f7f6 f9c1 	bl	8000e86 <_write>
 800ab04:	1c43      	adds	r3, r0, #1
 800ab06:	d102      	bne.n	800ab0e <_write_r+0x1e>
 800ab08:	682b      	ldr	r3, [r5, #0]
 800ab0a:	b103      	cbz	r3, 800ab0e <_write_r+0x1e>
 800ab0c:	6023      	str	r3, [r4, #0]
 800ab0e:	bd38      	pop	{r3, r4, r5, pc}
 800ab10:	20000d50 	.word	0x20000d50

0800ab14 <_close_r>:
 800ab14:	b538      	push	{r3, r4, r5, lr}
 800ab16:	4d06      	ldr	r5, [pc, #24]	; (800ab30 <_close_r+0x1c>)
 800ab18:	2300      	movs	r3, #0
 800ab1a:	4604      	mov	r4, r0
 800ab1c:	4608      	mov	r0, r1
 800ab1e:	602b      	str	r3, [r5, #0]
 800ab20:	f7f6 f9cd 	bl	8000ebe <_close>
 800ab24:	1c43      	adds	r3, r0, #1
 800ab26:	d102      	bne.n	800ab2e <_close_r+0x1a>
 800ab28:	682b      	ldr	r3, [r5, #0]
 800ab2a:	b103      	cbz	r3, 800ab2e <_close_r+0x1a>
 800ab2c:	6023      	str	r3, [r4, #0]
 800ab2e:	bd38      	pop	{r3, r4, r5, pc}
 800ab30:	20000d50 	.word	0x20000d50

0800ab34 <_fstat_r>:
 800ab34:	b538      	push	{r3, r4, r5, lr}
 800ab36:	4d07      	ldr	r5, [pc, #28]	; (800ab54 <_fstat_r+0x20>)
 800ab38:	2300      	movs	r3, #0
 800ab3a:	4604      	mov	r4, r0
 800ab3c:	4608      	mov	r0, r1
 800ab3e:	4611      	mov	r1, r2
 800ab40:	602b      	str	r3, [r5, #0]
 800ab42:	f7f6 f9c8 	bl	8000ed6 <_fstat>
 800ab46:	1c43      	adds	r3, r0, #1
 800ab48:	d102      	bne.n	800ab50 <_fstat_r+0x1c>
 800ab4a:	682b      	ldr	r3, [r5, #0]
 800ab4c:	b103      	cbz	r3, 800ab50 <_fstat_r+0x1c>
 800ab4e:	6023      	str	r3, [r4, #0]
 800ab50:	bd38      	pop	{r3, r4, r5, pc}
 800ab52:	bf00      	nop
 800ab54:	20000d50 	.word	0x20000d50

0800ab58 <_isatty_r>:
 800ab58:	b538      	push	{r3, r4, r5, lr}
 800ab5a:	4d06      	ldr	r5, [pc, #24]	; (800ab74 <_isatty_r+0x1c>)
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	4604      	mov	r4, r0
 800ab60:	4608      	mov	r0, r1
 800ab62:	602b      	str	r3, [r5, #0]
 800ab64:	f7f6 f9c7 	bl	8000ef6 <_isatty>
 800ab68:	1c43      	adds	r3, r0, #1
 800ab6a:	d102      	bne.n	800ab72 <_isatty_r+0x1a>
 800ab6c:	682b      	ldr	r3, [r5, #0]
 800ab6e:	b103      	cbz	r3, 800ab72 <_isatty_r+0x1a>
 800ab70:	6023      	str	r3, [r4, #0]
 800ab72:	bd38      	pop	{r3, r4, r5, pc}
 800ab74:	20000d50 	.word	0x20000d50

0800ab78 <_lseek_r>:
 800ab78:	b538      	push	{r3, r4, r5, lr}
 800ab7a:	4d07      	ldr	r5, [pc, #28]	; (800ab98 <_lseek_r+0x20>)
 800ab7c:	4604      	mov	r4, r0
 800ab7e:	4608      	mov	r0, r1
 800ab80:	4611      	mov	r1, r2
 800ab82:	2200      	movs	r2, #0
 800ab84:	602a      	str	r2, [r5, #0]
 800ab86:	461a      	mov	r2, r3
 800ab88:	f7f6 f9c0 	bl	8000f0c <_lseek>
 800ab8c:	1c43      	adds	r3, r0, #1
 800ab8e:	d102      	bne.n	800ab96 <_lseek_r+0x1e>
 800ab90:	682b      	ldr	r3, [r5, #0]
 800ab92:	b103      	cbz	r3, 800ab96 <_lseek_r+0x1e>
 800ab94:	6023      	str	r3, [r4, #0]
 800ab96:	bd38      	pop	{r3, r4, r5, pc}
 800ab98:	20000d50 	.word	0x20000d50

0800ab9c <_read_r>:
 800ab9c:	b538      	push	{r3, r4, r5, lr}
 800ab9e:	4d07      	ldr	r5, [pc, #28]	; (800abbc <_read_r+0x20>)
 800aba0:	4604      	mov	r4, r0
 800aba2:	4608      	mov	r0, r1
 800aba4:	4611      	mov	r1, r2
 800aba6:	2200      	movs	r2, #0
 800aba8:	602a      	str	r2, [r5, #0]
 800abaa:	461a      	mov	r2, r3
 800abac:	f7f6 f94e 	bl	8000e4c <_read>
 800abb0:	1c43      	adds	r3, r0, #1
 800abb2:	d102      	bne.n	800abba <_read_r+0x1e>
 800abb4:	682b      	ldr	r3, [r5, #0]
 800abb6:	b103      	cbz	r3, 800abba <_read_r+0x1e>
 800abb8:	6023      	str	r3, [r4, #0]
 800abba:	bd38      	pop	{r3, r4, r5, pc}
 800abbc:	20000d50 	.word	0x20000d50

0800abc0 <_init>:
 800abc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abc2:	bf00      	nop
 800abc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abc6:	bc08      	pop	{r3}
 800abc8:	469e      	mov	lr, r3
 800abca:	4770      	bx	lr

0800abcc <_fini>:
 800abcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abce:	bf00      	nop
 800abd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abd2:	bc08      	pop	{r3}
 800abd4:	469e      	mov	lr, r3
 800abd6:	4770      	bx	lr
