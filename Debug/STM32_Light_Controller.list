
STM32_Light_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b078  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800b278  0800b278  0001b278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7cc  0800b7cc  00020698  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7cc  0800b7cc  0001b7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7d4  0800b7d4  00020698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7d4  0800b7d4  0001b7d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b7d8  0800b7d8  0001b7d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000698  20000000  0800b7dc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000081c  20000698  0800be74  00020698  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000eb4  0800be74  00020eb4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020698  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fd8c  00000000  00000000  000206c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004373  00000000  00000000  00040452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001808  00000000  00000000  000447c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e8  00000000  00000000  00045fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c699  00000000  00000000  000475b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020bc1  00000000  00000000  00073c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101c90  00000000  00000000  00094812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001964a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007378  00000000  00000000  001964f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000698 	.word	0x20000698
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b260 	.word	0x0800b260

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000069c 	.word	0x2000069c
 800023c:	0800b260 	.word	0x0800b260

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08c      	sub	sp, #48	; 0x30
 80005f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	4baa      	ldr	r3, [pc, #680]	; (80008b4 <MX_GPIO_Init+0x2c0>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4aa9      	ldr	r2, [pc, #676]	; (80008b4 <MX_GPIO_Init+0x2c0>)
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4ba7      	ldr	r3, [pc, #668]	; (80008b4 <MX_GPIO_Init+0x2c0>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0304 	and.w	r3, r3, #4
 800061e:	61bb      	str	r3, [r7, #24]
 8000620:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000622:	4ba4      	ldr	r3, [pc, #656]	; (80008b4 <MX_GPIO_Init+0x2c0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4aa3      	ldr	r2, [pc, #652]	; (80008b4 <MX_GPIO_Init+0x2c0>)
 8000628:	f043 0320 	orr.w	r3, r3, #32
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4ba1      	ldr	r3, [pc, #644]	; (80008b4 <MX_GPIO_Init+0x2c0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0320 	and.w	r3, r3, #32
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063a:	4b9e      	ldr	r3, [pc, #632]	; (80008b4 <MX_GPIO_Init+0x2c0>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a9d      	ldr	r2, [pc, #628]	; (80008b4 <MX_GPIO_Init+0x2c0>)
 8000640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b9b      	ldr	r3, [pc, #620]	; (80008b4 <MX_GPIO_Init+0x2c0>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	4b98      	ldr	r3, [pc, #608]	; (80008b4 <MX_GPIO_Init+0x2c0>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a97      	ldr	r2, [pc, #604]	; (80008b4 <MX_GPIO_Init+0x2c0>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b95      	ldr	r3, [pc, #596]	; (80008b4 <MX_GPIO_Init+0x2c0>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066a:	4b92      	ldr	r3, [pc, #584]	; (80008b4 <MX_GPIO_Init+0x2c0>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a91      	ldr	r2, [pc, #580]	; (80008b4 <MX_GPIO_Init+0x2c0>)
 8000670:	f043 0302 	orr.w	r3, r3, #2
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b8f      	ldr	r3, [pc, #572]	; (80008b4 <MX_GPIO_Init+0x2c0>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0302 	and.w	r3, r3, #2
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000682:	4b8c      	ldr	r3, [pc, #560]	; (80008b4 <MX_GPIO_Init+0x2c0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a8b      	ldr	r2, [pc, #556]	; (80008b4 <MX_GPIO_Init+0x2c0>)
 8000688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b89      	ldr	r3, [pc, #548]	; (80008b4 <MX_GPIO_Init+0x2c0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800069a:	4b86      	ldr	r3, [pc, #536]	; (80008b4 <MX_GPIO_Init+0x2c0>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a85      	ldr	r2, [pc, #532]	; (80008b4 <MX_GPIO_Init+0x2c0>)
 80006a0:	f043 0308 	orr.w	r3, r3, #8
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b83      	ldr	r3, [pc, #524]	; (80008b4 <MX_GPIO_Init+0x2c0>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0308 	and.w	r3, r3, #8
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	21e0      	movs	r1, #224	; 0xe0
 80006b6:	4880      	ldr	r0, [pc, #512]	; (80008b8 <MX_GPIO_Init+0x2c4>)
 80006b8:	f002 fca8 	bl	800300c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f244 0181 	movw	r1, #16513	; 0x4081
 80006c2:	487e      	ldr	r0, [pc, #504]	; (80008bc <MX_GPIO_Init+0x2c8>)
 80006c4:	f002 fca2 	bl	800300c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ce:	487c      	ldr	r0, [pc, #496]	; (80008c0 <MX_GPIO_Init+0x2cc>)
 80006d0:	f002 fc9c 	bl	800300c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_D4_Pin|LCD_E_Pin, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80006da:	487a      	ldr	r0, [pc, #488]	; (80008c4 <MX_GPIO_Init+0x2d0>)
 80006dc:	f002 fc96 	bl	800300c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2140      	movs	r1, #64	; 0x40
 80006e4:	4878      	ldr	r0, [pc, #480]	; (80008c8 <MX_GPIO_Init+0x2d4>)
 80006e6:	f002 fc91 	bl	800300c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4619      	mov	r1, r3
 8000700:	4872      	ldr	r0, [pc, #456]	; (80008cc <MX_GPIO_Init+0x2d8>)
 8000702:	f002 fabf 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Next_Btn_Pin;
 8000706:	f44f 7300 	mov.w	r3, #512	; 0x200
 800070a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800070c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000710:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Next_Btn_GPIO_Port, &GPIO_InitStruct);
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	4619      	mov	r1, r3
 800071c:	4868      	ldr	r0, [pc, #416]	; (80008c0 <MX_GPIO_Init+0x2cc>)
 800071e:	f002 fab1 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000722:	2332      	movs	r3, #50	; 0x32
 8000724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000726:	2302      	movs	r3, #2
 8000728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072e:	2303      	movs	r3, #3
 8000730:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000732:	230b      	movs	r3, #11
 8000734:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	4619      	mov	r1, r3
 800073c:	4863      	ldr	r0, [pc, #396]	; (80008cc <MX_GPIO_Init+0x2d8>)
 800073e:	f002 faa1 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8000742:	2306      	movs	r3, #6
 8000744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000746:	2302      	movs	r3, #2
 8000748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074e:	2303      	movs	r3, #3
 8000750:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000752:	230b      	movs	r3, #11
 8000754:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	4619      	mov	r1, r3
 800075c:	4856      	ldr	r0, [pc, #344]	; (80008b8 <MX_GPIO_Init+0x2c4>)
 800075e:	f002 fa91 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin;
 8000762:	23e0      	movs	r3, #224	; 0xe0
 8000764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	4619      	mov	r1, r3
 8000778:	484f      	ldr	r0, [pc, #316]	; (80008b8 <MX_GPIO_Init+0x2c4>)
 800077a:	f002 fa83 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800077e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	4619      	mov	r1, r3
 8000796:	4849      	ldr	r0, [pc, #292]	; (80008bc <MX_GPIO_Init+0x2c8>)
 8000798:	f002 fa74 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 800079c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	4619      	mov	r1, r3
 80007b4:	4842      	ldr	r0, [pc, #264]	; (80008c0 <MX_GPIO_Init+0x2cc>)
 80007b6:	f002 fa65 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = Back_Btn_Pin|Up_Btn_Pin;
 80007ba:	2303      	movs	r3, #3
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	483e      	ldr	r0, [pc, #248]	; (80008c8 <MX_GPIO_Init+0x2d4>)
 80007d0:	f002 fa58 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e2:	2303      	movs	r3, #3
 80007e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e6:	230b      	movs	r3, #11
 80007e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	4832      	ldr	r0, [pc, #200]	; (80008bc <MX_GPIO_Init+0x2c8>)
 80007f2:	f002 fa47 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_E_Pin;
 80007f6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fc:	2301      	movs	r3, #1
 80007fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	4619      	mov	r1, r3
 800080e:	482d      	ldr	r0, [pc, #180]	; (80008c4 <MX_GPIO_Init+0x2d0>)
 8000810:	f002 fa38 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000814:	2340      	movs	r3, #64	; 0x40
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	4827      	ldr	r0, [pc, #156]	; (80008c8 <MX_GPIO_Init+0x2d4>)
 800082c:	f002 fa2a 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000830:	2380      	movs	r3, #128	; 0x80
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	4821      	ldr	r0, [pc, #132]	; (80008c8 <MX_GPIO_Init+0x2d4>)
 8000844:	f002 fa1e 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000848:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000856:	2303      	movs	r3, #3
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800085a:	230b      	movs	r3, #11
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4818      	ldr	r0, [pc, #96]	; (80008c8 <MX_GPIO_Init+0x2d4>)
 8000866:	f002 fa0d 	bl	8002c84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	2100      	movs	r1, #0
 800086e:	2006      	movs	r0, #6
 8000870:	f002 f93f 	bl	8002af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000874:	2006      	movs	r0, #6
 8000876:	f002 f958 	bl	8002b2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2100      	movs	r1, #0
 800087e:	2007      	movs	r0, #7
 8000880:	f002 f937 	bl	8002af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000884:	2007      	movs	r0, #7
 8000886:	f002 f950 	bl	8002b2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	2017      	movs	r0, #23
 8000890:	f002 f92f 	bl	8002af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000894:	2017      	movs	r0, #23
 8000896:	f002 f948 	bl	8002b2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2100      	movs	r1, #0
 800089e:	2028      	movs	r0, #40	; 0x28
 80008a0:	f002 f927 	bl	8002af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008a4:	2028      	movs	r0, #40	; 0x28
 80008a6:	f002 f940 	bl	8002b2a <HAL_NVIC_EnableIRQ>

}
 80008aa:	bf00      	nop
 80008ac:	3730      	adds	r7, #48	; 0x30
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40020000 	.word	0x40020000
 80008bc:	40020400 	.word	0x40020400
 80008c0:	40021400 	.word	0x40021400
 80008c4:	40020c00 	.word	0x40020c00
 80008c8:	40021800 	.word	0x40021800
 80008cc:	40020800 	.word	0x40020800

080008d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_I2C1_Init+0x74>)
 80008d6:	4a1c      	ldr	r2, [pc, #112]	; (8000948 <MX_I2C1_Init+0x78>)
 80008d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_I2C1_Init+0x74>)
 80008dc:	4a1b      	ldr	r2, [pc, #108]	; (800094c <MX_I2C1_Init+0x7c>)
 80008de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_I2C1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_I2C1_Init+0x74>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_I2C1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_I2C1_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_I2C1_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_I2C1_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_I2C1_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800090a:	480e      	ldr	r0, [pc, #56]	; (8000944 <MX_I2C1_Init+0x74>)
 800090c:	f002 fbca 	bl	80030a4 <HAL_I2C_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000916:	f000 fb23 	bl	8000f60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800091a:	2100      	movs	r1, #0
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <MX_I2C1_Init+0x74>)
 800091e:	f003 f8a7 	bl	8003a70 <HAL_I2CEx_ConfigAnalogFilter>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000928:	f000 fb1a 	bl	8000f60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800092c:	2100      	movs	r1, #0
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_I2C1_Init+0x74>)
 8000930:	f003 f8e9 	bl	8003b06 <HAL_I2CEx_ConfigDigitalFilter>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800093a:	f000 fb11 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200006b4 	.word	0x200006b4
 8000948:	40005400 	.word	0x40005400
 800094c:	20303e5d 	.word	0x20303e5d

08000950 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b0ae      	sub	sp, #184	; 0xb8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2290      	movs	r2, #144	; 0x90
 800096e:	2100      	movs	r1, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f007 fd5b 	bl	800842c <memset>
  if(i2cHandle->Instance==I2C1)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a22      	ldr	r2, [pc, #136]	; (8000a04 <HAL_I2C_MspInit+0xb4>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d13c      	bne.n	80009fa <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000980:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000984:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000986:	2300      	movs	r3, #0
 8000988:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4618      	mov	r0, r3
 8000990:	f003 ff82 	bl	8004898 <HAL_RCCEx_PeriphCLKConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800099a:	f000 fae1 	bl	8000f60 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <HAL_I2C_MspInit+0xb8>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a19      	ldr	r2, [pc, #100]	; (8000a08 <HAL_I2C_MspInit+0xb8>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <HAL_I2C_MspInit+0xb8>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009be:	2312      	movs	r3, #18
 80009c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009d0:	2304      	movs	r3, #4
 80009d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009da:	4619      	mov	r1, r3
 80009dc:	480b      	ldr	r0, [pc, #44]	; (8000a0c <HAL_I2C_MspInit+0xbc>)
 80009de:	f002 f951 	bl	8002c84 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <HAL_I2C_MspInit+0xb8>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <HAL_I2C_MspInit+0xb8>)
 80009e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_I2C_MspInit+0xb8>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009fa:	bf00      	nop
 80009fc:	37b8      	adds	r7, #184	; 0xb8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40005400 	.word	0x40005400
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020400 	.word	0x40020400

08000a10 <send_string>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void send_string(char* s)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)s, strlen(s));
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff fc11 	bl	8000240 <strlen>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	461a      	mov	r2, r3
 8000a24:	6879      	ldr	r1, [r7, #4]
 8000a26:	4803      	ldr	r0, [pc, #12]	; (8000a34 <send_string+0x24>)
 8000a28:	f005 fe84 	bl	8006734 <HAL_UART_Transmit_IT>
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	2000090c 	.word	0x2000090c

08000a38 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback ( uint16_t GPIO_Pin )
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Back_Btn_Pin)
 8000a42:	88fb      	ldrh	r3, [r7, #6]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d10d      	bne.n	8000a64 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		if(hmenu.Item->Parent != NULL)
 8000a48:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d02a      	beq.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x70>
		{
			hmenu.Item = hmenu.Item->Parent;
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000a58:	4a16      	ldr	r2, [pc, #88]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a5a:	6013      	str	r3, [r2, #0]
			hmenu.ItemChanged = 1;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	711a      	strb	r2, [r3, #4]
		{
			hmenu.Item = hmenu.Item->Child;
			hmenu.ItemChanged = 1;
		}
	}
}
 8000a62:	e021      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x70>
	else if(GPIO_Pin == Up_Btn_Pin)
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d10d      	bne.n	8000a86 <HAL_GPIO_EXTI_Callback+0x4e>
		if(hmenu.Item->Next != NULL)
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d019      	beq.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x70>
			hmenu.Item = hmenu.Item->Next;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7a:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a7c:	6013      	str	r3, [r2, #0]
			hmenu.ItemChanged = 1;
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	711a      	strb	r2, [r3, #4]
}
 8000a84:	e010      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x70>
	else if(GPIO_Pin == Next_Btn_Pin)
 8000a86:	88fb      	ldrh	r3, [r7, #6]
 8000a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a8c:	d10c      	bne.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x70>
		if(hmenu.Item->Child != NULL)
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d007      	beq.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x70>
			hmenu.Item = hmenu.Item->Child;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a9e:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000aa0:	6013      	str	r3, [r2, #0]
			hmenu.ItemChanged = 1;
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	711a      	strb	r2, [r3, #4]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	20000048 	.word	0x20000048

08000ab8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af02      	add	r7, sp, #8
 8000abe:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM3)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a44      	ldr	r2, [pc, #272]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d13d      	bne.n	8000b46 <HAL_TIM_PeriodElapsedCallback+0x8e>
  {
	  static int time_ms2 = 0;

	  MENU_ROUTINE(&hmenu);
 8000aca:	4844      	ldr	r0, [pc, #272]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000acc:	f001 fb7c 	bl	80021c8 <MENU_ROUTINE>

	  if(time_ms2 % 1000 == 0)
 8000ad0:	4b43      	ldr	r3, [pc, #268]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b43      	ldr	r3, [pc, #268]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000ad6:	fb83 1302 	smull	r1, r3, r3, r2
 8000ada:	1199      	asrs	r1, r3, #6
 8000adc:	17d3      	asrs	r3, r2, #31
 8000ade:	1acb      	subs	r3, r1, r3
 8000ae0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ae4:	fb01 f303 	mul.w	r3, r1, r3
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d11c      	bne.n	8000b28 <HAL_TIM_PeriodElapsedCallback+0x70>
	  {
		  int_LightSetpoint = (int)LightSetpoint;
 8000aee:	4b3e      	ldr	r3, [pc, #248]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000af0:	ed93 7b00 	vldr	d7, [r3]
 8000af4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000af8:	ee17 2a90 	vmov	r2, s15
 8000afc:	4b3b      	ldr	r3, [pc, #236]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000afe:	601a      	str	r2, [r3, #0]
		  sprintf(send_buffer, "*****\n\nLight set value: %4d [lx]\nCurrent value: %4d [lx]\nController Signal: %2.1f [%%]\n\n", int_LightSetpoint, int_Light, PID_Out/10);
 8000b00:	4b3a      	ldr	r3, [pc, #232]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b3a      	ldr	r3, [pc, #232]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	493a      	ldr	r1, [pc, #232]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000b0a:	ed91 6b00 	vldr	d6, [r1]
 8000b0e:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8000b12:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b16:	ed8d 7b00 	vstr	d7, [sp]
 8000b1a:	4937      	ldr	r1, [pc, #220]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000b1c:	4837      	ldr	r0, [pc, #220]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000b1e:	f008 f905 	bl	8008d2c <siprintf>
		  send_string(send_buffer);
 8000b22:	4836      	ldr	r0, [pc, #216]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000b24:	f7ff ff74 	bl	8000a10 <send_string>
	  }

	  time_ms2 += 500;
 8000b28:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000b30:	4a2b      	ldr	r2, [pc, #172]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000b32:	6013      	str	r3, [r2, #0]
	  if(time_ms2 == 3000)
 8000b34:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d102      	bne.n	8000b46 <HAL_TIM_PeriodElapsedCallback+0x8e>
	  {
		  time_ms2 = 0;
 8000b40:	4b27      	ldr	r3, [pc, #156]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
	  }
  }

  if (htim->Instance == TIM6)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a2d      	ldr	r2, [pc, #180]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d13f      	bne.n	8000bd0 <HAL_TIM_PeriodElapsedCallback+0x118>
    {
	  static int time_ms = 0;

	  if(time_ms % 20 == 0)
 8000b50:	4b2c      	ldr	r3, [pc, #176]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000b52:	6819      	ldr	r1, [r3, #0]
 8000b54:	4b2c      	ldr	r3, [pc, #176]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000b56:	fb83 2301 	smull	r2, r3, r3, r1
 8000b5a:	10da      	asrs	r2, r3, #3
 8000b5c:	17cb      	asrs	r3, r1, #31
 8000b5e:	1ad2      	subs	r2, r2, r3
 8000b60:	4613      	mov	r3, r2
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	4413      	add	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	1aca      	subs	r2, r1, r3
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	d123      	bne.n	8000bb6 <HAL_TIM_PeriodElapsedCallback+0xfe>
	  {
		  Light = BH1750_ReadLux(&hbh1750_1);
 8000b6e:	4827      	ldr	r0, [pc, #156]	; (8000c0c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000b70:	f000 fec6 	bl	8001900 <BH1750_ReadLux>
 8000b74:	eef0 7a40 	vmov.f32	s15, s0
 8000b78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b7c:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000b7e:	ed83 7b00 	vstr	d7, [r3]
		  int_Light = (int)Light;
 8000b82:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000b84:	ed93 7b00 	vldr	d7, [r3]
 8000b88:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000b8c:	ee17 2a90 	vmov	r2, s15
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000b92:	601a      	str	r2, [r3, #0]

		  PID_Compute(&Light_PID);
 8000b94:	481f      	ldr	r0, [pc, #124]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000b96:	f001 fbef 	bl	8002378 <PID_Compute>

		  int_pulse = (int)PID_Out;
 8000b9a:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000b9c:	ed93 7b00 	vldr	d7, [r3]
 8000ba0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ba4:	ee17 2a90 	vmov	r2, s15
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000baa:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, int_pulse);
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	635a      	str	r2, [r3, #52]	; 0x34
	  }

	  time_ms += 20;
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	3314      	adds	r3, #20
 8000bbc:	4a11      	ldr	r2, [pc, #68]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000bbe:	6013      	str	r3, [r2, #0]
	  if(time_ms == 1000)
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bc8:	d102      	bne.n	8000bd0 <HAL_TIM_PeriodElapsedCallback+0x118>
	  {
		  time_ms = 0;
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
	  }
    }


}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40000400 	.word	0x40000400
 8000bdc:	20000048 	.word	0x20000048
 8000be0:	200007d0 	.word	0x200007d0
 8000be4:	10624dd3 	.word	0x10624dd3
 8000be8:	20000730 	.word	0x20000730
 8000bec:	2000071c 	.word	0x2000071c
 8000bf0:	20000718 	.word	0x20000718
 8000bf4:	20000728 	.word	0x20000728
 8000bf8:	0800b278 	.word	0x0800b278
 8000bfc:	20000738 	.word	0x20000738
 8000c00:	40001000 	.word	0x40001000
 8000c04:	200007d4 	.word	0x200007d4
 8000c08:	66666667 	.word	0x66666667
 8000c0c:	20000004 	.word	0x20000004
 8000c10:	20000720 	.word	0x20000720
 8000c14:	20000450 	.word	0x20000450
 8000c18:	20000714 	.word	0x20000714
 8000c1c:	20000828 	.word	0x20000828

08000c20 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08e      	sub	sp, #56	; 0x38
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	uint8_t Data[6];
	sprintf(Data, "%s",Received);
 8000c28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c2c:	4a4a      	ldr	r2, [pc, #296]	; (8000d58 <HAL_UART_RxCpltCallback+0x138>)
 8000c2e:	494b      	ldr	r1, [pc, #300]	; (8000d5c <HAL_UART_RxCpltCallback+0x13c>)
 8000c30:	4618      	mov	r0, r3
 8000c32:	f008 f87b 	bl	8008d2c <siprintf>
	if(Data[0]=='L')
 8000c36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c3a:	2b4c      	cmp	r3, #76	; 0x4c
 8000c3c:	d122      	bne.n	8000c84 <HAL_UART_RxCpltCallback+0x64>
	{
		int value = atoi(&Data[1]);
 8000c3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c42:	3301      	adds	r3, #1
 8000c44:	4618      	mov	r0, r3
 8000c46:	f007 fbc3 	bl	80083d0 <atoi>
 8000c4a:	6378      	str	r0, [r7, #52]	; 0x34
		if(value >= 0 && value <=9999)
 8000c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	db18      	blt.n	8000c84 <HAL_UART_RxCpltCallback+0x64>
 8000c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c54:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	dc13      	bgt.n	8000c84 <HAL_UART_RxCpltCallback+0x64>
		{
			char send_buffer[32];
			LightSetpoint = value;
 8000c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c5e:	ee07 3a90 	vmov	s15, r3
 8000c62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c66:	4b3e      	ldr	r3, [pc, #248]	; (8000d60 <HAL_UART_RxCpltCallback+0x140>)
 8000c68:	ed83 7b00 	vstr	d7, [r3]

			sprintf(send_buffer, "Light: %4d [lx]\r\n", value);
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c72:	493c      	ldr	r1, [pc, #240]	; (8000d64 <HAL_UART_RxCpltCallback+0x144>)
 8000c74:	4618      	mov	r0, r3
 8000c76:	f008 f859 	bl	8008d2c <siprintf>
			send_string(send_buffer);
 8000c7a:	f107 030c 	add.w	r3, r7, #12
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fec6 	bl	8000a10 <send_string>
		}
	}
	if(Data[0]=='M')
 8000c84:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c88:	2b4d      	cmp	r3, #77	; 0x4d
 8000c8a:	d15b      	bne.n	8000d44 <HAL_UART_RxCpltCallback+0x124>
	{
		if(!strncmp( Data, "MNext", 5 ) && hmenu.Item->Next != NULL)
 8000c8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c90:	2205      	movs	r2, #5
 8000c92:	4935      	ldr	r1, [pc, #212]	; (8000d68 <HAL_UART_RxCpltCallback+0x148>)
 8000c94:	4618      	mov	r0, r3
 8000c96:	f008 f869 	bl	8008d6c <strncmp>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d10c      	bne.n	8000cba <HAL_UART_RxCpltCallback+0x9a>
 8000ca0:	4b32      	ldr	r3, [pc, #200]	; (8000d6c <HAL_UART_RxCpltCallback+0x14c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d007      	beq.n	8000cba <HAL_UART_RxCpltCallback+0x9a>
		{
			hmenu.Item = hmenu.Item->Next;
 8000caa:	4b30      	ldr	r3, [pc, #192]	; (8000d6c <HAL_UART_RxCpltCallback+0x14c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb0:	4a2e      	ldr	r2, [pc, #184]	; (8000d6c <HAL_UART_RxCpltCallback+0x14c>)
 8000cb2:	6013      	str	r3, [r2, #0]
			hmenu.ItemChanged = 1;
 8000cb4:	4b2d      	ldr	r3, [pc, #180]	; (8000d6c <HAL_UART_RxCpltCallback+0x14c>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	711a      	strb	r2, [r3, #4]
		}
		if(!strncmp( Data, "MPrev", 5 ) && hmenu.Item->Prev != NULL)
 8000cba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cbe:	2205      	movs	r2, #5
 8000cc0:	492b      	ldr	r1, [pc, #172]	; (8000d70 <HAL_UART_RxCpltCallback+0x150>)
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f008 f852 	bl	8008d6c <strncmp>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d10c      	bne.n	8000ce8 <HAL_UART_RxCpltCallback+0xc8>
 8000cce:	4b27      	ldr	r3, [pc, #156]	; (8000d6c <HAL_UART_RxCpltCallback+0x14c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d007      	beq.n	8000ce8 <HAL_UART_RxCpltCallback+0xc8>
		{
			hmenu.Item = hmenu.Item->Prev;
 8000cd8:	4b24      	ldr	r3, [pc, #144]	; (8000d6c <HAL_UART_RxCpltCallback+0x14c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cde:	4a23      	ldr	r2, [pc, #140]	; (8000d6c <HAL_UART_RxCpltCallback+0x14c>)
 8000ce0:	6013      	str	r3, [r2, #0]
			hmenu.ItemChanged = 1;
 8000ce2:	4b22      	ldr	r3, [pc, #136]	; (8000d6c <HAL_UART_RxCpltCallback+0x14c>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	711a      	strb	r2, [r3, #4]
		}
		if(!strncmp( Data, "MChld", 5 ) && hmenu.Item->Child != NULL)
 8000ce8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cec:	2205      	movs	r2, #5
 8000cee:	4921      	ldr	r1, [pc, #132]	; (8000d74 <HAL_UART_RxCpltCallback+0x154>)
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f008 f83b 	bl	8008d6c <strncmp>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d10c      	bne.n	8000d16 <HAL_UART_RxCpltCallback+0xf6>
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <HAL_UART_RxCpltCallback+0x14c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d007      	beq.n	8000d16 <HAL_UART_RxCpltCallback+0xf6>
		{
			hmenu.Item = hmenu.Item->Child;
 8000d06:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <HAL_UART_RxCpltCallback+0x14c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0c:	4a17      	ldr	r2, [pc, #92]	; (8000d6c <HAL_UART_RxCpltCallback+0x14c>)
 8000d0e:	6013      	str	r3, [r2, #0]
			hmenu.ItemChanged = 1;
 8000d10:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <HAL_UART_RxCpltCallback+0x14c>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	711a      	strb	r2, [r3, #4]
		}
		if(!strncmp( Data, "MPrnt", 5 ) && hmenu.Item->Parent != NULL)
 8000d16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d1a:	2205      	movs	r2, #5
 8000d1c:	4916      	ldr	r1, [pc, #88]	; (8000d78 <HAL_UART_RxCpltCallback+0x158>)
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f008 f824 	bl	8008d6c <strncmp>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d10c      	bne.n	8000d44 <HAL_UART_RxCpltCallback+0x124>
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <HAL_UART_RxCpltCallback+0x14c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d007      	beq.n	8000d44 <HAL_UART_RxCpltCallback+0x124>
		{
			hmenu.Item = hmenu.Item->Parent;
 8000d34:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <HAL_UART_RxCpltCallback+0x14c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000d3a:	4a0c      	ldr	r2, [pc, #48]	; (8000d6c <HAL_UART_RxCpltCallback+0x14c>)
 8000d3c:	6013      	str	r3, [r2, #0]
			hmenu.ItemChanged = 1;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_UART_RxCpltCallback+0x14c>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	711a      	strb	r2, [r3, #4]
		}
	}
	HAL_UART_Receive_IT(&huart3, Received, 5);
 8000d44:	2205      	movs	r2, #5
 8000d46:	4904      	ldr	r1, [pc, #16]	; (8000d58 <HAL_UART_RxCpltCallback+0x138>)
 8000d48:	480c      	ldr	r0, [pc, #48]	; (8000d7c <HAL_UART_RxCpltCallback+0x15c>)
 8000d4a:	f005 fd51 	bl	80067f0 <HAL_UART_Receive_IT>
}
 8000d4e:	bf00      	nop
 8000d50:	3738      	adds	r7, #56	; 0x38
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000708 	.word	0x20000708
 8000d5c:	0800b2d4 	.word	0x0800b2d4
 8000d60:	20000730 	.word	0x20000730
 8000d64:	0800b2d8 	.word	0x0800b2d8
 8000d68:	0800b2ec 	.word	0x0800b2ec
 8000d6c:	20000048 	.word	0x20000048
 8000d70:	0800b2f4 	.word	0x0800b2f4
 8000d74:	0800b2fc 	.word	0x0800b2fc
 8000d78:	0800b304 	.word	0x0800b304
 8000d7c:	2000090c 	.word	0x2000090c

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d86:	f001 fd57 	bl	8002838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8a:	f000 f877 	bl	8000e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8e:	f7ff fc31 	bl	80005f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d92:	f000 fc23 	bl	80015dc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d96:	f000 fcb9 	bl	800170c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 8000d9a:	f000 faa3 	bl	80012e4 <MX_TIM4_Init>
  MX_I2C1_Init();
 8000d9e:	f7ff fd97 	bl	80008d0 <MX_I2C1_Init>
  MX_TIM6_Init();
 8000da2:	f000 fb17 	bl	80013d4 <MX_TIM6_Init>
  MX_TIM14_Init();
 8000da6:	f000 fb4b 	bl	8001440 <MX_TIM14_Init>
  MX_TIM3_Init();
 8000daa:	f000 fa4b 	bl	8001244 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  BH1750_Init(&hbh1750_1);
 8000dae:	4826      	ldr	r0, [pc, #152]	; (8000e48 <main+0xc8>)
 8000db0:	f000 fd7d 	bl	80018ae <BH1750_Init>
  Lcd_init(&lcd);
 8000db4:	4825      	ldr	r0, [pc, #148]	; (8000e4c <main+0xcc>)
 8000db6:	f000 fdd3 	bl	8001960 <Lcd_init>

  LightSetpoint = 200;
 8000dba:	4925      	ldr	r1, [pc, #148]	; (8000e50 <main+0xd0>)
 8000dbc:	f04f 0200 	mov.w	r2, #0
 8000dc0:	4b24      	ldr	r3, [pc, #144]	; (8000e54 <main+0xd4>)
 8000dc2:	e9c1 2300 	strd	r2, r3, [r1]
  PID(&Light_PID, &Light, &PID_Out, &LightSetpoint, 0.2, 10, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	9301      	str	r3, [sp, #4]
 8000dca:	2301      	movs	r3, #1
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	ed9f 2b18 	vldr	d2, [pc, #96]	; 8000e30 <main+0xb0>
 8000dd2:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0
 8000dd6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8000e38 <main+0xb8>
 8000dda:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <main+0xd0>)
 8000ddc:	4a1e      	ldr	r2, [pc, #120]	; (8000e58 <main+0xd8>)
 8000dde:	491f      	ldr	r1, [pc, #124]	; (8000e5c <main+0xdc>)
 8000de0:	481f      	ldr	r0, [pc, #124]	; (8000e60 <main+0xe0>)
 8000de2:	f001 fa7d 	bl	80022e0 <PID>

  PID_SetMode(&Light_PID, _PID_MODE_AUTOMATIC);
 8000de6:	2101      	movs	r1, #1
 8000de8:	481d      	ldr	r0, [pc, #116]	; (8000e60 <main+0xe0>)
 8000dea:	f001 fb95 	bl	8002518 <PID_SetMode>
  PID_SetSampleTime(&Light_PID, 20);
 8000dee:	2114      	movs	r1, #20
 8000df0:	481b      	ldr	r0, [pc, #108]	; (8000e60 <main+0xe0>)
 8000df2:	f001 fced 	bl	80027d0 <PID_SetSampleTime>
  PID_SetOutputLimits(&Light_PID, 0, 999);
 8000df6:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8000e40 <main+0xc0>
 8000dfa:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8000e30 <main+0xb0>
 8000dfe:	4818      	ldr	r0, [pc, #96]	; (8000e60 <main+0xe0>)
 8000e00:	f001 fba8 	bl	8002554 <PID_SetOutputLimits>

  MENU_Init(&hmenu);
 8000e04:	4817      	ldr	r0, [pc, #92]	; (8000e64 <main+0xe4>)
 8000e06:	f001 f8fd 	bl	8002004 <MENU_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  HAL_TIM_Base_Start_IT(&htim3);
 8000e0a:	4817      	ldr	r0, [pc, #92]	; (8000e68 <main+0xe8>)
 8000e0c:	f004 fa5c 	bl	80052c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000e10:	4816      	ldr	r0, [pc, #88]	; (8000e6c <main+0xec>)
 8000e12:	f004 fa59 	bl	80052c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000e16:	4816      	ldr	r0, [pc, #88]	; (8000e70 <main+0xf0>)
 8000e18:	f004 fa56 	bl	80052c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4813      	ldr	r0, [pc, #76]	; (8000e6c <main+0xec>)
 8000e20:	f004 fb2c 	bl	800547c <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, Received, 5);
 8000e24:	2205      	movs	r2, #5
 8000e26:	4913      	ldr	r1, [pc, #76]	; (8000e74 <main+0xf4>)
 8000e28:	4813      	ldr	r0, [pc, #76]	; (8000e78 <main+0xf8>)
 8000e2a:	f005 fce1 	bl	80067f0 <HAL_UART_Receive_IT>

  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <main+0xae>
	...
 8000e38:	9999999a 	.word	0x9999999a
 8000e3c:	3fc99999 	.word	0x3fc99999
 8000e40:	00000000 	.word	0x00000000
 8000e44:	408f3800 	.word	0x408f3800
 8000e48:	20000004 	.word	0x20000004
 8000e4c:	2000002c 	.word	0x2000002c
 8000e50:	20000730 	.word	0x20000730
 8000e54:	40690000 	.word	0x40690000
 8000e58:	20000728 	.word	0x20000728
 8000e5c:	20000720 	.word	0x20000720
 8000e60:	20000450 	.word	0x20000450
 8000e64:	20000048 	.word	0x20000048
 8000e68:	200007dc 	.word	0x200007dc
 8000e6c:	20000828 	.word	0x20000828
 8000e70:	20000874 	.word	0x20000874
 8000e74:	20000708 	.word	0x20000708
 8000e78:	2000090c 	.word	0x2000090c

08000e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b094      	sub	sp, #80	; 0x50
 8000e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	2234      	movs	r2, #52	; 0x34
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f007 face 	bl	800842c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e90:	f107 0308 	add.w	r3, r7, #8
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ea0:	f002 ffc6 	bl	8003e30 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <SystemClock_Config+0xdc>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	4a2b      	ldr	r2, [pc, #172]	; (8000f58 <SystemClock_Config+0xdc>)
 8000eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eae:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb0:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <SystemClock_Config+0xdc>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ebc:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <SystemClock_Config+0xe0>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ec4:	4a25      	ldr	r2, [pc, #148]	; (8000f5c <SystemClock_Config+0xe0>)
 8000ec6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <SystemClock_Config+0xe0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000edc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ee0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ee6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000eec:	2304      	movs	r3, #4
 8000eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000ef0:	2360      	movs	r3, #96	; 0x60
 8000ef2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ef8:	2304      	movs	r3, #4
 8000efa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000efc:	2302      	movs	r3, #2
 8000efe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	4618      	mov	r0, r3
 8000f06:	f002 fff3 	bl	8003ef0 <HAL_RCC_OscConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f10:	f000 f826 	bl	8000f60 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f14:	f002 ff9c 	bl	8003e50 <HAL_PWREx_EnableOverDrive>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f1e:	f000 f81f 	bl	8000f60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f22:	230f      	movs	r3, #15
 8000f24:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f26:	2302      	movs	r3, #2
 8000f28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	2103      	movs	r1, #3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f003 fa84 	bl	800444c <HAL_RCC_ClockConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000f4a:	f000 f809 	bl	8000f60 <Error_Handler>
  }
}
 8000f4e:	bf00      	nop
 8000f50:	3750      	adds	r7, #80	; 0x50
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40007000 	.word	0x40007000

08000f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f64:	b672      	cpsid	i
}
 8000f66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <Error_Handler+0x8>
	...

08000f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f94:	6453      	str	r3, [r2, #68]	; 0x44
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800

08000fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <NMI_Handler+0x4>

08000fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <HardFault_Handler+0x4>

08000fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <MemManage_Handler+0x4>

08000fc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <BusFault_Handler+0x4>

08000fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <UsageFault_Handler+0x4>

08000fd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001000:	f001 fc58 	bl	80028b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Back_Btn_Pin);
 800100c:	2001      	movs	r0, #1
 800100e:	f002 f831 	bl	8003074 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}

08001016 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Up_Btn_Pin);
 800101a:	2002      	movs	r0, #2
 800101c:	f002 f82a 	bl	8003074 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}

08001024 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Next_Btn_Pin);
 8001028:	f44f 7000 	mov.w	r0, #512	; 0x200
 800102c:	f002 f822 	bl	8003074 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <TIM3_IRQHandler+0x10>)
 800103a:	f004 fb19 	bl	8005670 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200007dc 	.word	0x200007dc

08001048 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <TIM4_IRQHandler+0x10>)
 800104e:	f004 fb0f 	bl	8005670 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000828 	.word	0x20000828

0800105c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <USART3_IRQHandler+0x10>)
 8001062:	f005 fc09 	bl	8006878 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000090c 	.word	0x2000090c

08001070 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001074:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001078:	f001 fffc 	bl	8003074 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <TIM6_DAC_IRQHandler+0x10>)
 8001086:	f004 faf3 	bl	8005670 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000874 	.word	0x20000874

08001094 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
	return 1;
 8001098:	2301      	movs	r3, #1
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <_kill>:

int _kill(int pid, int sig)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010ae:	f007 f993 	bl	80083d8 <__errno>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2216      	movs	r2, #22
 80010b6:	601a      	str	r2, [r3, #0]
	return -1;
 80010b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <_exit>:

void _exit (int status)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ffe7 	bl	80010a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80010d6:	e7fe      	b.n	80010d6 <_exit+0x12>

080010d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	e00a      	b.n	8001100 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010ea:	f3af 8000 	nop.w
 80010ee:	4601      	mov	r1, r0
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	1c5a      	adds	r2, r3, #1
 80010f4:	60ba      	str	r2, [r7, #8]
 80010f6:	b2ca      	uxtb	r2, r1
 80010f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3301      	adds	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	429a      	cmp	r2, r3
 8001106:	dbf0      	blt.n	80010ea <_read+0x12>
	}

return len;
 8001108:	687b      	ldr	r3, [r7, #4]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	e009      	b.n	8001138 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	60ba      	str	r2, [r7, #8]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	3301      	adds	r3, #1
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	429a      	cmp	r2, r3
 800113e:	dbf1      	blt.n	8001124 <_write+0x12>
	}
	return len;
 8001140:	687b      	ldr	r3, [r7, #4]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <_close>:

int _close(int file)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
	return -1;
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001172:	605a      	str	r2, [r3, #4]
	return 0;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <_isatty>:

int _isatty(int file)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
	return 1;
 800118a:	2301      	movs	r3, #1
}
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
	return 0;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011bc:	4a14      	ldr	r2, [pc, #80]	; (8001210 <_sbrk+0x5c>)
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <_sbrk+0x60>)
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <_sbrk+0x64>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d102      	bne.n	80011d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <_sbrk+0x64>)
 80011d2:	4a12      	ldr	r2, [pc, #72]	; (800121c <_sbrk+0x68>)
 80011d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <_sbrk+0x64>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d207      	bcs.n	80011f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e4:	f007 f8f8 	bl	80083d8 <__errno>
 80011e8:	4603      	mov	r3, r0
 80011ea:	220c      	movs	r2, #12
 80011ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	e009      	b.n	8001208 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <_sbrk+0x64>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4413      	add	r3, r2
 8001202:	4a05      	ldr	r2, [pc, #20]	; (8001218 <_sbrk+0x64>)
 8001204:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20080000 	.word	0x20080000
 8001214:	00000400 	.word	0x00000400
 8001218:	200007d8 	.word	0x200007d8
 800121c:	20000eb8 	.word	0x20000eb8

08001220 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <SystemInit+0x20>)
 8001226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <SystemInit+0x20>)
 800122c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001230:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001262:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <MX_TIM3_Init+0x98>)
 8001264:	4a1e      	ldr	r2, [pc, #120]	; (80012e0 <MX_TIM3_Init+0x9c>)
 8001266:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9599;
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <MX_TIM3_Init+0x98>)
 800126a:	f242 527f 	movw	r2, #9599	; 0x257f
 800126e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_TIM3_Init+0x98>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <MX_TIM3_Init+0x98>)
 8001278:	f241 3287 	movw	r2, #4999	; 0x1387
 800127c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <MX_TIM3_Init+0x98>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <MX_TIM3_Init+0x98>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800128a:	4814      	ldr	r0, [pc, #80]	; (80012dc <MX_TIM3_Init+0x98>)
 800128c:	f003 ff2c 	bl	80050e8 <HAL_TIM_Base_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001296:	f7ff fe63 	bl	8000f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	4619      	mov	r1, r3
 80012a6:	480d      	ldr	r0, [pc, #52]	; (80012dc <MX_TIM3_Init+0x98>)
 80012a8:	f004 fc16 	bl	8005ad8 <HAL_TIM_ConfigClockSource>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80012b2:	f7ff fe55 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <MX_TIM3_Init+0x98>)
 80012c4:	f005 f8b8 	bl	8006438 <HAL_TIMEx_MasterConfigSynchronization>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80012ce:	f7ff fe47 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	3720      	adds	r7, #32
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200007dc 	.word	0x200007dc
 80012e0:	40000400 	.word	0x40000400

080012e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08e      	sub	sp, #56	; 0x38
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001304:	463b      	mov	r3, r7
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]
 8001312:	615a      	str	r2, [r3, #20]
 8001314:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001316:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <MX_TIM4_Init+0xe8>)
 8001318:	4a2d      	ldr	r2, [pc, #180]	; (80013d0 <MX_TIM4_Init+0xec>)
 800131a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 95;
 800131c:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <MX_TIM4_Init+0xe8>)
 800131e:	225f      	movs	r2, #95	; 0x5f
 8001320:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001322:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <MX_TIM4_Init+0xe8>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001328:	4b28      	ldr	r3, [pc, #160]	; (80013cc <MX_TIM4_Init+0xe8>)
 800132a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800132e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001330:	4b26      	ldr	r3, [pc, #152]	; (80013cc <MX_TIM4_Init+0xe8>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001336:	4b25      	ldr	r3, [pc, #148]	; (80013cc <MX_TIM4_Init+0xe8>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800133c:	4823      	ldr	r0, [pc, #140]	; (80013cc <MX_TIM4_Init+0xe8>)
 800133e:	f003 fed3 	bl	80050e8 <HAL_TIM_Base_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001348:	f7ff fe0a 	bl	8000f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001352:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001356:	4619      	mov	r1, r3
 8001358:	481c      	ldr	r0, [pc, #112]	; (80013cc <MX_TIM4_Init+0xe8>)
 800135a:	f004 fbbd 	bl	8005ad8 <HAL_TIM_ConfigClockSource>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001364:	f7ff fdfc 	bl	8000f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001368:	4818      	ldr	r0, [pc, #96]	; (80013cc <MX_TIM4_Init+0xe8>)
 800136a:	f004 f825 	bl	80053b8 <HAL_TIM_PWM_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001374:	f7ff fdf4 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	4811      	ldr	r0, [pc, #68]	; (80013cc <MX_TIM4_Init+0xe8>)
 8001388:	f005 f856 	bl	8006438 <HAL_TIMEx_MasterConfigSynchronization>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001392:	f7ff fde5 	bl	8000f60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001396:	2360      	movs	r3, #96	; 0x60
 8001398:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800139a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800139e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	2200      	movs	r2, #0
 80013ac:	4619      	mov	r1, r3
 80013ae:	4807      	ldr	r0, [pc, #28]	; (80013cc <MX_TIM4_Init+0xe8>)
 80013b0:	f004 fa7e 	bl	80058b0 <HAL_TIM_PWM_ConfigChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80013ba:	f7ff fdd1 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013be:	4803      	ldr	r0, [pc, #12]	; (80013cc <MX_TIM4_Init+0xe8>)
 80013c0:	f000 f8d4 	bl	800156c <HAL_TIM_MspPostInit>

}
 80013c4:	bf00      	nop
 80013c6:	3738      	adds	r7, #56	; 0x38
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000828 	.word	0x20000828
 80013d0:	40000800 	.word	0x40000800

080013d4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <MX_TIM6_Init+0x64>)
 80013e6:	4a15      	ldr	r2, [pc, #84]	; (800143c <MX_TIM6_Init+0x68>)
 80013e8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <MX_TIM6_Init+0x64>)
 80013ec:	f242 527f 	movw	r2, #9599	; 0x257f
 80013f0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <MX_TIM6_Init+0x64>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 199;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <MX_TIM6_Init+0x64>)
 80013fa:	22c7      	movs	r2, #199	; 0xc7
 80013fc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MX_TIM6_Init+0x64>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001404:	480c      	ldr	r0, [pc, #48]	; (8001438 <MX_TIM6_Init+0x64>)
 8001406:	f003 fe6f 	bl	80050e8 <HAL_TIM_Base_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001410:	f7ff fda6 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	; (8001438 <MX_TIM6_Init+0x64>)
 8001422:	f005 f809 	bl	8006438 <HAL_TIMEx_MasterConfigSynchronization>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800142c:	f7ff fd98 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000874 	.word	0x20000874
 800143c:	40001000 	.word	0x40001000

08001440 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001444:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_TIM14_Init+0x40>)
 8001446:	4a0f      	ldr	r2, [pc, #60]	; (8001484 <MX_TIM14_Init+0x44>)
 8001448:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 95;
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <MX_TIM14_Init+0x40>)
 800144c:	225f      	movs	r2, #95	; 0x5f
 800144e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <MX_TIM14_Init+0x40>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65000;
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <MX_TIM14_Init+0x40>)
 8001458:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800145c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <MX_TIM14_Init+0x40>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_TIM14_Init+0x40>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_TIM14_Init+0x40>)
 800146c:	f003 fe3c 	bl	80050e8 <HAL_TIM_Base_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001476:	f7ff fd73 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200008c0 	.word	0x200008c0
 8001484:	40002000 	.word	0x40002000

08001488 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a30      	ldr	r2, [pc, #192]	; (8001558 <HAL_TIM_Base_MspInit+0xd0>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d114      	bne.n	80014c4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800149a:	4b30      	ldr	r3, [pc, #192]	; (800155c <HAL_TIM_Base_MspInit+0xd4>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	4a2f      	ldr	r2, [pc, #188]	; (800155c <HAL_TIM_Base_MspInit+0xd4>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	6413      	str	r3, [r2, #64]	; 0x40
 80014a6:	4b2d      	ldr	r3, [pc, #180]	; (800155c <HAL_TIM_Base_MspInit+0xd4>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	201d      	movs	r0, #29
 80014b8:	f001 fb1b 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014bc:	201d      	movs	r0, #29
 80014be:	f001 fb34 	bl	8002b2a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80014c2:	e044      	b.n	800154e <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a25      	ldr	r2, [pc, #148]	; (8001560 <HAL_TIM_Base_MspInit+0xd8>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d114      	bne.n	80014f8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014ce:	4b23      	ldr	r3, [pc, #140]	; (800155c <HAL_TIM_Base_MspInit+0xd4>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a22      	ldr	r2, [pc, #136]	; (800155c <HAL_TIM_Base_MspInit+0xd4>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <HAL_TIM_Base_MspInit+0xd4>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	201e      	movs	r0, #30
 80014ec:	f001 fb01 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014f0:	201e      	movs	r0, #30
 80014f2:	f001 fb1a 	bl	8002b2a <HAL_NVIC_EnableIRQ>
}
 80014f6:	e02a      	b.n	800154e <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a19      	ldr	r2, [pc, #100]	; (8001564 <HAL_TIM_Base_MspInit+0xdc>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d114      	bne.n	800152c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001502:	4b16      	ldr	r3, [pc, #88]	; (800155c <HAL_TIM_Base_MspInit+0xd4>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	4a15      	ldr	r2, [pc, #84]	; (800155c <HAL_TIM_Base_MspInit+0xd4>)
 8001508:	f043 0310 	orr.w	r3, r3, #16
 800150c:	6413      	str	r3, [r2, #64]	; 0x40
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <HAL_TIM_Base_MspInit+0xd4>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2100      	movs	r1, #0
 800151e:	2036      	movs	r0, #54	; 0x36
 8001520:	f001 fae7 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001524:	2036      	movs	r0, #54	; 0x36
 8001526:	f001 fb00 	bl	8002b2a <HAL_NVIC_EnableIRQ>
}
 800152a:	e010      	b.n	800154e <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM14)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <HAL_TIM_Base_MspInit+0xe0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d10b      	bne.n	800154e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_TIM_Base_MspInit+0xd4>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	4a08      	ldr	r2, [pc, #32]	; (800155c <HAL_TIM_Base_MspInit+0xd4>)
 800153c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001540:	6413      	str	r3, [r2, #64]	; 0x40
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_TIM_Base_MspInit+0xd4>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40000400 	.word	0x40000400
 800155c:	40023800 	.word	0x40023800
 8001560:	40000800 	.word	0x40000800
 8001564:	40001000 	.word	0x40001000
 8001568:	40002000 	.word	0x40002000

0800156c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a11      	ldr	r2, [pc, #68]	; (80015d0 <HAL_TIM_MspPostInit+0x64>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d11c      	bne.n	80015c8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <HAL_TIM_MspPostInit+0x68>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a10      	ldr	r2, [pc, #64]	; (80015d4 <HAL_TIM_MspPostInit+0x68>)
 8001594:	f043 0308 	orr.w	r3, r3, #8
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <HAL_TIM_MspPostInit+0x68>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015b8:	2302      	movs	r3, #2
 80015ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	4619      	mov	r1, r3
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <HAL_TIM_MspPostInit+0x6c>)
 80015c4:	f001 fb5e 	bl	8002c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80015c8:	bf00      	nop
 80015ca:	3720      	adds	r7, #32
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40000800 	.word	0x40000800
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020c00 	.word	0x40020c00

080015dc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <MX_USART3_UART_Init+0x54>)
 80015e2:	4a14      	ldr	r2, [pc, #80]	; (8001634 <MX_USART3_UART_Init+0x58>)
 80015e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 112500;
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <MX_USART3_UART_Init+0x54>)
 80015e8:	4a13      	ldr	r2, [pc, #76]	; (8001638 <MX_USART3_UART_Init+0x5c>)
 80015ea:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015ec:	4b10      	ldr	r3, [pc, #64]	; (8001630 <MX_USART3_UART_Init+0x54>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015f2:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <MX_USART3_UART_Init+0x54>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015f8:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <MX_USART3_UART_Init+0x54>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_USART3_UART_Init+0x54>)
 8001600:	220c      	movs	r2, #12
 8001602:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001604:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <MX_USART3_UART_Init+0x54>)
 8001606:	2200      	movs	r2, #0
 8001608:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_USART3_UART_Init+0x54>)
 800160c:	2200      	movs	r2, #0
 800160e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <MX_USART3_UART_Init+0x54>)
 8001612:	2200      	movs	r2, #0
 8001614:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <MX_USART3_UART_Init+0x54>)
 8001618:	2200      	movs	r2, #0
 800161a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800161c:	4804      	ldr	r0, [pc, #16]	; (8001630 <MX_USART3_UART_Init+0x54>)
 800161e:	f004 ffb7 	bl	8006590 <HAL_UART_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 8001628:	f7ff fc9a 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	2000090c 	.word	0x2000090c
 8001634:	40004800 	.word	0x40004800
 8001638:	0001b774 	.word	0x0001b774

0800163c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b0ae      	sub	sp, #184	; 0xb8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2290      	movs	r2, #144	; 0x90
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f006 fee5 	bl	800842c <memset>
  if(uartHandle->Instance==USART3)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a26      	ldr	r2, [pc, #152]	; (8001700 <HAL_UART_MspInit+0xc4>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d144      	bne.n	80016f6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800166c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001670:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001672:	2300      	movs	r3, #0
 8001674:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4618      	mov	r0, r3
 800167c:	f003 f90c 	bl	8004898 <HAL_RCCEx_PeriphCLKConfig>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001686:	f7ff fc6b 	bl	8000f60 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800168a:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <HAL_UART_MspInit+0xc8>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	4a1d      	ldr	r2, [pc, #116]	; (8001704 <HAL_UART_MspInit+0xc8>)
 8001690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001694:	6413      	str	r3, [r2, #64]	; 0x40
 8001696:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <HAL_UART_MspInit+0xc8>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a2:	4b18      	ldr	r3, [pc, #96]	; (8001704 <HAL_UART_MspInit+0xc8>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a17      	ldr	r2, [pc, #92]	; (8001704 <HAL_UART_MspInit+0xc8>)
 80016a8:	f043 0308 	orr.w	r3, r3, #8
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_UART_MspInit+0xc8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016d4:	2307      	movs	r3, #7
 80016d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016da:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016de:	4619      	mov	r1, r3
 80016e0:	4809      	ldr	r0, [pc, #36]	; (8001708 <HAL_UART_MspInit+0xcc>)
 80016e2:	f001 facf 	bl	8002c84 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2100      	movs	r1, #0
 80016ea:	2027      	movs	r0, #39	; 0x27
 80016ec:	f001 fa01 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016f0:	2027      	movs	r0, #39	; 0x27
 80016f2:	f001 fa1a 	bl	8002b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80016f6:	bf00      	nop
 80016f8:	37b8      	adds	r7, #184	; 0xb8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40004800 	.word	0x40004800
 8001704:	40023800 	.word	0x40023800
 8001708:	40020c00 	.word	0x40020c00

0800170c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001710:	4b14      	ldr	r3, [pc, #80]	; (8001764 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001712:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001716:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800171a:	2206      	movs	r2, #6
 800171c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001720:	2202      	movs	r2, #2
 8001722:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800172c:	2202      	movs	r2, #2
 800172e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001732:	2201      	movs	r2, #1
 8001734:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001738:	2200      	movs	r2, #0
 800173a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800173e:	2200      	movs	r2, #0
 8001740:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001742:	4b08      	ldr	r3, [pc, #32]	; (8001764 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001744:	2201      	movs	r2, #1
 8001746:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800174a:	2200      	movs	r2, #0
 800174c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800174e:	4805      	ldr	r0, [pc, #20]	; (8001764 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001750:	f002 fa25 	bl	8003b9e <HAL_PCD_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800175a:	f7ff fc01 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000994 	.word	0x20000994

08001768 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b0ae      	sub	sp, #184	; 0xb8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2290      	movs	r2, #144	; 0x90
 8001786:	2100      	movs	r1, #0
 8001788:	4618      	mov	r0, r3
 800178a:	f006 fe4f 	bl	800842c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001796:	d159      	bne.n	800184c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001798:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800179c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800179e:	2300      	movs	r3, #0
 80017a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	4618      	mov	r0, r3
 80017aa:	f003 f875 	bl	8004898 <HAL_RCCEx_PeriphCLKConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80017b4:	f7ff fbd4 	bl	8000f60 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b8:	4b26      	ldr	r3, [pc, #152]	; (8001854 <HAL_PCD_MspInit+0xec>)
 80017ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017bc:	4a25      	ldr	r2, [pc, #148]	; (8001854 <HAL_PCD_MspInit+0xec>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6313      	str	r3, [r2, #48]	; 0x30
 80017c4:	4b23      	ldr	r3, [pc, #140]	; (8001854 <HAL_PCD_MspInit+0xec>)
 80017c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017d0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80017d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e4:	2303      	movs	r3, #3
 80017e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017ea:	230a      	movs	r3, #10
 80017ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017f4:	4619      	mov	r1, r3
 80017f6:	4818      	ldr	r0, [pc, #96]	; (8001858 <HAL_PCD_MspInit+0xf0>)
 80017f8:	f001 fa44 	bl	8002c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80017fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001800:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001804:	2300      	movs	r3, #0
 8001806:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001814:	4619      	mov	r1, r3
 8001816:	4810      	ldr	r0, [pc, #64]	; (8001858 <HAL_PCD_MspInit+0xf0>)
 8001818:	f001 fa34 	bl	8002c84 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800181c:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <HAL_PCD_MspInit+0xec>)
 800181e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001820:	4a0c      	ldr	r2, [pc, #48]	; (8001854 <HAL_PCD_MspInit+0xec>)
 8001822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001826:	6353      	str	r3, [r2, #52]	; 0x34
 8001828:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <HAL_PCD_MspInit+0xec>)
 800182a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800182c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4b07      	ldr	r3, [pc, #28]	; (8001854 <HAL_PCD_MspInit+0xec>)
 8001836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001838:	4a06      	ldr	r2, [pc, #24]	; (8001854 <HAL_PCD_MspInit+0xec>)
 800183a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800183e:	6453      	str	r3, [r2, #68]	; 0x44
 8001840:	4b04      	ldr	r3, [pc, #16]	; (8001854 <HAL_PCD_MspInit+0xec>)
 8001842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800184c:	bf00      	nop
 800184e:	37b8      	adds	r7, #184	; 0xb8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40023800 	.word	0x40023800
 8001858:	40020000 	.word	0x40020000

0800185c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800185c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001894 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001860:	480d      	ldr	r0, [pc, #52]	; (8001898 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001862:	490e      	ldr	r1, [pc, #56]	; (800189c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001864:	4a0e      	ldr	r2, [pc, #56]	; (80018a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001868:	e002      	b.n	8001870 <LoopCopyDataInit>

0800186a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800186c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186e:	3304      	adds	r3, #4

08001870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001874:	d3f9      	bcc.n	800186a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001876:	4a0b      	ldr	r2, [pc, #44]	; (80018a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001878:	4c0b      	ldr	r4, [pc, #44]	; (80018a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800187c:	e001      	b.n	8001882 <LoopFillZerobss>

0800187e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001880:	3204      	adds	r2, #4

08001882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001884:	d3fb      	bcc.n	800187e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001886:	f7ff fccb 	bl	8001220 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800188a:	f006 fdab 	bl	80083e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800188e:	f7ff fa77 	bl	8000d80 <main>
  bx  lr    
 8001892:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001894:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800189c:	20000698 	.word	0x20000698
  ldr r2, =_sidata
 80018a0:	0800b7dc 	.word	0x0800b7dc
  ldr r2, =_sbss
 80018a4:	20000698 	.word	0x20000698
  ldr r4, =_ebss
 80018a8:	20000eb4 	.word	0x20000eb4

080018ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018ac:	e7fe      	b.n	80018ac <ADC_IRQHandler>

080018ae <BH1750_Init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hbh1750 BH1750 digital light sensor handler
 * @return None
 */
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b086      	sub	sp, #24
 80018b2:	af02      	add	r7, sp, #8
 80018b4:	6078      	str	r0, [r7, #4]
  uint8_t command;
  command = BH1750_POWER_ON;
 80018b6:	2301      	movs	r3, #1
 80018b8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6818      	ldr	r0, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	791b      	ldrb	r3, [r3, #4]
 80018c2:	b299      	uxth	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f107 020f 	add.w	r2, r7, #15
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	2301      	movs	r3, #1
 80018d0:	f001 fc78 	bl	80031c4 <HAL_I2C_Master_Transmit>
  command = BH1750_CONTINOUS_L_RES_MODE;
 80018d4:	2313      	movs	r3, #19
 80018d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6818      	ldr	r0, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	791b      	ldrb	r3, [r3, #4]
 80018e0:	b299      	uxth	r1, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f107 020f 	add.w	r2, r7, #15
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2301      	movs	r3, #1
 80018ee:	f001 fc69 	bl	80031c4 <HAL_I2C_Master_Transmit>
}
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	0000      	movs	r0, r0
 80018fc:	0000      	movs	r0, r0
	...

08001900 <BH1750_ReadLux>:
 * @note Uses blocking mode I2C receiving routine.
 * @param[in] hbh1750 BH1750 digital light sensor handler
 * @return Measurement result in lux [lx]
 */
float BH1750_ReadLux(BH1750_HandleTypeDef* hbh1750)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af02      	add	r7, sp, #8
 8001906:	6078      	str	r0, [r7, #4]
  float measure;
  uint8_t rxarray[BH1750_DATA_SIZE];
  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6818      	ldr	r0, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	791b      	ldrb	r3, [r3, #4]
 8001910:	b299      	uxth	r1, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f107 0208 	add.w	r2, r7, #8
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2302      	movs	r3, #2
 800191e:	f001 fd45 	bl	80033ac <HAL_I2C_Master_Receive>
  measure = ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2;
 8001922:	7a3b      	ldrb	r3, [r7, #8]
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	7a7a      	ldrb	r2, [r7, #9]
 8001928:	4313      	orrs	r3, r2
 800192a:	ee07 3a90 	vmov	s15, r3
 800192e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001932:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8001958 <BH1750_ReadLux+0x58>
 8001936:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800193a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800193e:	edc7 7a03 	vstr	s15, [r7, #12]
  hbh1750->Readout = measure;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	60da      	str	r2, [r3, #12]
  return  measure;// @see BH1750 technical note p. 10;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	ee07 3a90 	vmov	s15, r3
}
 800194e:	eeb0 0a67 	vmov.f32	s0, s15
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	33333333 	.word	0x33333333
 800195c:	3ff33333 	.word	0x3ff33333

08001960 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	HAL_Delay(16);
 8001968:	2010      	movs	r0, #16
 800196a:	f000 ffc3 	bl	80028f4 <HAL_Delay>

	if(lcd->mode == LCD_4_BIT_MODE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	7d9b      	ldrb	r3, [r3, #22]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d115      	bne.n	80019a2 <Lcd_init+0x42>
	{
			lcd_write_command(lcd, 0x33);
 8001976:	2133      	movs	r1, #51	; 0x33
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 f88a 	bl	8001a92 <lcd_write_command>
			HAL_Delay(5);
 800197e:	2005      	movs	r0, #5
 8001980:	f000 ffb8 	bl	80028f4 <HAL_Delay>
			lcd_write_command(lcd, 0x32);
 8001984:	2132      	movs	r1, #50	; 0x32
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f883 	bl	8001a92 <lcd_write_command>
			HAL_Delay(1);
 800198c:	2001      	movs	r0, #1
 800198e:	f000 ffb1 	bl	80028f4 <HAL_Delay>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8001992:	2128      	movs	r1, #40	; 0x28
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 f87c 	bl	8001a92 <lcd_write_command>
			HAL_Delay(1);
 800199a:	2001      	movs	r0, #1
 800199c:	f000 ffaa 	bl	80028f4 <HAL_Delay>
 80019a0:	e003      	b.n	80019aa <Lcd_init+0x4a>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80019a2:	2138      	movs	r1, #56	; 0x38
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f874 	bl	8001a92 <lcd_write_command>

	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80019aa:	2101      	movs	r1, #1
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 f870 	bl	8001a92 <lcd_write_command>
	HAL_Delay(2);
 80019b2:	2002      	movs	r0, #2
 80019b4:	f000 ff9e 	bl	80028f4 <HAL_Delay>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80019b8:	210c      	movs	r1, #12
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f869 	bl	8001a92 <lcd_write_command>
	HAL_Delay(2);
 80019c0:	2002      	movs	r0, #2
 80019c2:	f000 ff97 	bl	80028f4 <HAL_Delay>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80019c6:	2106      	movs	r1, #6
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f862 	bl	8001a92 <lcd_write_command>
	HAL_Delay(2);
 80019ce:	2002      	movs	r0, #2
 80019d0:	f000 ff90 	bl	80028f4 <HAL_Delay>
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	73fb      	strb	r3, [r7, #15]
 80019ea:	e00a      	b.n	8001a02 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	4413      	add	r3, r2
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	4619      	mov	r1, r3
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f879 	bl	8001aee <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	3301      	adds	r3, #1
 8001a00:	73fb      	strb	r3, [r7, #15]
 8001a02:	7bfc      	ldrb	r4, [r7, #15]
 8001a04:	6838      	ldr	r0, [r7, #0]
 8001a06:	f7fe fc1b 	bl	8000240 <strlen>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	429c      	cmp	r4, r3
 8001a0e:	d3ed      	bcc.n	80019ec <Lcd_string+0x10>
	}
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd90      	pop	{r4, r7, pc}
	...

08001a1c <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	70fb      	strb	r3, [r7, #3]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	4a07      	ldr	r2, [pc, #28]	; (8001a4c <Lcd_cursor+0x30>)
 8001a30:	5cd2      	ldrb	r2, [r2, r3]
 8001a32:	78bb      	ldrb	r3, [r7, #2]
 8001a34:	4413      	add	r3, r2
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	3b80      	subs	r3, #128	; 0x80
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f827 	bl	8001a92 <lcd_write_command>
	#endif
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	0800b3d0 	.word	0x0800b3d0

08001a50 <DELAY_func>:


/************************************** Static function definition **************************************/

void DELAY_func(Lcd_HandleTypeDef* lcd, uint16_t delay_us)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COUNTER(lcd->timer, 0);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2200      	movs	r2, #0
 8001a64:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(lcd->timer);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f003 fb94 	bl	8005198 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(lcd->timer) < delay_us);
 8001a70:	bf00      	nop
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a7a:	887b      	ldrh	r3, [r7, #2]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d3f8      	bcc.n	8001a72 <DELAY_func+0x22>
  HAL_TIM_Base_Stop(lcd->timer);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f003 fbf7 	bl	8005278 <HAL_TIM_Base_Stop>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6898      	ldr	r0, [r3, #8]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	899b      	ldrh	r3, [r3, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f001 faaf 	bl	800300c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	7d9b      	ldrb	r3, [r3, #22]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d111      	bne.n	8001ada <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8001ab6:	78fb      	ldrb	r3, [r7, #3]
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2204      	movs	r2, #4
 8001abe:	4619      	mov	r1, r3
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f842 	bl	8001b4a <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8001ac6:	78fb      	ldrb	r3, [r7, #3]
 8001ac8:	f003 030f 	and.w	r3, r3, #15
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2204      	movs	r2, #4
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f839 	bl	8001b4a <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8001ad8:	e005      	b.n	8001ae6 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8001ada:	78fb      	ldrb	r3, [r7, #3]
 8001adc:	2208      	movs	r2, #8
 8001ade:	4619      	mov	r1, r3
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f832 	bl	8001b4a <lcd_write>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	460b      	mov	r3, r1
 8001af8:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6898      	ldr	r0, [r3, #8]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	899b      	ldrh	r3, [r3, #12]
 8001b02:	2201      	movs	r2, #1
 8001b04:	4619      	mov	r1, r3
 8001b06:	f001 fa81 	bl	800300c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	7d9b      	ldrb	r3, [r3, #22]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d111      	bne.n	8001b36 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8001b12:	78fb      	ldrb	r3, [r7, #3]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2204      	movs	r2, #4
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f814 	bl	8001b4a <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	f003 030f 	and.w	r3, r3, #15
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f80b 	bl	8001b4a <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8001b34:	e005      	b.n	8001b42 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001b36:	78fb      	ldrb	r3, [r7, #3]
 8001b38:	2208      	movs	r2, #8
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f804 	bl	8001b4a <lcd_write>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b084      	sub	sp, #16
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	460b      	mov	r3, r1
 8001b54:	70fb      	strb	r3, [r7, #3]
 8001b56:	4613      	mov	r3, r2
 8001b58:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6918      	ldr	r0, [r3, #16]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	8a9b      	ldrh	r3, [r3, #20]
 8001b62:	2201      	movs	r2, #1
 8001b64:	4619      	mov	r1, r3
 8001b66:	f001 fa51 	bl	800300c <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]
 8001b6e:	e019      	b.n	8001ba4 <lcd_write+0x5a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	6818      	ldr	r0, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	8819      	ldrh	r1, [r3, #0]
 8001b88:	78fa      	ldrb	r2, [r7, #3]
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	fa42 f303 	asr.w	r3, r2, r3
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f001 fa37 	bl	800300c <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	73fb      	strb	r3, [r7, #15]
 8001ba4:	7bfa      	ldrb	r2, [r7, #15]
 8001ba6:	78bb      	ldrb	r3, [r7, #2]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d3e1      	bcc.n	8001b70 <lcd_write+0x26>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6918      	ldr	r0, [r3, #16]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	8a9b      	ldrh	r3, [r3, #20]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f001 fa28 	bl	800300c <HAL_GPIO_WritePin>
	DELAY(lcd, 0.08);// Data receive on falling edge
 8001bbc:	214f      	movs	r1, #79	; 0x4f
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ff46 	bl	8001a50 <DELAY_func>
}
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <MENU_ITEM_WriteDisplayBuffer>:
/**
 * @brief Write menu item display buffer content
 * @param[in/out] hmenuitem : Menu item handler
 */
void MENU_ITEM_WriteDisplayBuffer(MenuItem_TypeDef* hmenuitem, const char* str)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af02      	add	r7, sp, #8
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  int pad_len = LCD_LINE_LEN - hmenuitem->DisplayStrLen;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	8a5b      	ldrh	r3, [r3, #18]
 8001bda:	f1c3 0310 	rsb	r3, r3, #16
 8001bde:	60fb      	str	r3, [r7, #12]
  sprintf(hmenuitem->DisplayStr, "%s%.*s", str, pad_len, __menu__padding);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <MENU_ITEM_WriteDisplayBuffer+0x2c>)
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	4904      	ldr	r1, [pc, #16]	; (8001bfc <MENU_ITEM_WriteDisplayBuffer+0x30>)
 8001bec:	f007 f89e 	bl	8008d2c <siprintf>
}
 8001bf0:	bf00      	nop
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	0800b3d4 	.word	0x0800b3d4
 8001bfc:	0800b314 	.word	0x0800b314

08001c00 <__menu_DO_folder_routine>:

unsigned int ADC1_ConvResults_mV[16];
_Bool last = 0;

/* Private variables ---------------------------------------------------------*/
MENU_ITEM_CONTRUCTOR(menu_DO_folder, {menu_folder_routine(hmenuitem, "Dgtl Outputs");} );
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	4903      	ldr	r1, [pc, #12]	; (8001c18 <__menu_DO_folder_routine+0x18>)
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f920 	bl	8001e50 <menu_folder_routine>
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	0800b31c 	.word	0x0800b31c

08001c1c <__menu_DI_folder_routine>:
MENU_ITEM_CONTRUCTOR(menu_DI_folder, {menu_folder_routine(hmenuitem, "Dgtl Inputs");} );
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	4903      	ldr	r1, [pc, #12]	; (8001c34 <__menu_DI_folder_routine+0x18>)
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f912 	bl	8001e50 <menu_folder_routine>
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	0800b32c 	.word	0x0800b32c

08001c38 <__menu_ld1_routine>:
MENU_ITEM_CONTRUCTOR(menu_AO_folder, {menu_folder_routine(hmenuitem, "Anlg Outputs");} );
MENU_ITEM_CONTRUCTOR(menu_AI_folder, {menu_folder_routine(hmenuitem, "Anlg Inputs");} );

MENU_ITEM_CONTRUCTOR(menu_ld1, {menu_dout_routine(hmenuitem, LD1_GPIO_Port, LD1_Pin, "LD1");} );
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <__menu_ld1_routine+0x1c>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	4904      	ldr	r1, [pc, #16]	; (8001c58 <__menu_ld1_routine+0x20>)
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f898 	bl	8001d7c <menu_dout_routine>
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	0800b354 	.word	0x0800b354
 8001c58:	40020400 	.word	0x40020400

08001c5c <__menu_ld2_routine>:
MENU_ITEM_CONTRUCTOR(menu_ld2, {menu_dout_routine(hmenuitem, LD2_GPIO_Port, LD2_Pin, "LD2");} );
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <__menu_ld2_routine+0x1c>)
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	4904      	ldr	r1, [pc, #16]	; (8001c7c <__menu_ld2_routine+0x20>)
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f886 	bl	8001d7c <menu_dout_routine>
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	0800b358 	.word	0x0800b358
 8001c7c:	40020400 	.word	0x40020400

08001c80 <__menu_ld3_routine>:
MENU_ITEM_CONTRUCTOR(menu_ld3, {menu_dout_routine(hmenuitem, LD3_GPIO_Port, LD3_Pin, "LD3");} );
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <__menu_ld3_routine+0x20>)
 8001c8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c8e:	4905      	ldr	r1, [pc, #20]	; (8001ca4 <__menu_ld3_routine+0x24>)
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f873 	bl	8001d7c <menu_dout_routine>
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	0800b35c 	.word	0x0800b35c
 8001ca4:	40020400 	.word	0x40020400

08001ca8 <__menu_pwm_width_routine>:
MENU_ITEM_CONTRUCTOR(menu_pwm_width, {menu_float_io_routine(hmenuitem, *Light_PID.MyOutput/10, 3, "PWM WDTH", "%");} );
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <__menu_pwm_width_routine+0x34>)
 8001cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb4:	ed93 6b00 	vldr	d6, [r3]
 8001cb8:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8001cbc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001cc0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <__menu_pwm_width_routine+0x38>)
 8001cc6:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <__menu_pwm_width_routine+0x3c>)
 8001cc8:	2103      	movs	r1, #3
 8001cca:	eeb0 0a67 	vmov.f32	s0, s15
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f8de 	bl	8001e90 <menu_float_io_routine>
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000450 	.word	0x20000450
 8001ce0:	0800b360 	.word	0x0800b360
 8001ce4:	0800b364 	.word	0x0800b364

08001ce8 <__menu_light_ref_routine>:
MENU_ITEM_CONTRUCTOR(menu_light_ref, {menu_float_io_ref_light_routine(hmenuitem, *Light_PID.MySetpoint, 4, "LGT STPNT", "lx");} );
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <__menu_light_ref_routine+0x2c>)
 8001cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cf4:	ed93 7b00 	vldr	d7, [r3]
 8001cf8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <__menu_light_ref_routine+0x30>)
 8001cfe:	4a07      	ldr	r2, [pc, #28]	; (8001d1c <__menu_light_ref_routine+0x34>)
 8001d00:	2104      	movs	r1, #4
 8001d02:	eeb0 0a67 	vmov.f32	s0, s15
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f8f2 	bl	8001ef0 <menu_float_io_ref_light_routine>
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000450 	.word	0x20000450
 8001d18:	0800b370 	.word	0x0800b370
 8001d1c:	0800b374 	.word	0x0800b374

08001d20 <__menu_bh1750_routine>:

MENU_ITEM_CONTRUCTOR(menu_bh1750, {menu_float_io_routine(hmenuitem, hbh1750_1.Readout, 6, "LIGHT", "lx");} );
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <__menu_bh1750_routine+0x28>)
 8001d2a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d2e:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <__menu_bh1750_routine+0x2c>)
 8001d30:	4a07      	ldr	r2, [pc, #28]	; (8001d50 <__menu_bh1750_routine+0x30>)
 8001d32:	2106      	movs	r1, #6
 8001d34:	eeb0 0a67 	vmov.f32	s0, s15
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f8a9 	bl	8001e90 <menu_float_io_routine>
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000004 	.word	0x20000004
 8001d4c:	0800b370 	.word	0x0800b370
 8001d50:	0800b380 	.word	0x0800b380

08001d54 <__menu_USR_Btn_routine>:
MENU_ITEM_CONTRUCTOR(menu_USR_Btn, {menu_dout_routine(hmenuitem, USER_Btn_GPIO_Port, USER_Btn_Pin, "USR BTN");} );
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <__menu_USR_Btn_routine+0x20>)
 8001d5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d62:	4905      	ldr	r1, [pc, #20]	; (8001d78 <__menu_USR_Btn_routine+0x24>)
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f809 	bl	8001d7c <menu_dout_routine>
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	0800b388 	.word	0x0800b388
 8001d78:	40020800 	.word	0x40020800

08001d7c <menu_dout_routine>:
 * @param[in/out] hmenuitem : Menu item structure
 * @param[in]     hled      : Digital output handler
 * @param[in]     name      : Output display name
 */
void menu_dout_routine(MenuItem_TypeDef* hmenuitem, GPIO_TypeDef* Port, uint16_t Pin, const char* name)
{
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b08d      	sub	sp, #52	; 0x34
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	80fb      	strh	r3, [r7, #6]

  if(hmenu.Item == hmenuitem)
 8001d8c:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <menu_dout_routine+0xbc>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d12b      	bne.n	8001dee <menu_dout_routine+0x72>
  {
	  if(!last == (_Bool)HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) && last == 0)
 8001d96:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <menu_dout_routine+0xc0>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	f083 0301 	eor.w	r3, r3, #1
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	461c      	mov	r4, r3
 8001da2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001da6:	4826      	ldr	r0, [pc, #152]	; (8001e40 <menu_dout_routine+0xc4>)
 8001da8:	f001 f918 	bl	8002fdc <HAL_GPIO_ReadPin>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	bf14      	ite	ne
 8001db2:	2301      	movne	r3, #1
 8001db4:	2300      	moveq	r3, #0
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	429c      	cmp	r4, r3
 8001dba:	d10b      	bne.n	8001dd4 <menu_dout_routine+0x58>
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	; (8001e3c <menu_dout_routine+0xc0>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	f083 0301 	eor.w	r3, r3, #1
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d004      	beq.n	8001dd4 <menu_dout_routine+0x58>
  	  {
	  	  HAL_GPIO_TogglePin(Port, Pin);
 8001dca:	88fb      	ldrh	r3, [r7, #6]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	68b8      	ldr	r0, [r7, #8]
 8001dd0:	f001 f935 	bl	800303e <HAL_GPIO_TogglePin>
  	  }
  	  last = (_Bool)HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin);
 8001dd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dd8:	4819      	ldr	r0, [pc, #100]	; (8001e40 <menu_dout_routine+0xc4>)
 8001dda:	f001 f8ff 	bl	8002fdc <HAL_GPIO_ReadPin>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	bf14      	ite	ne
 8001de4:	2301      	movne	r3, #1
 8001de6:	2300      	moveq	r3, #0
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <menu_dout_routine+0xc0>)
 8001dec:	701a      	strb	r2, [r3, #0]
  }

  char temp_str[LCD_LINE_BUF_LEN];
  hmenuitem->DisplayStrLen = snprintf(temp_str, LCD_LINE_LEN, "%s: %s", name, (_Bool)HAL_GPIO_ReadPin(Port, Pin) ? "ON" : "OFF");
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	4619      	mov	r1, r3
 8001df2:	68b8      	ldr	r0, [r7, #8]
 8001df4:	f001 f8f2 	bl	8002fdc <HAL_GPIO_ReadPin>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <menu_dout_routine+0x86>
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <menu_dout_routine+0xc8>)
 8001e00:	e000      	b.n	8001e04 <menu_dout_routine+0x88>
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <menu_dout_routine+0xcc>)
 8001e04:	f107 0014 	add.w	r0, r7, #20
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	4a0f      	ldr	r2, [pc, #60]	; (8001e4c <menu_dout_routine+0xd0>)
 8001e0e:	2110      	movs	r1, #16
 8001e10:	f006 ff58 	bl	8008cc4 <sniprintf>
 8001e14:	4603      	mov	r3, r0
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	825a      	strh	r2, [r3, #18]
  MENU_ITEM_WriteDisplayBuffer(hmenuitem, temp_str); // Set display buffer
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	4619      	mov	r1, r3
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f7ff fed2 	bl	8001bcc <MENU_ITEM_WriteDisplayBuffer>
  hmenuitem->SerialPortStrLen = 0;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
}
 8001e30:	bf00      	nop
 8001e32:	372c      	adds	r7, #44	; 0x2c
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd90      	pop	{r4, r7, pc}
 8001e38:	20000048 	.word	0x20000048
 8001e3c:	20000e9c 	.word	0x20000e9c
 8001e40:	40020800 	.word	0x40020800
 8001e44:	0800b390 	.word	0x0800b390
 8001e48:	0800b394 	.word	0x0800b394
 8001e4c:	0800b398 	.word	0x0800b398

08001e50 <menu_folder_routine>:
 * @brief Common menu folders routine.
 * @param[in/out] hmenuitem : Menu item structure
 * @param[in]     name      : Output display name
 */
void menu_folder_routine(MenuItem_TypeDef* hmenuitem, const char* name)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
	char temp_str[LCD_LINE_BUF_LEN];
	hmenuitem->DisplayStrLen = snprintf(temp_str, LCD_LINE_LEN, "%s", name);
 8001e5a:	f107 000c 	add.w	r0, r7, #12
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <menu_folder_routine+0x3c>)
 8001e62:	2110      	movs	r1, #16
 8001e64:	f006 ff2e 	bl	8008cc4 <sniprintf>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	825a      	strh	r2, [r3, #18]
	MENU_ITEM_WriteDisplayBuffer(hmenuitem, temp_str); // Set display buffer
 8001e70:	f107 030c 	add.w	r3, r7, #12
 8001e74:	4619      	mov	r1, r3
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff fea8 	bl	8001bcc <MENU_ITEM_WriteDisplayBuffer>
	hmenuitem->SerialPortStrLen = 0;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
}
 8001e84:	bf00      	nop
 8001e86:	3720      	adds	r7, #32
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	0800b3a0 	.word	0x0800b3a0

08001e90 <menu_float_io_routine>:
//  MENU_ITEM_WriteDisplayBuffer(hmenuitem, temp_str); // Set display buffer
//  hmenuitem->SerialPortStrLen = 0;
//}

void menu_float_io_routine(MenuItem_TypeDef* hmenuitem, float value, unsigned int len, const char* name, const char* unit)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b092      	sub	sp, #72	; 0x48
 8001e94:	af06      	add	r7, sp, #24
 8001e96:	6178      	str	r0, [r7, #20]
 8001e98:	ed87 0a04 	vstr	s0, [r7, #16]
 8001e9c:	60f9      	str	r1, [r7, #12]
 8001e9e:	60ba      	str	r2, [r7, #8]
 8001ea0:	607b      	str	r3, [r7, #4]
  char temp_str[LCD_LINE_BUF_LEN];
  hmenuitem->DisplayStrLen = snprintf(temp_str, LCD_LINE_LEN, "%s: %*.1f%s", name, len, value, unit);
 8001ea2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ea6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001eaa:	f107 001c 	add.w	r0, r7, #28
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	9304      	str	r3, [sp, #16]
 8001eb2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <menu_float_io_routine+0x58>)
 8001ebe:	2110      	movs	r1, #16
 8001ec0:	f006 ff00 	bl	8008cc4 <sniprintf>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	825a      	strh	r2, [r3, #18]
  MENU_ITEM_WriteDisplayBuffer(hmenuitem, temp_str); // Set display buffer
 8001ecc:	f107 031c 	add.w	r3, r7, #28
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	6978      	ldr	r0, [r7, #20]
 8001ed4:	f7ff fe7a 	bl	8001bcc <MENU_ITEM_WriteDisplayBuffer>
  hmenuitem->SerialPortStrLen = 0;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
}
 8001ee0:	bf00      	nop
 8001ee2:	3730      	adds	r7, #48	; 0x30
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	0800b3a4 	.word	0x0800b3a4
 8001eec:	00000000 	.word	0x00000000

08001ef0 <menu_float_io_ref_light_routine>:

void menu_float_io_ref_light_routine(MenuItem_TypeDef* hmenuitem, float value, unsigned int len, const char* name, const char* unit)
{
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b093      	sub	sp, #76	; 0x4c
 8001ef4:	af06      	add	r7, sp, #24
 8001ef6:	6178      	str	r0, [r7, #20]
 8001ef8:	ed87 0a04 	vstr	s0, [r7, #16]
 8001efc:	60f9      	str	r1, [r7, #12]
 8001efe:	60ba      	str	r2, [r7, #8]
 8001f00:	607b      	str	r3, [r7, #4]

  if(hmenu.Item == hmenuitem)
 8001f02:	4b3b      	ldr	r3, [pc, #236]	; (8001ff0 <menu_float_io_ref_light_routine+0x100>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d146      	bne.n	8001f9a <menu_float_io_ref_light_routine+0xaa>
  {
	  if(!last == (_Bool)HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) && last == 0)
 8001f0c:	4b39      	ldr	r3, [pc, #228]	; (8001ff4 <menu_float_io_ref_light_routine+0x104>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	f083 0301 	eor.w	r3, r3, #1
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	461c      	mov	r4, r3
 8001f18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f1c:	4836      	ldr	r0, [pc, #216]	; (8001ff8 <menu_float_io_ref_light_routine+0x108>)
 8001f1e:	f001 f85d 	bl	8002fdc <HAL_GPIO_ReadPin>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	bf14      	ite	ne
 8001f28:	2301      	movne	r3, #1
 8001f2a:	2300      	moveq	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	429c      	cmp	r4, r3
 8001f30:	d126      	bne.n	8001f80 <menu_float_io_ref_light_routine+0x90>
 8001f32:	4b30      	ldr	r3, [pc, #192]	; (8001ff4 <menu_float_io_ref_light_routine+0x104>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	f083 0301 	eor.w	r3, r3, #1
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d01f      	beq.n	8001f80 <menu_float_io_ref_light_routine+0x90>
	  {
		  if(*Light_PID.MySetpoint < 3000)
 8001f40:	4b2e      	ldr	r3, [pc, #184]	; (8001ffc <menu_float_io_ref_light_routine+0x10c>)
 8001f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f44:	ed93 7b00 	vldr	d7, [r3]
 8001f48:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8001fe0 <menu_float_io_ref_light_routine+0xf0>
 8001f4c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f54:	d50c      	bpl.n	8001f70 <menu_float_io_ref_light_routine+0x80>
		  {
			  *Light_PID.MySetpoint += 100.0;
 8001f56:	4b29      	ldr	r3, [pc, #164]	; (8001ffc <menu_float_io_ref_light_routine+0x10c>)
 8001f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f5a:	ed93 7b00 	vldr	d7, [r3]
 8001f5e:	4b27      	ldr	r3, [pc, #156]	; (8001ffc <menu_float_io_ref_light_routine+0x10c>)
 8001f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f62:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001fe8 <menu_float_io_ref_light_routine+0xf8>
 8001f66:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f6a:	ed83 7b00 	vstr	d7, [r3]
 8001f6e:	e007      	b.n	8001f80 <menu_float_io_ref_light_routine+0x90>
		  }
		  else
		  {
			  *Light_PID.MySetpoint = 0.0;
 8001f70:	4b22      	ldr	r3, [pc, #136]	; (8001ffc <menu_float_io_ref_light_routine+0x10c>)
 8001f72:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	e9c1 2300 	strd	r2, r3, [r1]
		  }
	  }
	  last = (_Bool)HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin);
 8001f80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f84:	481c      	ldr	r0, [pc, #112]	; (8001ff8 <menu_float_io_ref_light_routine+0x108>)
 8001f86:	f001 f829 	bl	8002fdc <HAL_GPIO_ReadPin>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bf14      	ite	ne
 8001f90:	2301      	movne	r3, #1
 8001f92:	2300      	moveq	r3, #0
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <menu_float_io_ref_light_routine+0x104>)
 8001f98:	701a      	strb	r2, [r3, #0]
  }
  char temp_str[LCD_LINE_BUF_LEN];
  hmenuitem->DisplayStrLen = snprintf(temp_str, LCD_LINE_LEN, "%s: %*.1f%s", name, len, value, unit);
 8001f9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fa2:	f107 001c 	add.w	r0, r7, #28
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	9304      	str	r3, [sp, #16]
 8001faa:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	4a12      	ldr	r2, [pc, #72]	; (8002000 <menu_float_io_ref_light_routine+0x110>)
 8001fb6:	2110      	movs	r1, #16
 8001fb8:	f006 fe84 	bl	8008cc4 <sniprintf>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	825a      	strh	r2, [r3, #18]
  MENU_ITEM_WriteDisplayBuffer(hmenuitem, temp_str); // Set display buffer
 8001fc4:	f107 031c 	add.w	r3, r7, #28
 8001fc8:	4619      	mov	r1, r3
 8001fca:	6978      	ldr	r0, [r7, #20]
 8001fcc:	f7ff fdfe 	bl	8001bcc <MENU_ITEM_WriteDisplayBuffer>
  hmenuitem->SerialPortStrLen = 0;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
}
 8001fd8:	bf00      	nop
 8001fda:	3734      	adds	r7, #52	; 0x34
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd90      	pop	{r4, r7, pc}
 8001fe0:	00000000 	.word	0x00000000
 8001fe4:	40a77000 	.word	0x40a77000
 8001fe8:	00000000 	.word	0x00000000
 8001fec:	40590000 	.word	0x40590000
 8001ff0:	20000048 	.word	0x20000048
 8001ff4:	20000e9c 	.word	0x20000e9c
 8001ff8:	40020800 	.word	0x40020800
 8001ffc:	20000450 	.word	0x20000450
 8002000:	0800b3a4 	.word	0x0800b3a4

08002004 <MENU_Init>:
/**
 * @brief Menu initialization. Creates doubly-linked list from elements of MENU_MAIN_ARRAY.
 * @param[in/out] hmenu : Menu structure
 */
void MENU_Init(Menu_TypeDef* hmenu)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Active element initialization */
  hmenu->Item = MENU_MAIN_ARRAY[0];
 800200c:	4b6b      	ldr	r3, [pc, #428]	; (80021bc <MENU_Init+0x1b8>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	601a      	str	r2, [r3, #0]

  /* Folders loop*/
  for(uint8_t i = 0; i < (uint8_t)(MENU_FOLDERS_NBR-1); i++) //< Next item
 8002014:	2300      	movs	r3, #0
 8002016:	73fb      	strb	r3, [r7, #15]
 8002018:	e00c      	b.n	8002034 <MENU_Init+0x30>
      {
  	  MENU_MAIN_ARRAY[i]->Next = MENU_MAIN_ARRAY[i+1];
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	4966      	ldr	r1, [pc, #408]	; (80021bc <MENU_Init+0x1b8>)
 8002022:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002026:	4965      	ldr	r1, [pc, #404]	; (80021bc <MENU_Init+0x1b8>)
 8002028:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800202c:	659a      	str	r2, [r3, #88]	; 0x58
  for(uint8_t i = 0; i < (uint8_t)(MENU_FOLDERS_NBR-1); i++) //< Next item
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	3301      	adds	r3, #1
 8002032:	73fb      	strb	r3, [r7, #15]
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0ef      	beq.n	800201a <MENU_Init+0x16>
      }

  for(uint8_t i = 1; i < (uint8_t)MENU_FOLDERS_NBR; i++)     //< Previous item
 800203a:	2301      	movs	r3, #1
 800203c:	73bb      	strb	r3, [r7, #14]
 800203e:	e00c      	b.n	800205a <MENU_Init+0x56>
      {
  	  MENU_MAIN_ARRAY[i]->Prev = MENU_MAIN_ARRAY[i-1];
 8002040:	7bbb      	ldrb	r3, [r7, #14]
 8002042:	1e5a      	subs	r2, r3, #1
 8002044:	7bbb      	ldrb	r3, [r7, #14]
 8002046:	495d      	ldr	r1, [pc, #372]	; (80021bc <MENU_Init+0x1b8>)
 8002048:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800204c:	495b      	ldr	r1, [pc, #364]	; (80021bc <MENU_Init+0x1b8>)
 800204e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002052:	65da      	str	r2, [r3, #92]	; 0x5c
  for(uint8_t i = 1; i < (uint8_t)MENU_FOLDERS_NBR; i++)     //< Previous item
 8002054:	7bbb      	ldrb	r3, [r7, #14]
 8002056:	3301      	adds	r3, #1
 8002058:	73bb      	strb	r3, [r7, #14]
 800205a:	7bbb      	ldrb	r3, [r7, #14]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d9ef      	bls.n	8002040 <MENU_Init+0x3c>
      }
  /* Cyclic list */
  MENU_MAIN_ARRAY[MENU_FOLDERS_NBR-1]->Next = MENU_MAIN_ARRAY[0]; //< Next of last is first item
 8002060:	4b56      	ldr	r3, [pc, #344]	; (80021bc <MENU_Init+0x1b8>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4a55      	ldr	r2, [pc, #340]	; (80021bc <MENU_Init+0x1b8>)
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	659a      	str	r2, [r3, #88]	; 0x58
  MENU_MAIN_ARRAY[0]->Prev = MENU_MAIN_ARRAY[MENU_FOLDERS_NBR-1]; //< Previous of first is last item
 800206a:	4b54      	ldr	r3, [pc, #336]	; (80021bc <MENU_Init+0x1b8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a53      	ldr	r2, [pc, #332]	; (80021bc <MENU_Init+0x1b8>)
 8002070:	6852      	ldr	r2, [r2, #4]
 8002072:	65da      	str	r2, [r3, #92]	; 0x5c

  MENU_MAIN_ARRAY[0]->Child = MENU_MAIN_ARRAY[MENU_1ST_DO];
 8002074:	4b51      	ldr	r3, [pc, #324]	; (80021bc <MENU_Init+0x1b8>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a50      	ldr	r2, [pc, #320]	; (80021bc <MENU_Init+0x1b8>)
 800207a:	6892      	ldr	r2, [r2, #8]
 800207c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Digital outputs loop */
    for(uint8_t i = MENU_1ST_DO; i < (uint8_t)(MENU_1ST_DO + MENU_DO_NBR-1); i++) //< Next item
 800207e:	2302      	movs	r3, #2
 8002080:	737b      	strb	r3, [r7, #13]
 8002082:	e00c      	b.n	800209e <MENU_Init+0x9a>
        {
    	  MENU_MAIN_ARRAY[i]->Next = MENU_MAIN_ARRAY[i+1];
 8002084:	7b7b      	ldrb	r3, [r7, #13]
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	7b7b      	ldrb	r3, [r7, #13]
 800208a:	494c      	ldr	r1, [pc, #304]	; (80021bc <MENU_Init+0x1b8>)
 800208c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002090:	494a      	ldr	r1, [pc, #296]	; (80021bc <MENU_Init+0x1b8>)
 8002092:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002096:	659a      	str	r2, [r3, #88]	; 0x58
    for(uint8_t i = MENU_1ST_DO; i < (uint8_t)(MENU_1ST_DO + MENU_DO_NBR-1); i++) //< Next item
 8002098:	7b7b      	ldrb	r3, [r7, #13]
 800209a:	3301      	adds	r3, #1
 800209c:	737b      	strb	r3, [r7, #13]
 800209e:	7b7b      	ldrb	r3, [r7, #13]
 80020a0:	2b05      	cmp	r3, #5
 80020a2:	d9ef      	bls.n	8002084 <MENU_Init+0x80>
        }

    for(uint8_t i = MENU_1ST_DO + 1; i < (uint8_t)MENU_1ST_DO + MENU_DO_NBR; i++)     //< Previous item
 80020a4:	2303      	movs	r3, #3
 80020a6:	733b      	strb	r3, [r7, #12]
 80020a8:	e013      	b.n	80020d2 <MENU_Init+0xce>
        {
    	  MENU_MAIN_ARRAY[i]->Prev = MENU_MAIN_ARRAY[i-1];
 80020aa:	7b3b      	ldrb	r3, [r7, #12]
 80020ac:	1e5a      	subs	r2, r3, #1
 80020ae:	7b3b      	ldrb	r3, [r7, #12]
 80020b0:	4942      	ldr	r1, [pc, #264]	; (80021bc <MENU_Init+0x1b8>)
 80020b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020b6:	4941      	ldr	r1, [pc, #260]	; (80021bc <MENU_Init+0x1b8>)
 80020b8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80020bc:	65da      	str	r2, [r3, #92]	; 0x5c
    	  MENU_MAIN_ARRAY[i]->Parent = MENU_MAIN_ARRAY[0];
 80020be:	7b3b      	ldrb	r3, [r7, #12]
 80020c0:	4a3e      	ldr	r2, [pc, #248]	; (80021bc <MENU_Init+0x1b8>)
 80020c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c6:	4a3d      	ldr	r2, [pc, #244]	; (80021bc <MENU_Init+0x1b8>)
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	665a      	str	r2, [r3, #100]	; 0x64
    for(uint8_t i = MENU_1ST_DO + 1; i < (uint8_t)MENU_1ST_DO + MENU_DO_NBR; i++)     //< Previous item
 80020cc:	7b3b      	ldrb	r3, [r7, #12]
 80020ce:	3301      	adds	r3, #1
 80020d0:	733b      	strb	r3, [r7, #12]
 80020d2:	7b3b      	ldrb	r3, [r7, #12]
 80020d4:	2b06      	cmp	r3, #6
 80020d6:	d9e8      	bls.n	80020aa <MENU_Init+0xa6>
        }
    MENU_MAIN_ARRAY[MENU_1ST_DO]->Parent = MENU_MAIN_ARRAY[0];
 80020d8:	4b38      	ldr	r3, [pc, #224]	; (80021bc <MENU_Init+0x1b8>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	4a37      	ldr	r2, [pc, #220]	; (80021bc <MENU_Init+0x1b8>)
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	665a      	str	r2, [r3, #100]	; 0x64

    /* Cyclic list */
    MENU_MAIN_ARRAY[MENU_1ST_DO + MENU_DO_NBR-1]->Next = MENU_MAIN_ARRAY[MENU_1ST_DO]; //< Next of last is first item
 80020e2:	4b36      	ldr	r3, [pc, #216]	; (80021bc <MENU_Init+0x1b8>)
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	4a35      	ldr	r2, [pc, #212]	; (80021bc <MENU_Init+0x1b8>)
 80020e8:	6892      	ldr	r2, [r2, #8]
 80020ea:	659a      	str	r2, [r3, #88]	; 0x58
    MENU_MAIN_ARRAY[MENU_1ST_DO]->Prev = MENU_MAIN_ARRAY[MENU_1ST_DO + MENU_DO_NBR-1]; //< Previous of first is last item
 80020ec:	4b33      	ldr	r3, [pc, #204]	; (80021bc <MENU_Init+0x1b8>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	4a32      	ldr	r2, [pc, #200]	; (80021bc <MENU_Init+0x1b8>)
 80020f2:	6992      	ldr	r2, [r2, #24]
 80020f4:	65da      	str	r2, [r3, #92]	; 0x5c


    MENU_MAIN_ARRAY[1]->Child = MENU_MAIN_ARRAY[MENU_1ST_DI];
 80020f6:	4b31      	ldr	r3, [pc, #196]	; (80021bc <MENU_Init+0x1b8>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4a30      	ldr	r2, [pc, #192]	; (80021bc <MENU_Init+0x1b8>)
 80020fc:	69d2      	ldr	r2, [r2, #28]
 80020fe:	661a      	str	r2, [r3, #96]	; 0x60
    /* Digital Input loop */
    for(uint8_t i = MENU_1ST_DI; i < (uint8_t)(MENU_1ST_DI + MENU_DI_NBR-1); i++) //< Next item
 8002100:	2307      	movs	r3, #7
 8002102:	72fb      	strb	r3, [r7, #11]
 8002104:	e00c      	b.n	8002120 <MENU_Init+0x11c>
    {
        MENU_MAIN_ARRAY[i]->Next = MENU_MAIN_ARRAY[i+1];
 8002106:	7afb      	ldrb	r3, [r7, #11]
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	7afb      	ldrb	r3, [r7, #11]
 800210c:	492b      	ldr	r1, [pc, #172]	; (80021bc <MENU_Init+0x1b8>)
 800210e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002112:	492a      	ldr	r1, [pc, #168]	; (80021bc <MENU_Init+0x1b8>)
 8002114:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002118:	659a      	str	r2, [r3, #88]	; 0x58
    for(uint8_t i = MENU_1ST_DI; i < (uint8_t)(MENU_1ST_DI + MENU_DI_NBR-1); i++) //< Next item
 800211a:	7afb      	ldrb	r3, [r7, #11]
 800211c:	3301      	adds	r3, #1
 800211e:	72fb      	strb	r3, [r7, #11]
 8002120:	7afb      	ldrb	r3, [r7, #11]
 8002122:	2b07      	cmp	r3, #7
 8002124:	d9ef      	bls.n	8002106 <MENU_Init+0x102>
    }

    for(uint8_t i = MENU_1ST_DI + 1; i < (uint8_t)MENU_1ST_DI + MENU_DI_NBR; i++)     //< Previous item
 8002126:	2308      	movs	r3, #8
 8002128:	72bb      	strb	r3, [r7, #10]
 800212a:	e013      	b.n	8002154 <MENU_Init+0x150>
    {
    	MENU_MAIN_ARRAY[i]->Prev = MENU_MAIN_ARRAY[i-1];
 800212c:	7abb      	ldrb	r3, [r7, #10]
 800212e:	1e5a      	subs	r2, r3, #1
 8002130:	7abb      	ldrb	r3, [r7, #10]
 8002132:	4922      	ldr	r1, [pc, #136]	; (80021bc <MENU_Init+0x1b8>)
 8002134:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002138:	4920      	ldr	r1, [pc, #128]	; (80021bc <MENU_Init+0x1b8>)
 800213a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800213e:	65da      	str	r2, [r3, #92]	; 0x5c
    	MENU_MAIN_ARRAY[i]->Parent = MENU_MAIN_ARRAY[1];
 8002140:	7abb      	ldrb	r3, [r7, #10]
 8002142:	4a1e      	ldr	r2, [pc, #120]	; (80021bc <MENU_Init+0x1b8>)
 8002144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002148:	4a1c      	ldr	r2, [pc, #112]	; (80021bc <MENU_Init+0x1b8>)
 800214a:	6852      	ldr	r2, [r2, #4]
 800214c:	665a      	str	r2, [r3, #100]	; 0x64
    for(uint8_t i = MENU_1ST_DI + 1; i < (uint8_t)MENU_1ST_DI + MENU_DI_NBR; i++)     //< Previous item
 800214e:	7abb      	ldrb	r3, [r7, #10]
 8002150:	3301      	adds	r3, #1
 8002152:	72bb      	strb	r3, [r7, #10]
 8002154:	7abb      	ldrb	r3, [r7, #10]
 8002156:	2b08      	cmp	r3, #8
 8002158:	d9e8      	bls.n	800212c <MENU_Init+0x128>
    }
    MENU_MAIN_ARRAY[MENU_1ST_DI]->Parent = MENU_MAIN_ARRAY[1];
 800215a:	4b18      	ldr	r3, [pc, #96]	; (80021bc <MENU_Init+0x1b8>)
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	4a17      	ldr	r2, [pc, #92]	; (80021bc <MENU_Init+0x1b8>)
 8002160:	6852      	ldr	r2, [r2, #4]
 8002162:	665a      	str	r2, [r3, #100]	; 0x64

    /* Cyclic list */
    MENU_MAIN_ARRAY[MENU_1ST_DI + MENU_DI_NBR-1]->Next = MENU_MAIN_ARRAY[MENU_1ST_DI]; //< Next of last is first item
 8002164:	4b15      	ldr	r3, [pc, #84]	; (80021bc <MENU_Init+0x1b8>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4a14      	ldr	r2, [pc, #80]	; (80021bc <MENU_Init+0x1b8>)
 800216a:	69d2      	ldr	r2, [r2, #28]
 800216c:	659a      	str	r2, [r3, #88]	; 0x58
    MENU_MAIN_ARRAY[MENU_1ST_DI]->Prev = MENU_MAIN_ARRAY[MENU_1ST_DI + MENU_DI_NBR-1]; //< Previous of first is last item
 800216e:	4b13      	ldr	r3, [pc, #76]	; (80021bc <MENU_Init+0x1b8>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	4a12      	ldr	r2, [pc, #72]	; (80021bc <MENU_Init+0x1b8>)
 8002174:	6a12      	ldr	r2, [r2, #32]
 8002176:	65da      	str	r2, [r3, #92]	; 0x5c


  hmenu->Initialized = 1;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	751a      	strb	r2, [r3, #20]

  /* LCD set-up */
  Lcd_cursor(hmenu->Display, 0, 0);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fc48 	bl	8001a1c <Lcd_cursor>
  Lcd_string(hmenu->Display, ">");
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	490b      	ldr	r1, [pc, #44]	; (80021c0 <MENU_Init+0x1bc>)
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fc22 	bl	80019dc <Lcd_string>
  Lcd_cursor(hmenu->Display, 1, 0);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2200      	movs	r2, #0
 800219e:	2101      	movs	r1, #1
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fc3b 	bl	8001a1c <Lcd_cursor>
  Lcd_string(hmenu->Display, " ");
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	4906      	ldr	r1, [pc, #24]	; (80021c4 <MENU_Init+0x1c0>)
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fc15 	bl	80019dc <Lcd_string>
}
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	2000042c 	.word	0x2000042c
 80021c0:	0800b3b0 	.word	0x0800b3b0
 80021c4:	0800b3b4 	.word	0x0800b3b4

080021c8 <MENU_ROUTINE>:
/**
 * @brief Menu routine. Calls active items routines and updates output devices.
 * @param[in/out] hmenu : Menu structure
 */
void MENU_ROUTINE(Menu_TypeDef* hmenu)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]

  if(!hmenu->Initialized)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	7d1b      	ldrb	r3, [r3, #20]
 80021d4:	f083 0301 	eor.w	r3, r3, #1
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d13f      	bne.n	800225e <MENU_ROUTINE+0x96>
  {
	  return;
  }

  MENU_CALL_ROUTINE(hmenu->Item);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	4610      	mov	r0, r2
 80021ea:	4798      	blx	r3
  MENU_CALL_ROUTINE(hmenu->Item->Next);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80021fa:	4610      	mov	r0, r2
 80021fc:	4798      	blx	r3

  hmenu->ItemChanged = 0;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	711a      	strb	r2, [r3, #4]

  // #1 line - active item
  Lcd_cursor(hmenu->Display, 0, 1);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2201      	movs	r2, #1
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fc05 	bl	8001a1c <Lcd_cursor>
  Lcd_string(hmenu->Display, hmenu->Item->DisplayStr);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4619      	mov	r1, r3
 800221c:	4610      	mov	r0, r2
 800221e:	f7ff fbdd 	bl	80019dc <Lcd_string>

  // #1 line - next item
  Lcd_cursor(hmenu->Display, 1, 1);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2201      	movs	r2, #1
 8002228:	2101      	movs	r1, #1
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fbf6 	bl	8001a1c <Lcd_cursor>
  Lcd_string(hmenu->Display, hmenu->Item->Next->DisplayStr);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	4619      	mov	r1, r3
 800223c:	4610      	mov	r0, r2
 800223e:	f7ff fbcd 	bl	80019dc <Lcd_string>


  // Serial port streaming
  HAL_UART_Transmit(hmenu->SerialPort, (uint8_t*)hmenu->Item->SerialPortStr, hmenu->Item->SerialPortStrLen, 10);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6918      	ldr	r0, [r3, #16]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f103 0114 	add.w	r1, r3, #20
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8002256:	230a      	movs	r3, #10
 8002258:	f004 f9e8 	bl	800662c <HAL_UART_Transmit>
 800225c:	e000      	b.n	8002260 <MENU_ROUTINE+0x98>
	  return;
 800225e:	bf00      	nop
}
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <PID_Init>:
#include "main.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	if (uPID->OutputSum > uPID->OutMax)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8002296:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800229a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800229e:	dd06      	ble.n	80022ae <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 80022ac:	e011      	b.n	80022d2 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80022ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80022be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c2:	d400      	bmi.n	80022c6 <PID_Init+0x60>
}
 80022c4:	e005      	b.n	80022d2 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	; 0x28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6278      	str	r0, [r7, #36]	; 0x24
 80022e8:	6239      	str	r1, [r7, #32]
 80022ea:	61fa      	str	r2, [r7, #28]
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	ed87 0b04 	vstr	d0, [r7, #16]
 80022f2:	ed87 1b02 	vstr	d1, [r7, #8]
 80022f6:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	6a3a      	ldr	r2, [r7, #32]
 8002304:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	2200      	movs	r2, #0
 8002310:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8002312:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8002368 <PID+0x88>
 8002316:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8002370 <PID+0x90>
 800231a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800231c:	f000 f91a 	bl	8002554 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	2264      	movs	r2, #100	; 0x64
 8002324:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8002326:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800232a:	4619      	mov	r1, r3
 800232c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800232e:	f000 fa13 	bl	8002758 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8002332:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002336:	4619      	mov	r1, r3
 8002338:	ed97 2b00 	vldr	d2, [r7]
 800233c:	ed97 1b02 	vldr	d1, [r7, #8]
 8002340:	ed97 0b04 	vldr	d0, [r7, #16]
 8002344:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002346:	f000 f977 	bl	8002638 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 800234a:	f000 fac7 	bl	80028dc <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	1ad2      	subs	r2, r2, r3
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	605a      	str	r2, [r3, #4]

}
 800235a:	bf00      	nop
 800235c:	3728      	adds	r7, #40	; 0x28
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	f3af 8000 	nop.w
 8002368:	00000000 	.word	0x00000000
 800236c:	406fe000 	.word	0x406fe000
	...

08002378 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08c      	sub	sp, #48	; 0x30
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	785b      	ldrb	r3, [r3, #1]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <PID_Compute+0x14>
	{
		return _FALSE;
 8002388:	2300      	movs	r3, #0
 800238a:	e0c1      	b.n	8002510 <PID_Compute+0x198>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 800238c:	f000 faa6 	bl	80028dc <HAL_GetTick>
 8002390:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	6a3a      	ldr	r2, [r7, #32]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	f0c0 80b3 	bcc.w	800250e <PID_Compute+0x196>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b8:	ed93 6b00 	vldr	d6, [r3]
 80023bc:	ed97 7b06 	vldr	d7, [r7, #24]
 80023c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80023c4:	ed87 7b04 	vstr	d7, [r7, #16]
		dInput  = (input - uPID->LastInput);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 80023ce:	ed97 6b06 	vldr	d6, [r7, #24]
 80023d2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80023d6:	ed87 7b02 	vstr	d7, [r7, #8]

		uPID->OutputSum     += (uPID->Ki * error);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	ed93 5b0c 	vldr	d5, [r3, #48]	; 0x30
 80023e6:	ed97 7b04 	vldr	d7, [r7, #16]
 80023ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 80023ee:	ee36 7b07 	vadd.f64	d7, d6, d7
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50

		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10e      	bne.n	800241e <PID_Compute+0xa6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 800240c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002410:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002414:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
		}

		if (uPID->OutputSum > uPID->OutMax)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800242a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800242e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002432:	dd06      	ble.n	8002442 <PID_Compute+0xca>
		{
			uPID->OutputSum = uPID->OutMax;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002440:	e010      	b.n	8002464 <PID_Compute+0xec>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 800244e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002456:	d505      	bpl.n	8002464 <PID_Compute+0xec>
		{
			uPID->OutputSum = uPID->OutMin;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }

		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d009      	beq.n	8002480 <PID_Compute+0x108>
		{
			output = uPID->Kp * error;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002472:	ed97 6b04 	vldr	d6, [r7, #16]
 8002476:	ee26 7b07 	vmul.f64	d7, d6, d7
 800247a:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
 800247e:	e005      	b.n	800248c <PID_Compute+0x114>
		}
		else
		{
			output = 0;
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 8002498:	ed97 7b02 	vldr	d7, [r7, #8]
 800249c:	ee25 7b07 	vmul.f64	d7, d5, d7
 80024a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80024a4:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 80024a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80024ac:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80024b6:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 80024ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80024be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c2:	dd05      	ble.n	80024d0 <PID_Compute+0x158>
		{
			output = uPID->OutMax;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80024ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80024ce:	e00e      	b.n	80024ee <PID_Compute+0x176>
		}
		else if (output < uPID->OutMin)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80024d6:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 80024da:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80024de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e2:	d504      	bpl.n	80024ee <PID_Compute+0x176>
		{
			output = uPID->OutMin;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80024ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }

		*uPID->MyOutput = output;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80024f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024f6:	e9c1 2300 	strd	r2, r3, [r1]

		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002500:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002508:	605a      	str	r2, [r3, #4]

		return _TRUE;
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <PID_Compute+0x198>

	}
	else
	{
		return _FALSE;
 800250e:	2300      	movs	r3, #0
	}

}
 8002510:	4618      	mov	r0, r3
 8002512:	3730      	adds	r7, #48	; 0x30
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	2b01      	cmp	r3, #1
 8002528:	bf0c      	ite	eq
 800252a:	2301      	moveq	r3, #1
 800252c:	2300      	movne	r3, #0
 800252e:	b2db      	uxtb	r3, r3
 8002530:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d006      	beq.n	8002546 <PID_SetMode+0x2e>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	785b      	ldrb	r3, [r3, #1]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d102      	bne.n	8002546 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff fe90 	bl	8002266 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	7bfa      	ldrb	r2, [r7, #15]
 800254a:	705a      	strb	r2, [r3, #1]

}
 800254c:	bf00      	nop
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6178      	str	r0, [r7, #20]
 800255c:	ed87 0b02 	vstr	d0, [r7, #8]
 8002560:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002564:	ed97 6b02 	vldr	d6, [r7, #8]
 8002568:	ed97 7b00 	vldr	d7, [r7]
 800256c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002574:	da58      	bge.n	8002628 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 8002576:	6979      	ldr	r1, [r7, #20]
 8002578:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800257c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8002580:	6979      	ldr	r1, [r7, #20]
 8002582:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002586:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	785b      	ldrb	r3, [r3, #1]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d04b      	beq.n	800262a <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	ed93 6b00 	vldr	d6, [r3]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80025a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80025a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a8:	dd07      	ble.n	80025ba <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80025b4:	e9c1 2300 	strd	r2, r3, [r1]
 80025b8:	e012      	b.n	80025e0 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	ed93 6b00 	vldr	d6, [r3]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80025c8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80025cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d0:	d506      	bpl.n	80025e0 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80025dc:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80025ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80025f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f4:	dd06      	ble.n	8002604 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80025fc:	6979      	ldr	r1, [r7, #20]
 80025fe:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002602:	e012      	b.n	800262a <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8002610:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002618:	d507      	bpl.n	800262a <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002620:	6979      	ldr	r1, [r7, #20]
 8002622:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002626:	e000      	b.n	800262a <PID_SetOutputLimits+0xd6>
		return;
 8002628:	bf00      	nop
		}
		else { }

	}

}
 800262a:	371c      	adds	r7, #28
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	0000      	movs	r0, r0
	...

08002638 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8002638:	b480      	push	{r7}
 800263a:	b08b      	sub	sp, #44	; 0x2c
 800263c:	af00      	add	r7, sp, #0
 800263e:	61f8      	str	r0, [r7, #28]
 8002640:	ed87 0b04 	vstr	d0, [r7, #16]
 8002644:	ed87 1b02 	vstr	d1, [r7, #8]
 8002648:	ed87 2b00 	vstr	d2, [r7]
 800264c:	460b      	mov	r3, r1
 800264e:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002650:	ed97 7b04 	vldr	d7, [r7, #16]
 8002654:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265c:	d46e      	bmi.n	800273c <PID_SetTunings2+0x104>
 800265e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002662:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266a:	d467      	bmi.n	800273c <PID_SetTunings2+0x104>
 800266c:	ed97 7b00 	vldr	d7, [r7]
 8002670:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002678:	d460      	bmi.n	800273c <PID_SetTunings2+0x104>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	7efa      	ldrb	r2, [r7, #27]
 800267e:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002680:	7efb      	ldrb	r3, [r7, #27]
 8002682:	2b01      	cmp	r3, #1
 8002684:	bf0c      	ite	eq
 8002686:	2301      	moveq	r3, #1
 8002688:	2300      	movne	r3, #0
 800268a:	b2db      	uxtb	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8002692:	69f9      	ldr	r1, [r7, #28]
 8002694:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002698:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 800269c:	69f9      	ldr	r1, [r7, #28]
 800269e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026a2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 80026a6:	69f9      	ldr	r1, [r7, #28]
 80026a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026ac:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	ee07 3a90 	vmov	s15, r3
 80026b8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80026bc:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8002748 <PID_SetTunings2+0x110>
 80026c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80026c4:	ed87 7b08 	vstr	d7, [r7, #32]

	uPID->Kp = Kp;
 80026c8:	69f9      	ldr	r1, [r7, #28]
 80026ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80026ce:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 80026d2:	ed97 6b02 	vldr	d6, [r7, #8]
 80026d6:	ed97 7b08 	vldr	d7, [r7, #32]
 80026da:	ee26 7b07 	vmul.f64	d7, d6, d7
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 80026e4:	ed97 5b00 	vldr	d5, [r7]
 80026e8:	ed97 6b08 	vldr	d6, [r7, #32]
 80026ec:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	78db      	ldrb	r3, [r3, #3]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d11f      	bne.n	800273e <PID_SetTunings2+0x106>
	{

		uPID->Kp = (0 - uPID->Kp);
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002704:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8002750 <PID_SetTunings2+0x118>
 8002708:	ee36 7b47 	vsub.f64	d7, d6, d7
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002718:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8002750 <PID_SetTunings2+0x118>
 800271c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800272c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8002750 <PID_SetTunings2+0x118>
 8002730:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
 800273a:	e000      	b.n	800273e <PID_SetTunings2+0x106>
		return;
 800273c:	bf00      	nop

	}

}
 800273e:	372c      	adds	r7, #44	; 0x2c
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	00000000 	.word	0x00000000
 800274c:	408f4000 	.word	0x408f4000
	...

08002758 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	785b      	ldrb	r3, [r3, #1]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d022      	beq.n	80027b2 <PID_SetControllerDirection+0x5a>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	78db      	ldrb	r3, [r3, #3]
 8002770:	78fa      	ldrb	r2, [r7, #3]
 8002772:	429a      	cmp	r2, r3
 8002774:	d01d      	beq.n	80027b2 <PID_SetControllerDirection+0x5a>
	{

		uPID->Kp = (0 - uPID->Kp);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800277c:	ed9f 6b12 	vldr	d6, [pc, #72]	; 80027c8 <PID_SetControllerDirection+0x70>
 8002780:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002790:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80027c8 <PID_SetControllerDirection+0x70>
 8002794:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80027a4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80027c8 <PID_SetControllerDirection+0x70>
 80027a8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	78fa      	ldrb	r2, [r7, #3]
 80027b6:	70da      	strb	r2, [r3, #3]

}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	f3af 8000 	nop.w
	...

080027d0 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	dd25      	ble.n	800282c <PID_SetSampleTime+0x5c>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	ee07 3a90 	vmov	s15, r3
 80027e6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80027f6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80027fa:	ed87 7b02 	vstr	d7, [r7, #8]

		uPID->Ki *= ratio;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 8002804:	ed97 7b02 	vldr	d7, [r7, #8]
 8002808:	ee26 7b07 	vmul.f64	d7, d6, d7
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		uPID->Kd /= ratio;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 8002818:	ed97 6b02 	vldr	d6, [r7, #8]
 800281c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	609a      	str	r2, [r3, #8]

	}

}
 800282c:	bf00      	nop
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800283c:	2003      	movs	r0, #3
 800283e:	f000 f94d 	bl	8002adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002842:	2000      	movs	r0, #0
 8002844:	f000 f806 	bl	8002854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002848:	f7fe fb90 	bl	8000f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800285c:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <HAL_InitTick+0x54>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b12      	ldr	r3, [pc, #72]	; (80028ac <HAL_InitTick+0x58>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	4619      	mov	r1, r3
 8002866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800286a:	fbb3 f3f1 	udiv	r3, r3, r1
 800286e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f967 	bl	8002b46 <HAL_SYSTICK_Config>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e00e      	b.n	80028a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b0f      	cmp	r3, #15
 8002886:	d80a      	bhi.n	800289e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002888:	2200      	movs	r2, #0
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	f04f 30ff 	mov.w	r0, #4294967295
 8002890:	f000 f92f 	bl	8002af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002894:	4a06      	ldr	r2, [pc, #24]	; (80028b0 <HAL_InitTick+0x5c>)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	e000      	b.n	80028a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20000000 	.word	0x20000000
 80028ac:	200004c4 	.word	0x200004c4
 80028b0:	200004c0 	.word	0x200004c0

080028b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_IncTick+0x20>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	461a      	mov	r2, r3
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_IncTick+0x24>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4413      	add	r3, r2
 80028c4:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <HAL_IncTick+0x24>)
 80028c6:	6013      	str	r3, [r2, #0]
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	200004c4 	.word	0x200004c4
 80028d8:	20000ea0 	.word	0x20000ea0

080028dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return uwTick;
 80028e0:	4b03      	ldr	r3, [pc, #12]	; (80028f0 <HAL_GetTick+0x14>)
 80028e2:	681b      	ldr	r3, [r3, #0]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20000ea0 	.word	0x20000ea0

080028f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028fc:	f7ff ffee 	bl	80028dc <HAL_GetTick>
 8002900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290c:	d005      	beq.n	800291a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800290e:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <HAL_Delay+0x44>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4413      	add	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800291a:	bf00      	nop
 800291c:	f7ff ffde 	bl	80028dc <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	429a      	cmp	r2, r3
 800292a:	d8f7      	bhi.n	800291c <HAL_Delay+0x28>
  {
  }
}
 800292c:	bf00      	nop
 800292e:	bf00      	nop
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	200004c4 	.word	0x200004c4

0800293c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <__NVIC_SetPriorityGrouping+0x40>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002958:	4013      	ands	r3, r2
 800295a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002964:	4b06      	ldr	r3, [pc, #24]	; (8002980 <__NVIC_SetPriorityGrouping+0x44>)
 8002966:	4313      	orrs	r3, r2
 8002968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800296a:	4a04      	ldr	r2, [pc, #16]	; (800297c <__NVIC_SetPriorityGrouping+0x40>)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	60d3      	str	r3, [r2, #12]
}
 8002970:	bf00      	nop
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000ed00 	.word	0xe000ed00
 8002980:	05fa0000 	.word	0x05fa0000

08002984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002988:	4b04      	ldr	r3, [pc, #16]	; (800299c <__NVIC_GetPriorityGrouping+0x18>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	0a1b      	lsrs	r3, r3, #8
 800298e:	f003 0307 	and.w	r3, r3, #7
}
 8002992:	4618      	mov	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	db0b      	blt.n	80029ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	f003 021f 	and.w	r2, r3, #31
 80029b8:	4907      	ldr	r1, [pc, #28]	; (80029d8 <__NVIC_EnableIRQ+0x38>)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	2001      	movs	r0, #1
 80029c2:	fa00 f202 	lsl.w	r2, r0, r2
 80029c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	e000e100 	.word	0xe000e100

080029dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	6039      	str	r1, [r7, #0]
 80029e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	db0a      	blt.n	8002a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	490c      	ldr	r1, [pc, #48]	; (8002a28 <__NVIC_SetPriority+0x4c>)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	0112      	lsls	r2, r2, #4
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	440b      	add	r3, r1
 8002a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a04:	e00a      	b.n	8002a1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	4908      	ldr	r1, [pc, #32]	; (8002a2c <__NVIC_SetPriority+0x50>)
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	3b04      	subs	r3, #4
 8002a14:	0112      	lsls	r2, r2, #4
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	440b      	add	r3, r1
 8002a1a:	761a      	strb	r2, [r3, #24]
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	e000e100 	.word	0xe000e100
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b089      	sub	sp, #36	; 0x24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f1c3 0307 	rsb	r3, r3, #7
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	bf28      	it	cs
 8002a4e:	2304      	movcs	r3, #4
 8002a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3304      	adds	r3, #4
 8002a56:	2b06      	cmp	r3, #6
 8002a58:	d902      	bls.n	8002a60 <NVIC_EncodePriority+0x30>
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3b03      	subs	r3, #3
 8002a5e:	e000      	b.n	8002a62 <NVIC_EncodePriority+0x32>
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a64:	f04f 32ff 	mov.w	r2, #4294967295
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43da      	mvns	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	401a      	ands	r2, r3
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a78:	f04f 31ff 	mov.w	r1, #4294967295
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	43d9      	mvns	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a88:	4313      	orrs	r3, r2
         );
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3724      	adds	r7, #36	; 0x24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
	...

08002a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aa8:	d301      	bcc.n	8002aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e00f      	b.n	8002ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aae:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <SysTick_Config+0x40>)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ab6:	210f      	movs	r1, #15
 8002ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8002abc:	f7ff ff8e 	bl	80029dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <SysTick_Config+0x40>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ac6:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <SysTick_Config+0x40>)
 8002ac8:	2207      	movs	r2, #7
 8002aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	e000e010 	.word	0xe000e010

08002adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff ff29 	bl	800293c <__NVIC_SetPriorityGrouping>
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b086      	sub	sp, #24
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	4603      	mov	r3, r0
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
 8002afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b04:	f7ff ff3e 	bl	8002984 <__NVIC_GetPriorityGrouping>
 8002b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	6978      	ldr	r0, [r7, #20]
 8002b10:	f7ff ff8e 	bl	8002a30 <NVIC_EncodePriority>
 8002b14:	4602      	mov	r2, r0
 8002b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff5d 	bl	80029dc <__NVIC_SetPriority>
}
 8002b22:	bf00      	nop
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	4603      	mov	r3, r0
 8002b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ff31 	bl	80029a0 <__NVIC_EnableIRQ>
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff ffa2 	bl	8002a98 <SysTick_Config>
 8002b54:	4603      	mov	r3, r0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b084      	sub	sp, #16
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b6c:	f7ff feb6 	bl	80028dc <HAL_GetTick>
 8002b70:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d008      	beq.n	8002b90 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2280      	movs	r2, #128	; 0x80
 8002b82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e052      	b.n	8002c36 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0216 	bic.w	r2, r2, #22
 8002b9e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695a      	ldr	r2, [r3, #20]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d103      	bne.n	8002bc0 <HAL_DMA_Abort+0x62>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d007      	beq.n	8002bd0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0208 	bic.w	r2, r2, #8
 8002bce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0201 	bic.w	r2, r2, #1
 8002bde:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002be0:	e013      	b.n	8002c0a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002be2:	f7ff fe7b 	bl	80028dc <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b05      	cmp	r3, #5
 8002bee:	d90c      	bls.n	8002c0a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e015      	b.n	8002c36 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1e4      	bne.n	8002be2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1c:	223f      	movs	r2, #63	; 0x3f
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d004      	beq.n	8002c5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2280      	movs	r2, #128	; 0x80
 8002c56:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e00c      	b.n	8002c76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2205      	movs	r2, #5
 8002c60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0201 	bic.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b089      	sub	sp, #36	; 0x24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
 8002ca2:	e175      	b.n	8002f90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	f040 8164 	bne.w	8002f8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d005      	beq.n	8002cda <HAL_GPIO_Init+0x56>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d130      	bne.n	8002d3c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43db      	mvns	r3, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d10:	2201      	movs	r2, #1
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	091b      	lsrs	r3, r3, #4
 8002d26:	f003 0201 	and.w	r2, r3, #1
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d017      	beq.n	8002d78 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	2203      	movs	r2, #3
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 0303 	and.w	r3, r3, #3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d123      	bne.n	8002dcc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	08da      	lsrs	r2, r3, #3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3208      	adds	r2, #8
 8002d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	220f      	movs	r2, #15
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	08da      	lsrs	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3208      	adds	r2, #8
 8002dc6:	69b9      	ldr	r1, [r7, #24]
 8002dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 0203 	and.w	r2, r3, #3
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 80be 	beq.w	8002f8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e0e:	4b66      	ldr	r3, [pc, #408]	; (8002fa8 <HAL_GPIO_Init+0x324>)
 8002e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e12:	4a65      	ldr	r2, [pc, #404]	; (8002fa8 <HAL_GPIO_Init+0x324>)
 8002e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e18:	6453      	str	r3, [r2, #68]	; 0x44
 8002e1a:	4b63      	ldr	r3, [pc, #396]	; (8002fa8 <HAL_GPIO_Init+0x324>)
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e26:	4a61      	ldr	r2, [pc, #388]	; (8002fac <HAL_GPIO_Init+0x328>)
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	089b      	lsrs	r3, r3, #2
 8002e2c:	3302      	adds	r3, #2
 8002e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	220f      	movs	r2, #15
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a58      	ldr	r2, [pc, #352]	; (8002fb0 <HAL_GPIO_Init+0x32c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d037      	beq.n	8002ec2 <HAL_GPIO_Init+0x23e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a57      	ldr	r2, [pc, #348]	; (8002fb4 <HAL_GPIO_Init+0x330>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d031      	beq.n	8002ebe <HAL_GPIO_Init+0x23a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a56      	ldr	r2, [pc, #344]	; (8002fb8 <HAL_GPIO_Init+0x334>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d02b      	beq.n	8002eba <HAL_GPIO_Init+0x236>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a55      	ldr	r2, [pc, #340]	; (8002fbc <HAL_GPIO_Init+0x338>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d025      	beq.n	8002eb6 <HAL_GPIO_Init+0x232>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a54      	ldr	r2, [pc, #336]	; (8002fc0 <HAL_GPIO_Init+0x33c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d01f      	beq.n	8002eb2 <HAL_GPIO_Init+0x22e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a53      	ldr	r2, [pc, #332]	; (8002fc4 <HAL_GPIO_Init+0x340>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d019      	beq.n	8002eae <HAL_GPIO_Init+0x22a>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a52      	ldr	r2, [pc, #328]	; (8002fc8 <HAL_GPIO_Init+0x344>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d013      	beq.n	8002eaa <HAL_GPIO_Init+0x226>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a51      	ldr	r2, [pc, #324]	; (8002fcc <HAL_GPIO_Init+0x348>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d00d      	beq.n	8002ea6 <HAL_GPIO_Init+0x222>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a50      	ldr	r2, [pc, #320]	; (8002fd0 <HAL_GPIO_Init+0x34c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d007      	beq.n	8002ea2 <HAL_GPIO_Init+0x21e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a4f      	ldr	r2, [pc, #316]	; (8002fd4 <HAL_GPIO_Init+0x350>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d101      	bne.n	8002e9e <HAL_GPIO_Init+0x21a>
 8002e9a:	2309      	movs	r3, #9
 8002e9c:	e012      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002e9e:	230a      	movs	r3, #10
 8002ea0:	e010      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002ea2:	2308      	movs	r3, #8
 8002ea4:	e00e      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002ea6:	2307      	movs	r3, #7
 8002ea8:	e00c      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002eaa:	2306      	movs	r3, #6
 8002eac:	e00a      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002eae:	2305      	movs	r3, #5
 8002eb0:	e008      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002eb2:	2304      	movs	r3, #4
 8002eb4:	e006      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e004      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e002      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	69fa      	ldr	r2, [r7, #28]
 8002ec6:	f002 0203 	and.w	r2, r2, #3
 8002eca:	0092      	lsls	r2, r2, #2
 8002ecc:	4093      	lsls	r3, r2
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ed4:	4935      	ldr	r1, [pc, #212]	; (8002fac <HAL_GPIO_Init+0x328>)
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	089b      	lsrs	r3, r3, #2
 8002eda:	3302      	adds	r3, #2
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ee2:	4b3d      	ldr	r3, [pc, #244]	; (8002fd8 <HAL_GPIO_Init+0x354>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f06:	4a34      	ldr	r2, [pc, #208]	; (8002fd8 <HAL_GPIO_Init+0x354>)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f0c:	4b32      	ldr	r3, [pc, #200]	; (8002fd8 <HAL_GPIO_Init+0x354>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f30:	4a29      	ldr	r2, [pc, #164]	; (8002fd8 <HAL_GPIO_Init+0x354>)
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f36:	4b28      	ldr	r3, [pc, #160]	; (8002fd8 <HAL_GPIO_Init+0x354>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4013      	ands	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f5a:	4a1f      	ldr	r2, [pc, #124]	; (8002fd8 <HAL_GPIO_Init+0x354>)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f60:	4b1d      	ldr	r3, [pc, #116]	; (8002fd8 <HAL_GPIO_Init+0x354>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f84:	4a14      	ldr	r2, [pc, #80]	; (8002fd8 <HAL_GPIO_Init+0x354>)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	61fb      	str	r3, [r7, #28]
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	2b0f      	cmp	r3, #15
 8002f94:	f67f ae86 	bls.w	8002ca4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	3724      	adds	r7, #36	; 0x24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40013800 	.word	0x40013800
 8002fb0:	40020000 	.word	0x40020000
 8002fb4:	40020400 	.word	0x40020400
 8002fb8:	40020800 	.word	0x40020800
 8002fbc:	40020c00 	.word	0x40020c00
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40021400 	.word	0x40021400
 8002fc8:	40021800 	.word	0x40021800
 8002fcc:	40021c00 	.word	0x40021c00
 8002fd0:	40022000 	.word	0x40022000
 8002fd4:	40022400 	.word	0x40022400
 8002fd8:	40013c00 	.word	0x40013c00

08002fdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	887b      	ldrh	r3, [r7, #2]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	73fb      	strb	r3, [r7, #15]
 8002ff8:	e001      	b.n	8002ffe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	807b      	strh	r3, [r7, #2]
 8003018:	4613      	mov	r3, r2
 800301a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800301c:	787b      	ldrb	r3, [r7, #1]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003022:	887a      	ldrh	r2, [r7, #2]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003028:	e003      	b.n	8003032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800302a:	887b      	ldrh	r3, [r7, #2]
 800302c:	041a      	lsls	r2, r3, #16
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	619a      	str	r2, [r3, #24]
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800303e:	b480      	push	{r7}
 8003040:	b085      	sub	sp, #20
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	460b      	mov	r3, r1
 8003048:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003050:	887a      	ldrh	r2, [r7, #2]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4013      	ands	r3, r2
 8003056:	041a      	lsls	r2, r3, #16
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	43d9      	mvns	r1, r3
 800305c:	887b      	ldrh	r3, [r7, #2]
 800305e:	400b      	ands	r3, r1
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	619a      	str	r2, [r3, #24]
}
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
	...

08003074 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800307e:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003080:	695a      	ldr	r2, [r3, #20]
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	4013      	ands	r3, r2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d006      	beq.n	8003098 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800308a:	4a05      	ldr	r2, [pc, #20]	; (80030a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800308c:	88fb      	ldrh	r3, [r7, #6]
 800308e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003090:	88fb      	ldrh	r3, [r7, #6]
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd fcd0 	bl	8000a38 <HAL_GPIO_EXTI_Callback>
  }
}
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40013c00 	.word	0x40013c00

080030a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e07f      	b.n	80031b6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d106      	bne.n	80030d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7fd fc40 	bl	8000950 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2224      	movs	r2, #36	; 0x24
 80030d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0201 	bic.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003104:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d107      	bne.n	800311e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	e006      	b.n	800312c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800312a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	2b02      	cmp	r3, #2
 8003132:	d104      	bne.n	800313e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800313c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6859      	ldr	r1, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <HAL_I2C_Init+0x11c>)
 800314a:	430b      	orrs	r3, r1
 800314c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800315c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691a      	ldr	r2, [r3, #16]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69d9      	ldr	r1, [r3, #28]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1a      	ldr	r2, [r3, #32]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0201 	orr.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	02008000 	.word	0x02008000

080031c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b088      	sub	sp, #32
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	607a      	str	r2, [r7, #4]
 80031ce:	461a      	mov	r2, r3
 80031d0:	460b      	mov	r3, r1
 80031d2:	817b      	strh	r3, [r7, #10]
 80031d4:	4613      	mov	r3, r2
 80031d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	f040 80da 	bne.w	800339a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_I2C_Master_Transmit+0x30>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e0d3      	b.n	800339c <HAL_I2C_Master_Transmit+0x1d8>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031fc:	f7ff fb6e 	bl	80028dc <HAL_GetTick>
 8003200:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	2319      	movs	r3, #25
 8003208:	2201      	movs	r2, #1
 800320a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 f9e6 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e0be      	b.n	800339c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2221      	movs	r2, #33	; 0x21
 8003222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2210      	movs	r2, #16
 800322a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	893a      	ldrh	r2, [r7, #8]
 800323e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324a:	b29b      	uxth	r3, r3
 800324c:	2bff      	cmp	r3, #255	; 0xff
 800324e:	d90e      	bls.n	800326e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	22ff      	movs	r2, #255	; 0xff
 8003254:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325a:	b2da      	uxtb	r2, r3
 800325c:	8979      	ldrh	r1, [r7, #10]
 800325e:	4b51      	ldr	r3, [pc, #324]	; (80033a4 <HAL_I2C_Master_Transmit+0x1e0>)
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 fbd0 	bl	8003a0c <I2C_TransferConfig>
 800326c:	e06c      	b.n	8003348 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327c:	b2da      	uxtb	r2, r3
 800327e:	8979      	ldrh	r1, [r7, #10]
 8003280:	4b48      	ldr	r3, [pc, #288]	; (80033a4 <HAL_I2C_Master_Transmit+0x1e0>)
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 fbbf 	bl	8003a0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800328e:	e05b      	b.n	8003348 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	6a39      	ldr	r1, [r7, #32]
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 f9e3 	bl	8003660 <I2C_WaitOnTXISFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e07b      	b.n	800339c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	781a      	ldrb	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032be:	b29b      	uxth	r3, r3
 80032c0:	3b01      	subs	r3, #1
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d034      	beq.n	8003348 <HAL_I2C_Master_Transmit+0x184>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d130      	bne.n	8003348 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	2200      	movs	r2, #0
 80032ee:	2180      	movs	r1, #128	; 0x80
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 f975 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e04d      	b.n	800339c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003304:	b29b      	uxth	r3, r3
 8003306:	2bff      	cmp	r3, #255	; 0xff
 8003308:	d90e      	bls.n	8003328 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	22ff      	movs	r2, #255	; 0xff
 800330e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003314:	b2da      	uxtb	r2, r3
 8003316:	8979      	ldrh	r1, [r7, #10]
 8003318:	2300      	movs	r3, #0
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 fb73 	bl	8003a0c <I2C_TransferConfig>
 8003326:	e00f      	b.n	8003348 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003336:	b2da      	uxtb	r2, r3
 8003338:	8979      	ldrh	r1, [r7, #10]
 800333a:	2300      	movs	r3, #0
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 fb62 	bl	8003a0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334c:	b29b      	uxth	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d19e      	bne.n	8003290 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	6a39      	ldr	r1, [r7, #32]
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f9c2 	bl	80036e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e01a      	b.n	800339c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2220      	movs	r2, #32
 800336c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6859      	ldr	r1, [r3, #4]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <HAL_I2C_Master_Transmit+0x1e4>)
 800337a:	400b      	ands	r3, r1
 800337c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	e000      	b.n	800339c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800339a:	2302      	movs	r3, #2
  }
}
 800339c:	4618      	mov	r0, r3
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	80002000 	.word	0x80002000
 80033a8:	fe00e800 	.word	0xfe00e800

080033ac <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	607a      	str	r2, [r7, #4]
 80033b6:	461a      	mov	r2, r3
 80033b8:	460b      	mov	r3, r1
 80033ba:	817b      	strh	r3, [r7, #10]
 80033bc:	4613      	mov	r3, r2
 80033be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b20      	cmp	r3, #32
 80033ca:	f040 80db 	bne.w	8003584 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_I2C_Master_Receive+0x30>
 80033d8:	2302      	movs	r3, #2
 80033da:	e0d4      	b.n	8003586 <HAL_I2C_Master_Receive+0x1da>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033e4:	f7ff fa7a 	bl	80028dc <HAL_GetTick>
 80033e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	2319      	movs	r3, #25
 80033f0:	2201      	movs	r2, #1
 80033f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f8f2 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e0bf      	b.n	8003586 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2222      	movs	r2, #34	; 0x22
 800340a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2210      	movs	r2, #16
 8003412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	893a      	ldrh	r2, [r7, #8]
 8003426:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003432:	b29b      	uxth	r3, r3
 8003434:	2bff      	cmp	r3, #255	; 0xff
 8003436:	d90e      	bls.n	8003456 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	22ff      	movs	r2, #255	; 0xff
 800343c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003442:	b2da      	uxtb	r2, r3
 8003444:	8979      	ldrh	r1, [r7, #10]
 8003446:	4b52      	ldr	r3, [pc, #328]	; (8003590 <HAL_I2C_Master_Receive+0x1e4>)
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fadc 	bl	8003a0c <I2C_TransferConfig>
 8003454:	e06d      	b.n	8003532 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003464:	b2da      	uxtb	r2, r3
 8003466:	8979      	ldrh	r1, [r7, #10]
 8003468:	4b49      	ldr	r3, [pc, #292]	; (8003590 <HAL_I2C_Master_Receive+0x1e4>)
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 facb 	bl	8003a0c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003476:	e05c      	b.n	8003532 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	6a39      	ldr	r1, [r7, #32]
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 f96b 	bl	8003758 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e07c      	b.n	8003586 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d034      	beq.n	8003532 <HAL_I2C_Master_Receive+0x186>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d130      	bne.n	8003532 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	2200      	movs	r2, #0
 80034d8:	2180      	movs	r1, #128	; 0x80
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f880 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e04d      	b.n	8003586 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2bff      	cmp	r3, #255	; 0xff
 80034f2:	d90e      	bls.n	8003512 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	22ff      	movs	r2, #255	; 0xff
 80034f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	8979      	ldrh	r1, [r7, #10]
 8003502:	2300      	movs	r3, #0
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 fa7e 	bl	8003a0c <I2C_TransferConfig>
 8003510:	e00f      	b.n	8003532 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003520:	b2da      	uxtb	r2, r3
 8003522:	8979      	ldrh	r1, [r7, #10]
 8003524:	2300      	movs	r3, #0
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 fa6d 	bl	8003a0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003536:	b29b      	uxth	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d19d      	bne.n	8003478 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	6a39      	ldr	r1, [r7, #32]
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 f8cd 	bl	80036e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e01a      	b.n	8003586 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2220      	movs	r2, #32
 8003556:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6859      	ldr	r1, [r3, #4]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <HAL_I2C_Master_Receive+0x1e8>)
 8003564:	400b      	ands	r3, r1
 8003566:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	e000      	b.n	8003586 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003584:	2302      	movs	r3, #2
  }
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	80002400 	.word	0x80002400
 8003594:	fe00e800 	.word	0xfe00e800

08003598 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d103      	bne.n	80035b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2200      	movs	r2, #0
 80035b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d007      	beq.n	80035d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	619a      	str	r2, [r3, #24]
  }
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	4613      	mov	r3, r2
 80035ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f0:	e022      	b.n	8003638 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f8:	d01e      	beq.n	8003638 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fa:	f7ff f96f 	bl	80028dc <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d302      	bcc.n	8003610 <I2C_WaitOnFlagUntilTimeout+0x30>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d113      	bne.n	8003638 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003614:	f043 0220 	orr.w	r2, r3, #32
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e00f      	b.n	8003658 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699a      	ldr	r2, [r3, #24]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	4013      	ands	r3, r2
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	429a      	cmp	r2, r3
 8003646:	bf0c      	ite	eq
 8003648:	2301      	moveq	r3, #1
 800364a:	2300      	movne	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	461a      	mov	r2, r3
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	429a      	cmp	r2, r3
 8003654:	d0cd      	beq.n	80035f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800366c:	e02c      	b.n	80036c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 f8ea 	bl	800384c <I2C_IsErrorOccurred>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e02a      	b.n	80036d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003688:	d01e      	beq.n	80036c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368a:	f7ff f927 	bl	80028dc <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	429a      	cmp	r2, r3
 8003698:	d302      	bcc.n	80036a0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d113      	bne.n	80036c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a4:	f043 0220 	orr.w	r2, r3, #32
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e007      	b.n	80036d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d1cb      	bne.n	800366e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036ec:	e028      	b.n	8003740 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	68b9      	ldr	r1, [r7, #8]
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 f8aa 	bl	800384c <I2C_IsErrorOccurred>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e026      	b.n	8003750 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003702:	f7ff f8eb 	bl	80028dc <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	429a      	cmp	r2, r3
 8003710:	d302      	bcc.n	8003718 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d113      	bne.n	8003740 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371c:	f043 0220 	orr.w	r2, r3, #32
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e007      	b.n	8003750 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b20      	cmp	r3, #32
 800374c:	d1cf      	bne.n	80036ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003764:	e064      	b.n	8003830 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	68b9      	ldr	r1, [r7, #8]
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 f86e 	bl	800384c <I2C_IsErrorOccurred>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e062      	b.n	8003840 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	f003 0320 	and.w	r3, r3, #32
 8003784:	2b20      	cmp	r3, #32
 8003786:	d138      	bne.n	80037fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b04      	cmp	r3, #4
 8003794:	d105      	bne.n	80037a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	e04e      	b.n	8003840 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	f003 0310 	and.w	r3, r3, #16
 80037ac:	2b10      	cmp	r3, #16
 80037ae:	d107      	bne.n	80037c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2210      	movs	r2, #16
 80037b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2204      	movs	r2, #4
 80037bc:	645a      	str	r2, [r3, #68]	; 0x44
 80037be:	e002      	b.n	80037c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2220      	movs	r2, #32
 80037cc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6859      	ldr	r1, [r3, #4]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4b1b      	ldr	r3, [pc, #108]	; (8003848 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80037da:	400b      	ands	r3, r1
 80037dc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e022      	b.n	8003840 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fa:	f7ff f86f 	bl	80028dc <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	429a      	cmp	r2, r3
 8003808:	d302      	bcc.n	8003810 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10f      	bne.n	8003830 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003814:	f043 0220 	orr.w	r2, r3, #32
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e007      	b.n	8003840 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b04      	cmp	r3, #4
 800383c:	d193      	bne.n	8003766 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	fe00e800 	.word	0xfe00e800

0800384c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08a      	sub	sp, #40	; 0x28
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003858:	2300      	movs	r3, #0
 800385a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b00      	cmp	r3, #0
 8003876:	d068      	beq.n	800394a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2210      	movs	r2, #16
 800387e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003880:	e049      	b.n	8003916 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003888:	d045      	beq.n	8003916 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800388a:	f7ff f827 	bl	80028dc <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	429a      	cmp	r2, r3
 8003898:	d302      	bcc.n	80038a0 <I2C_IsErrorOccurred+0x54>
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d13a      	bne.n	8003916 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038c2:	d121      	bne.n	8003908 <I2C_IsErrorOccurred+0xbc>
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038ca:	d01d      	beq.n	8003908 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80038cc:	7cfb      	ldrb	r3, [r7, #19]
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	d01a      	beq.n	8003908 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80038e2:	f7fe fffb 	bl	80028dc <HAL_GetTick>
 80038e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038e8:	e00e      	b.n	8003908 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80038ea:	f7fe fff7 	bl	80028dc <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b19      	cmp	r3, #25
 80038f6:	d907      	bls.n	8003908 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	f043 0320 	orr.w	r3, r3, #32
 80038fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003906:	e006      	b.n	8003916 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b20      	cmp	r3, #32
 8003914:	d1e9      	bne.n	80038ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	2b20      	cmp	r3, #32
 8003922:	d003      	beq.n	800392c <I2C_IsErrorOccurred+0xe0>
 8003924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0aa      	beq.n	8003882 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800392c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003930:	2b00      	cmp	r3, #0
 8003932:	d103      	bne.n	800393c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2220      	movs	r2, #32
 800393a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	f043 0304 	orr.w	r3, r3, #4
 8003942:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00b      	beq.n	8003974 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f44f 7280 	mov.w	r2, #256	; 0x100
 800396c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00b      	beq.n	8003996 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	f043 0308 	orr.w	r3, r3, #8
 8003984:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800398e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00b      	beq.n	80039b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	f043 0302 	orr.w	r3, r3, #2
 80039a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80039b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d01c      	beq.n	80039fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f7ff fde9 	bl	8003598 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6859      	ldr	r1, [r3, #4]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <I2C_IsErrorOccurred+0x1bc>)
 80039d2:	400b      	ands	r3, r1
 80039d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	431a      	orrs	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80039fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3728      	adds	r7, #40	; 0x28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	fe00e800 	.word	0xfe00e800

08003a0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	607b      	str	r3, [r7, #4]
 8003a16:	460b      	mov	r3, r1
 8003a18:	817b      	strh	r3, [r7, #10]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a1e:	897b      	ldrh	r3, [r7, #10]
 8003a20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a24:	7a7b      	ldrb	r3, [r7, #9]
 8003a26:	041b      	lsls	r3, r3, #16
 8003a28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	0d5b      	lsrs	r3, r3, #21
 8003a46:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003a4a:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <I2C_TransferConfig+0x60>)
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	ea02 0103 	and.w	r1, r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a5e:	bf00      	nop
 8003a60:	371c      	adds	r7, #28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	03ff63ff 	.word	0x03ff63ff

08003a70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b20      	cmp	r3, #32
 8003a84:	d138      	bne.n	8003af8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e032      	b.n	8003afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2224      	movs	r2, #36	; 0x24
 8003aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0201 	bic.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ac2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6819      	ldr	r1, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0201 	orr.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	e000      	b.n	8003afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003af8:	2302      	movs	r3, #2
  }
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b085      	sub	sp, #20
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d139      	bne.n	8003b90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e033      	b.n	8003b92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2224      	movs	r2, #36	; 0x24
 8003b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0201 	bic.w	r2, r2, #1
 8003b48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	021b      	lsls	r3, r3, #8
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	e000      	b.n	8003b92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b90:	2302      	movs	r3, #2
  }
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ba0:	b08f      	sub	sp, #60	; 0x3c
 8003ba2:	af0a      	add	r7, sp, #40	; 0x28
 8003ba4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e116      	b.n	8003dde <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fd fdcc 	bl	8001768 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d102      	bne.n	8003bea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f004 f952 	bl	8007e98 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	603b      	str	r3, [r7, #0]
 8003bfa:	687e      	ldr	r6, [r7, #4]
 8003bfc:	466d      	mov	r5, sp
 8003bfe:	f106 0410 	add.w	r4, r6, #16
 8003c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c12:	1d33      	adds	r3, r6, #4
 8003c14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c16:	6838      	ldr	r0, [r7, #0]
 8003c18:	f004 f8e6 	bl	8007de8 <USB_CoreInit>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d005      	beq.n	8003c2e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2202      	movs	r2, #2
 8003c26:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e0d7      	b.n	8003dde <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2100      	movs	r1, #0
 8003c34:	4618      	mov	r0, r3
 8003c36:	f004 f940 	bl	8007eba <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	73fb      	strb	r3, [r7, #15]
 8003c3e:	e04a      	b.n	8003cd6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c40:	7bfa      	ldrb	r2, [r7, #15]
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	4613      	mov	r3, r2
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	333d      	adds	r3, #61	; 0x3d
 8003c50:	2201      	movs	r2, #1
 8003c52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c54:	7bfa      	ldrb	r2, [r7, #15]
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	333c      	adds	r3, #60	; 0x3c
 8003c64:	7bfa      	ldrb	r2, [r7, #15]
 8003c66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c68:	7bfa      	ldrb	r2, [r7, #15]
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
 8003c6c:	b298      	uxth	r0, r3
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	4613      	mov	r3, r2
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	4413      	add	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	3344      	adds	r3, #68	; 0x44
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c80:	7bfa      	ldrb	r2, [r7, #15]
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	3340      	adds	r3, #64	; 0x40
 8003c90:	2200      	movs	r2, #0
 8003c92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c94:	7bfa      	ldrb	r2, [r7, #15]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	3348      	adds	r3, #72	; 0x48
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ca8:	7bfa      	ldrb	r2, [r7, #15]
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	334c      	adds	r3, #76	; 0x4c
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003cbc:	7bfa      	ldrb	r2, [r7, #15]
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	3354      	adds	r3, #84	; 0x54
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	73fb      	strb	r3, [r7, #15]
 8003cd6:	7bfa      	ldrb	r2, [r7, #15]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d3af      	bcc.n	8003c40 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	73fb      	strb	r3, [r7, #15]
 8003ce4:	e044      	b.n	8003d70 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ce6:	7bfa      	ldrb	r2, [r7, #15]
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003cfc:	7bfa      	ldrb	r2, [r7, #15]
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4613      	mov	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003d0e:	7bfa      	ldrb	r2, [r7, #15]
 8003d10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d12:	7bfa      	ldrb	r2, [r7, #15]
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003d24:	2200      	movs	r2, #0
 8003d26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d28:	7bfa      	ldrb	r2, [r7, #15]
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	4413      	add	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d3e:	7bfa      	ldrb	r2, [r7, #15]
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d54:	7bfa      	ldrb	r2, [r7, #15]
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	73fb      	strb	r3, [r7, #15]
 8003d70:	7bfa      	ldrb	r2, [r7, #15]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d3b5      	bcc.n	8003ce6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	687e      	ldr	r6, [r7, #4]
 8003d82:	466d      	mov	r5, sp
 8003d84:	f106 0410 	add.w	r4, r6, #16
 8003d88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d94:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d98:	1d33      	adds	r3, r6, #4
 8003d9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d9c:	6838      	ldr	r0, [r7, #0]
 8003d9e:	f004 f8d9 	bl	8007f54 <USB_DevInit>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e014      	b.n	8003dde <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d102      	bne.n	8003dd2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f80b 	bl	8003de8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f004 fa97 	bl	800830a <USB_DevDisconnect>

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003de8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e16:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <HAL_PCDEx_ActivateLPM+0x44>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	10000003 	.word	0x10000003

08003e30 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e34:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a04      	ldr	r2, [pc, #16]	; (8003e4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3e:	6013      	str	r3, [r2, #0]
}
 8003e40:	bf00      	nop
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40007000 	.word	0x40007000

08003e50 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003e56:	2300      	movs	r3, #0
 8003e58:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e5a:	4b23      	ldr	r3, [pc, #140]	; (8003ee8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	4a22      	ldr	r2, [pc, #136]	; (8003ee8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e64:	6413      	str	r3, [r2, #64]	; 0x40
 8003e66:	4b20      	ldr	r3, [pc, #128]	; (8003ee8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e72:	4b1e      	ldr	r3, [pc, #120]	; (8003eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a1d      	ldr	r2, [pc, #116]	; (8003eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e7c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e7e:	f7fe fd2d 	bl	80028dc <HAL_GetTick>
 8003e82:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e84:	e009      	b.n	8003e9a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e86:	f7fe fd29 	bl	80028dc <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e94:	d901      	bls.n	8003e9a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e022      	b.n	8003ee0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e9a:	4b14      	ldr	r3, [pc, #80]	; (8003eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea6:	d1ee      	bne.n	8003e86 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ea8:	4b10      	ldr	r3, [pc, #64]	; (8003eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a0f      	ldr	r2, [pc, #60]	; (8003eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eb4:	f7fe fd12 	bl	80028dc <HAL_GetTick>
 8003eb8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003eba:	e009      	b.n	8003ed0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ebc:	f7fe fd0e 	bl	80028dc <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003eca:	d901      	bls.n	8003ed0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e007      	b.n	8003ee0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ed0:	4b06      	ldr	r3, [pc, #24]	; (8003eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003edc:	d1ee      	bne.n	8003ebc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	40007000 	.word	0x40007000

08003ef0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e29b      	b.n	800443e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 8087 	beq.w	8004022 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f14:	4b96      	ldr	r3, [pc, #600]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 030c 	and.w	r3, r3, #12
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d00c      	beq.n	8003f3a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f20:	4b93      	ldr	r3, [pc, #588]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f003 030c 	and.w	r3, r3, #12
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d112      	bne.n	8003f52 <HAL_RCC_OscConfig+0x62>
 8003f2c:	4b90      	ldr	r3, [pc, #576]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f38:	d10b      	bne.n	8003f52 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f3a:	4b8d      	ldr	r3, [pc, #564]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d06c      	beq.n	8004020 <HAL_RCC_OscConfig+0x130>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d168      	bne.n	8004020 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e275      	b.n	800443e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f5a:	d106      	bne.n	8003f6a <HAL_RCC_OscConfig+0x7a>
 8003f5c:	4b84      	ldr	r3, [pc, #528]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a83      	ldr	r2, [pc, #524]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 8003f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f66:	6013      	str	r3, [r2, #0]
 8003f68:	e02e      	b.n	8003fc8 <HAL_RCC_OscConfig+0xd8>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10c      	bne.n	8003f8c <HAL_RCC_OscConfig+0x9c>
 8003f72:	4b7f      	ldr	r3, [pc, #508]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a7e      	ldr	r2, [pc, #504]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 8003f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	4b7c      	ldr	r3, [pc, #496]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a7b      	ldr	r2, [pc, #492]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 8003f84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	e01d      	b.n	8003fc8 <HAL_RCC_OscConfig+0xd8>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f94:	d10c      	bne.n	8003fb0 <HAL_RCC_OscConfig+0xc0>
 8003f96:	4b76      	ldr	r3, [pc, #472]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a75      	ldr	r2, [pc, #468]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 8003f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	4b73      	ldr	r3, [pc, #460]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a72      	ldr	r2, [pc, #456]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 8003fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	e00b      	b.n	8003fc8 <HAL_RCC_OscConfig+0xd8>
 8003fb0:	4b6f      	ldr	r3, [pc, #444]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a6e      	ldr	r2, [pc, #440]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 8003fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fba:	6013      	str	r3, [r2, #0]
 8003fbc:	4b6c      	ldr	r3, [pc, #432]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a6b      	ldr	r2, [pc, #428]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 8003fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d013      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd0:	f7fe fc84 	bl	80028dc <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fd8:	f7fe fc80 	bl	80028dc <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b64      	cmp	r3, #100	; 0x64
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e229      	b.n	800443e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fea:	4b61      	ldr	r3, [pc, #388]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0f0      	beq.n	8003fd8 <HAL_RCC_OscConfig+0xe8>
 8003ff6:	e014      	b.n	8004022 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fe fc70 	bl	80028dc <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004000:	f7fe fc6c 	bl	80028dc <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b64      	cmp	r3, #100	; 0x64
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e215      	b.n	800443e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004012:	4b57      	ldr	r3, [pc, #348]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f0      	bne.n	8004000 <HAL_RCC_OscConfig+0x110>
 800401e:	e000      	b.n	8004022 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d069      	beq.n	8004102 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800402e:	4b50      	ldr	r3, [pc, #320]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 030c 	and.w	r3, r3, #12
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00b      	beq.n	8004052 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800403a:	4b4d      	ldr	r3, [pc, #308]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 030c 	and.w	r3, r3, #12
 8004042:	2b08      	cmp	r3, #8
 8004044:	d11c      	bne.n	8004080 <HAL_RCC_OscConfig+0x190>
 8004046:	4b4a      	ldr	r3, [pc, #296]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d116      	bne.n	8004080 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004052:	4b47      	ldr	r3, [pc, #284]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d005      	beq.n	800406a <HAL_RCC_OscConfig+0x17a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d001      	beq.n	800406a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e1e9      	b.n	800443e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406a:	4b41      	ldr	r3, [pc, #260]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	493d      	ldr	r1, [pc, #244]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 800407a:	4313      	orrs	r3, r2
 800407c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800407e:	e040      	b.n	8004102 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d023      	beq.n	80040d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004088:	4b39      	ldr	r3, [pc, #228]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a38      	ldr	r2, [pc, #224]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 800408e:	f043 0301 	orr.w	r3, r3, #1
 8004092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004094:	f7fe fc22 	bl	80028dc <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800409c:	f7fe fc1e 	bl	80028dc <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e1c7      	b.n	800443e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ae:	4b30      	ldr	r3, [pc, #192]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0f0      	beq.n	800409c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ba:	4b2d      	ldr	r3, [pc, #180]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	4929      	ldr	r1, [pc, #164]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	600b      	str	r3, [r1, #0]
 80040ce:	e018      	b.n	8004102 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040d0:	4b27      	ldr	r3, [pc, #156]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a26      	ldr	r2, [pc, #152]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 80040d6:	f023 0301 	bic.w	r3, r3, #1
 80040da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040dc:	f7fe fbfe 	bl	80028dc <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040e4:	f7fe fbfa 	bl	80028dc <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e1a3      	b.n	800443e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040f6:	4b1e      	ldr	r3, [pc, #120]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1f0      	bne.n	80040e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0308 	and.w	r3, r3, #8
 800410a:	2b00      	cmp	r3, #0
 800410c:	d038      	beq.n	8004180 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d019      	beq.n	800414a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004116:	4b16      	ldr	r3, [pc, #88]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 8004118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800411a:	4a15      	ldr	r2, [pc, #84]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004122:	f7fe fbdb 	bl	80028dc <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800412a:	f7fe fbd7 	bl	80028dc <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e180      	b.n	800443e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800413c:	4b0c      	ldr	r3, [pc, #48]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 800413e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0f0      	beq.n	800412a <HAL_RCC_OscConfig+0x23a>
 8004148:	e01a      	b.n	8004180 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800414a:	4b09      	ldr	r3, [pc, #36]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 800414c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800414e:	4a08      	ldr	r2, [pc, #32]	; (8004170 <HAL_RCC_OscConfig+0x280>)
 8004150:	f023 0301 	bic.w	r3, r3, #1
 8004154:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004156:	f7fe fbc1 	bl	80028dc <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800415c:	e00a      	b.n	8004174 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800415e:	f7fe fbbd 	bl	80028dc <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d903      	bls.n	8004174 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e166      	b.n	800443e <HAL_RCC_OscConfig+0x54e>
 8004170:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004174:	4b92      	ldr	r3, [pc, #584]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 8004176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1ee      	bne.n	800415e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 80a4 	beq.w	80042d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800418e:	4b8c      	ldr	r3, [pc, #560]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10d      	bne.n	80041b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800419a:	4b89      	ldr	r3, [pc, #548]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	4a88      	ldr	r2, [pc, #544]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 80041a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a4:	6413      	str	r3, [r2, #64]	; 0x40
 80041a6:	4b86      	ldr	r3, [pc, #536]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ae:	60bb      	str	r3, [r7, #8]
 80041b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041b2:	2301      	movs	r3, #1
 80041b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041b6:	4b83      	ldr	r3, [pc, #524]	; (80043c4 <HAL_RCC_OscConfig+0x4d4>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d118      	bne.n	80041f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80041c2:	4b80      	ldr	r3, [pc, #512]	; (80043c4 <HAL_RCC_OscConfig+0x4d4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a7f      	ldr	r2, [pc, #508]	; (80043c4 <HAL_RCC_OscConfig+0x4d4>)
 80041c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ce:	f7fe fb85 	bl	80028dc <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d6:	f7fe fb81 	bl	80028dc <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b64      	cmp	r3, #100	; 0x64
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e12a      	b.n	800443e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041e8:	4b76      	ldr	r3, [pc, #472]	; (80043c4 <HAL_RCC_OscConfig+0x4d4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0f0      	beq.n	80041d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d106      	bne.n	800420a <HAL_RCC_OscConfig+0x31a>
 80041fc:	4b70      	ldr	r3, [pc, #448]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 80041fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004200:	4a6f      	ldr	r2, [pc, #444]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 8004202:	f043 0301 	orr.w	r3, r3, #1
 8004206:	6713      	str	r3, [r2, #112]	; 0x70
 8004208:	e02d      	b.n	8004266 <HAL_RCC_OscConfig+0x376>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10c      	bne.n	800422c <HAL_RCC_OscConfig+0x33c>
 8004212:	4b6b      	ldr	r3, [pc, #428]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	4a6a      	ldr	r2, [pc, #424]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 8004218:	f023 0301 	bic.w	r3, r3, #1
 800421c:	6713      	str	r3, [r2, #112]	; 0x70
 800421e:	4b68      	ldr	r3, [pc, #416]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	4a67      	ldr	r2, [pc, #412]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 8004224:	f023 0304 	bic.w	r3, r3, #4
 8004228:	6713      	str	r3, [r2, #112]	; 0x70
 800422a:	e01c      	b.n	8004266 <HAL_RCC_OscConfig+0x376>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b05      	cmp	r3, #5
 8004232:	d10c      	bne.n	800424e <HAL_RCC_OscConfig+0x35e>
 8004234:	4b62      	ldr	r3, [pc, #392]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 8004236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004238:	4a61      	ldr	r2, [pc, #388]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 800423a:	f043 0304 	orr.w	r3, r3, #4
 800423e:	6713      	str	r3, [r2, #112]	; 0x70
 8004240:	4b5f      	ldr	r3, [pc, #380]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 8004242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004244:	4a5e      	ldr	r2, [pc, #376]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	6713      	str	r3, [r2, #112]	; 0x70
 800424c:	e00b      	b.n	8004266 <HAL_RCC_OscConfig+0x376>
 800424e:	4b5c      	ldr	r3, [pc, #368]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	4a5b      	ldr	r2, [pc, #364]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 8004254:	f023 0301 	bic.w	r3, r3, #1
 8004258:	6713      	str	r3, [r2, #112]	; 0x70
 800425a:	4b59      	ldr	r3, [pc, #356]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 800425c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425e:	4a58      	ldr	r2, [pc, #352]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 8004260:	f023 0304 	bic.w	r3, r3, #4
 8004264:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d015      	beq.n	800429a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800426e:	f7fe fb35 	bl	80028dc <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004274:	e00a      	b.n	800428c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004276:	f7fe fb31 	bl	80028dc <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	f241 3288 	movw	r2, #5000	; 0x1388
 8004284:	4293      	cmp	r3, r2
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e0d8      	b.n	800443e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800428c:	4b4c      	ldr	r3, [pc, #304]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 800428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0ee      	beq.n	8004276 <HAL_RCC_OscConfig+0x386>
 8004298:	e014      	b.n	80042c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429a:	f7fe fb1f 	bl	80028dc <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a0:	e00a      	b.n	80042b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a2:	f7fe fb1b 	bl	80028dc <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e0c2      	b.n	800443e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042b8:	4b41      	ldr	r3, [pc, #260]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 80042ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1ee      	bne.n	80042a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042c4:	7dfb      	ldrb	r3, [r7, #23]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d105      	bne.n	80042d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ca:	4b3d      	ldr	r3, [pc, #244]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	4a3c      	ldr	r2, [pc, #240]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 80042d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 80ae 	beq.w	800443c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042e0:	4b37      	ldr	r3, [pc, #220]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 030c 	and.w	r3, r3, #12
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d06d      	beq.n	80043c8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d14b      	bne.n	800438c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f4:	4b32      	ldr	r3, [pc, #200]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a31      	ldr	r2, [pc, #196]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 80042fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7fe faec 	bl	80028dc <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004308:	f7fe fae8 	bl	80028dc <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e091      	b.n	800443e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431a:	4b29      	ldr	r3, [pc, #164]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f0      	bne.n	8004308 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69da      	ldr	r2, [r3, #28]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	019b      	lsls	r3, r3, #6
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433c:	085b      	lsrs	r3, r3, #1
 800433e:	3b01      	subs	r3, #1
 8004340:	041b      	lsls	r3, r3, #16
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	061b      	lsls	r3, r3, #24
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004350:	071b      	lsls	r3, r3, #28
 8004352:	491b      	ldr	r1, [pc, #108]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 8004354:	4313      	orrs	r3, r2
 8004356:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004358:	4b19      	ldr	r3, [pc, #100]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a18      	ldr	r2, [pc, #96]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 800435e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004364:	f7fe faba 	bl	80028dc <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800436c:	f7fe fab6 	bl	80028dc <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e05f      	b.n	800443e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437e:	4b10      	ldr	r3, [pc, #64]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0f0      	beq.n	800436c <HAL_RCC_OscConfig+0x47c>
 800438a:	e057      	b.n	800443c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438c:	4b0c      	ldr	r3, [pc, #48]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a0b      	ldr	r2, [pc, #44]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 8004392:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7fe faa0 	bl	80028dc <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fe fa9c 	bl	80028dc <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e045      	b.n	800443e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b2:	4b03      	ldr	r3, [pc, #12]	; (80043c0 <HAL_RCC_OscConfig+0x4d0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x4b0>
 80043be:	e03d      	b.n	800443c <HAL_RCC_OscConfig+0x54c>
 80043c0:	40023800 	.word	0x40023800
 80043c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80043c8:	4b1f      	ldr	r3, [pc, #124]	; (8004448 <HAL_RCC_OscConfig+0x558>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d030      	beq.n	8004438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d129      	bne.n	8004438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d122      	bne.n	8004438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043f8:	4013      	ands	r3, r2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004400:	4293      	cmp	r3, r2
 8004402:	d119      	bne.n	8004438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	085b      	lsrs	r3, r3, #1
 8004410:	3b01      	subs	r3, #1
 8004412:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004414:	429a      	cmp	r2, r3
 8004416:	d10f      	bne.n	8004438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004422:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004424:	429a      	cmp	r2, r3
 8004426:	d107      	bne.n	8004438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004432:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004434:	429a      	cmp	r2, r3
 8004436:	d001      	beq.n	800443c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40023800 	.word	0x40023800

0800444c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e0d0      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004464:	4b6a      	ldr	r3, [pc, #424]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 030f 	and.w	r3, r3, #15
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d910      	bls.n	8004494 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004472:	4b67      	ldr	r3, [pc, #412]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f023 020f 	bic.w	r2, r3, #15
 800447a:	4965      	ldr	r1, [pc, #404]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	4313      	orrs	r3, r2
 8004480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004482:	4b63      	ldr	r3, [pc, #396]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	429a      	cmp	r2, r3
 800448e:	d001      	beq.n	8004494 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e0b8      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d020      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d005      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044ac:	4b59      	ldr	r3, [pc, #356]	; (8004614 <HAL_RCC_ClockConfig+0x1c8>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	4a58      	ldr	r2, [pc, #352]	; (8004614 <HAL_RCC_ClockConfig+0x1c8>)
 80044b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d005      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044c4:	4b53      	ldr	r3, [pc, #332]	; (8004614 <HAL_RCC_ClockConfig+0x1c8>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	4a52      	ldr	r2, [pc, #328]	; (8004614 <HAL_RCC_ClockConfig+0x1c8>)
 80044ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d0:	4b50      	ldr	r3, [pc, #320]	; (8004614 <HAL_RCC_ClockConfig+0x1c8>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	494d      	ldr	r1, [pc, #308]	; (8004614 <HAL_RCC_ClockConfig+0x1c8>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d040      	beq.n	8004570 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d107      	bne.n	8004506 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f6:	4b47      	ldr	r3, [pc, #284]	; (8004614 <HAL_RCC_ClockConfig+0x1c8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d115      	bne.n	800452e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e07f      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d107      	bne.n	800451e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800450e:	4b41      	ldr	r3, [pc, #260]	; (8004614 <HAL_RCC_ClockConfig+0x1c8>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d109      	bne.n	800452e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e073      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800451e:	4b3d      	ldr	r3, [pc, #244]	; (8004614 <HAL_RCC_ClockConfig+0x1c8>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e06b      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800452e:	4b39      	ldr	r3, [pc, #228]	; (8004614 <HAL_RCC_ClockConfig+0x1c8>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f023 0203 	bic.w	r2, r3, #3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	4936      	ldr	r1, [pc, #216]	; (8004614 <HAL_RCC_ClockConfig+0x1c8>)
 800453c:	4313      	orrs	r3, r2
 800453e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004540:	f7fe f9cc 	bl	80028dc <HAL_GetTick>
 8004544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004546:	e00a      	b.n	800455e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004548:	f7fe f9c8 	bl	80028dc <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f241 3288 	movw	r2, #5000	; 0x1388
 8004556:	4293      	cmp	r3, r2
 8004558:	d901      	bls.n	800455e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e053      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455e:	4b2d      	ldr	r3, [pc, #180]	; (8004614 <HAL_RCC_ClockConfig+0x1c8>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 020c 	and.w	r2, r3, #12
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	429a      	cmp	r2, r3
 800456e:	d1eb      	bne.n	8004548 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004570:	4b27      	ldr	r3, [pc, #156]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 030f 	and.w	r3, r3, #15
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d210      	bcs.n	80045a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457e:	4b24      	ldr	r3, [pc, #144]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 020f 	bic.w	r2, r3, #15
 8004586:	4922      	ldr	r1, [pc, #136]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	4313      	orrs	r3, r2
 800458c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800458e:	4b20      	ldr	r3, [pc, #128]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d001      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e032      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d008      	beq.n	80045be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045ac:	4b19      	ldr	r3, [pc, #100]	; (8004614 <HAL_RCC_ClockConfig+0x1c8>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4916      	ldr	r1, [pc, #88]	; (8004614 <HAL_RCC_ClockConfig+0x1c8>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d009      	beq.n	80045de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045ca:	4b12      	ldr	r3, [pc, #72]	; (8004614 <HAL_RCC_ClockConfig+0x1c8>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	490e      	ldr	r1, [pc, #56]	; (8004614 <HAL_RCC_ClockConfig+0x1c8>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045de:	f000 f821 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 80045e2:	4602      	mov	r2, r0
 80045e4:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <HAL_RCC_ClockConfig+0x1c8>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	091b      	lsrs	r3, r3, #4
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	490a      	ldr	r1, [pc, #40]	; (8004618 <HAL_RCC_ClockConfig+0x1cc>)
 80045f0:	5ccb      	ldrb	r3, [r1, r3]
 80045f2:	fa22 f303 	lsr.w	r3, r2, r3
 80045f6:	4a09      	ldr	r2, [pc, #36]	; (800461c <HAL_RCC_ClockConfig+0x1d0>)
 80045f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045fa:	4b09      	ldr	r3, [pc, #36]	; (8004620 <HAL_RCC_ClockConfig+0x1d4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fe f928 	bl	8002854 <HAL_InitTick>

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	40023c00 	.word	0x40023c00
 8004614:	40023800 	.word	0x40023800
 8004618:	0800b3b8 	.word	0x0800b3b8
 800461c:	20000000 	.word	0x20000000
 8004620:	200004c0 	.word	0x200004c0

08004624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004628:	b094      	sub	sp, #80	; 0x50
 800462a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	647b      	str	r3, [r7, #68]	; 0x44
 8004630:	2300      	movs	r3, #0
 8004632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004634:	2300      	movs	r3, #0
 8004636:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004638:	2300      	movs	r3, #0
 800463a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800463c:	4b79      	ldr	r3, [pc, #484]	; (8004824 <HAL_RCC_GetSysClockFreq+0x200>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 030c 	and.w	r3, r3, #12
 8004644:	2b08      	cmp	r3, #8
 8004646:	d00d      	beq.n	8004664 <HAL_RCC_GetSysClockFreq+0x40>
 8004648:	2b08      	cmp	r3, #8
 800464a:	f200 80e1 	bhi.w	8004810 <HAL_RCC_GetSysClockFreq+0x1ec>
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <HAL_RCC_GetSysClockFreq+0x34>
 8004652:	2b04      	cmp	r3, #4
 8004654:	d003      	beq.n	800465e <HAL_RCC_GetSysClockFreq+0x3a>
 8004656:	e0db      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004658:	4b73      	ldr	r3, [pc, #460]	; (8004828 <HAL_RCC_GetSysClockFreq+0x204>)
 800465a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800465c:	e0db      	b.n	8004816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800465e:	4b73      	ldr	r3, [pc, #460]	; (800482c <HAL_RCC_GetSysClockFreq+0x208>)
 8004660:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004662:	e0d8      	b.n	8004816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004664:	4b6f      	ldr	r3, [pc, #444]	; (8004824 <HAL_RCC_GetSysClockFreq+0x200>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800466c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800466e:	4b6d      	ldr	r3, [pc, #436]	; (8004824 <HAL_RCC_GetSysClockFreq+0x200>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d063      	beq.n	8004742 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800467a:	4b6a      	ldr	r3, [pc, #424]	; (8004824 <HAL_RCC_GetSysClockFreq+0x200>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	099b      	lsrs	r3, r3, #6
 8004680:	2200      	movs	r2, #0
 8004682:	63bb      	str	r3, [r7, #56]	; 0x38
 8004684:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800468c:	633b      	str	r3, [r7, #48]	; 0x30
 800468e:	2300      	movs	r3, #0
 8004690:	637b      	str	r3, [r7, #52]	; 0x34
 8004692:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004696:	4622      	mov	r2, r4
 8004698:	462b      	mov	r3, r5
 800469a:	f04f 0000 	mov.w	r0, #0
 800469e:	f04f 0100 	mov.w	r1, #0
 80046a2:	0159      	lsls	r1, r3, #5
 80046a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046a8:	0150      	lsls	r0, r2, #5
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4621      	mov	r1, r4
 80046b0:	1a51      	subs	r1, r2, r1
 80046b2:	6139      	str	r1, [r7, #16]
 80046b4:	4629      	mov	r1, r5
 80046b6:	eb63 0301 	sbc.w	r3, r3, r1
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046c8:	4659      	mov	r1, fp
 80046ca:	018b      	lsls	r3, r1, #6
 80046cc:	4651      	mov	r1, sl
 80046ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046d2:	4651      	mov	r1, sl
 80046d4:	018a      	lsls	r2, r1, #6
 80046d6:	4651      	mov	r1, sl
 80046d8:	ebb2 0801 	subs.w	r8, r2, r1
 80046dc:	4659      	mov	r1, fp
 80046de:	eb63 0901 	sbc.w	r9, r3, r1
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	f04f 0300 	mov.w	r3, #0
 80046ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046f6:	4690      	mov	r8, r2
 80046f8:	4699      	mov	r9, r3
 80046fa:	4623      	mov	r3, r4
 80046fc:	eb18 0303 	adds.w	r3, r8, r3
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	462b      	mov	r3, r5
 8004704:	eb49 0303 	adc.w	r3, r9, r3
 8004708:	60fb      	str	r3, [r7, #12]
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	f04f 0300 	mov.w	r3, #0
 8004712:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004716:	4629      	mov	r1, r5
 8004718:	024b      	lsls	r3, r1, #9
 800471a:	4621      	mov	r1, r4
 800471c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004720:	4621      	mov	r1, r4
 8004722:	024a      	lsls	r2, r1, #9
 8004724:	4610      	mov	r0, r2
 8004726:	4619      	mov	r1, r3
 8004728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800472a:	2200      	movs	r2, #0
 800472c:	62bb      	str	r3, [r7, #40]	; 0x28
 800472e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004730:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004734:	f7fb fddc 	bl	80002f0 <__aeabi_uldivmod>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4613      	mov	r3, r2
 800473e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004740:	e058      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004742:	4b38      	ldr	r3, [pc, #224]	; (8004824 <HAL_RCC_GetSysClockFreq+0x200>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	099b      	lsrs	r3, r3, #6
 8004748:	2200      	movs	r2, #0
 800474a:	4618      	mov	r0, r3
 800474c:	4611      	mov	r1, r2
 800474e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004752:	623b      	str	r3, [r7, #32]
 8004754:	2300      	movs	r3, #0
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
 8004758:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800475c:	4642      	mov	r2, r8
 800475e:	464b      	mov	r3, r9
 8004760:	f04f 0000 	mov.w	r0, #0
 8004764:	f04f 0100 	mov.w	r1, #0
 8004768:	0159      	lsls	r1, r3, #5
 800476a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800476e:	0150      	lsls	r0, r2, #5
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	4641      	mov	r1, r8
 8004776:	ebb2 0a01 	subs.w	sl, r2, r1
 800477a:	4649      	mov	r1, r9
 800477c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800478c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004790:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004794:	ebb2 040a 	subs.w	r4, r2, sl
 8004798:	eb63 050b 	sbc.w	r5, r3, fp
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	00eb      	lsls	r3, r5, #3
 80047a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047aa:	00e2      	lsls	r2, r4, #3
 80047ac:	4614      	mov	r4, r2
 80047ae:	461d      	mov	r5, r3
 80047b0:	4643      	mov	r3, r8
 80047b2:	18e3      	adds	r3, r4, r3
 80047b4:	603b      	str	r3, [r7, #0]
 80047b6:	464b      	mov	r3, r9
 80047b8:	eb45 0303 	adc.w	r3, r5, r3
 80047bc:	607b      	str	r3, [r7, #4]
 80047be:	f04f 0200 	mov.w	r2, #0
 80047c2:	f04f 0300 	mov.w	r3, #0
 80047c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047ca:	4629      	mov	r1, r5
 80047cc:	028b      	lsls	r3, r1, #10
 80047ce:	4621      	mov	r1, r4
 80047d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047d4:	4621      	mov	r1, r4
 80047d6:	028a      	lsls	r2, r1, #10
 80047d8:	4610      	mov	r0, r2
 80047da:	4619      	mov	r1, r3
 80047dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047de:	2200      	movs	r2, #0
 80047e0:	61bb      	str	r3, [r7, #24]
 80047e2:	61fa      	str	r2, [r7, #28]
 80047e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047e8:	f7fb fd82 	bl	80002f0 <__aeabi_uldivmod>
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	4613      	mov	r3, r2
 80047f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80047f4:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <HAL_RCC_GetSysClockFreq+0x200>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	0c1b      	lsrs	r3, r3, #16
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	3301      	adds	r3, #1
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004804:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004808:	fbb2 f3f3 	udiv	r3, r2, r3
 800480c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800480e:	e002      	b.n	8004816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004810:	4b05      	ldr	r3, [pc, #20]	; (8004828 <HAL_RCC_GetSysClockFreq+0x204>)
 8004812:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004818:	4618      	mov	r0, r3
 800481a:	3750      	adds	r7, #80	; 0x50
 800481c:	46bd      	mov	sp, r7
 800481e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004822:	bf00      	nop
 8004824:	40023800 	.word	0x40023800
 8004828:	00f42400 	.word	0x00f42400
 800482c:	007a1200 	.word	0x007a1200

08004830 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004834:	4b03      	ldr	r3, [pc, #12]	; (8004844 <HAL_RCC_GetHCLKFreq+0x14>)
 8004836:	681b      	ldr	r3, [r3, #0]
}
 8004838:	4618      	mov	r0, r3
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	20000000 	.word	0x20000000

08004848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800484c:	f7ff fff0 	bl	8004830 <HAL_RCC_GetHCLKFreq>
 8004850:	4602      	mov	r2, r0
 8004852:	4b05      	ldr	r3, [pc, #20]	; (8004868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	0a9b      	lsrs	r3, r3, #10
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	4903      	ldr	r1, [pc, #12]	; (800486c <HAL_RCC_GetPCLK1Freq+0x24>)
 800485e:	5ccb      	ldrb	r3, [r1, r3]
 8004860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004864:	4618      	mov	r0, r3
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40023800 	.word	0x40023800
 800486c:	0800b3c8 	.word	0x0800b3c8

08004870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004874:	f7ff ffdc 	bl	8004830 <HAL_RCC_GetHCLKFreq>
 8004878:	4602      	mov	r2, r0
 800487a:	4b05      	ldr	r3, [pc, #20]	; (8004890 <HAL_RCC_GetPCLK2Freq+0x20>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	0b5b      	lsrs	r3, r3, #13
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	4903      	ldr	r1, [pc, #12]	; (8004894 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004886:	5ccb      	ldrb	r3, [r1, r3]
 8004888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800488c:	4618      	mov	r0, r3
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40023800 	.word	0x40023800
 8004894:	0800b3c8 	.word	0x0800b3c8

08004898 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b088      	sub	sp, #32
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80048a0:	2300      	movs	r3, #0
 80048a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80048a4:	2300      	movs	r3, #0
 80048a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80048a8:	2300      	movs	r3, #0
 80048aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80048ac:	2300      	movs	r3, #0
 80048ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d012      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80048c0:	4b69      	ldr	r3, [pc, #420]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	4a68      	ldr	r2, [pc, #416]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80048ca:	6093      	str	r3, [r2, #8]
 80048cc:	4b66      	ldr	r3, [pc, #408]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d4:	4964      	ldr	r1, [pc, #400]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80048e2:	2301      	movs	r3, #1
 80048e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d017      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048f2:	4b5d      	ldr	r3, [pc, #372]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004900:	4959      	ldr	r1, [pc, #356]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004910:	d101      	bne.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004912:	2301      	movs	r3, #1
 8004914:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800491e:	2301      	movs	r3, #1
 8004920:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d017      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800492e:	4b4e      	ldr	r3, [pc, #312]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004934:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493c:	494a      	ldr	r1, [pc, #296]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800493e:	4313      	orrs	r3, r2
 8004940:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800494c:	d101      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800494e:	2301      	movs	r3, #1
 8004950:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800495a:	2301      	movs	r3, #1
 800495c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800496a:	2301      	movs	r3, #1
 800496c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0320 	and.w	r3, r3, #32
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 808b 	beq.w	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800497c:	4b3a      	ldr	r3, [pc, #232]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	4a39      	ldr	r2, [pc, #228]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004986:	6413      	str	r3, [r2, #64]	; 0x40
 8004988:	4b37      	ldr	r3, [pc, #220]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004990:	60bb      	str	r3, [r7, #8]
 8004992:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004994:	4b35      	ldr	r3, [pc, #212]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a34      	ldr	r2, [pc, #208]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800499a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800499e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a0:	f7fd ff9c 	bl	80028dc <HAL_GetTick>
 80049a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a8:	f7fd ff98 	bl	80028dc <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b64      	cmp	r3, #100	; 0x64
 80049b4:	d901      	bls.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e38f      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80049ba:	4b2c      	ldr	r3, [pc, #176]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0f0      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049c6:	4b28      	ldr	r3, [pc, #160]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d035      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d02e      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049e4:	4b20      	ldr	r3, [pc, #128]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049ee:	4b1e      	ldr	r3, [pc, #120]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f2:	4a1d      	ldr	r2, [pc, #116]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049fa:	4b1b      	ldr	r3, [pc, #108]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fe:	4a1a      	ldr	r2, [pc, #104]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004a06:	4a18      	ldr	r2, [pc, #96]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a0c:	4b16      	ldr	r3, [pc, #88]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d114      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a18:	f7fd ff60 	bl	80028dc <HAL_GetTick>
 8004a1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a1e:	e00a      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a20:	f7fd ff5c 	bl	80028dc <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e351      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a36:	4b0c      	ldr	r3, [pc, #48]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0ee      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a4e:	d111      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004a50:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a5c:	4b04      	ldr	r3, [pc, #16]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004a5e:	400b      	ands	r3, r1
 8004a60:	4901      	ldr	r1, [pc, #4]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	608b      	str	r3, [r1, #8]
 8004a66:	e00b      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	40007000 	.word	0x40007000
 8004a70:	0ffffcff 	.word	0x0ffffcff
 8004a74:	4bac      	ldr	r3, [pc, #688]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	4aab      	ldr	r2, [pc, #684]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a7a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a7e:	6093      	str	r3, [r2, #8]
 8004a80:	4ba9      	ldr	r3, [pc, #676]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a8c:	49a6      	ldr	r1, [pc, #664]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0310 	and.w	r3, r3, #16
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d010      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a9e:	4ba2      	ldr	r3, [pc, #648]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aa4:	4aa0      	ldr	r2, [pc, #640]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aaa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004aae:	4b9e      	ldr	r3, [pc, #632]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ab0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	499b      	ldr	r1, [pc, #620]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00a      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004acc:	4b96      	ldr	r3, [pc, #600]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ada:	4993      	ldr	r1, [pc, #588]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004aee:	4b8e      	ldr	r3, [pc, #568]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004afc:	498a      	ldr	r1, [pc, #552]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00a      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b10:	4b85      	ldr	r3, [pc, #532]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b1e:	4982      	ldr	r1, [pc, #520]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b32:	4b7d      	ldr	r3, [pc, #500]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b40:	4979      	ldr	r1, [pc, #484]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00a      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b54:	4b74      	ldr	r3, [pc, #464]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5a:	f023 0203 	bic.w	r2, r3, #3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b62:	4971      	ldr	r1, [pc, #452]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b76:	4b6c      	ldr	r3, [pc, #432]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7c:	f023 020c 	bic.w	r2, r3, #12
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b84:	4968      	ldr	r1, [pc, #416]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b98:	4b63      	ldr	r3, [pc, #396]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba6:	4960      	ldr	r1, [pc, #384]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004bba:	4b5b      	ldr	r3, [pc, #364]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc8:	4957      	ldr	r1, [pc, #348]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004bdc:	4b52      	ldr	r3, [pc, #328]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bea:	494f      	ldr	r1, [pc, #316]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004bfe:	4b4a      	ldr	r3, [pc, #296]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c04:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0c:	4946      	ldr	r1, [pc, #280]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004c20:	4b41      	ldr	r3, [pc, #260]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2e:	493e      	ldr	r1, [pc, #248]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004c42:	4b39      	ldr	r3, [pc, #228]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c50:	4935      	ldr	r1, [pc, #212]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c64:	4b30      	ldr	r3, [pc, #192]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c72:	492d      	ldr	r1, [pc, #180]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d011      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c86:	4b28      	ldr	r3, [pc, #160]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c94:	4924      	ldr	r1, [pc, #144]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ca0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ca4:	d101      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0308 	and.w	r3, r3, #8
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cc6:	4b18      	ldr	r3, [pc, #96]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ccc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd4:	4914      	ldr	r1, [pc, #80]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00b      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ce8:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cf8:	490b      	ldr	r1, [pc, #44]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00f      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004d0c:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d12:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d1c:	4902      	ldr	r1, [pc, #8]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d24:	e002      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004d26:	bf00      	nop
 8004d28:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00b      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d38:	4b8a      	ldr	r3, [pc, #552]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d3e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d48:	4986      	ldr	r1, [pc, #536]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00b      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004d5c:	4b81      	ldr	r3, [pc, #516]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d62:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d6c:	497d      	ldr	r1, [pc, #500]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d006      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 80d6 	beq.w	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d88:	4b76      	ldr	r3, [pc, #472]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a75      	ldr	r2, [pc, #468]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d94:	f7fd fda2 	bl	80028dc <HAL_GetTick>
 8004d98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d9a:	e008      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d9c:	f7fd fd9e 	bl	80028dc <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b64      	cmp	r3, #100	; 0x64
 8004da8:	d901      	bls.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e195      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dae:	4b6d      	ldr	r3, [pc, #436]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1f0      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d021      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d11d      	bne.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004dce:	4b65      	ldr	r3, [pc, #404]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dd4:	0c1b      	lsrs	r3, r3, #16
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ddc:	4b61      	ldr	r3, [pc, #388]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004de2:	0e1b      	lsrs	r3, r3, #24
 8004de4:	f003 030f 	and.w	r3, r3, #15
 8004de8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	019a      	lsls	r2, r3, #6
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	041b      	lsls	r3, r3, #16
 8004df4:	431a      	orrs	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	061b      	lsls	r3, r3, #24
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	071b      	lsls	r3, r3, #28
 8004e02:	4958      	ldr	r1, [pc, #352]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d004      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e1e:	d00a      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d02e      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e34:	d129      	bne.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e36:	4b4b      	ldr	r3, [pc, #300]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e3c:	0c1b      	lsrs	r3, r3, #16
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e44:	4b47      	ldr	r3, [pc, #284]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e4a:	0f1b      	lsrs	r3, r3, #28
 8004e4c:	f003 0307 	and.w	r3, r3, #7
 8004e50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	019a      	lsls	r2, r3, #6
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	041b      	lsls	r3, r3, #16
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	061b      	lsls	r3, r3, #24
 8004e64:	431a      	orrs	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	071b      	lsls	r3, r3, #28
 8004e6a:	493e      	ldr	r1, [pc, #248]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e72:	4b3c      	ldr	r3, [pc, #240]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e78:	f023 021f 	bic.w	r2, r3, #31
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	3b01      	subs	r3, #1
 8004e82:	4938      	ldr	r1, [pc, #224]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d01d      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e96:	4b33      	ldr	r3, [pc, #204]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e9c:	0e1b      	lsrs	r3, r3, #24
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ea4:	4b2f      	ldr	r3, [pc, #188]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eaa:	0f1b      	lsrs	r3, r3, #28
 8004eac:	f003 0307 	and.w	r3, r3, #7
 8004eb0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	019a      	lsls	r2, r3, #6
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	041b      	lsls	r3, r3, #16
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	061b      	lsls	r3, r3, #24
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	071b      	lsls	r3, r3, #28
 8004eca:	4926      	ldr	r1, [pc, #152]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d011      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	019a      	lsls	r2, r3, #6
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	041b      	lsls	r3, r3, #16
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	061b      	lsls	r3, r3, #24
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	071b      	lsls	r3, r3, #28
 8004efa:	491a      	ldr	r1, [pc, #104]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f02:	4b18      	ldr	r3, [pc, #96]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a17      	ldr	r2, [pc, #92]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f0e:	f7fd fce5 	bl	80028dc <HAL_GetTick>
 8004f12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f14:	e008      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f16:	f7fd fce1 	bl	80028dc <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b64      	cmp	r3, #100	; 0x64
 8004f22:	d901      	bls.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e0d8      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f28:	4b0e      	ldr	r3, [pc, #56]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0f0      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	f040 80ce 	bne.w	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004f3c:	4b09      	ldr	r3, [pc, #36]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a08      	ldr	r2, [pc, #32]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f48:	f7fd fcc8 	bl	80028dc <HAL_GetTick>
 8004f4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f4e:	e00b      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f50:	f7fd fcc4 	bl	80028dc <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b64      	cmp	r3, #100	; 0x64
 8004f5c:	d904      	bls.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e0bb      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004f62:	bf00      	nop
 8004f64:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f68:	4b5e      	ldr	r3, [pc, #376]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f74:	d0ec      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d009      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d02e      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d12a      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f9e:	4b51      	ldr	r3, [pc, #324]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa4:	0c1b      	lsrs	r3, r3, #16
 8004fa6:	f003 0303 	and.w	r3, r3, #3
 8004faa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fac:	4b4d      	ldr	r3, [pc, #308]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb2:	0f1b      	lsrs	r3, r3, #28
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	019a      	lsls	r2, r3, #6
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	041b      	lsls	r3, r3, #16
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	061b      	lsls	r3, r3, #24
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	071b      	lsls	r3, r3, #28
 8004fd2:	4944      	ldr	r1, [pc, #272]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004fda:	4b42      	ldr	r3, [pc, #264]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fe0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	021b      	lsls	r3, r3, #8
 8004fec:	493d      	ldr	r1, [pc, #244]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d022      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005008:	d11d      	bne.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800500a:	4b36      	ldr	r3, [pc, #216]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800500c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005010:	0e1b      	lsrs	r3, r3, #24
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005018:	4b32      	ldr	r3, [pc, #200]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800501a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501e:	0f1b      	lsrs	r3, r3, #28
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	019a      	lsls	r2, r3, #6
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	041b      	lsls	r3, r3, #16
 8005032:	431a      	orrs	r2, r3
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	061b      	lsls	r3, r3, #24
 8005038:	431a      	orrs	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	071b      	lsls	r3, r3, #28
 800503e:	4929      	ldr	r1, [pc, #164]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005040:	4313      	orrs	r3, r2
 8005042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0308 	and.w	r3, r3, #8
 800504e:	2b00      	cmp	r3, #0
 8005050:	d028      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005052:	4b24      	ldr	r3, [pc, #144]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005058:	0e1b      	lsrs	r3, r3, #24
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005060:	4b20      	ldr	r3, [pc, #128]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005066:	0c1b      	lsrs	r3, r3, #16
 8005068:	f003 0303 	and.w	r3, r3, #3
 800506c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	019a      	lsls	r2, r3, #6
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	041b      	lsls	r3, r3, #16
 8005078:	431a      	orrs	r2, r3
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	061b      	lsls	r3, r3, #24
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	071b      	lsls	r3, r3, #28
 8005086:	4917      	ldr	r1, [pc, #92]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005088:	4313      	orrs	r3, r2
 800508a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800508e:	4b15      	ldr	r3, [pc, #84]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005094:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509c:	4911      	ldr	r1, [pc, #68]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80050a4:	4b0f      	ldr	r3, [pc, #60]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a0e      	ldr	r2, [pc, #56]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050b0:	f7fd fc14 	bl	80028dc <HAL_GetTick>
 80050b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050b6:	e008      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050b8:	f7fd fc10 	bl	80028dc <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b64      	cmp	r3, #100	; 0x64
 80050c4:	d901      	bls.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e007      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050ca:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050d6:	d1ef      	bne.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3720      	adds	r7, #32
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	40023800 	.word	0x40023800

080050e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e049      	b.n	800518e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d106      	bne.n	8005114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fc f9ba 	bl	8001488 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3304      	adds	r3, #4
 8005124:	4619      	mov	r1, r3
 8005126:	4610      	mov	r0, r2
 8005128:	f000 fdc8 	bl	8005cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
	...

08005198 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d001      	beq.n	80051b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e04c      	b.n	800524a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a26      	ldr	r2, [pc, #152]	; (8005258 <HAL_TIM_Base_Start+0xc0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d022      	beq.n	8005208 <HAL_TIM_Base_Start+0x70>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ca:	d01d      	beq.n	8005208 <HAL_TIM_Base_Start+0x70>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a22      	ldr	r2, [pc, #136]	; (800525c <HAL_TIM_Base_Start+0xc4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d018      	beq.n	8005208 <HAL_TIM_Base_Start+0x70>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a21      	ldr	r2, [pc, #132]	; (8005260 <HAL_TIM_Base_Start+0xc8>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d013      	beq.n	8005208 <HAL_TIM_Base_Start+0x70>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a1f      	ldr	r2, [pc, #124]	; (8005264 <HAL_TIM_Base_Start+0xcc>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d00e      	beq.n	8005208 <HAL_TIM_Base_Start+0x70>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a1e      	ldr	r2, [pc, #120]	; (8005268 <HAL_TIM_Base_Start+0xd0>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d009      	beq.n	8005208 <HAL_TIM_Base_Start+0x70>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1c      	ldr	r2, [pc, #112]	; (800526c <HAL_TIM_Base_Start+0xd4>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d004      	beq.n	8005208 <HAL_TIM_Base_Start+0x70>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a1b      	ldr	r2, [pc, #108]	; (8005270 <HAL_TIM_Base_Start+0xd8>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d115      	bne.n	8005234 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	4b19      	ldr	r3, [pc, #100]	; (8005274 <HAL_TIM_Base_Start+0xdc>)
 8005210:	4013      	ands	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b06      	cmp	r3, #6
 8005218:	d015      	beq.n	8005246 <HAL_TIM_Base_Start+0xae>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005220:	d011      	beq.n	8005246 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0201 	orr.w	r2, r2, #1
 8005230:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005232:	e008      	b.n	8005246 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0201 	orr.w	r2, r2, #1
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	e000      	b.n	8005248 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005246:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40010000 	.word	0x40010000
 800525c:	40000400 	.word	0x40000400
 8005260:	40000800 	.word	0x40000800
 8005264:	40000c00 	.word	0x40000c00
 8005268:	40010400 	.word	0x40010400
 800526c:	40014000 	.word	0x40014000
 8005270:	40001800 	.word	0x40001800
 8005274:	00010007 	.word	0x00010007

08005278 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6a1a      	ldr	r2, [r3, #32]
 8005286:	f241 1311 	movw	r3, #4369	; 0x1111
 800528a:	4013      	ands	r3, r2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10f      	bne.n	80052b0 <HAL_TIM_Base_Stop+0x38>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6a1a      	ldr	r2, [r3, #32]
 8005296:	f240 4344 	movw	r3, #1092	; 0x444
 800529a:	4013      	ands	r3, r2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d107      	bne.n	80052b0 <HAL_TIM_Base_Stop+0x38>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0201 	bic.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
	...

080052c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d001      	beq.n	80052e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e054      	b.n	800538a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0201 	orr.w	r2, r2, #1
 80052f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a26      	ldr	r2, [pc, #152]	; (8005398 <HAL_TIM_Base_Start_IT+0xd0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d022      	beq.n	8005348 <HAL_TIM_Base_Start_IT+0x80>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530a:	d01d      	beq.n	8005348 <HAL_TIM_Base_Start_IT+0x80>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a22      	ldr	r2, [pc, #136]	; (800539c <HAL_TIM_Base_Start_IT+0xd4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d018      	beq.n	8005348 <HAL_TIM_Base_Start_IT+0x80>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a21      	ldr	r2, [pc, #132]	; (80053a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d013      	beq.n	8005348 <HAL_TIM_Base_Start_IT+0x80>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a1f      	ldr	r2, [pc, #124]	; (80053a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d00e      	beq.n	8005348 <HAL_TIM_Base_Start_IT+0x80>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a1e      	ldr	r2, [pc, #120]	; (80053a8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d009      	beq.n	8005348 <HAL_TIM_Base_Start_IT+0x80>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a1c      	ldr	r2, [pc, #112]	; (80053ac <HAL_TIM_Base_Start_IT+0xe4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d004      	beq.n	8005348 <HAL_TIM_Base_Start_IT+0x80>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a1b      	ldr	r2, [pc, #108]	; (80053b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d115      	bne.n	8005374 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689a      	ldr	r2, [r3, #8]
 800534e:	4b19      	ldr	r3, [pc, #100]	; (80053b4 <HAL_TIM_Base_Start_IT+0xec>)
 8005350:	4013      	ands	r3, r2
 8005352:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2b06      	cmp	r3, #6
 8005358:	d015      	beq.n	8005386 <HAL_TIM_Base_Start_IT+0xbe>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005360:	d011      	beq.n	8005386 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f042 0201 	orr.w	r2, r2, #1
 8005370:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005372:	e008      	b.n	8005386 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0201 	orr.w	r2, r2, #1
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	e000      	b.n	8005388 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005386:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	40010000 	.word	0x40010000
 800539c:	40000400 	.word	0x40000400
 80053a0:	40000800 	.word	0x40000800
 80053a4:	40000c00 	.word	0x40000c00
 80053a8:	40010400 	.word	0x40010400
 80053ac:	40014000 	.word	0x40014000
 80053b0:	40001800 	.word	0x40001800
 80053b4:	00010007 	.word	0x00010007

080053b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e049      	b.n	800545e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d106      	bne.n	80053e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f841 	bl	8005466 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	3304      	adds	r3, #4
 80053f4:	4619      	mov	r1, r3
 80053f6:	4610      	mov	r0, r2
 80053f8:	f000 fc60 	bl	8005cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005466:	b480      	push	{r7}
 8005468:	b083      	sub	sp, #12
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800546e:	bf00      	nop
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
	...

0800547c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d109      	bne.n	80054a0 <HAL_TIM_PWM_Start+0x24>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b01      	cmp	r3, #1
 8005496:	bf14      	ite	ne
 8005498:	2301      	movne	r3, #1
 800549a:	2300      	moveq	r3, #0
 800549c:	b2db      	uxtb	r3, r3
 800549e:	e03c      	b.n	800551a <HAL_TIM_PWM_Start+0x9e>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d109      	bne.n	80054ba <HAL_TIM_PWM_Start+0x3e>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	bf14      	ite	ne
 80054b2:	2301      	movne	r3, #1
 80054b4:	2300      	moveq	r3, #0
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	e02f      	b.n	800551a <HAL_TIM_PWM_Start+0x9e>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d109      	bne.n	80054d4 <HAL_TIM_PWM_Start+0x58>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	bf14      	ite	ne
 80054cc:	2301      	movne	r3, #1
 80054ce:	2300      	moveq	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	e022      	b.n	800551a <HAL_TIM_PWM_Start+0x9e>
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2b0c      	cmp	r3, #12
 80054d8:	d109      	bne.n	80054ee <HAL_TIM_PWM_Start+0x72>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	bf14      	ite	ne
 80054e6:	2301      	movne	r3, #1
 80054e8:	2300      	moveq	r3, #0
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	e015      	b.n	800551a <HAL_TIM_PWM_Start+0x9e>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b10      	cmp	r3, #16
 80054f2:	d109      	bne.n	8005508 <HAL_TIM_PWM_Start+0x8c>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	bf14      	ite	ne
 8005500:	2301      	movne	r3, #1
 8005502:	2300      	moveq	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	e008      	b.n	800551a <HAL_TIM_PWM_Start+0x9e>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b01      	cmp	r3, #1
 8005512:	bf14      	ite	ne
 8005514:	2301      	movne	r3, #1
 8005516:	2300      	moveq	r3, #0
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e092      	b.n	8005648 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d104      	bne.n	8005532 <HAL_TIM_PWM_Start+0xb6>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005530:	e023      	b.n	800557a <HAL_TIM_PWM_Start+0xfe>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b04      	cmp	r3, #4
 8005536:	d104      	bne.n	8005542 <HAL_TIM_PWM_Start+0xc6>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005540:	e01b      	b.n	800557a <HAL_TIM_PWM_Start+0xfe>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b08      	cmp	r3, #8
 8005546:	d104      	bne.n	8005552 <HAL_TIM_PWM_Start+0xd6>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005550:	e013      	b.n	800557a <HAL_TIM_PWM_Start+0xfe>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b0c      	cmp	r3, #12
 8005556:	d104      	bne.n	8005562 <HAL_TIM_PWM_Start+0xe6>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005560:	e00b      	b.n	800557a <HAL_TIM_PWM_Start+0xfe>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b10      	cmp	r3, #16
 8005566:	d104      	bne.n	8005572 <HAL_TIM_PWM_Start+0xf6>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005570:	e003      	b.n	800557a <HAL_TIM_PWM_Start+0xfe>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2202      	movs	r2, #2
 8005576:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2201      	movs	r2, #1
 8005580:	6839      	ldr	r1, [r7, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f000 ff32 	bl	80063ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a30      	ldr	r2, [pc, #192]	; (8005650 <HAL_TIM_PWM_Start+0x1d4>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d004      	beq.n	800559c <HAL_TIM_PWM_Start+0x120>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a2f      	ldr	r2, [pc, #188]	; (8005654 <HAL_TIM_PWM_Start+0x1d8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d101      	bne.n	80055a0 <HAL_TIM_PWM_Start+0x124>
 800559c:	2301      	movs	r3, #1
 800559e:	e000      	b.n	80055a2 <HAL_TIM_PWM_Start+0x126>
 80055a0:	2300      	movs	r3, #0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d007      	beq.n	80055b6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a25      	ldr	r2, [pc, #148]	; (8005650 <HAL_TIM_PWM_Start+0x1d4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d022      	beq.n	8005606 <HAL_TIM_PWM_Start+0x18a>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c8:	d01d      	beq.n	8005606 <HAL_TIM_PWM_Start+0x18a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a22      	ldr	r2, [pc, #136]	; (8005658 <HAL_TIM_PWM_Start+0x1dc>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d018      	beq.n	8005606 <HAL_TIM_PWM_Start+0x18a>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a20      	ldr	r2, [pc, #128]	; (800565c <HAL_TIM_PWM_Start+0x1e0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d013      	beq.n	8005606 <HAL_TIM_PWM_Start+0x18a>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a1f      	ldr	r2, [pc, #124]	; (8005660 <HAL_TIM_PWM_Start+0x1e4>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00e      	beq.n	8005606 <HAL_TIM_PWM_Start+0x18a>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a19      	ldr	r2, [pc, #100]	; (8005654 <HAL_TIM_PWM_Start+0x1d8>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d009      	beq.n	8005606 <HAL_TIM_PWM_Start+0x18a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a1b      	ldr	r2, [pc, #108]	; (8005664 <HAL_TIM_PWM_Start+0x1e8>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d004      	beq.n	8005606 <HAL_TIM_PWM_Start+0x18a>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a19      	ldr	r2, [pc, #100]	; (8005668 <HAL_TIM_PWM_Start+0x1ec>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d115      	bne.n	8005632 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	4b17      	ldr	r3, [pc, #92]	; (800566c <HAL_TIM_PWM_Start+0x1f0>)
 800560e:	4013      	ands	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2b06      	cmp	r3, #6
 8005616:	d015      	beq.n	8005644 <HAL_TIM_PWM_Start+0x1c8>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800561e:	d011      	beq.n	8005644 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0201 	orr.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005630:	e008      	b.n	8005644 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f042 0201 	orr.w	r2, r2, #1
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	e000      	b.n	8005646 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005644:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	40010000 	.word	0x40010000
 8005654:	40010400 	.word	0x40010400
 8005658:	40000400 	.word	0x40000400
 800565c:	40000800 	.word	0x40000800
 8005660:	40000c00 	.word	0x40000c00
 8005664:	40014000 	.word	0x40014000
 8005668:	40001800 	.word	0x40001800
 800566c:	00010007 	.word	0x00010007

08005670 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b02      	cmp	r3, #2
 8005684:	d122      	bne.n	80056cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b02      	cmp	r3, #2
 8005692:	d11b      	bne.n	80056cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0202 	mvn.w	r2, #2
 800569c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	f003 0303 	and.w	r3, r3, #3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fae4 	bl	8005c80 <HAL_TIM_IC_CaptureCallback>
 80056b8:	e005      	b.n	80056c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fad6 	bl	8005c6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fae7 	bl	8005c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f003 0304 	and.w	r3, r3, #4
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d122      	bne.n	8005720 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f003 0304 	and.w	r3, r3, #4
 80056e4:	2b04      	cmp	r3, #4
 80056e6:	d11b      	bne.n	8005720 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0204 	mvn.w	r2, #4
 80056f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2202      	movs	r2, #2
 80056f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 faba 	bl	8005c80 <HAL_TIM_IC_CaptureCallback>
 800570c:	e005      	b.n	800571a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 faac 	bl	8005c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fabd 	bl	8005c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b08      	cmp	r3, #8
 800572c:	d122      	bne.n	8005774 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f003 0308 	and.w	r3, r3, #8
 8005738:	2b08      	cmp	r3, #8
 800573a:	d11b      	bne.n	8005774 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f06f 0208 	mvn.w	r2, #8
 8005744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2204      	movs	r2, #4
 800574a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	f003 0303 	and.w	r3, r3, #3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fa90 	bl	8005c80 <HAL_TIM_IC_CaptureCallback>
 8005760:	e005      	b.n	800576e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fa82 	bl	8005c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fa93 	bl	8005c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f003 0310 	and.w	r3, r3, #16
 800577e:	2b10      	cmp	r3, #16
 8005780:	d122      	bne.n	80057c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f003 0310 	and.w	r3, r3, #16
 800578c:	2b10      	cmp	r3, #16
 800578e:	d11b      	bne.n	80057c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f06f 0210 	mvn.w	r2, #16
 8005798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2208      	movs	r2, #8
 800579e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fa66 	bl	8005c80 <HAL_TIM_IC_CaptureCallback>
 80057b4:	e005      	b.n	80057c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fa58 	bl	8005c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fa69 	bl	8005c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d10e      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d107      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f06f 0201 	mvn.w	r2, #1
 80057ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7fb f962 	bl	8000ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fe:	2b80      	cmp	r3, #128	; 0x80
 8005800:	d10e      	bne.n	8005820 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800580c:	2b80      	cmp	r3, #128	; 0x80
 800580e:	d107      	bne.n	8005820 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fea4 	bl	8006568 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800582e:	d10e      	bne.n	800584e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583a:	2b80      	cmp	r3, #128	; 0x80
 800583c:	d107      	bne.n	800584e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fe97 	bl	800657c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005858:	2b40      	cmp	r3, #64	; 0x40
 800585a:	d10e      	bne.n	800587a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005866:	2b40      	cmp	r3, #64	; 0x40
 8005868:	d107      	bne.n	800587a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fa17 	bl	8005ca8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	f003 0320 	and.w	r3, r3, #32
 8005884:	2b20      	cmp	r3, #32
 8005886:	d10e      	bne.n	80058a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f003 0320 	and.w	r3, r3, #32
 8005892:	2b20      	cmp	r3, #32
 8005894:	d107      	bne.n	80058a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f06f 0220 	mvn.w	r2, #32
 800589e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fe57 	bl	8006554 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058a6:	bf00      	nop
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058bc:	2300      	movs	r3, #0
 80058be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d101      	bne.n	80058ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058ca:	2302      	movs	r3, #2
 80058cc:	e0ff      	b.n	8005ace <HAL_TIM_PWM_ConfigChannel+0x21e>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b14      	cmp	r3, #20
 80058da:	f200 80f0 	bhi.w	8005abe <HAL_TIM_PWM_ConfigChannel+0x20e>
 80058de:	a201      	add	r2, pc, #4	; (adr r2, 80058e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e4:	08005939 	.word	0x08005939
 80058e8:	08005abf 	.word	0x08005abf
 80058ec:	08005abf 	.word	0x08005abf
 80058f0:	08005abf 	.word	0x08005abf
 80058f4:	08005979 	.word	0x08005979
 80058f8:	08005abf 	.word	0x08005abf
 80058fc:	08005abf 	.word	0x08005abf
 8005900:	08005abf 	.word	0x08005abf
 8005904:	080059bb 	.word	0x080059bb
 8005908:	08005abf 	.word	0x08005abf
 800590c:	08005abf 	.word	0x08005abf
 8005910:	08005abf 	.word	0x08005abf
 8005914:	080059fb 	.word	0x080059fb
 8005918:	08005abf 	.word	0x08005abf
 800591c:	08005abf 	.word	0x08005abf
 8005920:	08005abf 	.word	0x08005abf
 8005924:	08005a3d 	.word	0x08005a3d
 8005928:	08005abf 	.word	0x08005abf
 800592c:	08005abf 	.word	0x08005abf
 8005930:	08005abf 	.word	0x08005abf
 8005934:	08005a7d 	.word	0x08005a7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68b9      	ldr	r1, [r7, #8]
 800593e:	4618      	mov	r0, r3
 8005940:	f000 fa5c 	bl	8005dfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699a      	ldr	r2, [r3, #24]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0208 	orr.w	r2, r2, #8
 8005952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699a      	ldr	r2, [r3, #24]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0204 	bic.w	r2, r2, #4
 8005962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6999      	ldr	r1, [r3, #24]
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	691a      	ldr	r2, [r3, #16]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	619a      	str	r2, [r3, #24]
      break;
 8005976:	e0a5      	b.n	8005ac4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68b9      	ldr	r1, [r7, #8]
 800597e:	4618      	mov	r0, r3
 8005980:	f000 faae 	bl	8005ee0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699a      	ldr	r2, [r3, #24]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	699a      	ldr	r2, [r3, #24]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6999      	ldr	r1, [r3, #24]
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	021a      	lsls	r2, r3, #8
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	430a      	orrs	r2, r1
 80059b6:	619a      	str	r2, [r3, #24]
      break;
 80059b8:	e084      	b.n	8005ac4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68b9      	ldr	r1, [r7, #8]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fb05 	bl	8005fd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	69da      	ldr	r2, [r3, #28]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f042 0208 	orr.w	r2, r2, #8
 80059d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	69da      	ldr	r2, [r3, #28]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 0204 	bic.w	r2, r2, #4
 80059e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	69d9      	ldr	r1, [r3, #28]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	691a      	ldr	r2, [r3, #16]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	61da      	str	r2, [r3, #28]
      break;
 80059f8:	e064      	b.n	8005ac4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68b9      	ldr	r1, [r7, #8]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 fb5b 	bl	80060bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	69da      	ldr	r2, [r3, #28]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	69da      	ldr	r2, [r3, #28]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	69d9      	ldr	r1, [r3, #28]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	021a      	lsls	r2, r3, #8
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	61da      	str	r2, [r3, #28]
      break;
 8005a3a:	e043      	b.n	8005ac4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68b9      	ldr	r1, [r7, #8]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fb92 	bl	800616c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0208 	orr.w	r2, r2, #8
 8005a56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 0204 	bic.w	r2, r2, #4
 8005a66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	691a      	ldr	r2, [r3, #16]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a7a:	e023      	b.n	8005ac4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68b9      	ldr	r1, [r7, #8]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 fbc4 	bl	8006210 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aa6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	021a      	lsls	r2, r3, #8
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005abc:	e002      	b.n	8005ac4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	75fb      	strb	r3, [r7, #23]
      break;
 8005ac2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3718      	adds	r7, #24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop

08005ad8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d101      	bne.n	8005af4 <HAL_TIM_ConfigClockSource+0x1c>
 8005af0:	2302      	movs	r3, #2
 8005af2:	e0b4      	b.n	8005c5e <HAL_TIM_ConfigClockSource+0x186>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	4b56      	ldr	r3, [pc, #344]	; (8005c68 <HAL_TIM_ConfigClockSource+0x190>)
 8005b10:	4013      	ands	r3, r2
 8005b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b2c:	d03e      	beq.n	8005bac <HAL_TIM_ConfigClockSource+0xd4>
 8005b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b32:	f200 8087 	bhi.w	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
 8005b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b3a:	f000 8086 	beq.w	8005c4a <HAL_TIM_ConfigClockSource+0x172>
 8005b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b42:	d87f      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
 8005b44:	2b70      	cmp	r3, #112	; 0x70
 8005b46:	d01a      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0xa6>
 8005b48:	2b70      	cmp	r3, #112	; 0x70
 8005b4a:	d87b      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
 8005b4c:	2b60      	cmp	r3, #96	; 0x60
 8005b4e:	d050      	beq.n	8005bf2 <HAL_TIM_ConfigClockSource+0x11a>
 8005b50:	2b60      	cmp	r3, #96	; 0x60
 8005b52:	d877      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
 8005b54:	2b50      	cmp	r3, #80	; 0x50
 8005b56:	d03c      	beq.n	8005bd2 <HAL_TIM_ConfigClockSource+0xfa>
 8005b58:	2b50      	cmp	r3, #80	; 0x50
 8005b5a:	d873      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
 8005b5c:	2b40      	cmp	r3, #64	; 0x40
 8005b5e:	d058      	beq.n	8005c12 <HAL_TIM_ConfigClockSource+0x13a>
 8005b60:	2b40      	cmp	r3, #64	; 0x40
 8005b62:	d86f      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
 8005b64:	2b30      	cmp	r3, #48	; 0x30
 8005b66:	d064      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x15a>
 8005b68:	2b30      	cmp	r3, #48	; 0x30
 8005b6a:	d86b      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
 8005b6c:	2b20      	cmp	r3, #32
 8005b6e:	d060      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x15a>
 8005b70:	2b20      	cmp	r3, #32
 8005b72:	d867      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d05c      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x15a>
 8005b78:	2b10      	cmp	r3, #16
 8005b7a:	d05a      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x15a>
 8005b7c:	e062      	b.n	8005c44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6818      	ldr	r0, [r3, #0]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	6899      	ldr	r1, [r3, #8]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f000 fc0d 	bl	80063ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ba0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	609a      	str	r2, [r3, #8]
      break;
 8005baa:	e04f      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6818      	ldr	r0, [r3, #0]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	6899      	ldr	r1, [r3, #8]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f000 fbf6 	bl	80063ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bce:	609a      	str	r2, [r3, #8]
      break;
 8005bd0:	e03c      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6818      	ldr	r0, [r3, #0]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	6859      	ldr	r1, [r3, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	461a      	mov	r2, r3
 8005be0:	f000 fb6a 	bl	80062b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2150      	movs	r1, #80	; 0x50
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 fbc3 	bl	8006376 <TIM_ITRx_SetConfig>
      break;
 8005bf0:	e02c      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	6859      	ldr	r1, [r3, #4]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f000 fb89 	bl	8006316 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2160      	movs	r1, #96	; 0x60
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 fbb3 	bl	8006376 <TIM_ITRx_SetConfig>
      break;
 8005c10:	e01c      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6818      	ldr	r0, [r3, #0]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	6859      	ldr	r1, [r3, #4]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	f000 fb4a 	bl	80062b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2140      	movs	r1, #64	; 0x40
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 fba3 	bl	8006376 <TIM_ITRx_SetConfig>
      break;
 8005c30:	e00c      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	f000 fb9a 	bl	8006376 <TIM_ITRx_SetConfig>
      break;
 8005c42:	e003      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	73fb      	strb	r3, [r7, #15]
      break;
 8005c48:	e000      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	fffeff88 	.word	0xfffeff88

08005c6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a40      	ldr	r2, [pc, #256]	; (8005dd0 <TIM_Base_SetConfig+0x114>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d013      	beq.n	8005cfc <TIM_Base_SetConfig+0x40>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cda:	d00f      	beq.n	8005cfc <TIM_Base_SetConfig+0x40>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a3d      	ldr	r2, [pc, #244]	; (8005dd4 <TIM_Base_SetConfig+0x118>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d00b      	beq.n	8005cfc <TIM_Base_SetConfig+0x40>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a3c      	ldr	r2, [pc, #240]	; (8005dd8 <TIM_Base_SetConfig+0x11c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d007      	beq.n	8005cfc <TIM_Base_SetConfig+0x40>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a3b      	ldr	r2, [pc, #236]	; (8005ddc <TIM_Base_SetConfig+0x120>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d003      	beq.n	8005cfc <TIM_Base_SetConfig+0x40>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a3a      	ldr	r2, [pc, #232]	; (8005de0 <TIM_Base_SetConfig+0x124>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d108      	bne.n	8005d0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a2f      	ldr	r2, [pc, #188]	; (8005dd0 <TIM_Base_SetConfig+0x114>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d02b      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d1c:	d027      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a2c      	ldr	r2, [pc, #176]	; (8005dd4 <TIM_Base_SetConfig+0x118>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d023      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a2b      	ldr	r2, [pc, #172]	; (8005dd8 <TIM_Base_SetConfig+0x11c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d01f      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a2a      	ldr	r2, [pc, #168]	; (8005ddc <TIM_Base_SetConfig+0x120>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d01b      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a29      	ldr	r2, [pc, #164]	; (8005de0 <TIM_Base_SetConfig+0x124>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d017      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a28      	ldr	r2, [pc, #160]	; (8005de4 <TIM_Base_SetConfig+0x128>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d013      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a27      	ldr	r2, [pc, #156]	; (8005de8 <TIM_Base_SetConfig+0x12c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00f      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a26      	ldr	r2, [pc, #152]	; (8005dec <TIM_Base_SetConfig+0x130>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00b      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a25      	ldr	r2, [pc, #148]	; (8005df0 <TIM_Base_SetConfig+0x134>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d007      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a24      	ldr	r2, [pc, #144]	; (8005df4 <TIM_Base_SetConfig+0x138>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d003      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a23      	ldr	r2, [pc, #140]	; (8005df8 <TIM_Base_SetConfig+0x13c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d108      	bne.n	8005d80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a0a      	ldr	r2, [pc, #40]	; (8005dd0 <TIM_Base_SetConfig+0x114>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d003      	beq.n	8005db4 <TIM_Base_SetConfig+0xf8>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a0c      	ldr	r2, [pc, #48]	; (8005de0 <TIM_Base_SetConfig+0x124>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d103      	bne.n	8005dbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	691a      	ldr	r2, [r3, #16]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	615a      	str	r2, [r3, #20]
}
 8005dc2:	bf00      	nop
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	40010000 	.word	0x40010000
 8005dd4:	40000400 	.word	0x40000400
 8005dd8:	40000800 	.word	0x40000800
 8005ddc:	40000c00 	.word	0x40000c00
 8005de0:	40010400 	.word	0x40010400
 8005de4:	40014000 	.word	0x40014000
 8005de8:	40014400 	.word	0x40014400
 8005dec:	40014800 	.word	0x40014800
 8005df0:	40001800 	.word	0x40001800
 8005df4:	40001c00 	.word	0x40001c00
 8005df8:	40002000 	.word	0x40002000

08005dfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	f023 0201 	bic.w	r2, r3, #1
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4b2b      	ldr	r3, [pc, #172]	; (8005ed4 <TIM_OC1_SetConfig+0xd8>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 0303 	bic.w	r3, r3, #3
 8005e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f023 0302 	bic.w	r3, r3, #2
 8005e44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a21      	ldr	r2, [pc, #132]	; (8005ed8 <TIM_OC1_SetConfig+0xdc>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d003      	beq.n	8005e60 <TIM_OC1_SetConfig+0x64>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a20      	ldr	r2, [pc, #128]	; (8005edc <TIM_OC1_SetConfig+0xe0>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d10c      	bne.n	8005e7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f023 0308 	bic.w	r3, r3, #8
 8005e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f023 0304 	bic.w	r3, r3, #4
 8005e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a16      	ldr	r2, [pc, #88]	; (8005ed8 <TIM_OC1_SetConfig+0xdc>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d003      	beq.n	8005e8a <TIM_OC1_SetConfig+0x8e>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a15      	ldr	r2, [pc, #84]	; (8005edc <TIM_OC1_SetConfig+0xe0>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d111      	bne.n	8005eae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	621a      	str	r2, [r3, #32]
}
 8005ec8:	bf00      	nop
 8005eca:	371c      	adds	r7, #28
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	fffeff8f 	.word	0xfffeff8f
 8005ed8:	40010000 	.word	0x40010000
 8005edc:	40010400 	.word	0x40010400

08005ee0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	f023 0210 	bic.w	r2, r3, #16
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4b2e      	ldr	r3, [pc, #184]	; (8005fc4 <TIM_OC2_SetConfig+0xe4>)
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	021b      	lsls	r3, r3, #8
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f023 0320 	bic.w	r3, r3, #32
 8005f2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	011b      	lsls	r3, r3, #4
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a23      	ldr	r2, [pc, #140]	; (8005fc8 <TIM_OC2_SetConfig+0xe8>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d003      	beq.n	8005f48 <TIM_OC2_SetConfig+0x68>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a22      	ldr	r2, [pc, #136]	; (8005fcc <TIM_OC2_SetConfig+0xec>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d10d      	bne.n	8005f64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	011b      	lsls	r3, r3, #4
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a18      	ldr	r2, [pc, #96]	; (8005fc8 <TIM_OC2_SetConfig+0xe8>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d003      	beq.n	8005f74 <TIM_OC2_SetConfig+0x94>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a17      	ldr	r2, [pc, #92]	; (8005fcc <TIM_OC2_SetConfig+0xec>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d113      	bne.n	8005f9c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	621a      	str	r2, [r3, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	feff8fff 	.word	0xfeff8fff
 8005fc8:	40010000 	.word	0x40010000
 8005fcc:	40010400 	.word	0x40010400

08005fd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	4b2d      	ldr	r3, [pc, #180]	; (80060b0 <TIM_OC3_SetConfig+0xe0>)
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f023 0303 	bic.w	r3, r3, #3
 8006006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	4313      	orrs	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	021b      	lsls	r3, r3, #8
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	4313      	orrs	r3, r2
 8006024:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a22      	ldr	r2, [pc, #136]	; (80060b4 <TIM_OC3_SetConfig+0xe4>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d003      	beq.n	8006036 <TIM_OC3_SetConfig+0x66>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a21      	ldr	r2, [pc, #132]	; (80060b8 <TIM_OC3_SetConfig+0xe8>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d10d      	bne.n	8006052 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800603c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	021b      	lsls	r3, r3, #8
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	4313      	orrs	r3, r2
 8006048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a17      	ldr	r2, [pc, #92]	; (80060b4 <TIM_OC3_SetConfig+0xe4>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d003      	beq.n	8006062 <TIM_OC3_SetConfig+0x92>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a16      	ldr	r2, [pc, #88]	; (80060b8 <TIM_OC3_SetConfig+0xe8>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d113      	bne.n	800608a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	4313      	orrs	r3, r2
 800607c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	011b      	lsls	r3, r3, #4
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	4313      	orrs	r3, r2
 8006088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	621a      	str	r2, [r3, #32]
}
 80060a4:	bf00      	nop
 80060a6:	371c      	adds	r7, #28
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	fffeff8f 	.word	0xfffeff8f
 80060b4:	40010000 	.word	0x40010000
 80060b8:	40010400 	.word	0x40010400

080060bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	4b1e      	ldr	r3, [pc, #120]	; (8006160 <TIM_OC4_SetConfig+0xa4>)
 80060e8:	4013      	ands	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	021b      	lsls	r3, r3, #8
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	031b      	lsls	r3, r3, #12
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	4313      	orrs	r3, r2
 8006112:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a13      	ldr	r2, [pc, #76]	; (8006164 <TIM_OC4_SetConfig+0xa8>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d003      	beq.n	8006124 <TIM_OC4_SetConfig+0x68>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a12      	ldr	r2, [pc, #72]	; (8006168 <TIM_OC4_SetConfig+0xac>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d109      	bne.n	8006138 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800612a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	695b      	ldr	r3, [r3, #20]
 8006130:	019b      	lsls	r3, r3, #6
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	4313      	orrs	r3, r2
 8006136:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	621a      	str	r2, [r3, #32]
}
 8006152:	bf00      	nop
 8006154:	371c      	adds	r7, #28
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	feff8fff 	.word	0xfeff8fff
 8006164:	40010000 	.word	0x40010000
 8006168:	40010400 	.word	0x40010400

0800616c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	4b1b      	ldr	r3, [pc, #108]	; (8006204 <TIM_OC5_SetConfig+0x98>)
 8006198:	4013      	ands	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80061ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	041b      	lsls	r3, r3, #16
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a12      	ldr	r2, [pc, #72]	; (8006208 <TIM_OC5_SetConfig+0x9c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d003      	beq.n	80061ca <TIM_OC5_SetConfig+0x5e>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a11      	ldr	r2, [pc, #68]	; (800620c <TIM_OC5_SetConfig+0xa0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d109      	bne.n	80061de <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	021b      	lsls	r3, r3, #8
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	4313      	orrs	r3, r2
 80061dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	621a      	str	r2, [r3, #32]
}
 80061f8:	bf00      	nop
 80061fa:	371c      	adds	r7, #28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	fffeff8f 	.word	0xfffeff8f
 8006208:	40010000 	.word	0x40010000
 800620c:	40010400 	.word	0x40010400

08006210 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	4b1c      	ldr	r3, [pc, #112]	; (80062ac <TIM_OC6_SetConfig+0x9c>)
 800623c:	4013      	ands	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	021b      	lsls	r3, r3, #8
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	4313      	orrs	r3, r2
 800624a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006252:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	051b      	lsls	r3, r3, #20
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	4313      	orrs	r3, r2
 800625e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a13      	ldr	r2, [pc, #76]	; (80062b0 <TIM_OC6_SetConfig+0xa0>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d003      	beq.n	8006270 <TIM_OC6_SetConfig+0x60>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a12      	ldr	r2, [pc, #72]	; (80062b4 <TIM_OC6_SetConfig+0xa4>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d109      	bne.n	8006284 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006276:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	029b      	lsls	r3, r3, #10
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	4313      	orrs	r3, r2
 8006282:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	621a      	str	r2, [r3, #32]
}
 800629e:	bf00      	nop
 80062a0:	371c      	adds	r7, #28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	feff8fff 	.word	0xfeff8fff
 80062b0:	40010000 	.word	0x40010000
 80062b4:	40010400 	.word	0x40010400

080062b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b087      	sub	sp, #28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	f023 0201 	bic.w	r2, r3, #1
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	011b      	lsls	r3, r3, #4
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f023 030a 	bic.w	r3, r3, #10
 80062f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	621a      	str	r2, [r3, #32]
}
 800630a:	bf00      	nop
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006316:	b480      	push	{r7}
 8006318:	b087      	sub	sp, #28
 800631a:	af00      	add	r7, sp, #0
 800631c:	60f8      	str	r0, [r7, #12]
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	f023 0210 	bic.w	r2, r3, #16
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6a1b      	ldr	r3, [r3, #32]
 8006338:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006340:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	031b      	lsls	r3, r3, #12
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	4313      	orrs	r3, r2
 800634a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006352:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	011b      	lsls	r3, r3, #4
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	4313      	orrs	r3, r2
 800635c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	621a      	str	r2, [r3, #32]
}
 800636a:	bf00      	nop
 800636c:	371c      	adds	r7, #28
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006376:	b480      	push	{r7}
 8006378:	b085      	sub	sp, #20
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	4313      	orrs	r3, r2
 8006394:	f043 0307 	orr.w	r3, r3, #7
 8006398:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	609a      	str	r2, [r3, #8]
}
 80063a0:	bf00      	nop
 80063a2:	3714      	adds	r7, #20
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	021a      	lsls	r2, r3, #8
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	431a      	orrs	r2, r3
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	609a      	str	r2, [r3, #8]
}
 80063e0:	bf00      	nop
 80063e2:	371c      	adds	r7, #28
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f003 031f 	and.w	r3, r3, #31
 80063fe:	2201      	movs	r2, #1
 8006400:	fa02 f303 	lsl.w	r3, r2, r3
 8006404:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6a1a      	ldr	r2, [r3, #32]
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	43db      	mvns	r3, r3
 800640e:	401a      	ands	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a1a      	ldr	r2, [r3, #32]
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	f003 031f 	and.w	r3, r3, #31
 800641e:	6879      	ldr	r1, [r7, #4]
 8006420:	fa01 f303 	lsl.w	r3, r1, r3
 8006424:	431a      	orrs	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	621a      	str	r2, [r3, #32]
}
 800642a:	bf00      	nop
 800642c:	371c      	adds	r7, #28
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
	...

08006438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006448:	2b01      	cmp	r3, #1
 800644a:	d101      	bne.n	8006450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800644c:	2302      	movs	r3, #2
 800644e:	e06d      	b.n	800652c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2202      	movs	r2, #2
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a30      	ldr	r2, [pc, #192]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d004      	beq.n	8006484 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a2f      	ldr	r2, [pc, #188]	; (800653c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d108      	bne.n	8006496 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800648a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a20      	ldr	r2, [pc, #128]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d022      	beq.n	8006500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c2:	d01d      	beq.n	8006500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a1d      	ldr	r2, [pc, #116]	; (8006540 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d018      	beq.n	8006500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a1c      	ldr	r2, [pc, #112]	; (8006544 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d013      	beq.n	8006500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a1a      	ldr	r2, [pc, #104]	; (8006548 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d00e      	beq.n	8006500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a15      	ldr	r2, [pc, #84]	; (800653c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d009      	beq.n	8006500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a16      	ldr	r2, [pc, #88]	; (800654c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d004      	beq.n	8006500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a15      	ldr	r2, [pc, #84]	; (8006550 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d10c      	bne.n	800651a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006506:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	4313      	orrs	r3, r2
 8006510:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	40010000 	.word	0x40010000
 800653c:	40010400 	.word	0x40010400
 8006540:	40000400 	.word	0x40000400
 8006544:	40000800 	.word	0x40000800
 8006548:	40000c00 	.word	0x40000c00
 800654c:	40014000 	.word	0x40014000
 8006550:	40001800 	.word	0x40001800

08006554 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e040      	b.n	8006624 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d106      	bne.n	80065b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7fb f842 	bl	800163c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2224      	movs	r2, #36	; 0x24
 80065bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 0201 	bic.w	r2, r2, #1
 80065cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 fc64 	bl	8006e9c <UART_SetConfig>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d101      	bne.n	80065de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e022      	b.n	8006624 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 febc 	bl	8007364 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689a      	ldr	r2, [r3, #8]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800660a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f042 0201 	orr.w	r2, r2, #1
 800661a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 ff43 	bl	80074a8 <UART_CheckIdleState>
 8006622:	4603      	mov	r3, r0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b08a      	sub	sp, #40	; 0x28
 8006630:	af02      	add	r7, sp, #8
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	603b      	str	r3, [r7, #0]
 8006638:	4613      	mov	r3, r2
 800663a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006640:	2b20      	cmp	r3, #32
 8006642:	d171      	bne.n	8006728 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <HAL_UART_Transmit+0x24>
 800664a:	88fb      	ldrh	r3, [r7, #6]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d101      	bne.n	8006654 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e06a      	b.n	800672a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2221      	movs	r2, #33	; 0x21
 8006660:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006662:	f7fc f93b 	bl	80028dc <HAL_GetTick>
 8006666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	88fa      	ldrh	r2, [r7, #6]
 800666c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	88fa      	ldrh	r2, [r7, #6]
 8006674:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006680:	d108      	bne.n	8006694 <HAL_UART_Transmit+0x68>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d104      	bne.n	8006694 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800668a:	2300      	movs	r3, #0
 800668c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	61bb      	str	r3, [r7, #24]
 8006692:	e003      	b.n	800669c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006698:	2300      	movs	r3, #0
 800669a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800669c:	e02c      	b.n	80066f8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2200      	movs	r2, #0
 80066a6:	2180      	movs	r1, #128	; 0x80
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f000 ff4a 	bl	8007542 <UART_WaitOnFlagUntilTimeout>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e038      	b.n	800672a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10b      	bne.n	80066d6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	461a      	mov	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	3302      	adds	r3, #2
 80066d2:	61bb      	str	r3, [r7, #24]
 80066d4:	e007      	b.n	80066e6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	781a      	ldrb	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	3301      	adds	r3, #1
 80066e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	3b01      	subs	r3, #1
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80066fe:	b29b      	uxth	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1cc      	bne.n	800669e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	2200      	movs	r2, #0
 800670c:	2140      	movs	r1, #64	; 0x40
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f000 ff17 	bl	8007542 <UART_WaitOnFlagUntilTimeout>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e005      	b.n	800672a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2220      	movs	r2, #32
 8006722:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	e000      	b.n	800672a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006728:	2302      	movs	r3, #2
  }
}
 800672a:	4618      	mov	r0, r3
 800672c:	3720      	adds	r7, #32
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
	...

08006734 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006734:	b480      	push	{r7}
 8006736:	b08b      	sub	sp, #44	; 0x2c
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	4613      	mov	r3, r2
 8006740:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006746:	2b20      	cmp	r3, #32
 8006748:	d147      	bne.n	80067da <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <HAL_UART_Transmit_IT+0x22>
 8006750:	88fb      	ldrh	r3, [r7, #6]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e040      	b.n	80067dc <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	88fa      	ldrh	r2, [r7, #6]
 8006764:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	88fa      	ldrh	r2, [r7, #6]
 800676c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2221      	movs	r2, #33	; 0x21
 8006782:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800678c:	d107      	bne.n	800679e <HAL_UART_Transmit_IT+0x6a>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d103      	bne.n	800679e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4a13      	ldr	r2, [pc, #76]	; (80067e8 <HAL_UART_Transmit_IT+0xb4>)
 800679a:	66da      	str	r2, [r3, #108]	; 0x6c
 800679c:	e002      	b.n	80067a4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4a12      	ldr	r2, [pc, #72]	; (80067ec <HAL_UART_Transmit_IT+0xb8>)
 80067a2:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	e853 3f00 	ldrex	r3, [r3]
 80067b0:	613b      	str	r3, [r7, #16]
   return(result);
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067b8:	627b      	str	r3, [r7, #36]	; 0x24
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	461a      	mov	r2, r3
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	623b      	str	r3, [r7, #32]
 80067c4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c6:	69f9      	ldr	r1, [r7, #28]
 80067c8:	6a3a      	ldr	r2, [r7, #32]
 80067ca:	e841 2300 	strex	r3, r2, [r1]
 80067ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1e6      	bne.n	80067a4 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80067d6:	2300      	movs	r3, #0
 80067d8:	e000      	b.n	80067dc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80067da:	2302      	movs	r3, #2
  }
}
 80067dc:	4618      	mov	r0, r3
 80067de:	372c      	adds	r7, #44	; 0x2c
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	08007a07 	.word	0x08007a07
 80067ec:	08007951 	.word	0x08007951

080067f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08a      	sub	sp, #40	; 0x28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	4613      	mov	r3, r2
 80067fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006804:	2b20      	cmp	r3, #32
 8006806:	d132      	bne.n	800686e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d002      	beq.n	8006814 <HAL_UART_Receive_IT+0x24>
 800680e:	88fb      	ldrh	r3, [r7, #6]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e02b      	b.n	8006870 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d018      	beq.n	800685e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	e853 3f00 	ldrex	r3, [r3]
 8006838:	613b      	str	r3, [r7, #16]
   return(result);
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006840:	627b      	str	r3, [r7, #36]	; 0x24
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	461a      	mov	r2, r3
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	623b      	str	r3, [r7, #32]
 800684c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684e:	69f9      	ldr	r1, [r7, #28]
 8006850:	6a3a      	ldr	r2, [r7, #32]
 8006852:	e841 2300 	strex	r3, r2, [r1]
 8006856:	61bb      	str	r3, [r7, #24]
   return(result);
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1e6      	bne.n	800682c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800685e:	88fb      	ldrh	r3, [r7, #6]
 8006860:	461a      	mov	r2, r3
 8006862:	68b9      	ldr	r1, [r7, #8]
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f000 ff33 	bl	80076d0 <UART_Start_Receive_IT>
 800686a:	4603      	mov	r3, r0
 800686c:	e000      	b.n	8006870 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800686e:	2302      	movs	r3, #2
  }
}
 8006870:	4618      	mov	r0, r3
 8006872:	3728      	adds	r7, #40	; 0x28
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b0ba      	sub	sp, #232	; 0xe8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800689e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80068a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80068a6:	4013      	ands	r3, r2
 80068a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80068ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d115      	bne.n	80068e0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80068b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b8:	f003 0320 	and.w	r3, r3, #32
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00f      	beq.n	80068e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80068c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068c4:	f003 0320 	and.w	r3, r3, #32
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d009      	beq.n	80068e0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f000 82ac 	beq.w	8006e2e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	4798      	blx	r3
      }
      return;
 80068de:	e2a6      	b.n	8006e2e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80068e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 8117 	beq.w	8006b18 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80068ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d106      	bne.n	8006904 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80068f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80068fa:	4b85      	ldr	r3, [pc, #532]	; (8006b10 <HAL_UART_IRQHandler+0x298>)
 80068fc:	4013      	ands	r3, r2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 810a 	beq.w	8006b18 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	2b00      	cmp	r3, #0
 800690e:	d011      	beq.n	8006934 <HAL_UART_IRQHandler+0xbc>
 8006910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00b      	beq.n	8006934 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2201      	movs	r2, #1
 8006922:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800692a:	f043 0201 	orr.w	r2, r3, #1
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006938:	f003 0302 	and.w	r3, r3, #2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d011      	beq.n	8006964 <HAL_UART_IRQHandler+0xec>
 8006940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00b      	beq.n	8006964 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2202      	movs	r2, #2
 8006952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800695a:	f043 0204 	orr.w	r2, r3, #4
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	2b00      	cmp	r3, #0
 800696e:	d011      	beq.n	8006994 <HAL_UART_IRQHandler+0x11c>
 8006970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00b      	beq.n	8006994 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2204      	movs	r2, #4
 8006982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800698a:	f043 0202 	orr.w	r2, r3, #2
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006998:	f003 0308 	and.w	r3, r3, #8
 800699c:	2b00      	cmp	r3, #0
 800699e:	d017      	beq.n	80069d0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80069a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069a4:	f003 0320 	and.w	r3, r3, #32
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d105      	bne.n	80069b8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80069ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00b      	beq.n	80069d0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2208      	movs	r2, #8
 80069be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069c6:	f043 0208 	orr.w	r2, r3, #8
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80069d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d012      	beq.n	8006a02 <HAL_UART_IRQHandler+0x18a>
 80069dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00c      	beq.n	8006a02 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069f8:	f043 0220 	orr.w	r2, r3, #32
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 8212 	beq.w	8006e32 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00d      	beq.n	8006a36 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a1e:	f003 0320 	and.w	r3, r3, #32
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d007      	beq.n	8006a36 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d003      	beq.n	8006a36 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4a:	2b40      	cmp	r3, #64	; 0x40
 8006a4c:	d005      	beq.n	8006a5a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d04f      	beq.n	8006afa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fefe 	bl	800785c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6a:	2b40      	cmp	r3, #64	; 0x40
 8006a6c:	d141      	bne.n	8006af2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3308      	adds	r3, #8
 8006a74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a7c:	e853 3f00 	ldrex	r3, [r3]
 8006a80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3308      	adds	r3, #8
 8006a96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006aa6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ab2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1d9      	bne.n	8006a6e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d013      	beq.n	8006aea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ac6:	4a13      	ldr	r2, [pc, #76]	; (8006b14 <HAL_UART_IRQHandler+0x29c>)
 8006ac8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fc f8b5 	bl	8002c3e <HAL_DMA_Abort_IT>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d017      	beq.n	8006b0a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae8:	e00f      	b.n	8006b0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f9b6 	bl	8006e5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af0:	e00b      	b.n	8006b0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f9b2 	bl	8006e5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af8:	e007      	b.n	8006b0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f9ae 	bl	8006e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006b08:	e193      	b.n	8006e32 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b0a:	bf00      	nop
    return;
 8006b0c:	e191      	b.n	8006e32 <HAL_UART_IRQHandler+0x5ba>
 8006b0e:	bf00      	nop
 8006b10:	04000120 	.word	0x04000120
 8006b14:	08007925 	.word	0x08007925

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	f040 814c 	bne.w	8006dba <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b26:	f003 0310 	and.w	r3, r3, #16
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f000 8145 	beq.w	8006dba <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b34:	f003 0310 	and.w	r3, r3, #16
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 813e 	beq.w	8006dba <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2210      	movs	r2, #16
 8006b44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b50:	2b40      	cmp	r3, #64	; 0x40
 8006b52:	f040 80b6 	bne.w	8006cc2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b62:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 8165 	beq.w	8006e36 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b76:	429a      	cmp	r2, r3
 8006b78:	f080 815d 	bcs.w	8006e36 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b8a:	69db      	ldr	r3, [r3, #28]
 8006b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b90:	f000 8086 	beq.w	8006ca0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
 8006ba4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ba8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	461a      	mov	r2, r3
 8006bba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006bc2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006bca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006bce:	e841 2300 	strex	r3, r2, [r1]
 8006bd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1da      	bne.n	8006b94 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3308      	adds	r3, #8
 8006be4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006be8:	e853 3f00 	ldrex	r3, [r3]
 8006bec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006bee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bf0:	f023 0301 	bic.w	r3, r3, #1
 8006bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3308      	adds	r3, #8
 8006bfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c0e:	e841 2300 	strex	r3, r2, [r1]
 8006c12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1e1      	bne.n	8006bde <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3308      	adds	r3, #8
 8006c20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c24:	e853 3f00 	ldrex	r3, [r3]
 8006c28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3308      	adds	r3, #8
 8006c3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e3      	bne.n	8006c1a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2220      	movs	r2, #32
 8006c56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c68:	e853 3f00 	ldrex	r3, [r3]
 8006c6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c70:	f023 0310 	bic.w	r3, r3, #16
 8006c74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c82:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c84:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c8a:	e841 2300 	strex	r3, r2, [r1]
 8006c8e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1e4      	bne.n	8006c60 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fb ff5f 	bl	8002b5e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	4619      	mov	r1, r3
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f8d8 	bl	8006e70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006cc0:	e0b9      	b.n	8006e36 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 80ab 	beq.w	8006e3a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006ce4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 80a6 	beq.w	8006e3a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf6:	e853 3f00 	ldrex	r3, [r3]
 8006cfa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d10:	647b      	str	r3, [r7, #68]	; 0x44
 8006d12:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d18:	e841 2300 	strex	r3, r2, [r1]
 8006d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1e4      	bne.n	8006cee <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	3308      	adds	r3, #8
 8006d2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	e853 3f00 	ldrex	r3, [r3]
 8006d32:	623b      	str	r3, [r7, #32]
   return(result);
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	f023 0301 	bic.w	r3, r3, #1
 8006d3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3308      	adds	r3, #8
 8006d44:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d48:	633a      	str	r2, [r7, #48]	; 0x30
 8006d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d50:	e841 2300 	strex	r3, r2, [r1]
 8006d54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1e3      	bne.n	8006d24 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	e853 3f00 	ldrex	r3, [r3]
 8006d7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f023 0310 	bic.w	r3, r3, #16
 8006d84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006d92:	61fb      	str	r3, [r7, #28]
 8006d94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d96:	69b9      	ldr	r1, [r7, #24]
 8006d98:	69fa      	ldr	r2, [r7, #28]
 8006d9a:	e841 2300 	strex	r3, r2, [r1]
 8006d9e:	617b      	str	r3, [r7, #20]
   return(result);
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1e4      	bne.n	8006d70 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2202      	movs	r2, #2
 8006daa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006dac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006db0:	4619      	mov	r1, r3
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f85c 	bl	8006e70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006db8:	e03f      	b.n	8006e3a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00e      	beq.n	8006de4 <HAL_UART_IRQHandler+0x56c>
 8006dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d008      	beq.n	8006de4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006dda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f853 	bl	8006e88 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006de2:	e02d      	b.n	8006e40 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00e      	beq.n	8006e0e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d008      	beq.n	8006e0e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d01c      	beq.n	8006e3e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	4798      	blx	r3
    }
    return;
 8006e0c:	e017      	b.n	8006e3e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d012      	beq.n	8006e40 <HAL_UART_IRQHandler+0x5c8>
 8006e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00c      	beq.n	8006e40 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fe4d 	bl	8007ac6 <UART_EndTransmit_IT>
    return;
 8006e2c:	e008      	b.n	8006e40 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006e2e:	bf00      	nop
 8006e30:	e006      	b.n	8006e40 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006e32:	bf00      	nop
 8006e34:	e004      	b.n	8006e40 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006e36:	bf00      	nop
 8006e38:	e002      	b.n	8006e40 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006e3a:	bf00      	nop
 8006e3c:	e000      	b.n	8006e40 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006e3e:	bf00      	nop
  }

}
 8006e40:	37e8      	adds	r7, #232	; 0xe8
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop

08006e48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b088      	sub	sp, #32
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	689a      	ldr	r2, [r3, #8]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	431a      	orrs	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	69db      	ldr	r3, [r3, #28]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	4ba6      	ldr	r3, [pc, #664]	; (8007160 <UART_SetConfig+0x2c4>)
 8006ec8:	4013      	ands	r3, r2
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	6812      	ldr	r2, [r2, #0]
 8006ece:	6979      	ldr	r1, [r7, #20]
 8006ed0:	430b      	orrs	r3, r1
 8006ed2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a1b      	ldr	r3, [r3, #32]
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a94      	ldr	r2, [pc, #592]	; (8007164 <UART_SetConfig+0x2c8>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d120      	bne.n	8006f5a <UART_SetConfig+0xbe>
 8006f18:	4b93      	ldr	r3, [pc, #588]	; (8007168 <UART_SetConfig+0x2cc>)
 8006f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f1e:	f003 0303 	and.w	r3, r3, #3
 8006f22:	2b03      	cmp	r3, #3
 8006f24:	d816      	bhi.n	8006f54 <UART_SetConfig+0xb8>
 8006f26:	a201      	add	r2, pc, #4	; (adr r2, 8006f2c <UART_SetConfig+0x90>)
 8006f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2c:	08006f3d 	.word	0x08006f3d
 8006f30:	08006f49 	.word	0x08006f49
 8006f34:	08006f43 	.word	0x08006f43
 8006f38:	08006f4f 	.word	0x08006f4f
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	77fb      	strb	r3, [r7, #31]
 8006f40:	e150      	b.n	80071e4 <UART_SetConfig+0x348>
 8006f42:	2302      	movs	r3, #2
 8006f44:	77fb      	strb	r3, [r7, #31]
 8006f46:	e14d      	b.n	80071e4 <UART_SetConfig+0x348>
 8006f48:	2304      	movs	r3, #4
 8006f4a:	77fb      	strb	r3, [r7, #31]
 8006f4c:	e14a      	b.n	80071e4 <UART_SetConfig+0x348>
 8006f4e:	2308      	movs	r3, #8
 8006f50:	77fb      	strb	r3, [r7, #31]
 8006f52:	e147      	b.n	80071e4 <UART_SetConfig+0x348>
 8006f54:	2310      	movs	r3, #16
 8006f56:	77fb      	strb	r3, [r7, #31]
 8006f58:	e144      	b.n	80071e4 <UART_SetConfig+0x348>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a83      	ldr	r2, [pc, #524]	; (800716c <UART_SetConfig+0x2d0>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d132      	bne.n	8006fca <UART_SetConfig+0x12e>
 8006f64:	4b80      	ldr	r3, [pc, #512]	; (8007168 <UART_SetConfig+0x2cc>)
 8006f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f6a:	f003 030c 	and.w	r3, r3, #12
 8006f6e:	2b0c      	cmp	r3, #12
 8006f70:	d828      	bhi.n	8006fc4 <UART_SetConfig+0x128>
 8006f72:	a201      	add	r2, pc, #4	; (adr r2, 8006f78 <UART_SetConfig+0xdc>)
 8006f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f78:	08006fad 	.word	0x08006fad
 8006f7c:	08006fc5 	.word	0x08006fc5
 8006f80:	08006fc5 	.word	0x08006fc5
 8006f84:	08006fc5 	.word	0x08006fc5
 8006f88:	08006fb9 	.word	0x08006fb9
 8006f8c:	08006fc5 	.word	0x08006fc5
 8006f90:	08006fc5 	.word	0x08006fc5
 8006f94:	08006fc5 	.word	0x08006fc5
 8006f98:	08006fb3 	.word	0x08006fb3
 8006f9c:	08006fc5 	.word	0x08006fc5
 8006fa0:	08006fc5 	.word	0x08006fc5
 8006fa4:	08006fc5 	.word	0x08006fc5
 8006fa8:	08006fbf 	.word	0x08006fbf
 8006fac:	2300      	movs	r3, #0
 8006fae:	77fb      	strb	r3, [r7, #31]
 8006fb0:	e118      	b.n	80071e4 <UART_SetConfig+0x348>
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	77fb      	strb	r3, [r7, #31]
 8006fb6:	e115      	b.n	80071e4 <UART_SetConfig+0x348>
 8006fb8:	2304      	movs	r3, #4
 8006fba:	77fb      	strb	r3, [r7, #31]
 8006fbc:	e112      	b.n	80071e4 <UART_SetConfig+0x348>
 8006fbe:	2308      	movs	r3, #8
 8006fc0:	77fb      	strb	r3, [r7, #31]
 8006fc2:	e10f      	b.n	80071e4 <UART_SetConfig+0x348>
 8006fc4:	2310      	movs	r3, #16
 8006fc6:	77fb      	strb	r3, [r7, #31]
 8006fc8:	e10c      	b.n	80071e4 <UART_SetConfig+0x348>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a68      	ldr	r2, [pc, #416]	; (8007170 <UART_SetConfig+0x2d4>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d120      	bne.n	8007016 <UART_SetConfig+0x17a>
 8006fd4:	4b64      	ldr	r3, [pc, #400]	; (8007168 <UART_SetConfig+0x2cc>)
 8006fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fda:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006fde:	2b30      	cmp	r3, #48	; 0x30
 8006fe0:	d013      	beq.n	800700a <UART_SetConfig+0x16e>
 8006fe2:	2b30      	cmp	r3, #48	; 0x30
 8006fe4:	d814      	bhi.n	8007010 <UART_SetConfig+0x174>
 8006fe6:	2b20      	cmp	r3, #32
 8006fe8:	d009      	beq.n	8006ffe <UART_SetConfig+0x162>
 8006fea:	2b20      	cmp	r3, #32
 8006fec:	d810      	bhi.n	8007010 <UART_SetConfig+0x174>
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d002      	beq.n	8006ff8 <UART_SetConfig+0x15c>
 8006ff2:	2b10      	cmp	r3, #16
 8006ff4:	d006      	beq.n	8007004 <UART_SetConfig+0x168>
 8006ff6:	e00b      	b.n	8007010 <UART_SetConfig+0x174>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	77fb      	strb	r3, [r7, #31]
 8006ffc:	e0f2      	b.n	80071e4 <UART_SetConfig+0x348>
 8006ffe:	2302      	movs	r3, #2
 8007000:	77fb      	strb	r3, [r7, #31]
 8007002:	e0ef      	b.n	80071e4 <UART_SetConfig+0x348>
 8007004:	2304      	movs	r3, #4
 8007006:	77fb      	strb	r3, [r7, #31]
 8007008:	e0ec      	b.n	80071e4 <UART_SetConfig+0x348>
 800700a:	2308      	movs	r3, #8
 800700c:	77fb      	strb	r3, [r7, #31]
 800700e:	e0e9      	b.n	80071e4 <UART_SetConfig+0x348>
 8007010:	2310      	movs	r3, #16
 8007012:	77fb      	strb	r3, [r7, #31]
 8007014:	e0e6      	b.n	80071e4 <UART_SetConfig+0x348>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a56      	ldr	r2, [pc, #344]	; (8007174 <UART_SetConfig+0x2d8>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d120      	bne.n	8007062 <UART_SetConfig+0x1c6>
 8007020:	4b51      	ldr	r3, [pc, #324]	; (8007168 <UART_SetConfig+0x2cc>)
 8007022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007026:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800702a:	2bc0      	cmp	r3, #192	; 0xc0
 800702c:	d013      	beq.n	8007056 <UART_SetConfig+0x1ba>
 800702e:	2bc0      	cmp	r3, #192	; 0xc0
 8007030:	d814      	bhi.n	800705c <UART_SetConfig+0x1c0>
 8007032:	2b80      	cmp	r3, #128	; 0x80
 8007034:	d009      	beq.n	800704a <UART_SetConfig+0x1ae>
 8007036:	2b80      	cmp	r3, #128	; 0x80
 8007038:	d810      	bhi.n	800705c <UART_SetConfig+0x1c0>
 800703a:	2b00      	cmp	r3, #0
 800703c:	d002      	beq.n	8007044 <UART_SetConfig+0x1a8>
 800703e:	2b40      	cmp	r3, #64	; 0x40
 8007040:	d006      	beq.n	8007050 <UART_SetConfig+0x1b4>
 8007042:	e00b      	b.n	800705c <UART_SetConfig+0x1c0>
 8007044:	2300      	movs	r3, #0
 8007046:	77fb      	strb	r3, [r7, #31]
 8007048:	e0cc      	b.n	80071e4 <UART_SetConfig+0x348>
 800704a:	2302      	movs	r3, #2
 800704c:	77fb      	strb	r3, [r7, #31]
 800704e:	e0c9      	b.n	80071e4 <UART_SetConfig+0x348>
 8007050:	2304      	movs	r3, #4
 8007052:	77fb      	strb	r3, [r7, #31]
 8007054:	e0c6      	b.n	80071e4 <UART_SetConfig+0x348>
 8007056:	2308      	movs	r3, #8
 8007058:	77fb      	strb	r3, [r7, #31]
 800705a:	e0c3      	b.n	80071e4 <UART_SetConfig+0x348>
 800705c:	2310      	movs	r3, #16
 800705e:	77fb      	strb	r3, [r7, #31]
 8007060:	e0c0      	b.n	80071e4 <UART_SetConfig+0x348>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a44      	ldr	r2, [pc, #272]	; (8007178 <UART_SetConfig+0x2dc>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d125      	bne.n	80070b8 <UART_SetConfig+0x21c>
 800706c:	4b3e      	ldr	r3, [pc, #248]	; (8007168 <UART_SetConfig+0x2cc>)
 800706e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007076:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800707a:	d017      	beq.n	80070ac <UART_SetConfig+0x210>
 800707c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007080:	d817      	bhi.n	80070b2 <UART_SetConfig+0x216>
 8007082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007086:	d00b      	beq.n	80070a0 <UART_SetConfig+0x204>
 8007088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800708c:	d811      	bhi.n	80070b2 <UART_SetConfig+0x216>
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <UART_SetConfig+0x1fe>
 8007092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007096:	d006      	beq.n	80070a6 <UART_SetConfig+0x20a>
 8007098:	e00b      	b.n	80070b2 <UART_SetConfig+0x216>
 800709a:	2300      	movs	r3, #0
 800709c:	77fb      	strb	r3, [r7, #31]
 800709e:	e0a1      	b.n	80071e4 <UART_SetConfig+0x348>
 80070a0:	2302      	movs	r3, #2
 80070a2:	77fb      	strb	r3, [r7, #31]
 80070a4:	e09e      	b.n	80071e4 <UART_SetConfig+0x348>
 80070a6:	2304      	movs	r3, #4
 80070a8:	77fb      	strb	r3, [r7, #31]
 80070aa:	e09b      	b.n	80071e4 <UART_SetConfig+0x348>
 80070ac:	2308      	movs	r3, #8
 80070ae:	77fb      	strb	r3, [r7, #31]
 80070b0:	e098      	b.n	80071e4 <UART_SetConfig+0x348>
 80070b2:	2310      	movs	r3, #16
 80070b4:	77fb      	strb	r3, [r7, #31]
 80070b6:	e095      	b.n	80071e4 <UART_SetConfig+0x348>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a2f      	ldr	r2, [pc, #188]	; (800717c <UART_SetConfig+0x2e0>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d125      	bne.n	800710e <UART_SetConfig+0x272>
 80070c2:	4b29      	ldr	r3, [pc, #164]	; (8007168 <UART_SetConfig+0x2cc>)
 80070c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80070cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070d0:	d017      	beq.n	8007102 <UART_SetConfig+0x266>
 80070d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070d6:	d817      	bhi.n	8007108 <UART_SetConfig+0x26c>
 80070d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070dc:	d00b      	beq.n	80070f6 <UART_SetConfig+0x25a>
 80070de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070e2:	d811      	bhi.n	8007108 <UART_SetConfig+0x26c>
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d003      	beq.n	80070f0 <UART_SetConfig+0x254>
 80070e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ec:	d006      	beq.n	80070fc <UART_SetConfig+0x260>
 80070ee:	e00b      	b.n	8007108 <UART_SetConfig+0x26c>
 80070f0:	2301      	movs	r3, #1
 80070f2:	77fb      	strb	r3, [r7, #31]
 80070f4:	e076      	b.n	80071e4 <UART_SetConfig+0x348>
 80070f6:	2302      	movs	r3, #2
 80070f8:	77fb      	strb	r3, [r7, #31]
 80070fa:	e073      	b.n	80071e4 <UART_SetConfig+0x348>
 80070fc:	2304      	movs	r3, #4
 80070fe:	77fb      	strb	r3, [r7, #31]
 8007100:	e070      	b.n	80071e4 <UART_SetConfig+0x348>
 8007102:	2308      	movs	r3, #8
 8007104:	77fb      	strb	r3, [r7, #31]
 8007106:	e06d      	b.n	80071e4 <UART_SetConfig+0x348>
 8007108:	2310      	movs	r3, #16
 800710a:	77fb      	strb	r3, [r7, #31]
 800710c:	e06a      	b.n	80071e4 <UART_SetConfig+0x348>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a1b      	ldr	r2, [pc, #108]	; (8007180 <UART_SetConfig+0x2e4>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d138      	bne.n	800718a <UART_SetConfig+0x2ee>
 8007118:	4b13      	ldr	r3, [pc, #76]	; (8007168 <UART_SetConfig+0x2cc>)
 800711a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800711e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007122:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007126:	d017      	beq.n	8007158 <UART_SetConfig+0x2bc>
 8007128:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800712c:	d82a      	bhi.n	8007184 <UART_SetConfig+0x2e8>
 800712e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007132:	d00b      	beq.n	800714c <UART_SetConfig+0x2b0>
 8007134:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007138:	d824      	bhi.n	8007184 <UART_SetConfig+0x2e8>
 800713a:	2b00      	cmp	r3, #0
 800713c:	d003      	beq.n	8007146 <UART_SetConfig+0x2aa>
 800713e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007142:	d006      	beq.n	8007152 <UART_SetConfig+0x2b6>
 8007144:	e01e      	b.n	8007184 <UART_SetConfig+0x2e8>
 8007146:	2300      	movs	r3, #0
 8007148:	77fb      	strb	r3, [r7, #31]
 800714a:	e04b      	b.n	80071e4 <UART_SetConfig+0x348>
 800714c:	2302      	movs	r3, #2
 800714e:	77fb      	strb	r3, [r7, #31]
 8007150:	e048      	b.n	80071e4 <UART_SetConfig+0x348>
 8007152:	2304      	movs	r3, #4
 8007154:	77fb      	strb	r3, [r7, #31]
 8007156:	e045      	b.n	80071e4 <UART_SetConfig+0x348>
 8007158:	2308      	movs	r3, #8
 800715a:	77fb      	strb	r3, [r7, #31]
 800715c:	e042      	b.n	80071e4 <UART_SetConfig+0x348>
 800715e:	bf00      	nop
 8007160:	efff69f3 	.word	0xefff69f3
 8007164:	40011000 	.word	0x40011000
 8007168:	40023800 	.word	0x40023800
 800716c:	40004400 	.word	0x40004400
 8007170:	40004800 	.word	0x40004800
 8007174:	40004c00 	.word	0x40004c00
 8007178:	40005000 	.word	0x40005000
 800717c:	40011400 	.word	0x40011400
 8007180:	40007800 	.word	0x40007800
 8007184:	2310      	movs	r3, #16
 8007186:	77fb      	strb	r3, [r7, #31]
 8007188:	e02c      	b.n	80071e4 <UART_SetConfig+0x348>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a72      	ldr	r2, [pc, #456]	; (8007358 <UART_SetConfig+0x4bc>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d125      	bne.n	80071e0 <UART_SetConfig+0x344>
 8007194:	4b71      	ldr	r3, [pc, #452]	; (800735c <UART_SetConfig+0x4c0>)
 8007196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800719a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800719e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80071a2:	d017      	beq.n	80071d4 <UART_SetConfig+0x338>
 80071a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80071a8:	d817      	bhi.n	80071da <UART_SetConfig+0x33e>
 80071aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071ae:	d00b      	beq.n	80071c8 <UART_SetConfig+0x32c>
 80071b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071b4:	d811      	bhi.n	80071da <UART_SetConfig+0x33e>
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <UART_SetConfig+0x326>
 80071ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071be:	d006      	beq.n	80071ce <UART_SetConfig+0x332>
 80071c0:	e00b      	b.n	80071da <UART_SetConfig+0x33e>
 80071c2:	2300      	movs	r3, #0
 80071c4:	77fb      	strb	r3, [r7, #31]
 80071c6:	e00d      	b.n	80071e4 <UART_SetConfig+0x348>
 80071c8:	2302      	movs	r3, #2
 80071ca:	77fb      	strb	r3, [r7, #31]
 80071cc:	e00a      	b.n	80071e4 <UART_SetConfig+0x348>
 80071ce:	2304      	movs	r3, #4
 80071d0:	77fb      	strb	r3, [r7, #31]
 80071d2:	e007      	b.n	80071e4 <UART_SetConfig+0x348>
 80071d4:	2308      	movs	r3, #8
 80071d6:	77fb      	strb	r3, [r7, #31]
 80071d8:	e004      	b.n	80071e4 <UART_SetConfig+0x348>
 80071da:	2310      	movs	r3, #16
 80071dc:	77fb      	strb	r3, [r7, #31]
 80071de:	e001      	b.n	80071e4 <UART_SetConfig+0x348>
 80071e0:	2310      	movs	r3, #16
 80071e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	69db      	ldr	r3, [r3, #28]
 80071e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071ec:	d15b      	bne.n	80072a6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80071ee:	7ffb      	ldrb	r3, [r7, #31]
 80071f0:	2b08      	cmp	r3, #8
 80071f2:	d828      	bhi.n	8007246 <UART_SetConfig+0x3aa>
 80071f4:	a201      	add	r2, pc, #4	; (adr r2, 80071fc <UART_SetConfig+0x360>)
 80071f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fa:	bf00      	nop
 80071fc:	08007221 	.word	0x08007221
 8007200:	08007229 	.word	0x08007229
 8007204:	08007231 	.word	0x08007231
 8007208:	08007247 	.word	0x08007247
 800720c:	08007237 	.word	0x08007237
 8007210:	08007247 	.word	0x08007247
 8007214:	08007247 	.word	0x08007247
 8007218:	08007247 	.word	0x08007247
 800721c:	0800723f 	.word	0x0800723f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007220:	f7fd fb12 	bl	8004848 <HAL_RCC_GetPCLK1Freq>
 8007224:	61b8      	str	r0, [r7, #24]
        break;
 8007226:	e013      	b.n	8007250 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007228:	f7fd fb22 	bl	8004870 <HAL_RCC_GetPCLK2Freq>
 800722c:	61b8      	str	r0, [r7, #24]
        break;
 800722e:	e00f      	b.n	8007250 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007230:	4b4b      	ldr	r3, [pc, #300]	; (8007360 <UART_SetConfig+0x4c4>)
 8007232:	61bb      	str	r3, [r7, #24]
        break;
 8007234:	e00c      	b.n	8007250 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007236:	f7fd f9f5 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 800723a:	61b8      	str	r0, [r7, #24]
        break;
 800723c:	e008      	b.n	8007250 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800723e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007242:	61bb      	str	r3, [r7, #24]
        break;
 8007244:	e004      	b.n	8007250 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007246:	2300      	movs	r3, #0
 8007248:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	77bb      	strb	r3, [r7, #30]
        break;
 800724e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d074      	beq.n	8007340 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	005a      	lsls	r2, r3, #1
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	085b      	lsrs	r3, r3, #1
 8007260:	441a      	add	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	fbb2 f3f3 	udiv	r3, r2, r3
 800726a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	2b0f      	cmp	r3, #15
 8007270:	d916      	bls.n	80072a0 <UART_SetConfig+0x404>
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007278:	d212      	bcs.n	80072a0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	b29b      	uxth	r3, r3
 800727e:	f023 030f 	bic.w	r3, r3, #15
 8007282:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	085b      	lsrs	r3, r3, #1
 8007288:	b29b      	uxth	r3, r3
 800728a:	f003 0307 	and.w	r3, r3, #7
 800728e:	b29a      	uxth	r2, r3
 8007290:	89fb      	ldrh	r3, [r7, #14]
 8007292:	4313      	orrs	r3, r2
 8007294:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	89fa      	ldrh	r2, [r7, #14]
 800729c:	60da      	str	r2, [r3, #12]
 800729e:	e04f      	b.n	8007340 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	77bb      	strb	r3, [r7, #30]
 80072a4:	e04c      	b.n	8007340 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072a6:	7ffb      	ldrb	r3, [r7, #31]
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	d828      	bhi.n	80072fe <UART_SetConfig+0x462>
 80072ac:	a201      	add	r2, pc, #4	; (adr r2, 80072b4 <UART_SetConfig+0x418>)
 80072ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b2:	bf00      	nop
 80072b4:	080072d9 	.word	0x080072d9
 80072b8:	080072e1 	.word	0x080072e1
 80072bc:	080072e9 	.word	0x080072e9
 80072c0:	080072ff 	.word	0x080072ff
 80072c4:	080072ef 	.word	0x080072ef
 80072c8:	080072ff 	.word	0x080072ff
 80072cc:	080072ff 	.word	0x080072ff
 80072d0:	080072ff 	.word	0x080072ff
 80072d4:	080072f7 	.word	0x080072f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072d8:	f7fd fab6 	bl	8004848 <HAL_RCC_GetPCLK1Freq>
 80072dc:	61b8      	str	r0, [r7, #24]
        break;
 80072de:	e013      	b.n	8007308 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072e0:	f7fd fac6 	bl	8004870 <HAL_RCC_GetPCLK2Freq>
 80072e4:	61b8      	str	r0, [r7, #24]
        break;
 80072e6:	e00f      	b.n	8007308 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072e8:	4b1d      	ldr	r3, [pc, #116]	; (8007360 <UART_SetConfig+0x4c4>)
 80072ea:	61bb      	str	r3, [r7, #24]
        break;
 80072ec:	e00c      	b.n	8007308 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072ee:	f7fd f999 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 80072f2:	61b8      	str	r0, [r7, #24]
        break;
 80072f4:	e008      	b.n	8007308 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072fa:	61bb      	str	r3, [r7, #24]
        break;
 80072fc:	e004      	b.n	8007308 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80072fe:	2300      	movs	r3, #0
 8007300:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	77bb      	strb	r3, [r7, #30]
        break;
 8007306:	bf00      	nop
    }

    if (pclk != 0U)
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d018      	beq.n	8007340 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	085a      	lsrs	r2, r3, #1
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	441a      	add	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007320:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	2b0f      	cmp	r3, #15
 8007326:	d909      	bls.n	800733c <UART_SetConfig+0x4a0>
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800732e:	d205      	bcs.n	800733c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	b29a      	uxth	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	60da      	str	r2, [r3, #12]
 800733a:	e001      	b.n	8007340 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800734c:	7fbb      	ldrb	r3, [r7, #30]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3720      	adds	r7, #32
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	40007c00 	.word	0x40007c00
 800735c:	40023800 	.word	0x40023800
 8007360:	00f42400 	.word	0x00f42400

08007364 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	f003 0301 	and.w	r3, r3, #1
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00a      	beq.n	800738e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007392:	f003 0302 	and.w	r3, r3, #2
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00a      	beq.n	80073b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b4:	f003 0304 	and.w	r3, r3, #4
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00a      	beq.n	80073d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d6:	f003 0308 	and.w	r3, r3, #8
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f8:	f003 0310 	and.w	r3, r3, #16
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00a      	beq.n	8007416 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741a:	f003 0320 	and.w	r3, r3, #32
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00a      	beq.n	8007438 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007440:	2b00      	cmp	r3, #0
 8007442:	d01a      	beq.n	800747a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	430a      	orrs	r2, r1
 8007458:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007462:	d10a      	bne.n	800747a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00a      	beq.n	800749c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	430a      	orrs	r2, r1
 800749a:	605a      	str	r2, [r3, #4]
  }
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af02      	add	r7, sp, #8
 80074ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074b8:	f7fb fa10 	bl	80028dc <HAL_GetTick>
 80074bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0308 	and.w	r3, r3, #8
 80074c8:	2b08      	cmp	r3, #8
 80074ca:	d10e      	bne.n	80074ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f831 	bl	8007542 <UART_WaitOnFlagUntilTimeout>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e027      	b.n	800753a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	2b04      	cmp	r3, #4
 80074f6:	d10e      	bne.n	8007516 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f81b 	bl	8007542 <UART_WaitOnFlagUntilTimeout>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d001      	beq.n	8007516 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e011      	b.n	800753a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2220      	movs	r2, #32
 800751a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2220      	movs	r2, #32
 8007520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b09c      	sub	sp, #112	; 0x70
 8007546:	af00      	add	r7, sp, #0
 8007548:	60f8      	str	r0, [r7, #12]
 800754a:	60b9      	str	r1, [r7, #8]
 800754c:	603b      	str	r3, [r7, #0]
 800754e:	4613      	mov	r3, r2
 8007550:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007552:	e0a7      	b.n	80076a4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007554:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755a:	f000 80a3 	beq.w	80076a4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800755e:	f7fb f9bd 	bl	80028dc <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800756a:	429a      	cmp	r2, r3
 800756c:	d302      	bcc.n	8007574 <UART_WaitOnFlagUntilTimeout+0x32>
 800756e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007570:	2b00      	cmp	r3, #0
 8007572:	d13f      	bne.n	80075f4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007584:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007588:	667b      	str	r3, [r7, #100]	; 0x64
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	461a      	mov	r2, r3
 8007590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007592:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007594:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007596:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007598:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800759a:	e841 2300 	strex	r3, r2, [r1]
 800759e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80075a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1e6      	bne.n	8007574 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	3308      	adds	r3, #8
 80075ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b0:	e853 3f00 	ldrex	r3, [r3]
 80075b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b8:	f023 0301 	bic.w	r3, r3, #1
 80075bc:	663b      	str	r3, [r7, #96]	; 0x60
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	3308      	adds	r3, #8
 80075c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80075c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80075c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80075cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075ce:	e841 2300 	strex	r3, r2, [r1]
 80075d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80075d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1e5      	bne.n	80075a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2220      	movs	r2, #32
 80075de:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2220      	movs	r2, #32
 80075e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e068      	b.n	80076c6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0304 	and.w	r3, r3, #4
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d050      	beq.n	80076a4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800760c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007610:	d148      	bne.n	80076a4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800761a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007624:	e853 3f00 	ldrex	r3, [r3]
 8007628:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007630:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	461a      	mov	r2, r3
 8007638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800763a:	637b      	str	r3, [r7, #52]	; 0x34
 800763c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007640:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007642:	e841 2300 	strex	r3, r2, [r1]
 8007646:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764a:	2b00      	cmp	r3, #0
 800764c:	d1e6      	bne.n	800761c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	3308      	adds	r3, #8
 8007654:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	e853 3f00 	ldrex	r3, [r3]
 800765c:	613b      	str	r3, [r7, #16]
   return(result);
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	f023 0301 	bic.w	r3, r3, #1
 8007664:	66bb      	str	r3, [r7, #104]	; 0x68
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3308      	adds	r3, #8
 800766c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800766e:	623a      	str	r2, [r7, #32]
 8007670:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007672:	69f9      	ldr	r1, [r7, #28]
 8007674:	6a3a      	ldr	r2, [r7, #32]
 8007676:	e841 2300 	strex	r3, r2, [r1]
 800767a:	61bb      	str	r3, [r7, #24]
   return(result);
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1e5      	bne.n	800764e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2220      	movs	r2, #32
 8007686:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2220      	movs	r2, #32
 800768c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2220      	movs	r2, #32
 8007694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e010      	b.n	80076c6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	69da      	ldr	r2, [r3, #28]
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	4013      	ands	r3, r2
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	bf0c      	ite	eq
 80076b4:	2301      	moveq	r3, #1
 80076b6:	2300      	movne	r3, #0
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	461a      	mov	r2, r3
 80076bc:	79fb      	ldrb	r3, [r7, #7]
 80076be:	429a      	cmp	r2, r3
 80076c0:	f43f af48 	beq.w	8007554 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3770      	adds	r7, #112	; 0x70
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
	...

080076d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b097      	sub	sp, #92	; 0x5c
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	4613      	mov	r3, r2
 80076dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	88fa      	ldrh	r2, [r7, #6]
 80076e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	88fa      	ldrh	r2, [r7, #6]
 80076f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007702:	d10e      	bne.n	8007722 <UART_Start_Receive_IT+0x52>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d105      	bne.n	8007718 <UART_Start_Receive_IT+0x48>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007712:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007716:	e02d      	b.n	8007774 <UART_Start_Receive_IT+0xa4>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	22ff      	movs	r2, #255	; 0xff
 800771c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007720:	e028      	b.n	8007774 <UART_Start_Receive_IT+0xa4>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10d      	bne.n	8007746 <UART_Start_Receive_IT+0x76>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d104      	bne.n	800773c <UART_Start_Receive_IT+0x6c>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	22ff      	movs	r2, #255	; 0xff
 8007736:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800773a:	e01b      	b.n	8007774 <UART_Start_Receive_IT+0xa4>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	227f      	movs	r2, #127	; 0x7f
 8007740:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007744:	e016      	b.n	8007774 <UART_Start_Receive_IT+0xa4>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800774e:	d10d      	bne.n	800776c <UART_Start_Receive_IT+0x9c>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d104      	bne.n	8007762 <UART_Start_Receive_IT+0x92>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	227f      	movs	r2, #127	; 0x7f
 800775c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007760:	e008      	b.n	8007774 <UART_Start_Receive_IT+0xa4>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	223f      	movs	r2, #63	; 0x3f
 8007766:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800776a:	e003      	b.n	8007774 <UART_Start_Receive_IT+0xa4>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2222      	movs	r2, #34	; 0x22
 8007780:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	3308      	adds	r3, #8
 800778a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800778e:	e853 3f00 	ldrex	r3, [r3]
 8007792:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007796:	f043 0301 	orr.w	r3, r3, #1
 800779a:	657b      	str	r3, [r7, #84]	; 0x54
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	3308      	adds	r3, #8
 80077a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80077a4:	64ba      	str	r2, [r7, #72]	; 0x48
 80077a6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077ac:	e841 2300 	strex	r3, r2, [r1]
 80077b0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80077b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1e5      	bne.n	8007784 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c0:	d107      	bne.n	80077d2 <UART_Start_Receive_IT+0x102>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d103      	bne.n	80077d2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	4a21      	ldr	r2, [pc, #132]	; (8007854 <UART_Start_Receive_IT+0x184>)
 80077ce:	669a      	str	r2, [r3, #104]	; 0x68
 80077d0:	e002      	b.n	80077d8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	4a20      	ldr	r2, [pc, #128]	; (8007858 <UART_Start_Receive_IT+0x188>)
 80077d6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d019      	beq.n	8007814 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e8:	e853 3f00 	ldrex	r3, [r3]
 80077ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80077f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	461a      	mov	r2, r3
 80077fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007800:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007802:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007804:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007806:	e841 2300 	strex	r3, r2, [r1]
 800780a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800780c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1e6      	bne.n	80077e0 <UART_Start_Receive_IT+0x110>
 8007812:	e018      	b.n	8007846 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	e853 3f00 	ldrex	r3, [r3]
 8007820:	613b      	str	r3, [r7, #16]
   return(result);
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	f043 0320 	orr.w	r3, r3, #32
 8007828:	653b      	str	r3, [r7, #80]	; 0x50
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	461a      	mov	r2, r3
 8007830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007832:	623b      	str	r3, [r7, #32]
 8007834:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007836:	69f9      	ldr	r1, [r7, #28]
 8007838:	6a3a      	ldr	r2, [r7, #32]
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1e6      	bne.n	8007814 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	375c      	adds	r7, #92	; 0x5c
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr
 8007854:	08007c81 	.word	0x08007c81
 8007858:	08007b1b 	.word	0x08007b1b

0800785c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800785c:	b480      	push	{r7}
 800785e:	b095      	sub	sp, #84	; 0x54
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800786c:	e853 3f00 	ldrex	r3, [r3]
 8007870:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007874:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007878:	64fb      	str	r3, [r7, #76]	; 0x4c
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	461a      	mov	r2, r3
 8007880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007882:	643b      	str	r3, [r7, #64]	; 0x40
 8007884:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007886:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007888:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800788a:	e841 2300 	strex	r3, r2, [r1]
 800788e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1e6      	bne.n	8007864 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3308      	adds	r3, #8
 800789c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	e853 3f00 	ldrex	r3, [r3]
 80078a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	f023 0301 	bic.w	r3, r3, #1
 80078ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3308      	adds	r3, #8
 80078b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078be:	e841 2300 	strex	r3, r2, [r1]
 80078c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1e5      	bne.n	8007896 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d118      	bne.n	8007904 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	e853 3f00 	ldrex	r3, [r3]
 80078de:	60bb      	str	r3, [r7, #8]
   return(result);
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	f023 0310 	bic.w	r3, r3, #16
 80078e6:	647b      	str	r3, [r7, #68]	; 0x44
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	461a      	mov	r2, r3
 80078ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078f0:	61bb      	str	r3, [r7, #24]
 80078f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f4:	6979      	ldr	r1, [r7, #20]
 80078f6:	69ba      	ldr	r2, [r7, #24]
 80078f8:	e841 2300 	strex	r3, r2, [r1]
 80078fc:	613b      	str	r3, [r7, #16]
   return(result);
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1e6      	bne.n	80078d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2220      	movs	r2, #32
 8007908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007918:	bf00      	nop
 800791a:	3754      	adds	r7, #84	; 0x54
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007930:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f7ff fa8a 	bl	8006e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007948:	bf00      	nop
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007950:	b480      	push	{r7}
 8007952:	b08f      	sub	sp, #60	; 0x3c
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800795c:	2b21      	cmp	r3, #33	; 0x21
 800795e:	d14c      	bne.n	80079fa <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007966:	b29b      	uxth	r3, r3
 8007968:	2b00      	cmp	r3, #0
 800796a:	d132      	bne.n	80079d2 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007972:	6a3b      	ldr	r3, [r7, #32]
 8007974:	e853 3f00 	ldrex	r3, [r3]
 8007978:	61fb      	str	r3, [r7, #28]
   return(result);
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007980:	637b      	str	r3, [r7, #52]	; 0x34
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	461a      	mov	r2, r3
 8007988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800798c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e6      	bne.n	800796c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	e853 3f00 	ldrex	r3, [r3]
 80079aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079b2:	633b      	str	r3, [r7, #48]	; 0x30
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	461a      	mov	r2, r3
 80079ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079bc:	61bb      	str	r3, [r7, #24]
 80079be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c0:	6979      	ldr	r1, [r7, #20]
 80079c2:	69ba      	ldr	r2, [r7, #24]
 80079c4:	e841 2300 	strex	r3, r2, [r1]
 80079c8:	613b      	str	r3, [r7, #16]
   return(result);
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1e6      	bne.n	800799e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80079d0:	e013      	b.n	80079fa <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079d6:	781a      	ldrb	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079e2:	1c5a      	adds	r2, r3, #1
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	3b01      	subs	r3, #1
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80079fa:	bf00      	nop
 80079fc:	373c      	adds	r7, #60	; 0x3c
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b091      	sub	sp, #68	; 0x44
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a12:	2b21      	cmp	r3, #33	; 0x21
 8007a14:	d151      	bne.n	8007aba <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d132      	bne.n	8007a88 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2a:	e853 3f00 	ldrex	r3, [r3]
 8007a2e:	623b      	str	r3, [r7, #32]
   return(result);
 8007a30:	6a3b      	ldr	r3, [r7, #32]
 8007a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a36:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a40:	633b      	str	r3, [r7, #48]	; 0x30
 8007a42:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a48:	e841 2300 	strex	r3, r2, [r1]
 8007a4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1e6      	bne.n	8007a22 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	e853 3f00 	ldrex	r3, [r3]
 8007a60:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a68:	637b      	str	r3, [r7, #52]	; 0x34
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a72:	61fb      	str	r3, [r7, #28]
 8007a74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	69b9      	ldr	r1, [r7, #24]
 8007a78:	69fa      	ldr	r2, [r7, #28]
 8007a7a:	e841 2300 	strex	r3, r2, [r1]
 8007a7e:	617b      	str	r3, [r7, #20]
   return(result);
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1e6      	bne.n	8007a54 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007a86:	e018      	b.n	8007aba <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a90:	881b      	ldrh	r3, [r3, #0]
 8007a92:	461a      	mov	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a9c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aa2:	1c9a      	adds	r2, r3, #2
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007aba:	bf00      	nop
 8007abc:	3744      	adds	r7, #68	; 0x44
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b088      	sub	sp, #32
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	e853 3f00 	ldrex	r3, [r3]
 8007ada:	60bb      	str	r3, [r7, #8]
   return(result);
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ae2:	61fb      	str	r3, [r7, #28]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	461a      	mov	r2, r3
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	61bb      	str	r3, [r7, #24]
 8007aee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af0:	6979      	ldr	r1, [r7, #20]
 8007af2:	69ba      	ldr	r2, [r7, #24]
 8007af4:	e841 2300 	strex	r3, r2, [r1]
 8007af8:	613b      	str	r3, [r7, #16]
   return(result);
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1e6      	bne.n	8007ace <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2220      	movs	r2, #32
 8007b04:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f7ff f99b 	bl	8006e48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b12:	bf00      	nop
 8007b14:	3720      	adds	r7, #32
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b096      	sub	sp, #88	; 0x58
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b28:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b32:	2b22      	cmp	r3, #34	; 0x22
 8007b34:	f040 8098 	bne.w	8007c68 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b42:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007b46:	b2d9      	uxtb	r1, r3
 8007b48:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007b4c:	b2da      	uxtb	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b52:	400a      	ands	r2, r1
 8007b54:	b2d2      	uxtb	r2, r2
 8007b56:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5c:	1c5a      	adds	r2, r3, #1
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d17b      	bne.n	8007c78 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b88:	e853 3f00 	ldrex	r3, [r3]
 8007b8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b94:	653b      	str	r3, [r7, #80]	; 0x50
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b9e:	647b      	str	r3, [r7, #68]	; 0x44
 8007ba0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ba4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ba6:	e841 2300 	strex	r3, r2, [r1]
 8007baa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1e6      	bne.n	8007b80 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	3308      	adds	r3, #8
 8007bb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbc:	e853 3f00 	ldrex	r3, [r3]
 8007bc0:	623b      	str	r3, [r7, #32]
   return(result);
 8007bc2:	6a3b      	ldr	r3, [r7, #32]
 8007bc4:	f023 0301 	bic.w	r3, r3, #1
 8007bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3308      	adds	r3, #8
 8007bd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bd2:	633a      	str	r2, [r7, #48]	; 0x30
 8007bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bda:	e841 2300 	strex	r3, r2, [r1]
 8007bde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1e5      	bne.n	8007bb2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2220      	movs	r2, #32
 8007bea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d12e      	bne.n	8007c60 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f023 0310 	bic.w	r3, r3, #16
 8007c1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	461a      	mov	r2, r3
 8007c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c26:	61fb      	str	r3, [r7, #28]
 8007c28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2a:	69b9      	ldr	r1, [r7, #24]
 8007c2c:	69fa      	ldr	r2, [r7, #28]
 8007c2e:	e841 2300 	strex	r3, r2, [r1]
 8007c32:	617b      	str	r3, [r7, #20]
   return(result);
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1e6      	bne.n	8007c08 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	69db      	ldr	r3, [r3, #28]
 8007c40:	f003 0310 	and.w	r3, r3, #16
 8007c44:	2b10      	cmp	r3, #16
 8007c46:	d103      	bne.n	8007c50 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2210      	movs	r2, #16
 8007c4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c56:	4619      	mov	r1, r3
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f7ff f909 	bl	8006e70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c5e:	e00b      	b.n	8007c78 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f7f8 ffdd 	bl	8000c20 <HAL_UART_RxCpltCallback>
}
 8007c66:	e007      	b.n	8007c78 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	699a      	ldr	r2, [r3, #24]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f042 0208 	orr.w	r2, r2, #8
 8007c76:	619a      	str	r2, [r3, #24]
}
 8007c78:	bf00      	nop
 8007c7a:	3758      	adds	r7, #88	; 0x58
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b096      	sub	sp, #88	; 0x58
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c8e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c98:	2b22      	cmp	r3, #34	; 0x22
 8007c9a:	f040 8098 	bne.w	8007dce <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cac:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007cae:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007cb2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cbc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc2:	1c9a      	adds	r2, r3, #2
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d17b      	bne.n	8007dde <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cee:	e853 3f00 	ldrex	r3, [r3]
 8007cf2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	461a      	mov	r2, r3
 8007d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d04:	643b      	str	r3, [r7, #64]	; 0x40
 8007d06:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d0c:	e841 2300 	strex	r3, r2, [r1]
 8007d10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1e6      	bne.n	8007ce6 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	3308      	adds	r3, #8
 8007d1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d20:	6a3b      	ldr	r3, [r7, #32]
 8007d22:	e853 3f00 	ldrex	r3, [r3]
 8007d26:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	f023 0301 	bic.w	r3, r3, #1
 8007d2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	3308      	adds	r3, #8
 8007d36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d40:	e841 2300 	strex	r3, r2, [r1]
 8007d44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1e5      	bne.n	8007d18 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2220      	movs	r2, #32
 8007d50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d12e      	bne.n	8007dc6 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	e853 3f00 	ldrex	r3, [r3]
 8007d7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	f023 0310 	bic.w	r3, r3, #16
 8007d82:	647b      	str	r3, [r7, #68]	; 0x44
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	461a      	mov	r2, r3
 8007d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d8c:	61bb      	str	r3, [r7, #24]
 8007d8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d90:	6979      	ldr	r1, [r7, #20]
 8007d92:	69ba      	ldr	r2, [r7, #24]
 8007d94:	e841 2300 	strex	r3, r2, [r1]
 8007d98:	613b      	str	r3, [r7, #16]
   return(result);
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1e6      	bne.n	8007d6e <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	69db      	ldr	r3, [r3, #28]
 8007da6:	f003 0310 	and.w	r3, r3, #16
 8007daa:	2b10      	cmp	r3, #16
 8007dac:	d103      	bne.n	8007db6 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2210      	movs	r2, #16
 8007db4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7ff f856 	bl	8006e70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007dc4:	e00b      	b.n	8007dde <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7f8 ff2a 	bl	8000c20 <HAL_UART_RxCpltCallback>
}
 8007dcc:	e007      	b.n	8007dde <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	699a      	ldr	r2, [r3, #24]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f042 0208 	orr.w	r2, r2, #8
 8007ddc:	619a      	str	r2, [r3, #24]
}
 8007dde:	bf00      	nop
 8007de0:	3758      	adds	r7, #88	; 0x58
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
	...

08007de8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007de8:	b084      	sub	sp, #16
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b084      	sub	sp, #16
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	f107 001c 	add.w	r0, r7, #28
 8007df6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d120      	bne.n	8007e42 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	68da      	ldr	r2, [r3, #12]
 8007e10:	4b20      	ldr	r3, [pc, #128]	; (8007e94 <USB_CoreInit+0xac>)
 8007e12:	4013      	ands	r3, r2
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d105      	bne.n	8007e36 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fa96 	bl	8008368 <USB_CoreReset>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	73fb      	strb	r3, [r7, #15]
 8007e40:	e010      	b.n	8007e64 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 fa8a 	bl	8008368 <USB_CoreReset>
 8007e54:	4603      	mov	r3, r0
 8007e56:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d10b      	bne.n	8007e82 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	f043 0206 	orr.w	r2, r3, #6
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f043 0220 	orr.w	r2, r3, #32
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e8e:	b004      	add	sp, #16
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	ffbdffbf 	.word	0xffbdffbf

08007e98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f023 0201 	bic.w	r2, r3, #1
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ed6:	78fb      	ldrb	r3, [r7, #3]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d115      	bne.n	8007f08 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007ee8:	2001      	movs	r0, #1
 8007eea:	f7fa fd03 	bl	80028f4 <HAL_Delay>
      ms++;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 fa29 	bl	800834c <USB_GetMode>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d01e      	beq.n	8007f3e <USB_SetCurrentMode+0x84>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b31      	cmp	r3, #49	; 0x31
 8007f04:	d9f0      	bls.n	8007ee8 <USB_SetCurrentMode+0x2e>
 8007f06:	e01a      	b.n	8007f3e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f08:	78fb      	ldrb	r3, [r7, #3]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d115      	bne.n	8007f3a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007f1a:	2001      	movs	r0, #1
 8007f1c:	f7fa fcea 	bl	80028f4 <HAL_Delay>
      ms++;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	3301      	adds	r3, #1
 8007f24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fa10 	bl	800834c <USB_GetMode>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d005      	beq.n	8007f3e <USB_SetCurrentMode+0x84>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2b31      	cmp	r3, #49	; 0x31
 8007f36:	d9f0      	bls.n	8007f1a <USB_SetCurrentMode+0x60>
 8007f38:	e001      	b.n	8007f3e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e005      	b.n	8007f4a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2b32      	cmp	r3, #50	; 0x32
 8007f42:	d101      	bne.n	8007f48 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e000      	b.n	8007f4a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
	...

08007f54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f54:	b084      	sub	sp, #16
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b086      	sub	sp, #24
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
 8007f5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007f62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007f66:	2300      	movs	r3, #0
 8007f68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007f6e:	2300      	movs	r3, #0
 8007f70:	613b      	str	r3, [r7, #16]
 8007f72:	e009      	b.n	8007f88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	3340      	adds	r3, #64	; 0x40
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	4413      	add	r3, r2
 8007f7e:	2200      	movs	r2, #0
 8007f80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	3301      	adds	r3, #1
 8007f86:	613b      	str	r3, [r7, #16]
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	2b0e      	cmp	r3, #14
 8007f8c:	d9f2      	bls.n	8007f74 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d11c      	bne.n	8007fce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fa2:	f043 0302 	orr.w	r3, r3, #2
 8007fa6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	601a      	str	r2, [r3, #0]
 8007fcc:	e005      	b.n	8007fda <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fec:	4619      	mov	r1, r3
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	680b      	ldr	r3, [r1, #0]
 8007ff8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d10c      	bne.n	800801a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008002:	2b00      	cmp	r3, #0
 8008004:	d104      	bne.n	8008010 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008006:	2100      	movs	r1, #0
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f965 	bl	80082d8 <USB_SetDevSpeed>
 800800e:	e008      	b.n	8008022 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008010:	2101      	movs	r1, #1
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f960 	bl	80082d8 <USB_SetDevSpeed>
 8008018:	e003      	b.n	8008022 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800801a:	2103      	movs	r1, #3
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f95b 	bl	80082d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008022:	2110      	movs	r1, #16
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f8f3 	bl	8008210 <USB_FlushTxFifo>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d001      	beq.n	8008034 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f91f 	bl	8008278 <USB_FlushRxFifo>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800804a:	461a      	mov	r2, r3
 800804c:	2300      	movs	r3, #0
 800804e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008056:	461a      	mov	r2, r3
 8008058:	2300      	movs	r3, #0
 800805a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008062:	461a      	mov	r2, r3
 8008064:	2300      	movs	r3, #0
 8008066:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008068:	2300      	movs	r3, #0
 800806a:	613b      	str	r3, [r7, #16]
 800806c:	e043      	b.n	80080f6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	015a      	lsls	r2, r3, #5
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	4413      	add	r3, r2
 8008076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008080:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008084:	d118      	bne.n	80080b8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d10a      	bne.n	80080a2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	015a      	lsls	r2, r3, #5
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4413      	add	r3, r2
 8008094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008098:	461a      	mov	r2, r3
 800809a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800809e:	6013      	str	r3, [r2, #0]
 80080a0:	e013      	b.n	80080ca <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	015a      	lsls	r2, r3, #5
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	4413      	add	r3, r2
 80080aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ae:	461a      	mov	r2, r3
 80080b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80080b4:	6013      	str	r3, [r2, #0]
 80080b6:	e008      	b.n	80080ca <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	015a      	lsls	r2, r3, #5
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	4413      	add	r3, r2
 80080c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c4:	461a      	mov	r2, r3
 80080c6:	2300      	movs	r3, #0
 80080c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	015a      	lsls	r2, r3, #5
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d6:	461a      	mov	r2, r3
 80080d8:	2300      	movs	r3, #0
 80080da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	015a      	lsls	r2, r3, #5
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	4413      	add	r3, r2
 80080e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e8:	461a      	mov	r2, r3
 80080ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80080ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	3301      	adds	r3, #1
 80080f4:	613b      	str	r3, [r7, #16]
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d3b7      	bcc.n	800806e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080fe:	2300      	movs	r3, #0
 8008100:	613b      	str	r3, [r7, #16]
 8008102:	e043      	b.n	800818c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	015a      	lsls	r2, r3, #5
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	4413      	add	r3, r2
 800810c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800811a:	d118      	bne.n	800814e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d10a      	bne.n	8008138 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	015a      	lsls	r2, r3, #5
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	4413      	add	r3, r2
 800812a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800812e:	461a      	mov	r2, r3
 8008130:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008134:	6013      	str	r3, [r2, #0]
 8008136:	e013      	b.n	8008160 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	015a      	lsls	r2, r3, #5
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	4413      	add	r3, r2
 8008140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008144:	461a      	mov	r2, r3
 8008146:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800814a:	6013      	str	r3, [r2, #0]
 800814c:	e008      	b.n	8008160 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815a:	461a      	mov	r2, r3
 800815c:	2300      	movs	r3, #0
 800815e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	015a      	lsls	r2, r3, #5
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	4413      	add	r3, r2
 8008168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800816c:	461a      	mov	r2, r3
 800816e:	2300      	movs	r3, #0
 8008170:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	015a      	lsls	r2, r3, #5
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	4413      	add	r3, r2
 800817a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800817e:	461a      	mov	r2, r3
 8008180:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008184:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	3301      	adds	r3, #1
 800818a:	613b      	str	r3, [r7, #16]
 800818c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	429a      	cmp	r2, r3
 8008192:	d3b7      	bcc.n	8008104 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80081b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80081b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d105      	bne.n	80081c8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	f043 0210 	orr.w	r2, r3, #16
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	699a      	ldr	r2, [r3, #24]
 80081cc:	4b0e      	ldr	r3, [pc, #56]	; (8008208 <USB_DevInit+0x2b4>)
 80081ce:	4313      	orrs	r3, r2
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80081d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d005      	beq.n	80081e6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	f043 0208 	orr.w	r2, r3, #8
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80081e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d105      	bne.n	80081f8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	699a      	ldr	r2, [r3, #24]
 80081f0:	4b06      	ldr	r3, [pc, #24]	; (800820c <USB_DevInit+0x2b8>)
 80081f2:	4313      	orrs	r3, r2
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80081f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3718      	adds	r7, #24
 80081fe:	46bd      	mov	sp, r7
 8008200:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008204:	b004      	add	sp, #16
 8008206:	4770      	bx	lr
 8008208:	803c3800 	.word	0x803c3800
 800820c:	40000004 	.word	0x40000004

08008210 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800821a:	2300      	movs	r3, #0
 800821c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	3301      	adds	r3, #1
 8008222:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	4a13      	ldr	r2, [pc, #76]	; (8008274 <USB_FlushTxFifo+0x64>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d901      	bls.n	8008230 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e01b      	b.n	8008268 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	2b00      	cmp	r3, #0
 8008236:	daf2      	bge.n	800821e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008238:	2300      	movs	r3, #0
 800823a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	019b      	lsls	r3, r3, #6
 8008240:	f043 0220 	orr.w	r2, r3, #32
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	3301      	adds	r3, #1
 800824c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	4a08      	ldr	r2, [pc, #32]	; (8008274 <USB_FlushTxFifo+0x64>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d901      	bls.n	800825a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e006      	b.n	8008268 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	f003 0320 	and.w	r3, r3, #32
 8008262:	2b20      	cmp	r3, #32
 8008264:	d0f0      	beq.n	8008248 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3714      	adds	r7, #20
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr
 8008274:	00030d40 	.word	0x00030d40

08008278 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008278:	b480      	push	{r7}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008280:	2300      	movs	r3, #0
 8008282:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	3301      	adds	r3, #1
 8008288:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	4a11      	ldr	r2, [pc, #68]	; (80082d4 <USB_FlushRxFifo+0x5c>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d901      	bls.n	8008296 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e018      	b.n	80082c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	2b00      	cmp	r3, #0
 800829c:	daf2      	bge.n	8008284 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800829e:	2300      	movs	r3, #0
 80082a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2210      	movs	r2, #16
 80082a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	3301      	adds	r3, #1
 80082ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	4a08      	ldr	r2, [pc, #32]	; (80082d4 <USB_FlushRxFifo+0x5c>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d901      	bls.n	80082ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	e006      	b.n	80082c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	f003 0310 	and.w	r3, r3, #16
 80082c2:	2b10      	cmp	r3, #16
 80082c4:	d0f0      	beq.n	80082a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3714      	adds	r7, #20
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr
 80082d4:	00030d40 	.word	0x00030d40

080082d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	460b      	mov	r3, r1
 80082e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	78fb      	ldrb	r3, [r7, #3]
 80082f2:	68f9      	ldr	r1, [r7, #12]
 80082f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082f8:	4313      	orrs	r3, r2
 80082fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3714      	adds	r7, #20
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800830a:	b480      	push	{r7}
 800830c:	b085      	sub	sp, #20
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008324:	f023 0303 	bic.w	r3, r3, #3
 8008328:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008338:	f043 0302 	orr.w	r3, r3, #2
 800833c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3714      	adds	r7, #20
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	695b      	ldr	r3, [r3, #20]
 8008358:	f003 0301 	and.w	r3, r3, #1
}
 800835c:	4618      	mov	r0, r3
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008370:	2300      	movs	r3, #0
 8008372:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	3301      	adds	r3, #1
 8008378:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	4a13      	ldr	r2, [pc, #76]	; (80083cc <USB_CoreReset+0x64>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d901      	bls.n	8008386 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e01b      	b.n	80083be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	2b00      	cmp	r3, #0
 800838c:	daf2      	bge.n	8008374 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800838e:	2300      	movs	r3, #0
 8008390:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	f043 0201 	orr.w	r2, r3, #1
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	3301      	adds	r3, #1
 80083a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	4a09      	ldr	r2, [pc, #36]	; (80083cc <USB_CoreReset+0x64>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d901      	bls.n	80083b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80083ac:	2303      	movs	r3, #3
 80083ae:	e006      	b.n	80083be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	f003 0301 	and.w	r3, r3, #1
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d0f0      	beq.n	800839e <USB_CoreReset+0x36>

  return HAL_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3714      	adds	r7, #20
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	00030d40 	.word	0x00030d40

080083d0 <atoi>:
 80083d0:	220a      	movs	r2, #10
 80083d2:	2100      	movs	r1, #0
 80083d4:	f000 bd60 	b.w	8008e98 <strtol>

080083d8 <__errno>:
 80083d8:	4b01      	ldr	r3, [pc, #4]	; (80083e0 <__errno+0x8>)
 80083da:	6818      	ldr	r0, [r3, #0]
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	200004c8 	.word	0x200004c8

080083e4 <__libc_init_array>:
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	4d0d      	ldr	r5, [pc, #52]	; (800841c <__libc_init_array+0x38>)
 80083e8:	4c0d      	ldr	r4, [pc, #52]	; (8008420 <__libc_init_array+0x3c>)
 80083ea:	1b64      	subs	r4, r4, r5
 80083ec:	10a4      	asrs	r4, r4, #2
 80083ee:	2600      	movs	r6, #0
 80083f0:	42a6      	cmp	r6, r4
 80083f2:	d109      	bne.n	8008408 <__libc_init_array+0x24>
 80083f4:	4d0b      	ldr	r5, [pc, #44]	; (8008424 <__libc_init_array+0x40>)
 80083f6:	4c0c      	ldr	r4, [pc, #48]	; (8008428 <__libc_init_array+0x44>)
 80083f8:	f002 ff32 	bl	800b260 <_init>
 80083fc:	1b64      	subs	r4, r4, r5
 80083fe:	10a4      	asrs	r4, r4, #2
 8008400:	2600      	movs	r6, #0
 8008402:	42a6      	cmp	r6, r4
 8008404:	d105      	bne.n	8008412 <__libc_init_array+0x2e>
 8008406:	bd70      	pop	{r4, r5, r6, pc}
 8008408:	f855 3b04 	ldr.w	r3, [r5], #4
 800840c:	4798      	blx	r3
 800840e:	3601      	adds	r6, #1
 8008410:	e7ee      	b.n	80083f0 <__libc_init_array+0xc>
 8008412:	f855 3b04 	ldr.w	r3, [r5], #4
 8008416:	4798      	blx	r3
 8008418:	3601      	adds	r6, #1
 800841a:	e7f2      	b.n	8008402 <__libc_init_array+0x1e>
 800841c:	0800b7d4 	.word	0x0800b7d4
 8008420:	0800b7d4 	.word	0x0800b7d4
 8008424:	0800b7d4 	.word	0x0800b7d4
 8008428:	0800b7d8 	.word	0x0800b7d8

0800842c <memset>:
 800842c:	4402      	add	r2, r0
 800842e:	4603      	mov	r3, r0
 8008430:	4293      	cmp	r3, r2
 8008432:	d100      	bne.n	8008436 <memset+0xa>
 8008434:	4770      	bx	lr
 8008436:	f803 1b01 	strb.w	r1, [r3], #1
 800843a:	e7f9      	b.n	8008430 <memset+0x4>

0800843c <__cvt>:
 800843c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800843e:	ed2d 8b02 	vpush	{d8}
 8008442:	eeb0 8b40 	vmov.f64	d8, d0
 8008446:	b085      	sub	sp, #20
 8008448:	4617      	mov	r7, r2
 800844a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800844c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800844e:	ee18 2a90 	vmov	r2, s17
 8008452:	f025 0520 	bic.w	r5, r5, #32
 8008456:	2a00      	cmp	r2, #0
 8008458:	bfb6      	itet	lt
 800845a:	222d      	movlt	r2, #45	; 0x2d
 800845c:	2200      	movge	r2, #0
 800845e:	eeb1 8b40 	vneglt.f64	d8, d0
 8008462:	2d46      	cmp	r5, #70	; 0x46
 8008464:	460c      	mov	r4, r1
 8008466:	701a      	strb	r2, [r3, #0]
 8008468:	d004      	beq.n	8008474 <__cvt+0x38>
 800846a:	2d45      	cmp	r5, #69	; 0x45
 800846c:	d100      	bne.n	8008470 <__cvt+0x34>
 800846e:	3401      	adds	r4, #1
 8008470:	2102      	movs	r1, #2
 8008472:	e000      	b.n	8008476 <__cvt+0x3a>
 8008474:	2103      	movs	r1, #3
 8008476:	ab03      	add	r3, sp, #12
 8008478:	9301      	str	r3, [sp, #4]
 800847a:	ab02      	add	r3, sp, #8
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	4622      	mov	r2, r4
 8008480:	4633      	mov	r3, r6
 8008482:	eeb0 0b48 	vmov.f64	d0, d8
 8008486:	f000 fd9f 	bl	8008fc8 <_dtoa_r>
 800848a:	2d47      	cmp	r5, #71	; 0x47
 800848c:	d101      	bne.n	8008492 <__cvt+0x56>
 800848e:	07fb      	lsls	r3, r7, #31
 8008490:	d51a      	bpl.n	80084c8 <__cvt+0x8c>
 8008492:	2d46      	cmp	r5, #70	; 0x46
 8008494:	eb00 0204 	add.w	r2, r0, r4
 8008498:	d10c      	bne.n	80084b4 <__cvt+0x78>
 800849a:	7803      	ldrb	r3, [r0, #0]
 800849c:	2b30      	cmp	r3, #48	; 0x30
 800849e:	d107      	bne.n	80084b0 <__cvt+0x74>
 80084a0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80084a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084a8:	bf1c      	itt	ne
 80084aa:	f1c4 0401 	rsbne	r4, r4, #1
 80084ae:	6034      	strne	r4, [r6, #0]
 80084b0:	6833      	ldr	r3, [r6, #0]
 80084b2:	441a      	add	r2, r3
 80084b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80084b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084bc:	bf08      	it	eq
 80084be:	9203      	streq	r2, [sp, #12]
 80084c0:	2130      	movs	r1, #48	; 0x30
 80084c2:	9b03      	ldr	r3, [sp, #12]
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d307      	bcc.n	80084d8 <__cvt+0x9c>
 80084c8:	9b03      	ldr	r3, [sp, #12]
 80084ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084cc:	1a1b      	subs	r3, r3, r0
 80084ce:	6013      	str	r3, [r2, #0]
 80084d0:	b005      	add	sp, #20
 80084d2:	ecbd 8b02 	vpop	{d8}
 80084d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084d8:	1c5c      	adds	r4, r3, #1
 80084da:	9403      	str	r4, [sp, #12]
 80084dc:	7019      	strb	r1, [r3, #0]
 80084de:	e7f0      	b.n	80084c2 <__cvt+0x86>

080084e0 <__exponent>:
 80084e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084e2:	4603      	mov	r3, r0
 80084e4:	2900      	cmp	r1, #0
 80084e6:	bfb8      	it	lt
 80084e8:	4249      	neglt	r1, r1
 80084ea:	f803 2b02 	strb.w	r2, [r3], #2
 80084ee:	bfb4      	ite	lt
 80084f0:	222d      	movlt	r2, #45	; 0x2d
 80084f2:	222b      	movge	r2, #43	; 0x2b
 80084f4:	2909      	cmp	r1, #9
 80084f6:	7042      	strb	r2, [r0, #1]
 80084f8:	dd2a      	ble.n	8008550 <__exponent+0x70>
 80084fa:	f10d 0407 	add.w	r4, sp, #7
 80084fe:	46a4      	mov	ip, r4
 8008500:	270a      	movs	r7, #10
 8008502:	46a6      	mov	lr, r4
 8008504:	460a      	mov	r2, r1
 8008506:	fb91 f6f7 	sdiv	r6, r1, r7
 800850a:	fb07 1516 	mls	r5, r7, r6, r1
 800850e:	3530      	adds	r5, #48	; 0x30
 8008510:	2a63      	cmp	r2, #99	; 0x63
 8008512:	f104 34ff 	add.w	r4, r4, #4294967295
 8008516:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800851a:	4631      	mov	r1, r6
 800851c:	dcf1      	bgt.n	8008502 <__exponent+0x22>
 800851e:	3130      	adds	r1, #48	; 0x30
 8008520:	f1ae 0502 	sub.w	r5, lr, #2
 8008524:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008528:	1c44      	adds	r4, r0, #1
 800852a:	4629      	mov	r1, r5
 800852c:	4561      	cmp	r1, ip
 800852e:	d30a      	bcc.n	8008546 <__exponent+0x66>
 8008530:	f10d 0209 	add.w	r2, sp, #9
 8008534:	eba2 020e 	sub.w	r2, r2, lr
 8008538:	4565      	cmp	r5, ip
 800853a:	bf88      	it	hi
 800853c:	2200      	movhi	r2, #0
 800853e:	4413      	add	r3, r2
 8008540:	1a18      	subs	r0, r3, r0
 8008542:	b003      	add	sp, #12
 8008544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008546:	f811 2b01 	ldrb.w	r2, [r1], #1
 800854a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800854e:	e7ed      	b.n	800852c <__exponent+0x4c>
 8008550:	2330      	movs	r3, #48	; 0x30
 8008552:	3130      	adds	r1, #48	; 0x30
 8008554:	7083      	strb	r3, [r0, #2]
 8008556:	70c1      	strb	r1, [r0, #3]
 8008558:	1d03      	adds	r3, r0, #4
 800855a:	e7f1      	b.n	8008540 <__exponent+0x60>
 800855c:	0000      	movs	r0, r0
	...

08008560 <_printf_float>:
 8008560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008564:	b08b      	sub	sp, #44	; 0x2c
 8008566:	460c      	mov	r4, r1
 8008568:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800856c:	4616      	mov	r6, r2
 800856e:	461f      	mov	r7, r3
 8008570:	4605      	mov	r5, r0
 8008572:	f001 fa97 	bl	8009aa4 <_localeconv_r>
 8008576:	f8d0 b000 	ldr.w	fp, [r0]
 800857a:	4658      	mov	r0, fp
 800857c:	f7f7 fe60 	bl	8000240 <strlen>
 8008580:	2300      	movs	r3, #0
 8008582:	9308      	str	r3, [sp, #32]
 8008584:	f8d8 3000 	ldr.w	r3, [r8]
 8008588:	f894 9018 	ldrb.w	r9, [r4, #24]
 800858c:	6822      	ldr	r2, [r4, #0]
 800858e:	3307      	adds	r3, #7
 8008590:	f023 0307 	bic.w	r3, r3, #7
 8008594:	f103 0108 	add.w	r1, r3, #8
 8008598:	f8c8 1000 	str.w	r1, [r8]
 800859c:	4682      	mov	sl, r0
 800859e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80085a2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80085a6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008808 <_printf_float+0x2a8>
 80085aa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80085ae:	eeb0 6bc0 	vabs.f64	d6, d0
 80085b2:	eeb4 6b47 	vcmp.f64	d6, d7
 80085b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ba:	dd24      	ble.n	8008606 <_printf_float+0xa6>
 80085bc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80085c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085c4:	d502      	bpl.n	80085cc <_printf_float+0x6c>
 80085c6:	232d      	movs	r3, #45	; 0x2d
 80085c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085cc:	4b90      	ldr	r3, [pc, #576]	; (8008810 <_printf_float+0x2b0>)
 80085ce:	4891      	ldr	r0, [pc, #580]	; (8008814 <_printf_float+0x2b4>)
 80085d0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80085d4:	bf94      	ite	ls
 80085d6:	4698      	movls	r8, r3
 80085d8:	4680      	movhi	r8, r0
 80085da:	2303      	movs	r3, #3
 80085dc:	6123      	str	r3, [r4, #16]
 80085de:	f022 0204 	bic.w	r2, r2, #4
 80085e2:	2300      	movs	r3, #0
 80085e4:	6022      	str	r2, [r4, #0]
 80085e6:	9304      	str	r3, [sp, #16]
 80085e8:	9700      	str	r7, [sp, #0]
 80085ea:	4633      	mov	r3, r6
 80085ec:	aa09      	add	r2, sp, #36	; 0x24
 80085ee:	4621      	mov	r1, r4
 80085f0:	4628      	mov	r0, r5
 80085f2:	f000 f9d3 	bl	800899c <_printf_common>
 80085f6:	3001      	adds	r0, #1
 80085f8:	f040 808a 	bne.w	8008710 <_printf_float+0x1b0>
 80085fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008600:	b00b      	add	sp, #44	; 0x2c
 8008602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008606:	eeb4 0b40 	vcmp.f64	d0, d0
 800860a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800860e:	d709      	bvc.n	8008624 <_printf_float+0xc4>
 8008610:	ee10 3a90 	vmov	r3, s1
 8008614:	2b00      	cmp	r3, #0
 8008616:	bfbc      	itt	lt
 8008618:	232d      	movlt	r3, #45	; 0x2d
 800861a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800861e:	487e      	ldr	r0, [pc, #504]	; (8008818 <_printf_float+0x2b8>)
 8008620:	4b7e      	ldr	r3, [pc, #504]	; (800881c <_printf_float+0x2bc>)
 8008622:	e7d5      	b.n	80085d0 <_printf_float+0x70>
 8008624:	6863      	ldr	r3, [r4, #4]
 8008626:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800862a:	9104      	str	r1, [sp, #16]
 800862c:	1c59      	adds	r1, r3, #1
 800862e:	d13c      	bne.n	80086aa <_printf_float+0x14a>
 8008630:	2306      	movs	r3, #6
 8008632:	6063      	str	r3, [r4, #4]
 8008634:	2300      	movs	r3, #0
 8008636:	9303      	str	r3, [sp, #12]
 8008638:	ab08      	add	r3, sp, #32
 800863a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800863e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008642:	ab07      	add	r3, sp, #28
 8008644:	6861      	ldr	r1, [r4, #4]
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	6022      	str	r2, [r4, #0]
 800864a:	f10d 031b 	add.w	r3, sp, #27
 800864e:	4628      	mov	r0, r5
 8008650:	f7ff fef4 	bl	800843c <__cvt>
 8008654:	9b04      	ldr	r3, [sp, #16]
 8008656:	9907      	ldr	r1, [sp, #28]
 8008658:	2b47      	cmp	r3, #71	; 0x47
 800865a:	4680      	mov	r8, r0
 800865c:	d108      	bne.n	8008670 <_printf_float+0x110>
 800865e:	1cc8      	adds	r0, r1, #3
 8008660:	db02      	blt.n	8008668 <_printf_float+0x108>
 8008662:	6863      	ldr	r3, [r4, #4]
 8008664:	4299      	cmp	r1, r3
 8008666:	dd41      	ble.n	80086ec <_printf_float+0x18c>
 8008668:	f1a9 0902 	sub.w	r9, r9, #2
 800866c:	fa5f f989 	uxtb.w	r9, r9
 8008670:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008674:	d820      	bhi.n	80086b8 <_printf_float+0x158>
 8008676:	3901      	subs	r1, #1
 8008678:	464a      	mov	r2, r9
 800867a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800867e:	9107      	str	r1, [sp, #28]
 8008680:	f7ff ff2e 	bl	80084e0 <__exponent>
 8008684:	9a08      	ldr	r2, [sp, #32]
 8008686:	9004      	str	r0, [sp, #16]
 8008688:	1813      	adds	r3, r2, r0
 800868a:	2a01      	cmp	r2, #1
 800868c:	6123      	str	r3, [r4, #16]
 800868e:	dc02      	bgt.n	8008696 <_printf_float+0x136>
 8008690:	6822      	ldr	r2, [r4, #0]
 8008692:	07d2      	lsls	r2, r2, #31
 8008694:	d501      	bpl.n	800869a <_printf_float+0x13a>
 8008696:	3301      	adds	r3, #1
 8008698:	6123      	str	r3, [r4, #16]
 800869a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d0a2      	beq.n	80085e8 <_printf_float+0x88>
 80086a2:	232d      	movs	r3, #45	; 0x2d
 80086a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086a8:	e79e      	b.n	80085e8 <_printf_float+0x88>
 80086aa:	9904      	ldr	r1, [sp, #16]
 80086ac:	2947      	cmp	r1, #71	; 0x47
 80086ae:	d1c1      	bne.n	8008634 <_printf_float+0xd4>
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1bf      	bne.n	8008634 <_printf_float+0xd4>
 80086b4:	2301      	movs	r3, #1
 80086b6:	e7bc      	b.n	8008632 <_printf_float+0xd2>
 80086b8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80086bc:	d118      	bne.n	80086f0 <_printf_float+0x190>
 80086be:	2900      	cmp	r1, #0
 80086c0:	6863      	ldr	r3, [r4, #4]
 80086c2:	dd0b      	ble.n	80086dc <_printf_float+0x17c>
 80086c4:	6121      	str	r1, [r4, #16]
 80086c6:	b913      	cbnz	r3, 80086ce <_printf_float+0x16e>
 80086c8:	6822      	ldr	r2, [r4, #0]
 80086ca:	07d0      	lsls	r0, r2, #31
 80086cc:	d502      	bpl.n	80086d4 <_printf_float+0x174>
 80086ce:	3301      	adds	r3, #1
 80086d0:	440b      	add	r3, r1
 80086d2:	6123      	str	r3, [r4, #16]
 80086d4:	2300      	movs	r3, #0
 80086d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80086d8:	9304      	str	r3, [sp, #16]
 80086da:	e7de      	b.n	800869a <_printf_float+0x13a>
 80086dc:	b913      	cbnz	r3, 80086e4 <_printf_float+0x184>
 80086de:	6822      	ldr	r2, [r4, #0]
 80086e0:	07d2      	lsls	r2, r2, #31
 80086e2:	d501      	bpl.n	80086e8 <_printf_float+0x188>
 80086e4:	3302      	adds	r3, #2
 80086e6:	e7f4      	b.n	80086d2 <_printf_float+0x172>
 80086e8:	2301      	movs	r3, #1
 80086ea:	e7f2      	b.n	80086d2 <_printf_float+0x172>
 80086ec:	f04f 0967 	mov.w	r9, #103	; 0x67
 80086f0:	9b08      	ldr	r3, [sp, #32]
 80086f2:	4299      	cmp	r1, r3
 80086f4:	db05      	blt.n	8008702 <_printf_float+0x1a2>
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	6121      	str	r1, [r4, #16]
 80086fa:	07d8      	lsls	r0, r3, #31
 80086fc:	d5ea      	bpl.n	80086d4 <_printf_float+0x174>
 80086fe:	1c4b      	adds	r3, r1, #1
 8008700:	e7e7      	b.n	80086d2 <_printf_float+0x172>
 8008702:	2900      	cmp	r1, #0
 8008704:	bfd4      	ite	le
 8008706:	f1c1 0202 	rsble	r2, r1, #2
 800870a:	2201      	movgt	r2, #1
 800870c:	4413      	add	r3, r2
 800870e:	e7e0      	b.n	80086d2 <_printf_float+0x172>
 8008710:	6823      	ldr	r3, [r4, #0]
 8008712:	055a      	lsls	r2, r3, #21
 8008714:	d407      	bmi.n	8008726 <_printf_float+0x1c6>
 8008716:	6923      	ldr	r3, [r4, #16]
 8008718:	4642      	mov	r2, r8
 800871a:	4631      	mov	r1, r6
 800871c:	4628      	mov	r0, r5
 800871e:	47b8      	blx	r7
 8008720:	3001      	adds	r0, #1
 8008722:	d12a      	bne.n	800877a <_printf_float+0x21a>
 8008724:	e76a      	b.n	80085fc <_printf_float+0x9c>
 8008726:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800872a:	f240 80e2 	bls.w	80088f2 <_printf_float+0x392>
 800872e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008732:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800873a:	d133      	bne.n	80087a4 <_printf_float+0x244>
 800873c:	4a38      	ldr	r2, [pc, #224]	; (8008820 <_printf_float+0x2c0>)
 800873e:	2301      	movs	r3, #1
 8008740:	4631      	mov	r1, r6
 8008742:	4628      	mov	r0, r5
 8008744:	47b8      	blx	r7
 8008746:	3001      	adds	r0, #1
 8008748:	f43f af58 	beq.w	80085fc <_printf_float+0x9c>
 800874c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008750:	429a      	cmp	r2, r3
 8008752:	db02      	blt.n	800875a <_printf_float+0x1fa>
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	07d8      	lsls	r0, r3, #31
 8008758:	d50f      	bpl.n	800877a <_printf_float+0x21a>
 800875a:	4653      	mov	r3, sl
 800875c:	465a      	mov	r2, fp
 800875e:	4631      	mov	r1, r6
 8008760:	4628      	mov	r0, r5
 8008762:	47b8      	blx	r7
 8008764:	3001      	adds	r0, #1
 8008766:	f43f af49 	beq.w	80085fc <_printf_float+0x9c>
 800876a:	f04f 0800 	mov.w	r8, #0
 800876e:	f104 091a 	add.w	r9, r4, #26
 8008772:	9b08      	ldr	r3, [sp, #32]
 8008774:	3b01      	subs	r3, #1
 8008776:	4543      	cmp	r3, r8
 8008778:	dc09      	bgt.n	800878e <_printf_float+0x22e>
 800877a:	6823      	ldr	r3, [r4, #0]
 800877c:	079b      	lsls	r3, r3, #30
 800877e:	f100 8108 	bmi.w	8008992 <_printf_float+0x432>
 8008782:	68e0      	ldr	r0, [r4, #12]
 8008784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008786:	4298      	cmp	r0, r3
 8008788:	bfb8      	it	lt
 800878a:	4618      	movlt	r0, r3
 800878c:	e738      	b.n	8008600 <_printf_float+0xa0>
 800878e:	2301      	movs	r3, #1
 8008790:	464a      	mov	r2, r9
 8008792:	4631      	mov	r1, r6
 8008794:	4628      	mov	r0, r5
 8008796:	47b8      	blx	r7
 8008798:	3001      	adds	r0, #1
 800879a:	f43f af2f 	beq.w	80085fc <_printf_float+0x9c>
 800879e:	f108 0801 	add.w	r8, r8, #1
 80087a2:	e7e6      	b.n	8008772 <_printf_float+0x212>
 80087a4:	9b07      	ldr	r3, [sp, #28]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	dc3c      	bgt.n	8008824 <_printf_float+0x2c4>
 80087aa:	4a1d      	ldr	r2, [pc, #116]	; (8008820 <_printf_float+0x2c0>)
 80087ac:	2301      	movs	r3, #1
 80087ae:	4631      	mov	r1, r6
 80087b0:	4628      	mov	r0, r5
 80087b2:	47b8      	blx	r7
 80087b4:	3001      	adds	r0, #1
 80087b6:	f43f af21 	beq.w	80085fc <_printf_float+0x9c>
 80087ba:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80087be:	4313      	orrs	r3, r2
 80087c0:	d102      	bne.n	80087c8 <_printf_float+0x268>
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	07d9      	lsls	r1, r3, #31
 80087c6:	d5d8      	bpl.n	800877a <_printf_float+0x21a>
 80087c8:	4653      	mov	r3, sl
 80087ca:	465a      	mov	r2, fp
 80087cc:	4631      	mov	r1, r6
 80087ce:	4628      	mov	r0, r5
 80087d0:	47b8      	blx	r7
 80087d2:	3001      	adds	r0, #1
 80087d4:	f43f af12 	beq.w	80085fc <_printf_float+0x9c>
 80087d8:	f04f 0900 	mov.w	r9, #0
 80087dc:	f104 0a1a 	add.w	sl, r4, #26
 80087e0:	9b07      	ldr	r3, [sp, #28]
 80087e2:	425b      	negs	r3, r3
 80087e4:	454b      	cmp	r3, r9
 80087e6:	dc01      	bgt.n	80087ec <_printf_float+0x28c>
 80087e8:	9b08      	ldr	r3, [sp, #32]
 80087ea:	e795      	b.n	8008718 <_printf_float+0x1b8>
 80087ec:	2301      	movs	r3, #1
 80087ee:	4652      	mov	r2, sl
 80087f0:	4631      	mov	r1, r6
 80087f2:	4628      	mov	r0, r5
 80087f4:	47b8      	blx	r7
 80087f6:	3001      	adds	r0, #1
 80087f8:	f43f af00 	beq.w	80085fc <_printf_float+0x9c>
 80087fc:	f109 0901 	add.w	r9, r9, #1
 8008800:	e7ee      	b.n	80087e0 <_printf_float+0x280>
 8008802:	bf00      	nop
 8008804:	f3af 8000 	nop.w
 8008808:	ffffffff 	.word	0xffffffff
 800880c:	7fefffff 	.word	0x7fefffff
 8008810:	0800b3f0 	.word	0x0800b3f0
 8008814:	0800b3f4 	.word	0x0800b3f4
 8008818:	0800b3fc 	.word	0x0800b3fc
 800881c:	0800b3f8 	.word	0x0800b3f8
 8008820:	0800b400 	.word	0x0800b400
 8008824:	9a08      	ldr	r2, [sp, #32]
 8008826:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008828:	429a      	cmp	r2, r3
 800882a:	bfa8      	it	ge
 800882c:	461a      	movge	r2, r3
 800882e:	2a00      	cmp	r2, #0
 8008830:	4691      	mov	r9, r2
 8008832:	dc38      	bgt.n	80088a6 <_printf_float+0x346>
 8008834:	2300      	movs	r3, #0
 8008836:	9305      	str	r3, [sp, #20]
 8008838:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800883c:	f104 021a 	add.w	r2, r4, #26
 8008840:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008842:	9905      	ldr	r1, [sp, #20]
 8008844:	9304      	str	r3, [sp, #16]
 8008846:	eba3 0309 	sub.w	r3, r3, r9
 800884a:	428b      	cmp	r3, r1
 800884c:	dc33      	bgt.n	80088b6 <_printf_float+0x356>
 800884e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008852:	429a      	cmp	r2, r3
 8008854:	db3c      	blt.n	80088d0 <_printf_float+0x370>
 8008856:	6823      	ldr	r3, [r4, #0]
 8008858:	07da      	lsls	r2, r3, #31
 800885a:	d439      	bmi.n	80088d0 <_printf_float+0x370>
 800885c:	9b08      	ldr	r3, [sp, #32]
 800885e:	9a04      	ldr	r2, [sp, #16]
 8008860:	9907      	ldr	r1, [sp, #28]
 8008862:	1a9a      	subs	r2, r3, r2
 8008864:	eba3 0901 	sub.w	r9, r3, r1
 8008868:	4591      	cmp	r9, r2
 800886a:	bfa8      	it	ge
 800886c:	4691      	movge	r9, r2
 800886e:	f1b9 0f00 	cmp.w	r9, #0
 8008872:	dc35      	bgt.n	80088e0 <_printf_float+0x380>
 8008874:	f04f 0800 	mov.w	r8, #0
 8008878:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800887c:	f104 0a1a 	add.w	sl, r4, #26
 8008880:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008884:	1a9b      	subs	r3, r3, r2
 8008886:	eba3 0309 	sub.w	r3, r3, r9
 800888a:	4543      	cmp	r3, r8
 800888c:	f77f af75 	ble.w	800877a <_printf_float+0x21a>
 8008890:	2301      	movs	r3, #1
 8008892:	4652      	mov	r2, sl
 8008894:	4631      	mov	r1, r6
 8008896:	4628      	mov	r0, r5
 8008898:	47b8      	blx	r7
 800889a:	3001      	adds	r0, #1
 800889c:	f43f aeae 	beq.w	80085fc <_printf_float+0x9c>
 80088a0:	f108 0801 	add.w	r8, r8, #1
 80088a4:	e7ec      	b.n	8008880 <_printf_float+0x320>
 80088a6:	4613      	mov	r3, r2
 80088a8:	4631      	mov	r1, r6
 80088aa:	4642      	mov	r2, r8
 80088ac:	4628      	mov	r0, r5
 80088ae:	47b8      	blx	r7
 80088b0:	3001      	adds	r0, #1
 80088b2:	d1bf      	bne.n	8008834 <_printf_float+0x2d4>
 80088b4:	e6a2      	b.n	80085fc <_printf_float+0x9c>
 80088b6:	2301      	movs	r3, #1
 80088b8:	4631      	mov	r1, r6
 80088ba:	4628      	mov	r0, r5
 80088bc:	9204      	str	r2, [sp, #16]
 80088be:	47b8      	blx	r7
 80088c0:	3001      	adds	r0, #1
 80088c2:	f43f ae9b 	beq.w	80085fc <_printf_float+0x9c>
 80088c6:	9b05      	ldr	r3, [sp, #20]
 80088c8:	9a04      	ldr	r2, [sp, #16]
 80088ca:	3301      	adds	r3, #1
 80088cc:	9305      	str	r3, [sp, #20]
 80088ce:	e7b7      	b.n	8008840 <_printf_float+0x2e0>
 80088d0:	4653      	mov	r3, sl
 80088d2:	465a      	mov	r2, fp
 80088d4:	4631      	mov	r1, r6
 80088d6:	4628      	mov	r0, r5
 80088d8:	47b8      	blx	r7
 80088da:	3001      	adds	r0, #1
 80088dc:	d1be      	bne.n	800885c <_printf_float+0x2fc>
 80088de:	e68d      	b.n	80085fc <_printf_float+0x9c>
 80088e0:	9a04      	ldr	r2, [sp, #16]
 80088e2:	464b      	mov	r3, r9
 80088e4:	4442      	add	r2, r8
 80088e6:	4631      	mov	r1, r6
 80088e8:	4628      	mov	r0, r5
 80088ea:	47b8      	blx	r7
 80088ec:	3001      	adds	r0, #1
 80088ee:	d1c1      	bne.n	8008874 <_printf_float+0x314>
 80088f0:	e684      	b.n	80085fc <_printf_float+0x9c>
 80088f2:	9a08      	ldr	r2, [sp, #32]
 80088f4:	2a01      	cmp	r2, #1
 80088f6:	dc01      	bgt.n	80088fc <_printf_float+0x39c>
 80088f8:	07db      	lsls	r3, r3, #31
 80088fa:	d537      	bpl.n	800896c <_printf_float+0x40c>
 80088fc:	2301      	movs	r3, #1
 80088fe:	4642      	mov	r2, r8
 8008900:	4631      	mov	r1, r6
 8008902:	4628      	mov	r0, r5
 8008904:	47b8      	blx	r7
 8008906:	3001      	adds	r0, #1
 8008908:	f43f ae78 	beq.w	80085fc <_printf_float+0x9c>
 800890c:	4653      	mov	r3, sl
 800890e:	465a      	mov	r2, fp
 8008910:	4631      	mov	r1, r6
 8008912:	4628      	mov	r0, r5
 8008914:	47b8      	blx	r7
 8008916:	3001      	adds	r0, #1
 8008918:	f43f ae70 	beq.w	80085fc <_printf_float+0x9c>
 800891c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008920:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008928:	d01b      	beq.n	8008962 <_printf_float+0x402>
 800892a:	9b08      	ldr	r3, [sp, #32]
 800892c:	f108 0201 	add.w	r2, r8, #1
 8008930:	3b01      	subs	r3, #1
 8008932:	4631      	mov	r1, r6
 8008934:	4628      	mov	r0, r5
 8008936:	47b8      	blx	r7
 8008938:	3001      	adds	r0, #1
 800893a:	d10e      	bne.n	800895a <_printf_float+0x3fa>
 800893c:	e65e      	b.n	80085fc <_printf_float+0x9c>
 800893e:	2301      	movs	r3, #1
 8008940:	464a      	mov	r2, r9
 8008942:	4631      	mov	r1, r6
 8008944:	4628      	mov	r0, r5
 8008946:	47b8      	blx	r7
 8008948:	3001      	adds	r0, #1
 800894a:	f43f ae57 	beq.w	80085fc <_printf_float+0x9c>
 800894e:	f108 0801 	add.w	r8, r8, #1
 8008952:	9b08      	ldr	r3, [sp, #32]
 8008954:	3b01      	subs	r3, #1
 8008956:	4543      	cmp	r3, r8
 8008958:	dcf1      	bgt.n	800893e <_printf_float+0x3de>
 800895a:	9b04      	ldr	r3, [sp, #16]
 800895c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008960:	e6db      	b.n	800871a <_printf_float+0x1ba>
 8008962:	f04f 0800 	mov.w	r8, #0
 8008966:	f104 091a 	add.w	r9, r4, #26
 800896a:	e7f2      	b.n	8008952 <_printf_float+0x3f2>
 800896c:	2301      	movs	r3, #1
 800896e:	4642      	mov	r2, r8
 8008970:	e7df      	b.n	8008932 <_printf_float+0x3d2>
 8008972:	2301      	movs	r3, #1
 8008974:	464a      	mov	r2, r9
 8008976:	4631      	mov	r1, r6
 8008978:	4628      	mov	r0, r5
 800897a:	47b8      	blx	r7
 800897c:	3001      	adds	r0, #1
 800897e:	f43f ae3d 	beq.w	80085fc <_printf_float+0x9c>
 8008982:	f108 0801 	add.w	r8, r8, #1
 8008986:	68e3      	ldr	r3, [r4, #12]
 8008988:	9909      	ldr	r1, [sp, #36]	; 0x24
 800898a:	1a5b      	subs	r3, r3, r1
 800898c:	4543      	cmp	r3, r8
 800898e:	dcf0      	bgt.n	8008972 <_printf_float+0x412>
 8008990:	e6f7      	b.n	8008782 <_printf_float+0x222>
 8008992:	f04f 0800 	mov.w	r8, #0
 8008996:	f104 0919 	add.w	r9, r4, #25
 800899a:	e7f4      	b.n	8008986 <_printf_float+0x426>

0800899c <_printf_common>:
 800899c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a0:	4616      	mov	r6, r2
 80089a2:	4699      	mov	r9, r3
 80089a4:	688a      	ldr	r2, [r1, #8]
 80089a6:	690b      	ldr	r3, [r1, #16]
 80089a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089ac:	4293      	cmp	r3, r2
 80089ae:	bfb8      	it	lt
 80089b0:	4613      	movlt	r3, r2
 80089b2:	6033      	str	r3, [r6, #0]
 80089b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089b8:	4607      	mov	r7, r0
 80089ba:	460c      	mov	r4, r1
 80089bc:	b10a      	cbz	r2, 80089c2 <_printf_common+0x26>
 80089be:	3301      	adds	r3, #1
 80089c0:	6033      	str	r3, [r6, #0]
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	0699      	lsls	r1, r3, #26
 80089c6:	bf42      	ittt	mi
 80089c8:	6833      	ldrmi	r3, [r6, #0]
 80089ca:	3302      	addmi	r3, #2
 80089cc:	6033      	strmi	r3, [r6, #0]
 80089ce:	6825      	ldr	r5, [r4, #0]
 80089d0:	f015 0506 	ands.w	r5, r5, #6
 80089d4:	d106      	bne.n	80089e4 <_printf_common+0x48>
 80089d6:	f104 0a19 	add.w	sl, r4, #25
 80089da:	68e3      	ldr	r3, [r4, #12]
 80089dc:	6832      	ldr	r2, [r6, #0]
 80089de:	1a9b      	subs	r3, r3, r2
 80089e0:	42ab      	cmp	r3, r5
 80089e2:	dc26      	bgt.n	8008a32 <_printf_common+0x96>
 80089e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089e8:	1e13      	subs	r3, r2, #0
 80089ea:	6822      	ldr	r2, [r4, #0]
 80089ec:	bf18      	it	ne
 80089ee:	2301      	movne	r3, #1
 80089f0:	0692      	lsls	r2, r2, #26
 80089f2:	d42b      	bmi.n	8008a4c <_printf_common+0xb0>
 80089f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089f8:	4649      	mov	r1, r9
 80089fa:	4638      	mov	r0, r7
 80089fc:	47c0      	blx	r8
 80089fe:	3001      	adds	r0, #1
 8008a00:	d01e      	beq.n	8008a40 <_printf_common+0xa4>
 8008a02:	6823      	ldr	r3, [r4, #0]
 8008a04:	68e5      	ldr	r5, [r4, #12]
 8008a06:	6832      	ldr	r2, [r6, #0]
 8008a08:	f003 0306 	and.w	r3, r3, #6
 8008a0c:	2b04      	cmp	r3, #4
 8008a0e:	bf08      	it	eq
 8008a10:	1aad      	subeq	r5, r5, r2
 8008a12:	68a3      	ldr	r3, [r4, #8]
 8008a14:	6922      	ldr	r2, [r4, #16]
 8008a16:	bf0c      	ite	eq
 8008a18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a1c:	2500      	movne	r5, #0
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	bfc4      	itt	gt
 8008a22:	1a9b      	subgt	r3, r3, r2
 8008a24:	18ed      	addgt	r5, r5, r3
 8008a26:	2600      	movs	r6, #0
 8008a28:	341a      	adds	r4, #26
 8008a2a:	42b5      	cmp	r5, r6
 8008a2c:	d11a      	bne.n	8008a64 <_printf_common+0xc8>
 8008a2e:	2000      	movs	r0, #0
 8008a30:	e008      	b.n	8008a44 <_printf_common+0xa8>
 8008a32:	2301      	movs	r3, #1
 8008a34:	4652      	mov	r2, sl
 8008a36:	4649      	mov	r1, r9
 8008a38:	4638      	mov	r0, r7
 8008a3a:	47c0      	blx	r8
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	d103      	bne.n	8008a48 <_printf_common+0xac>
 8008a40:	f04f 30ff 	mov.w	r0, #4294967295
 8008a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a48:	3501      	adds	r5, #1
 8008a4a:	e7c6      	b.n	80089da <_printf_common+0x3e>
 8008a4c:	18e1      	adds	r1, r4, r3
 8008a4e:	1c5a      	adds	r2, r3, #1
 8008a50:	2030      	movs	r0, #48	; 0x30
 8008a52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a56:	4422      	add	r2, r4
 8008a58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a60:	3302      	adds	r3, #2
 8008a62:	e7c7      	b.n	80089f4 <_printf_common+0x58>
 8008a64:	2301      	movs	r3, #1
 8008a66:	4622      	mov	r2, r4
 8008a68:	4649      	mov	r1, r9
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	47c0      	blx	r8
 8008a6e:	3001      	adds	r0, #1
 8008a70:	d0e6      	beq.n	8008a40 <_printf_common+0xa4>
 8008a72:	3601      	adds	r6, #1
 8008a74:	e7d9      	b.n	8008a2a <_printf_common+0x8e>
	...

08008a78 <_printf_i>:
 8008a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a7c:	7e0f      	ldrb	r7, [r1, #24]
 8008a7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a80:	2f78      	cmp	r7, #120	; 0x78
 8008a82:	4691      	mov	r9, r2
 8008a84:	4680      	mov	r8, r0
 8008a86:	460c      	mov	r4, r1
 8008a88:	469a      	mov	sl, r3
 8008a8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a8e:	d807      	bhi.n	8008aa0 <_printf_i+0x28>
 8008a90:	2f62      	cmp	r7, #98	; 0x62
 8008a92:	d80a      	bhi.n	8008aaa <_printf_i+0x32>
 8008a94:	2f00      	cmp	r7, #0
 8008a96:	f000 80d8 	beq.w	8008c4a <_printf_i+0x1d2>
 8008a9a:	2f58      	cmp	r7, #88	; 0x58
 8008a9c:	f000 80a3 	beq.w	8008be6 <_printf_i+0x16e>
 8008aa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008aa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008aa8:	e03a      	b.n	8008b20 <_printf_i+0xa8>
 8008aaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008aae:	2b15      	cmp	r3, #21
 8008ab0:	d8f6      	bhi.n	8008aa0 <_printf_i+0x28>
 8008ab2:	a101      	add	r1, pc, #4	; (adr r1, 8008ab8 <_printf_i+0x40>)
 8008ab4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ab8:	08008b11 	.word	0x08008b11
 8008abc:	08008b25 	.word	0x08008b25
 8008ac0:	08008aa1 	.word	0x08008aa1
 8008ac4:	08008aa1 	.word	0x08008aa1
 8008ac8:	08008aa1 	.word	0x08008aa1
 8008acc:	08008aa1 	.word	0x08008aa1
 8008ad0:	08008b25 	.word	0x08008b25
 8008ad4:	08008aa1 	.word	0x08008aa1
 8008ad8:	08008aa1 	.word	0x08008aa1
 8008adc:	08008aa1 	.word	0x08008aa1
 8008ae0:	08008aa1 	.word	0x08008aa1
 8008ae4:	08008c31 	.word	0x08008c31
 8008ae8:	08008b55 	.word	0x08008b55
 8008aec:	08008c13 	.word	0x08008c13
 8008af0:	08008aa1 	.word	0x08008aa1
 8008af4:	08008aa1 	.word	0x08008aa1
 8008af8:	08008c53 	.word	0x08008c53
 8008afc:	08008aa1 	.word	0x08008aa1
 8008b00:	08008b55 	.word	0x08008b55
 8008b04:	08008aa1 	.word	0x08008aa1
 8008b08:	08008aa1 	.word	0x08008aa1
 8008b0c:	08008c1b 	.word	0x08008c1b
 8008b10:	682b      	ldr	r3, [r5, #0]
 8008b12:	1d1a      	adds	r2, r3, #4
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	602a      	str	r2, [r5, #0]
 8008b18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b20:	2301      	movs	r3, #1
 8008b22:	e0a3      	b.n	8008c6c <_printf_i+0x1f4>
 8008b24:	6820      	ldr	r0, [r4, #0]
 8008b26:	6829      	ldr	r1, [r5, #0]
 8008b28:	0606      	lsls	r6, r0, #24
 8008b2a:	f101 0304 	add.w	r3, r1, #4
 8008b2e:	d50a      	bpl.n	8008b46 <_printf_i+0xce>
 8008b30:	680e      	ldr	r6, [r1, #0]
 8008b32:	602b      	str	r3, [r5, #0]
 8008b34:	2e00      	cmp	r6, #0
 8008b36:	da03      	bge.n	8008b40 <_printf_i+0xc8>
 8008b38:	232d      	movs	r3, #45	; 0x2d
 8008b3a:	4276      	negs	r6, r6
 8008b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b40:	485e      	ldr	r0, [pc, #376]	; (8008cbc <_printf_i+0x244>)
 8008b42:	230a      	movs	r3, #10
 8008b44:	e019      	b.n	8008b7a <_printf_i+0x102>
 8008b46:	680e      	ldr	r6, [r1, #0]
 8008b48:	602b      	str	r3, [r5, #0]
 8008b4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b4e:	bf18      	it	ne
 8008b50:	b236      	sxthne	r6, r6
 8008b52:	e7ef      	b.n	8008b34 <_printf_i+0xbc>
 8008b54:	682b      	ldr	r3, [r5, #0]
 8008b56:	6820      	ldr	r0, [r4, #0]
 8008b58:	1d19      	adds	r1, r3, #4
 8008b5a:	6029      	str	r1, [r5, #0]
 8008b5c:	0601      	lsls	r1, r0, #24
 8008b5e:	d501      	bpl.n	8008b64 <_printf_i+0xec>
 8008b60:	681e      	ldr	r6, [r3, #0]
 8008b62:	e002      	b.n	8008b6a <_printf_i+0xf2>
 8008b64:	0646      	lsls	r6, r0, #25
 8008b66:	d5fb      	bpl.n	8008b60 <_printf_i+0xe8>
 8008b68:	881e      	ldrh	r6, [r3, #0]
 8008b6a:	4854      	ldr	r0, [pc, #336]	; (8008cbc <_printf_i+0x244>)
 8008b6c:	2f6f      	cmp	r7, #111	; 0x6f
 8008b6e:	bf0c      	ite	eq
 8008b70:	2308      	moveq	r3, #8
 8008b72:	230a      	movne	r3, #10
 8008b74:	2100      	movs	r1, #0
 8008b76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b7a:	6865      	ldr	r5, [r4, #4]
 8008b7c:	60a5      	str	r5, [r4, #8]
 8008b7e:	2d00      	cmp	r5, #0
 8008b80:	bfa2      	ittt	ge
 8008b82:	6821      	ldrge	r1, [r4, #0]
 8008b84:	f021 0104 	bicge.w	r1, r1, #4
 8008b88:	6021      	strge	r1, [r4, #0]
 8008b8a:	b90e      	cbnz	r6, 8008b90 <_printf_i+0x118>
 8008b8c:	2d00      	cmp	r5, #0
 8008b8e:	d04d      	beq.n	8008c2c <_printf_i+0x1b4>
 8008b90:	4615      	mov	r5, r2
 8008b92:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b96:	fb03 6711 	mls	r7, r3, r1, r6
 8008b9a:	5dc7      	ldrb	r7, [r0, r7]
 8008b9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ba0:	4637      	mov	r7, r6
 8008ba2:	42bb      	cmp	r3, r7
 8008ba4:	460e      	mov	r6, r1
 8008ba6:	d9f4      	bls.n	8008b92 <_printf_i+0x11a>
 8008ba8:	2b08      	cmp	r3, #8
 8008baa:	d10b      	bne.n	8008bc4 <_printf_i+0x14c>
 8008bac:	6823      	ldr	r3, [r4, #0]
 8008bae:	07de      	lsls	r6, r3, #31
 8008bb0:	d508      	bpl.n	8008bc4 <_printf_i+0x14c>
 8008bb2:	6923      	ldr	r3, [r4, #16]
 8008bb4:	6861      	ldr	r1, [r4, #4]
 8008bb6:	4299      	cmp	r1, r3
 8008bb8:	bfde      	ittt	le
 8008bba:	2330      	movle	r3, #48	; 0x30
 8008bbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008bc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008bc4:	1b52      	subs	r2, r2, r5
 8008bc6:	6122      	str	r2, [r4, #16]
 8008bc8:	f8cd a000 	str.w	sl, [sp]
 8008bcc:	464b      	mov	r3, r9
 8008bce:	aa03      	add	r2, sp, #12
 8008bd0:	4621      	mov	r1, r4
 8008bd2:	4640      	mov	r0, r8
 8008bd4:	f7ff fee2 	bl	800899c <_printf_common>
 8008bd8:	3001      	adds	r0, #1
 8008bda:	d14c      	bne.n	8008c76 <_printf_i+0x1fe>
 8008bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008be0:	b004      	add	sp, #16
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	4835      	ldr	r0, [pc, #212]	; (8008cbc <_printf_i+0x244>)
 8008be8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008bec:	6829      	ldr	r1, [r5, #0]
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	f851 6b04 	ldr.w	r6, [r1], #4
 8008bf4:	6029      	str	r1, [r5, #0]
 8008bf6:	061d      	lsls	r5, r3, #24
 8008bf8:	d514      	bpl.n	8008c24 <_printf_i+0x1ac>
 8008bfa:	07df      	lsls	r7, r3, #31
 8008bfc:	bf44      	itt	mi
 8008bfe:	f043 0320 	orrmi.w	r3, r3, #32
 8008c02:	6023      	strmi	r3, [r4, #0]
 8008c04:	b91e      	cbnz	r6, 8008c0e <_printf_i+0x196>
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	f023 0320 	bic.w	r3, r3, #32
 8008c0c:	6023      	str	r3, [r4, #0]
 8008c0e:	2310      	movs	r3, #16
 8008c10:	e7b0      	b.n	8008b74 <_printf_i+0xfc>
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	f043 0320 	orr.w	r3, r3, #32
 8008c18:	6023      	str	r3, [r4, #0]
 8008c1a:	2378      	movs	r3, #120	; 0x78
 8008c1c:	4828      	ldr	r0, [pc, #160]	; (8008cc0 <_printf_i+0x248>)
 8008c1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c22:	e7e3      	b.n	8008bec <_printf_i+0x174>
 8008c24:	0659      	lsls	r1, r3, #25
 8008c26:	bf48      	it	mi
 8008c28:	b2b6      	uxthmi	r6, r6
 8008c2a:	e7e6      	b.n	8008bfa <_printf_i+0x182>
 8008c2c:	4615      	mov	r5, r2
 8008c2e:	e7bb      	b.n	8008ba8 <_printf_i+0x130>
 8008c30:	682b      	ldr	r3, [r5, #0]
 8008c32:	6826      	ldr	r6, [r4, #0]
 8008c34:	6961      	ldr	r1, [r4, #20]
 8008c36:	1d18      	adds	r0, r3, #4
 8008c38:	6028      	str	r0, [r5, #0]
 8008c3a:	0635      	lsls	r5, r6, #24
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	d501      	bpl.n	8008c44 <_printf_i+0x1cc>
 8008c40:	6019      	str	r1, [r3, #0]
 8008c42:	e002      	b.n	8008c4a <_printf_i+0x1d2>
 8008c44:	0670      	lsls	r0, r6, #25
 8008c46:	d5fb      	bpl.n	8008c40 <_printf_i+0x1c8>
 8008c48:	8019      	strh	r1, [r3, #0]
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	6123      	str	r3, [r4, #16]
 8008c4e:	4615      	mov	r5, r2
 8008c50:	e7ba      	b.n	8008bc8 <_printf_i+0x150>
 8008c52:	682b      	ldr	r3, [r5, #0]
 8008c54:	1d1a      	adds	r2, r3, #4
 8008c56:	602a      	str	r2, [r5, #0]
 8008c58:	681d      	ldr	r5, [r3, #0]
 8008c5a:	6862      	ldr	r2, [r4, #4]
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	4628      	mov	r0, r5
 8008c60:	f7f7 faf6 	bl	8000250 <memchr>
 8008c64:	b108      	cbz	r0, 8008c6a <_printf_i+0x1f2>
 8008c66:	1b40      	subs	r0, r0, r5
 8008c68:	6060      	str	r0, [r4, #4]
 8008c6a:	6863      	ldr	r3, [r4, #4]
 8008c6c:	6123      	str	r3, [r4, #16]
 8008c6e:	2300      	movs	r3, #0
 8008c70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c74:	e7a8      	b.n	8008bc8 <_printf_i+0x150>
 8008c76:	6923      	ldr	r3, [r4, #16]
 8008c78:	462a      	mov	r2, r5
 8008c7a:	4649      	mov	r1, r9
 8008c7c:	4640      	mov	r0, r8
 8008c7e:	47d0      	blx	sl
 8008c80:	3001      	adds	r0, #1
 8008c82:	d0ab      	beq.n	8008bdc <_printf_i+0x164>
 8008c84:	6823      	ldr	r3, [r4, #0]
 8008c86:	079b      	lsls	r3, r3, #30
 8008c88:	d413      	bmi.n	8008cb2 <_printf_i+0x23a>
 8008c8a:	68e0      	ldr	r0, [r4, #12]
 8008c8c:	9b03      	ldr	r3, [sp, #12]
 8008c8e:	4298      	cmp	r0, r3
 8008c90:	bfb8      	it	lt
 8008c92:	4618      	movlt	r0, r3
 8008c94:	e7a4      	b.n	8008be0 <_printf_i+0x168>
 8008c96:	2301      	movs	r3, #1
 8008c98:	4632      	mov	r2, r6
 8008c9a:	4649      	mov	r1, r9
 8008c9c:	4640      	mov	r0, r8
 8008c9e:	47d0      	blx	sl
 8008ca0:	3001      	adds	r0, #1
 8008ca2:	d09b      	beq.n	8008bdc <_printf_i+0x164>
 8008ca4:	3501      	adds	r5, #1
 8008ca6:	68e3      	ldr	r3, [r4, #12]
 8008ca8:	9903      	ldr	r1, [sp, #12]
 8008caa:	1a5b      	subs	r3, r3, r1
 8008cac:	42ab      	cmp	r3, r5
 8008cae:	dcf2      	bgt.n	8008c96 <_printf_i+0x21e>
 8008cb0:	e7eb      	b.n	8008c8a <_printf_i+0x212>
 8008cb2:	2500      	movs	r5, #0
 8008cb4:	f104 0619 	add.w	r6, r4, #25
 8008cb8:	e7f5      	b.n	8008ca6 <_printf_i+0x22e>
 8008cba:	bf00      	nop
 8008cbc:	0800b402 	.word	0x0800b402
 8008cc0:	0800b413 	.word	0x0800b413

08008cc4 <sniprintf>:
 8008cc4:	b40c      	push	{r2, r3}
 8008cc6:	b530      	push	{r4, r5, lr}
 8008cc8:	4b17      	ldr	r3, [pc, #92]	; (8008d28 <sniprintf+0x64>)
 8008cca:	1e0c      	subs	r4, r1, #0
 8008ccc:	681d      	ldr	r5, [r3, #0]
 8008cce:	b09d      	sub	sp, #116	; 0x74
 8008cd0:	da08      	bge.n	8008ce4 <sniprintf+0x20>
 8008cd2:	238b      	movs	r3, #139	; 0x8b
 8008cd4:	602b      	str	r3, [r5, #0]
 8008cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cda:	b01d      	add	sp, #116	; 0x74
 8008cdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ce0:	b002      	add	sp, #8
 8008ce2:	4770      	bx	lr
 8008ce4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008ce8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008cec:	bf14      	ite	ne
 8008cee:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008cf2:	4623      	moveq	r3, r4
 8008cf4:	9304      	str	r3, [sp, #16]
 8008cf6:	9307      	str	r3, [sp, #28]
 8008cf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008cfc:	9002      	str	r0, [sp, #8]
 8008cfe:	9006      	str	r0, [sp, #24]
 8008d00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008d04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008d06:	ab21      	add	r3, sp, #132	; 0x84
 8008d08:	a902      	add	r1, sp, #8
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	9301      	str	r3, [sp, #4]
 8008d0e:	f001 fbb9 	bl	800a484 <_svfiprintf_r>
 8008d12:	1c43      	adds	r3, r0, #1
 8008d14:	bfbc      	itt	lt
 8008d16:	238b      	movlt	r3, #139	; 0x8b
 8008d18:	602b      	strlt	r3, [r5, #0]
 8008d1a:	2c00      	cmp	r4, #0
 8008d1c:	d0dd      	beq.n	8008cda <sniprintf+0x16>
 8008d1e:	9b02      	ldr	r3, [sp, #8]
 8008d20:	2200      	movs	r2, #0
 8008d22:	701a      	strb	r2, [r3, #0]
 8008d24:	e7d9      	b.n	8008cda <sniprintf+0x16>
 8008d26:	bf00      	nop
 8008d28:	200004c8 	.word	0x200004c8

08008d2c <siprintf>:
 8008d2c:	b40e      	push	{r1, r2, r3}
 8008d2e:	b500      	push	{lr}
 8008d30:	b09c      	sub	sp, #112	; 0x70
 8008d32:	ab1d      	add	r3, sp, #116	; 0x74
 8008d34:	9002      	str	r0, [sp, #8]
 8008d36:	9006      	str	r0, [sp, #24]
 8008d38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d3c:	4809      	ldr	r0, [pc, #36]	; (8008d64 <siprintf+0x38>)
 8008d3e:	9107      	str	r1, [sp, #28]
 8008d40:	9104      	str	r1, [sp, #16]
 8008d42:	4909      	ldr	r1, [pc, #36]	; (8008d68 <siprintf+0x3c>)
 8008d44:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d48:	9105      	str	r1, [sp, #20]
 8008d4a:	6800      	ldr	r0, [r0, #0]
 8008d4c:	9301      	str	r3, [sp, #4]
 8008d4e:	a902      	add	r1, sp, #8
 8008d50:	f001 fb98 	bl	800a484 <_svfiprintf_r>
 8008d54:	9b02      	ldr	r3, [sp, #8]
 8008d56:	2200      	movs	r2, #0
 8008d58:	701a      	strb	r2, [r3, #0]
 8008d5a:	b01c      	add	sp, #112	; 0x70
 8008d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d60:	b003      	add	sp, #12
 8008d62:	4770      	bx	lr
 8008d64:	200004c8 	.word	0x200004c8
 8008d68:	ffff0208 	.word	0xffff0208

08008d6c <strncmp>:
 8008d6c:	b510      	push	{r4, lr}
 8008d6e:	b17a      	cbz	r2, 8008d90 <strncmp+0x24>
 8008d70:	4603      	mov	r3, r0
 8008d72:	3901      	subs	r1, #1
 8008d74:	1884      	adds	r4, r0, r2
 8008d76:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008d7a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008d7e:	4290      	cmp	r0, r2
 8008d80:	d101      	bne.n	8008d86 <strncmp+0x1a>
 8008d82:	42a3      	cmp	r3, r4
 8008d84:	d101      	bne.n	8008d8a <strncmp+0x1e>
 8008d86:	1a80      	subs	r0, r0, r2
 8008d88:	bd10      	pop	{r4, pc}
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	d1f3      	bne.n	8008d76 <strncmp+0xa>
 8008d8e:	e7fa      	b.n	8008d86 <strncmp+0x1a>
 8008d90:	4610      	mov	r0, r2
 8008d92:	e7f9      	b.n	8008d88 <strncmp+0x1c>

08008d94 <_strtol_l.constprop.0>:
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d9a:	d001      	beq.n	8008da0 <_strtol_l.constprop.0+0xc>
 8008d9c:	2b24      	cmp	r3, #36	; 0x24
 8008d9e:	d906      	bls.n	8008dae <_strtol_l.constprop.0+0x1a>
 8008da0:	f7ff fb1a 	bl	80083d8 <__errno>
 8008da4:	2316      	movs	r3, #22
 8008da6:	6003      	str	r3, [r0, #0]
 8008da8:	2000      	movs	r0, #0
 8008daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008e94 <_strtol_l.constprop.0+0x100>
 8008db2:	460d      	mov	r5, r1
 8008db4:	462e      	mov	r6, r5
 8008db6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008dba:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008dbe:	f017 0708 	ands.w	r7, r7, #8
 8008dc2:	d1f7      	bne.n	8008db4 <_strtol_l.constprop.0+0x20>
 8008dc4:	2c2d      	cmp	r4, #45	; 0x2d
 8008dc6:	d132      	bne.n	8008e2e <_strtol_l.constprop.0+0x9a>
 8008dc8:	782c      	ldrb	r4, [r5, #0]
 8008dca:	2701      	movs	r7, #1
 8008dcc:	1cb5      	adds	r5, r6, #2
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d05b      	beq.n	8008e8a <_strtol_l.constprop.0+0xf6>
 8008dd2:	2b10      	cmp	r3, #16
 8008dd4:	d109      	bne.n	8008dea <_strtol_l.constprop.0+0x56>
 8008dd6:	2c30      	cmp	r4, #48	; 0x30
 8008dd8:	d107      	bne.n	8008dea <_strtol_l.constprop.0+0x56>
 8008dda:	782c      	ldrb	r4, [r5, #0]
 8008ddc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008de0:	2c58      	cmp	r4, #88	; 0x58
 8008de2:	d14d      	bne.n	8008e80 <_strtol_l.constprop.0+0xec>
 8008de4:	786c      	ldrb	r4, [r5, #1]
 8008de6:	2310      	movs	r3, #16
 8008de8:	3502      	adds	r5, #2
 8008dea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008dee:	f108 38ff 	add.w	r8, r8, #4294967295
 8008df2:	f04f 0c00 	mov.w	ip, #0
 8008df6:	fbb8 f9f3 	udiv	r9, r8, r3
 8008dfa:	4666      	mov	r6, ip
 8008dfc:	fb03 8a19 	mls	sl, r3, r9, r8
 8008e00:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008e04:	f1be 0f09 	cmp.w	lr, #9
 8008e08:	d816      	bhi.n	8008e38 <_strtol_l.constprop.0+0xa4>
 8008e0a:	4674      	mov	r4, lr
 8008e0c:	42a3      	cmp	r3, r4
 8008e0e:	dd24      	ble.n	8008e5a <_strtol_l.constprop.0+0xc6>
 8008e10:	f1bc 0f00 	cmp.w	ip, #0
 8008e14:	db1e      	blt.n	8008e54 <_strtol_l.constprop.0+0xc0>
 8008e16:	45b1      	cmp	r9, r6
 8008e18:	d31c      	bcc.n	8008e54 <_strtol_l.constprop.0+0xc0>
 8008e1a:	d101      	bne.n	8008e20 <_strtol_l.constprop.0+0x8c>
 8008e1c:	45a2      	cmp	sl, r4
 8008e1e:	db19      	blt.n	8008e54 <_strtol_l.constprop.0+0xc0>
 8008e20:	fb06 4603 	mla	r6, r6, r3, r4
 8008e24:	f04f 0c01 	mov.w	ip, #1
 8008e28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e2c:	e7e8      	b.n	8008e00 <_strtol_l.constprop.0+0x6c>
 8008e2e:	2c2b      	cmp	r4, #43	; 0x2b
 8008e30:	bf04      	itt	eq
 8008e32:	782c      	ldrbeq	r4, [r5, #0]
 8008e34:	1cb5      	addeq	r5, r6, #2
 8008e36:	e7ca      	b.n	8008dce <_strtol_l.constprop.0+0x3a>
 8008e38:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008e3c:	f1be 0f19 	cmp.w	lr, #25
 8008e40:	d801      	bhi.n	8008e46 <_strtol_l.constprop.0+0xb2>
 8008e42:	3c37      	subs	r4, #55	; 0x37
 8008e44:	e7e2      	b.n	8008e0c <_strtol_l.constprop.0+0x78>
 8008e46:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008e4a:	f1be 0f19 	cmp.w	lr, #25
 8008e4e:	d804      	bhi.n	8008e5a <_strtol_l.constprop.0+0xc6>
 8008e50:	3c57      	subs	r4, #87	; 0x57
 8008e52:	e7db      	b.n	8008e0c <_strtol_l.constprop.0+0x78>
 8008e54:	f04f 3cff 	mov.w	ip, #4294967295
 8008e58:	e7e6      	b.n	8008e28 <_strtol_l.constprop.0+0x94>
 8008e5a:	f1bc 0f00 	cmp.w	ip, #0
 8008e5e:	da05      	bge.n	8008e6c <_strtol_l.constprop.0+0xd8>
 8008e60:	2322      	movs	r3, #34	; 0x22
 8008e62:	6003      	str	r3, [r0, #0]
 8008e64:	4646      	mov	r6, r8
 8008e66:	b942      	cbnz	r2, 8008e7a <_strtol_l.constprop.0+0xe6>
 8008e68:	4630      	mov	r0, r6
 8008e6a:	e79e      	b.n	8008daa <_strtol_l.constprop.0+0x16>
 8008e6c:	b107      	cbz	r7, 8008e70 <_strtol_l.constprop.0+0xdc>
 8008e6e:	4276      	negs	r6, r6
 8008e70:	2a00      	cmp	r2, #0
 8008e72:	d0f9      	beq.n	8008e68 <_strtol_l.constprop.0+0xd4>
 8008e74:	f1bc 0f00 	cmp.w	ip, #0
 8008e78:	d000      	beq.n	8008e7c <_strtol_l.constprop.0+0xe8>
 8008e7a:	1e69      	subs	r1, r5, #1
 8008e7c:	6011      	str	r1, [r2, #0]
 8008e7e:	e7f3      	b.n	8008e68 <_strtol_l.constprop.0+0xd4>
 8008e80:	2430      	movs	r4, #48	; 0x30
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1b1      	bne.n	8008dea <_strtol_l.constprop.0+0x56>
 8008e86:	2308      	movs	r3, #8
 8008e88:	e7af      	b.n	8008dea <_strtol_l.constprop.0+0x56>
 8008e8a:	2c30      	cmp	r4, #48	; 0x30
 8008e8c:	d0a5      	beq.n	8008dda <_strtol_l.constprop.0+0x46>
 8008e8e:	230a      	movs	r3, #10
 8008e90:	e7ab      	b.n	8008dea <_strtol_l.constprop.0+0x56>
 8008e92:	bf00      	nop
 8008e94:	0800b425 	.word	0x0800b425

08008e98 <strtol>:
 8008e98:	4613      	mov	r3, r2
 8008e9a:	460a      	mov	r2, r1
 8008e9c:	4601      	mov	r1, r0
 8008e9e:	4802      	ldr	r0, [pc, #8]	; (8008ea8 <strtol+0x10>)
 8008ea0:	6800      	ldr	r0, [r0, #0]
 8008ea2:	f7ff bf77 	b.w	8008d94 <_strtol_l.constprop.0>
 8008ea6:	bf00      	nop
 8008ea8:	200004c8 	.word	0x200004c8

08008eac <quorem>:
 8008eac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb0:	6903      	ldr	r3, [r0, #16]
 8008eb2:	690c      	ldr	r4, [r1, #16]
 8008eb4:	42a3      	cmp	r3, r4
 8008eb6:	4607      	mov	r7, r0
 8008eb8:	f2c0 8081 	blt.w	8008fbe <quorem+0x112>
 8008ebc:	3c01      	subs	r4, #1
 8008ebe:	f101 0814 	add.w	r8, r1, #20
 8008ec2:	f100 0514 	add.w	r5, r0, #20
 8008ec6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008eca:	9301      	str	r3, [sp, #4]
 8008ecc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ed0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008edc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ee0:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ee4:	d331      	bcc.n	8008f4a <quorem+0x9e>
 8008ee6:	f04f 0e00 	mov.w	lr, #0
 8008eea:	4640      	mov	r0, r8
 8008eec:	46ac      	mov	ip, r5
 8008eee:	46f2      	mov	sl, lr
 8008ef0:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ef4:	b293      	uxth	r3, r2
 8008ef6:	fb06 e303 	mla	r3, r6, r3, lr
 8008efa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	ebaa 0303 	sub.w	r3, sl, r3
 8008f04:	f8dc a000 	ldr.w	sl, [ip]
 8008f08:	0c12      	lsrs	r2, r2, #16
 8008f0a:	fa13 f38a 	uxtah	r3, r3, sl
 8008f0e:	fb06 e202 	mla	r2, r6, r2, lr
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	9b00      	ldr	r3, [sp, #0]
 8008f16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f1a:	b292      	uxth	r2, r2
 8008f1c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008f20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f24:	f8bd 3000 	ldrh.w	r3, [sp]
 8008f28:	4581      	cmp	r9, r0
 8008f2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f2e:	f84c 3b04 	str.w	r3, [ip], #4
 8008f32:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008f36:	d2db      	bcs.n	8008ef0 <quorem+0x44>
 8008f38:	f855 300b 	ldr.w	r3, [r5, fp]
 8008f3c:	b92b      	cbnz	r3, 8008f4a <quorem+0x9e>
 8008f3e:	9b01      	ldr	r3, [sp, #4]
 8008f40:	3b04      	subs	r3, #4
 8008f42:	429d      	cmp	r5, r3
 8008f44:	461a      	mov	r2, r3
 8008f46:	d32e      	bcc.n	8008fa6 <quorem+0xfa>
 8008f48:	613c      	str	r4, [r7, #16]
 8008f4a:	4638      	mov	r0, r7
 8008f4c:	f001 f846 	bl	8009fdc <__mcmp>
 8008f50:	2800      	cmp	r0, #0
 8008f52:	db24      	blt.n	8008f9e <quorem+0xf2>
 8008f54:	3601      	adds	r6, #1
 8008f56:	4628      	mov	r0, r5
 8008f58:	f04f 0c00 	mov.w	ip, #0
 8008f5c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f60:	f8d0 e000 	ldr.w	lr, [r0]
 8008f64:	b293      	uxth	r3, r2
 8008f66:	ebac 0303 	sub.w	r3, ip, r3
 8008f6a:	0c12      	lsrs	r2, r2, #16
 8008f6c:	fa13 f38e 	uxtah	r3, r3, lr
 8008f70:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008f74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f7e:	45c1      	cmp	r9, r8
 8008f80:	f840 3b04 	str.w	r3, [r0], #4
 8008f84:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008f88:	d2e8      	bcs.n	8008f5c <quorem+0xb0>
 8008f8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f92:	b922      	cbnz	r2, 8008f9e <quorem+0xf2>
 8008f94:	3b04      	subs	r3, #4
 8008f96:	429d      	cmp	r5, r3
 8008f98:	461a      	mov	r2, r3
 8008f9a:	d30a      	bcc.n	8008fb2 <quorem+0x106>
 8008f9c:	613c      	str	r4, [r7, #16]
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	b003      	add	sp, #12
 8008fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa6:	6812      	ldr	r2, [r2, #0]
 8008fa8:	3b04      	subs	r3, #4
 8008faa:	2a00      	cmp	r2, #0
 8008fac:	d1cc      	bne.n	8008f48 <quorem+0x9c>
 8008fae:	3c01      	subs	r4, #1
 8008fb0:	e7c7      	b.n	8008f42 <quorem+0x96>
 8008fb2:	6812      	ldr	r2, [r2, #0]
 8008fb4:	3b04      	subs	r3, #4
 8008fb6:	2a00      	cmp	r2, #0
 8008fb8:	d1f0      	bne.n	8008f9c <quorem+0xf0>
 8008fba:	3c01      	subs	r4, #1
 8008fbc:	e7eb      	b.n	8008f96 <quorem+0xea>
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	e7ee      	b.n	8008fa0 <quorem+0xf4>
 8008fc2:	0000      	movs	r0, r0
 8008fc4:	0000      	movs	r0, r0
	...

08008fc8 <_dtoa_r>:
 8008fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fcc:	ed2d 8b02 	vpush	{d8}
 8008fd0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008fd2:	b091      	sub	sp, #68	; 0x44
 8008fd4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008fd8:	ec59 8b10 	vmov	r8, r9, d0
 8008fdc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008fde:	9106      	str	r1, [sp, #24]
 8008fe0:	4606      	mov	r6, r0
 8008fe2:	9208      	str	r2, [sp, #32]
 8008fe4:	930c      	str	r3, [sp, #48]	; 0x30
 8008fe6:	b975      	cbnz	r5, 8009006 <_dtoa_r+0x3e>
 8008fe8:	2010      	movs	r0, #16
 8008fea:	f000 fd5f 	bl	8009aac <malloc>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	6270      	str	r0, [r6, #36]	; 0x24
 8008ff2:	b920      	cbnz	r0, 8008ffe <_dtoa_r+0x36>
 8008ff4:	4baa      	ldr	r3, [pc, #680]	; (80092a0 <_dtoa_r+0x2d8>)
 8008ff6:	21ea      	movs	r1, #234	; 0xea
 8008ff8:	48aa      	ldr	r0, [pc, #680]	; (80092a4 <_dtoa_r+0x2dc>)
 8008ffa:	f001 fb53 	bl	800a6a4 <__assert_func>
 8008ffe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009002:	6005      	str	r5, [r0, #0]
 8009004:	60c5      	str	r5, [r0, #12]
 8009006:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009008:	6819      	ldr	r1, [r3, #0]
 800900a:	b151      	cbz	r1, 8009022 <_dtoa_r+0x5a>
 800900c:	685a      	ldr	r2, [r3, #4]
 800900e:	604a      	str	r2, [r1, #4]
 8009010:	2301      	movs	r3, #1
 8009012:	4093      	lsls	r3, r2
 8009014:	608b      	str	r3, [r1, #8]
 8009016:	4630      	mov	r0, r6
 8009018:	f000 fd9e 	bl	8009b58 <_Bfree>
 800901c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800901e:	2200      	movs	r2, #0
 8009020:	601a      	str	r2, [r3, #0]
 8009022:	f1b9 0300 	subs.w	r3, r9, #0
 8009026:	bfbb      	ittet	lt
 8009028:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800902c:	9303      	strlt	r3, [sp, #12]
 800902e:	2300      	movge	r3, #0
 8009030:	2201      	movlt	r2, #1
 8009032:	bfac      	ite	ge
 8009034:	6023      	strge	r3, [r4, #0]
 8009036:	6022      	strlt	r2, [r4, #0]
 8009038:	4b9b      	ldr	r3, [pc, #620]	; (80092a8 <_dtoa_r+0x2e0>)
 800903a:	9c03      	ldr	r4, [sp, #12]
 800903c:	43a3      	bics	r3, r4
 800903e:	d11c      	bne.n	800907a <_dtoa_r+0xb2>
 8009040:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009042:	f242 730f 	movw	r3, #9999	; 0x270f
 8009046:	6013      	str	r3, [r2, #0]
 8009048:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800904c:	ea53 0308 	orrs.w	r3, r3, r8
 8009050:	f000 84fd 	beq.w	8009a4e <_dtoa_r+0xa86>
 8009054:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009056:	b963      	cbnz	r3, 8009072 <_dtoa_r+0xaa>
 8009058:	4b94      	ldr	r3, [pc, #592]	; (80092ac <_dtoa_r+0x2e4>)
 800905a:	e01f      	b.n	800909c <_dtoa_r+0xd4>
 800905c:	4b94      	ldr	r3, [pc, #592]	; (80092b0 <_dtoa_r+0x2e8>)
 800905e:	9301      	str	r3, [sp, #4]
 8009060:	3308      	adds	r3, #8
 8009062:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009064:	6013      	str	r3, [r2, #0]
 8009066:	9801      	ldr	r0, [sp, #4]
 8009068:	b011      	add	sp, #68	; 0x44
 800906a:	ecbd 8b02 	vpop	{d8}
 800906e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009072:	4b8e      	ldr	r3, [pc, #568]	; (80092ac <_dtoa_r+0x2e4>)
 8009074:	9301      	str	r3, [sp, #4]
 8009076:	3303      	adds	r3, #3
 8009078:	e7f3      	b.n	8009062 <_dtoa_r+0x9a>
 800907a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800907e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009086:	d10b      	bne.n	80090a0 <_dtoa_r+0xd8>
 8009088:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800908a:	2301      	movs	r3, #1
 800908c:	6013      	str	r3, [r2, #0]
 800908e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009090:	2b00      	cmp	r3, #0
 8009092:	f000 84d9 	beq.w	8009a48 <_dtoa_r+0xa80>
 8009096:	4887      	ldr	r0, [pc, #540]	; (80092b4 <_dtoa_r+0x2ec>)
 8009098:	6018      	str	r0, [r3, #0]
 800909a:	1e43      	subs	r3, r0, #1
 800909c:	9301      	str	r3, [sp, #4]
 800909e:	e7e2      	b.n	8009066 <_dtoa_r+0x9e>
 80090a0:	a90f      	add	r1, sp, #60	; 0x3c
 80090a2:	aa0e      	add	r2, sp, #56	; 0x38
 80090a4:	4630      	mov	r0, r6
 80090a6:	eeb0 0b48 	vmov.f64	d0, d8
 80090aa:	f001 f83d 	bl	800a128 <__d2b>
 80090ae:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80090b2:	4605      	mov	r5, r0
 80090b4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80090b6:	2900      	cmp	r1, #0
 80090b8:	d046      	beq.n	8009148 <_dtoa_r+0x180>
 80090ba:	ee18 4a90 	vmov	r4, s17
 80090be:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80090c2:	ec53 2b18 	vmov	r2, r3, d8
 80090c6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80090ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80090ce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80090d2:	2400      	movs	r4, #0
 80090d4:	ec43 2b16 	vmov	d6, r2, r3
 80090d8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80090dc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009288 <_dtoa_r+0x2c0>
 80090e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80090e4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8009290 <_dtoa_r+0x2c8>
 80090e8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80090ec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009298 <_dtoa_r+0x2d0>
 80090f0:	ee07 1a90 	vmov	s15, r1
 80090f4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80090f8:	eeb0 7b46 	vmov.f64	d7, d6
 80090fc:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009100:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009104:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800910c:	ee16 ba90 	vmov	fp, s13
 8009110:	940a      	str	r4, [sp, #40]	; 0x28
 8009112:	d508      	bpl.n	8009126 <_dtoa_r+0x15e>
 8009114:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009118:	eeb4 6b47 	vcmp.f64	d6, d7
 800911c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009120:	bf18      	it	ne
 8009122:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009126:	f1bb 0f16 	cmp.w	fp, #22
 800912a:	d82f      	bhi.n	800918c <_dtoa_r+0x1c4>
 800912c:	4b62      	ldr	r3, [pc, #392]	; (80092b8 <_dtoa_r+0x2f0>)
 800912e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009132:	ed93 7b00 	vldr	d7, [r3]
 8009136:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800913a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800913e:	d501      	bpl.n	8009144 <_dtoa_r+0x17c>
 8009140:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009144:	2300      	movs	r3, #0
 8009146:	e022      	b.n	800918e <_dtoa_r+0x1c6>
 8009148:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800914a:	4401      	add	r1, r0
 800914c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009150:	2b20      	cmp	r3, #32
 8009152:	bfc1      	itttt	gt
 8009154:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009158:	fa04 f303 	lslgt.w	r3, r4, r3
 800915c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009160:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009164:	bfd6      	itet	le
 8009166:	f1c3 0320 	rsble	r3, r3, #32
 800916a:	ea43 0808 	orrgt.w	r8, r3, r8
 800916e:	fa08 f803 	lslle.w	r8, r8, r3
 8009172:	ee07 8a90 	vmov	s15, r8
 8009176:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800917a:	3901      	subs	r1, #1
 800917c:	ee17 4a90 	vmov	r4, s15
 8009180:	ec53 2b17 	vmov	r2, r3, d7
 8009184:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009188:	2401      	movs	r4, #1
 800918a:	e7a3      	b.n	80090d4 <_dtoa_r+0x10c>
 800918c:	2301      	movs	r3, #1
 800918e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009190:	1a43      	subs	r3, r0, r1
 8009192:	1e5a      	subs	r2, r3, #1
 8009194:	bf45      	ittet	mi
 8009196:	f1c3 0301 	rsbmi	r3, r3, #1
 800919a:	9304      	strmi	r3, [sp, #16]
 800919c:	2300      	movpl	r3, #0
 800919e:	2300      	movmi	r3, #0
 80091a0:	9205      	str	r2, [sp, #20]
 80091a2:	bf54      	ite	pl
 80091a4:	9304      	strpl	r3, [sp, #16]
 80091a6:	9305      	strmi	r3, [sp, #20]
 80091a8:	f1bb 0f00 	cmp.w	fp, #0
 80091ac:	db18      	blt.n	80091e0 <_dtoa_r+0x218>
 80091ae:	9b05      	ldr	r3, [sp, #20]
 80091b0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80091b4:	445b      	add	r3, fp
 80091b6:	9305      	str	r3, [sp, #20]
 80091b8:	2300      	movs	r3, #0
 80091ba:	9a06      	ldr	r2, [sp, #24]
 80091bc:	2a09      	cmp	r2, #9
 80091be:	d849      	bhi.n	8009254 <_dtoa_r+0x28c>
 80091c0:	2a05      	cmp	r2, #5
 80091c2:	bfc4      	itt	gt
 80091c4:	3a04      	subgt	r2, #4
 80091c6:	9206      	strgt	r2, [sp, #24]
 80091c8:	9a06      	ldr	r2, [sp, #24]
 80091ca:	f1a2 0202 	sub.w	r2, r2, #2
 80091ce:	bfcc      	ite	gt
 80091d0:	2400      	movgt	r4, #0
 80091d2:	2401      	movle	r4, #1
 80091d4:	2a03      	cmp	r2, #3
 80091d6:	d848      	bhi.n	800926a <_dtoa_r+0x2a2>
 80091d8:	e8df f002 	tbb	[pc, r2]
 80091dc:	3a2c2e0b 	.word	0x3a2c2e0b
 80091e0:	9b04      	ldr	r3, [sp, #16]
 80091e2:	2200      	movs	r2, #0
 80091e4:	eba3 030b 	sub.w	r3, r3, fp
 80091e8:	9304      	str	r3, [sp, #16]
 80091ea:	9209      	str	r2, [sp, #36]	; 0x24
 80091ec:	f1cb 0300 	rsb	r3, fp, #0
 80091f0:	e7e3      	b.n	80091ba <_dtoa_r+0x1f2>
 80091f2:	2200      	movs	r2, #0
 80091f4:	9207      	str	r2, [sp, #28]
 80091f6:	9a08      	ldr	r2, [sp, #32]
 80091f8:	2a00      	cmp	r2, #0
 80091fa:	dc39      	bgt.n	8009270 <_dtoa_r+0x2a8>
 80091fc:	f04f 0a01 	mov.w	sl, #1
 8009200:	46d1      	mov	r9, sl
 8009202:	4652      	mov	r2, sl
 8009204:	f8cd a020 	str.w	sl, [sp, #32]
 8009208:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800920a:	2100      	movs	r1, #0
 800920c:	6079      	str	r1, [r7, #4]
 800920e:	2004      	movs	r0, #4
 8009210:	f100 0c14 	add.w	ip, r0, #20
 8009214:	4594      	cmp	ip, r2
 8009216:	6879      	ldr	r1, [r7, #4]
 8009218:	d92f      	bls.n	800927a <_dtoa_r+0x2b2>
 800921a:	4630      	mov	r0, r6
 800921c:	930d      	str	r3, [sp, #52]	; 0x34
 800921e:	f000 fc5b 	bl	8009ad8 <_Balloc>
 8009222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009224:	9001      	str	r0, [sp, #4]
 8009226:	4602      	mov	r2, r0
 8009228:	2800      	cmp	r0, #0
 800922a:	d149      	bne.n	80092c0 <_dtoa_r+0x2f8>
 800922c:	4b23      	ldr	r3, [pc, #140]	; (80092bc <_dtoa_r+0x2f4>)
 800922e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009232:	e6e1      	b.n	8008ff8 <_dtoa_r+0x30>
 8009234:	2201      	movs	r2, #1
 8009236:	e7dd      	b.n	80091f4 <_dtoa_r+0x22c>
 8009238:	2200      	movs	r2, #0
 800923a:	9207      	str	r2, [sp, #28]
 800923c:	9a08      	ldr	r2, [sp, #32]
 800923e:	eb0b 0a02 	add.w	sl, fp, r2
 8009242:	f10a 0901 	add.w	r9, sl, #1
 8009246:	464a      	mov	r2, r9
 8009248:	2a01      	cmp	r2, #1
 800924a:	bfb8      	it	lt
 800924c:	2201      	movlt	r2, #1
 800924e:	e7db      	b.n	8009208 <_dtoa_r+0x240>
 8009250:	2201      	movs	r2, #1
 8009252:	e7f2      	b.n	800923a <_dtoa_r+0x272>
 8009254:	2401      	movs	r4, #1
 8009256:	2200      	movs	r2, #0
 8009258:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800925c:	f04f 3aff 	mov.w	sl, #4294967295
 8009260:	2100      	movs	r1, #0
 8009262:	46d1      	mov	r9, sl
 8009264:	2212      	movs	r2, #18
 8009266:	9108      	str	r1, [sp, #32]
 8009268:	e7ce      	b.n	8009208 <_dtoa_r+0x240>
 800926a:	2201      	movs	r2, #1
 800926c:	9207      	str	r2, [sp, #28]
 800926e:	e7f5      	b.n	800925c <_dtoa_r+0x294>
 8009270:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009274:	46d1      	mov	r9, sl
 8009276:	4652      	mov	r2, sl
 8009278:	e7c6      	b.n	8009208 <_dtoa_r+0x240>
 800927a:	3101      	adds	r1, #1
 800927c:	6079      	str	r1, [r7, #4]
 800927e:	0040      	lsls	r0, r0, #1
 8009280:	e7c6      	b.n	8009210 <_dtoa_r+0x248>
 8009282:	bf00      	nop
 8009284:	f3af 8000 	nop.w
 8009288:	636f4361 	.word	0x636f4361
 800928c:	3fd287a7 	.word	0x3fd287a7
 8009290:	8b60c8b3 	.word	0x8b60c8b3
 8009294:	3fc68a28 	.word	0x3fc68a28
 8009298:	509f79fb 	.word	0x509f79fb
 800929c:	3fd34413 	.word	0x3fd34413
 80092a0:	0800b532 	.word	0x0800b532
 80092a4:	0800b549 	.word	0x0800b549
 80092a8:	7ff00000 	.word	0x7ff00000
 80092ac:	0800b52e 	.word	0x0800b52e
 80092b0:	0800b525 	.word	0x0800b525
 80092b4:	0800b401 	.word	0x0800b401
 80092b8:	0800b640 	.word	0x0800b640
 80092bc:	0800b5a4 	.word	0x0800b5a4
 80092c0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80092c2:	9901      	ldr	r1, [sp, #4]
 80092c4:	6011      	str	r1, [r2, #0]
 80092c6:	f1b9 0f0e 	cmp.w	r9, #14
 80092ca:	d86c      	bhi.n	80093a6 <_dtoa_r+0x3de>
 80092cc:	2c00      	cmp	r4, #0
 80092ce:	d06a      	beq.n	80093a6 <_dtoa_r+0x3de>
 80092d0:	f1bb 0f00 	cmp.w	fp, #0
 80092d4:	f340 80a0 	ble.w	8009418 <_dtoa_r+0x450>
 80092d8:	49c1      	ldr	r1, [pc, #772]	; (80095e0 <_dtoa_r+0x618>)
 80092da:	f00b 020f 	and.w	r2, fp, #15
 80092de:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80092e2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80092e6:	ed92 7b00 	vldr	d7, [r2]
 80092ea:	ea4f 112b 	mov.w	r1, fp, asr #4
 80092ee:	f000 8087 	beq.w	8009400 <_dtoa_r+0x438>
 80092f2:	4abc      	ldr	r2, [pc, #752]	; (80095e4 <_dtoa_r+0x61c>)
 80092f4:	ed92 6b08 	vldr	d6, [r2, #32]
 80092f8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80092fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009300:	f001 010f 	and.w	r1, r1, #15
 8009304:	2203      	movs	r2, #3
 8009306:	48b7      	ldr	r0, [pc, #732]	; (80095e4 <_dtoa_r+0x61c>)
 8009308:	2900      	cmp	r1, #0
 800930a:	d17b      	bne.n	8009404 <_dtoa_r+0x43c>
 800930c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009310:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009314:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009318:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800931a:	2900      	cmp	r1, #0
 800931c:	f000 80a2 	beq.w	8009464 <_dtoa_r+0x49c>
 8009320:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009324:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009328:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800932c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009330:	f140 8098 	bpl.w	8009464 <_dtoa_r+0x49c>
 8009334:	f1b9 0f00 	cmp.w	r9, #0
 8009338:	f000 8094 	beq.w	8009464 <_dtoa_r+0x49c>
 800933c:	f1ba 0f00 	cmp.w	sl, #0
 8009340:	dd2f      	ble.n	80093a2 <_dtoa_r+0x3da>
 8009342:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009346:	ee27 7b06 	vmul.f64	d7, d7, d6
 800934a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800934e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009352:	3201      	adds	r2, #1
 8009354:	4650      	mov	r0, sl
 8009356:	ed9d 6b02 	vldr	d6, [sp, #8]
 800935a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800935e:	ee07 2a90 	vmov	s15, r2
 8009362:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009366:	eea7 5b06 	vfma.f64	d5, d7, d6
 800936a:	ee15 4a90 	vmov	r4, s11
 800936e:	ec52 1b15 	vmov	r1, r2, d5
 8009372:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009376:	2800      	cmp	r0, #0
 8009378:	d177      	bne.n	800946a <_dtoa_r+0x4a2>
 800937a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800937e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009382:	ec42 1b17 	vmov	d7, r1, r2
 8009386:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800938a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800938e:	f300 8263 	bgt.w	8009858 <_dtoa_r+0x890>
 8009392:	eeb1 7b47 	vneg.f64	d7, d7
 8009396:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800939a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800939e:	f100 8258 	bmi.w	8009852 <_dtoa_r+0x88a>
 80093a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80093a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80093a8:	2a00      	cmp	r2, #0
 80093aa:	f2c0 811d 	blt.w	80095e8 <_dtoa_r+0x620>
 80093ae:	f1bb 0f0e 	cmp.w	fp, #14
 80093b2:	f300 8119 	bgt.w	80095e8 <_dtoa_r+0x620>
 80093b6:	4b8a      	ldr	r3, [pc, #552]	; (80095e0 <_dtoa_r+0x618>)
 80093b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80093bc:	ed93 6b00 	vldr	d6, [r3]
 80093c0:	9b08      	ldr	r3, [sp, #32]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	f280 80b7 	bge.w	8009536 <_dtoa_r+0x56e>
 80093c8:	f1b9 0f00 	cmp.w	r9, #0
 80093cc:	f300 80b3 	bgt.w	8009536 <_dtoa_r+0x56e>
 80093d0:	f040 823f 	bne.w	8009852 <_dtoa_r+0x88a>
 80093d4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80093d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80093dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80093e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093e8:	464c      	mov	r4, r9
 80093ea:	464f      	mov	r7, r9
 80093ec:	f280 8215 	bge.w	800981a <_dtoa_r+0x852>
 80093f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80093f4:	2331      	movs	r3, #49	; 0x31
 80093f6:	f808 3b01 	strb.w	r3, [r8], #1
 80093fa:	f10b 0b01 	add.w	fp, fp, #1
 80093fe:	e211      	b.n	8009824 <_dtoa_r+0x85c>
 8009400:	2202      	movs	r2, #2
 8009402:	e780      	b.n	8009306 <_dtoa_r+0x33e>
 8009404:	07cc      	lsls	r4, r1, #31
 8009406:	d504      	bpl.n	8009412 <_dtoa_r+0x44a>
 8009408:	ed90 6b00 	vldr	d6, [r0]
 800940c:	3201      	adds	r2, #1
 800940e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009412:	1049      	asrs	r1, r1, #1
 8009414:	3008      	adds	r0, #8
 8009416:	e777      	b.n	8009308 <_dtoa_r+0x340>
 8009418:	d022      	beq.n	8009460 <_dtoa_r+0x498>
 800941a:	f1cb 0100 	rsb	r1, fp, #0
 800941e:	4a70      	ldr	r2, [pc, #448]	; (80095e0 <_dtoa_r+0x618>)
 8009420:	f001 000f 	and.w	r0, r1, #15
 8009424:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009428:	ed92 7b00 	vldr	d7, [r2]
 800942c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009430:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009434:	486b      	ldr	r0, [pc, #428]	; (80095e4 <_dtoa_r+0x61c>)
 8009436:	1109      	asrs	r1, r1, #4
 8009438:	2400      	movs	r4, #0
 800943a:	2202      	movs	r2, #2
 800943c:	b929      	cbnz	r1, 800944a <_dtoa_r+0x482>
 800943e:	2c00      	cmp	r4, #0
 8009440:	f43f af6a 	beq.w	8009318 <_dtoa_r+0x350>
 8009444:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009448:	e766      	b.n	8009318 <_dtoa_r+0x350>
 800944a:	07cf      	lsls	r7, r1, #31
 800944c:	d505      	bpl.n	800945a <_dtoa_r+0x492>
 800944e:	ed90 6b00 	vldr	d6, [r0]
 8009452:	3201      	adds	r2, #1
 8009454:	2401      	movs	r4, #1
 8009456:	ee27 7b06 	vmul.f64	d7, d7, d6
 800945a:	1049      	asrs	r1, r1, #1
 800945c:	3008      	adds	r0, #8
 800945e:	e7ed      	b.n	800943c <_dtoa_r+0x474>
 8009460:	2202      	movs	r2, #2
 8009462:	e759      	b.n	8009318 <_dtoa_r+0x350>
 8009464:	465f      	mov	r7, fp
 8009466:	4648      	mov	r0, r9
 8009468:	e775      	b.n	8009356 <_dtoa_r+0x38e>
 800946a:	ec42 1b17 	vmov	d7, r1, r2
 800946e:	4a5c      	ldr	r2, [pc, #368]	; (80095e0 <_dtoa_r+0x618>)
 8009470:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009474:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009478:	9a01      	ldr	r2, [sp, #4]
 800947a:	1814      	adds	r4, r2, r0
 800947c:	9a07      	ldr	r2, [sp, #28]
 800947e:	b352      	cbz	r2, 80094d6 <_dtoa_r+0x50e>
 8009480:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009484:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009488:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800948c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009490:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009494:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009498:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800949c:	ee14 2a90 	vmov	r2, s9
 80094a0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80094a4:	3230      	adds	r2, #48	; 0x30
 80094a6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80094aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80094ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094b2:	f808 2b01 	strb.w	r2, [r8], #1
 80094b6:	d439      	bmi.n	800952c <_dtoa_r+0x564>
 80094b8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80094bc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80094c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094c4:	d472      	bmi.n	80095ac <_dtoa_r+0x5e4>
 80094c6:	45a0      	cmp	r8, r4
 80094c8:	f43f af6b 	beq.w	80093a2 <_dtoa_r+0x3da>
 80094cc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80094d0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80094d4:	e7e0      	b.n	8009498 <_dtoa_r+0x4d0>
 80094d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80094da:	ee27 7b04 	vmul.f64	d7, d7, d4
 80094de:	4621      	mov	r1, r4
 80094e0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80094e4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80094e8:	ee14 2a90 	vmov	r2, s9
 80094ec:	3230      	adds	r2, #48	; 0x30
 80094ee:	f808 2b01 	strb.w	r2, [r8], #1
 80094f2:	45a0      	cmp	r8, r4
 80094f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80094f8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80094fc:	d118      	bne.n	8009530 <_dtoa_r+0x568>
 80094fe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009502:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009506:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800950a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800950e:	dc4d      	bgt.n	80095ac <_dtoa_r+0x5e4>
 8009510:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009514:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800951c:	f57f af41 	bpl.w	80093a2 <_dtoa_r+0x3da>
 8009520:	4688      	mov	r8, r1
 8009522:	3901      	subs	r1, #1
 8009524:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009528:	2b30      	cmp	r3, #48	; 0x30
 800952a:	d0f9      	beq.n	8009520 <_dtoa_r+0x558>
 800952c:	46bb      	mov	fp, r7
 800952e:	e02a      	b.n	8009586 <_dtoa_r+0x5be>
 8009530:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009534:	e7d6      	b.n	80094e4 <_dtoa_r+0x51c>
 8009536:	ed9d 7b02 	vldr	d7, [sp, #8]
 800953a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800953e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009542:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009546:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800954a:	ee15 3a10 	vmov	r3, s10
 800954e:	3330      	adds	r3, #48	; 0x30
 8009550:	f808 3b01 	strb.w	r3, [r8], #1
 8009554:	9b01      	ldr	r3, [sp, #4]
 8009556:	eba8 0303 	sub.w	r3, r8, r3
 800955a:	4599      	cmp	r9, r3
 800955c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009560:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009564:	d133      	bne.n	80095ce <_dtoa_r+0x606>
 8009566:	ee37 7b07 	vadd.f64	d7, d7, d7
 800956a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800956e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009572:	dc1a      	bgt.n	80095aa <_dtoa_r+0x5e2>
 8009574:	eeb4 7b46 	vcmp.f64	d7, d6
 8009578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800957c:	d103      	bne.n	8009586 <_dtoa_r+0x5be>
 800957e:	ee15 3a10 	vmov	r3, s10
 8009582:	07d9      	lsls	r1, r3, #31
 8009584:	d411      	bmi.n	80095aa <_dtoa_r+0x5e2>
 8009586:	4629      	mov	r1, r5
 8009588:	4630      	mov	r0, r6
 800958a:	f000 fae5 	bl	8009b58 <_Bfree>
 800958e:	2300      	movs	r3, #0
 8009590:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009592:	f888 3000 	strb.w	r3, [r8]
 8009596:	f10b 0301 	add.w	r3, fp, #1
 800959a:	6013      	str	r3, [r2, #0]
 800959c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800959e:	2b00      	cmp	r3, #0
 80095a0:	f43f ad61 	beq.w	8009066 <_dtoa_r+0x9e>
 80095a4:	f8c3 8000 	str.w	r8, [r3]
 80095a8:	e55d      	b.n	8009066 <_dtoa_r+0x9e>
 80095aa:	465f      	mov	r7, fp
 80095ac:	4643      	mov	r3, r8
 80095ae:	4698      	mov	r8, r3
 80095b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095b4:	2a39      	cmp	r2, #57	; 0x39
 80095b6:	d106      	bne.n	80095c6 <_dtoa_r+0x5fe>
 80095b8:	9a01      	ldr	r2, [sp, #4]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d1f7      	bne.n	80095ae <_dtoa_r+0x5e6>
 80095be:	9901      	ldr	r1, [sp, #4]
 80095c0:	2230      	movs	r2, #48	; 0x30
 80095c2:	3701      	adds	r7, #1
 80095c4:	700a      	strb	r2, [r1, #0]
 80095c6:	781a      	ldrb	r2, [r3, #0]
 80095c8:	3201      	adds	r2, #1
 80095ca:	701a      	strb	r2, [r3, #0]
 80095cc:	e7ae      	b.n	800952c <_dtoa_r+0x564>
 80095ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 80095d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80095d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095da:	d1b2      	bne.n	8009542 <_dtoa_r+0x57a>
 80095dc:	e7d3      	b.n	8009586 <_dtoa_r+0x5be>
 80095de:	bf00      	nop
 80095e0:	0800b640 	.word	0x0800b640
 80095e4:	0800b618 	.word	0x0800b618
 80095e8:	9907      	ldr	r1, [sp, #28]
 80095ea:	2900      	cmp	r1, #0
 80095ec:	f000 80d0 	beq.w	8009790 <_dtoa_r+0x7c8>
 80095f0:	9906      	ldr	r1, [sp, #24]
 80095f2:	2901      	cmp	r1, #1
 80095f4:	f300 80b4 	bgt.w	8009760 <_dtoa_r+0x798>
 80095f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80095fa:	2900      	cmp	r1, #0
 80095fc:	f000 80ac 	beq.w	8009758 <_dtoa_r+0x790>
 8009600:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009604:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009608:	461c      	mov	r4, r3
 800960a:	930a      	str	r3, [sp, #40]	; 0x28
 800960c:	9b04      	ldr	r3, [sp, #16]
 800960e:	4413      	add	r3, r2
 8009610:	9304      	str	r3, [sp, #16]
 8009612:	9b05      	ldr	r3, [sp, #20]
 8009614:	2101      	movs	r1, #1
 8009616:	4413      	add	r3, r2
 8009618:	4630      	mov	r0, r6
 800961a:	9305      	str	r3, [sp, #20]
 800961c:	f000 fb54 	bl	8009cc8 <__i2b>
 8009620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009622:	4607      	mov	r7, r0
 8009624:	f1b8 0f00 	cmp.w	r8, #0
 8009628:	dd0d      	ble.n	8009646 <_dtoa_r+0x67e>
 800962a:	9a05      	ldr	r2, [sp, #20]
 800962c:	2a00      	cmp	r2, #0
 800962e:	dd0a      	ble.n	8009646 <_dtoa_r+0x67e>
 8009630:	4542      	cmp	r2, r8
 8009632:	9904      	ldr	r1, [sp, #16]
 8009634:	bfa8      	it	ge
 8009636:	4642      	movge	r2, r8
 8009638:	1a89      	subs	r1, r1, r2
 800963a:	9104      	str	r1, [sp, #16]
 800963c:	9905      	ldr	r1, [sp, #20]
 800963e:	eba8 0802 	sub.w	r8, r8, r2
 8009642:	1a8a      	subs	r2, r1, r2
 8009644:	9205      	str	r2, [sp, #20]
 8009646:	b303      	cbz	r3, 800968a <_dtoa_r+0x6c2>
 8009648:	9a07      	ldr	r2, [sp, #28]
 800964a:	2a00      	cmp	r2, #0
 800964c:	f000 80a5 	beq.w	800979a <_dtoa_r+0x7d2>
 8009650:	2c00      	cmp	r4, #0
 8009652:	dd13      	ble.n	800967c <_dtoa_r+0x6b4>
 8009654:	4639      	mov	r1, r7
 8009656:	4622      	mov	r2, r4
 8009658:	4630      	mov	r0, r6
 800965a:	930d      	str	r3, [sp, #52]	; 0x34
 800965c:	f000 fbf4 	bl	8009e48 <__pow5mult>
 8009660:	462a      	mov	r2, r5
 8009662:	4601      	mov	r1, r0
 8009664:	4607      	mov	r7, r0
 8009666:	4630      	mov	r0, r6
 8009668:	f000 fb44 	bl	8009cf4 <__multiply>
 800966c:	4629      	mov	r1, r5
 800966e:	900a      	str	r0, [sp, #40]	; 0x28
 8009670:	4630      	mov	r0, r6
 8009672:	f000 fa71 	bl	8009b58 <_Bfree>
 8009676:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009678:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800967a:	4615      	mov	r5, r2
 800967c:	1b1a      	subs	r2, r3, r4
 800967e:	d004      	beq.n	800968a <_dtoa_r+0x6c2>
 8009680:	4629      	mov	r1, r5
 8009682:	4630      	mov	r0, r6
 8009684:	f000 fbe0 	bl	8009e48 <__pow5mult>
 8009688:	4605      	mov	r5, r0
 800968a:	2101      	movs	r1, #1
 800968c:	4630      	mov	r0, r6
 800968e:	f000 fb1b 	bl	8009cc8 <__i2b>
 8009692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009694:	2b00      	cmp	r3, #0
 8009696:	4604      	mov	r4, r0
 8009698:	f340 8081 	ble.w	800979e <_dtoa_r+0x7d6>
 800969c:	461a      	mov	r2, r3
 800969e:	4601      	mov	r1, r0
 80096a0:	4630      	mov	r0, r6
 80096a2:	f000 fbd1 	bl	8009e48 <__pow5mult>
 80096a6:	9b06      	ldr	r3, [sp, #24]
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	4604      	mov	r4, r0
 80096ac:	dd7a      	ble.n	80097a4 <_dtoa_r+0x7dc>
 80096ae:	2300      	movs	r3, #0
 80096b0:	930a      	str	r3, [sp, #40]	; 0x28
 80096b2:	6922      	ldr	r2, [r4, #16]
 80096b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80096b8:	6910      	ldr	r0, [r2, #16]
 80096ba:	f000 fab5 	bl	8009c28 <__hi0bits>
 80096be:	f1c0 0020 	rsb	r0, r0, #32
 80096c2:	9b05      	ldr	r3, [sp, #20]
 80096c4:	4418      	add	r0, r3
 80096c6:	f010 001f 	ands.w	r0, r0, #31
 80096ca:	f000 808c 	beq.w	80097e6 <_dtoa_r+0x81e>
 80096ce:	f1c0 0220 	rsb	r2, r0, #32
 80096d2:	2a04      	cmp	r2, #4
 80096d4:	f340 8085 	ble.w	80097e2 <_dtoa_r+0x81a>
 80096d8:	f1c0 001c 	rsb	r0, r0, #28
 80096dc:	9b04      	ldr	r3, [sp, #16]
 80096de:	4403      	add	r3, r0
 80096e0:	9304      	str	r3, [sp, #16]
 80096e2:	9b05      	ldr	r3, [sp, #20]
 80096e4:	4403      	add	r3, r0
 80096e6:	4480      	add	r8, r0
 80096e8:	9305      	str	r3, [sp, #20]
 80096ea:	9b04      	ldr	r3, [sp, #16]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	dd05      	ble.n	80096fc <_dtoa_r+0x734>
 80096f0:	4629      	mov	r1, r5
 80096f2:	461a      	mov	r2, r3
 80096f4:	4630      	mov	r0, r6
 80096f6:	f000 fc01 	bl	8009efc <__lshift>
 80096fa:	4605      	mov	r5, r0
 80096fc:	9b05      	ldr	r3, [sp, #20]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	dd05      	ble.n	800970e <_dtoa_r+0x746>
 8009702:	4621      	mov	r1, r4
 8009704:	461a      	mov	r2, r3
 8009706:	4630      	mov	r0, r6
 8009708:	f000 fbf8 	bl	8009efc <__lshift>
 800970c:	4604      	mov	r4, r0
 800970e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009710:	2b00      	cmp	r3, #0
 8009712:	d06a      	beq.n	80097ea <_dtoa_r+0x822>
 8009714:	4621      	mov	r1, r4
 8009716:	4628      	mov	r0, r5
 8009718:	f000 fc60 	bl	8009fdc <__mcmp>
 800971c:	2800      	cmp	r0, #0
 800971e:	da64      	bge.n	80097ea <_dtoa_r+0x822>
 8009720:	2300      	movs	r3, #0
 8009722:	4629      	mov	r1, r5
 8009724:	220a      	movs	r2, #10
 8009726:	4630      	mov	r0, r6
 8009728:	f000 fa38 	bl	8009b9c <__multadd>
 800972c:	9b07      	ldr	r3, [sp, #28]
 800972e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009732:	4605      	mov	r5, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	f000 8191 	beq.w	8009a5c <_dtoa_r+0xa94>
 800973a:	4639      	mov	r1, r7
 800973c:	2300      	movs	r3, #0
 800973e:	220a      	movs	r2, #10
 8009740:	4630      	mov	r0, r6
 8009742:	f000 fa2b 	bl	8009b9c <__multadd>
 8009746:	f1ba 0f00 	cmp.w	sl, #0
 800974a:	4607      	mov	r7, r0
 800974c:	f300 808d 	bgt.w	800986a <_dtoa_r+0x8a2>
 8009750:	9b06      	ldr	r3, [sp, #24]
 8009752:	2b02      	cmp	r3, #2
 8009754:	dc50      	bgt.n	80097f8 <_dtoa_r+0x830>
 8009756:	e088      	b.n	800986a <_dtoa_r+0x8a2>
 8009758:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800975a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800975e:	e751      	b.n	8009604 <_dtoa_r+0x63c>
 8009760:	f109 34ff 	add.w	r4, r9, #4294967295
 8009764:	42a3      	cmp	r3, r4
 8009766:	bfbf      	itttt	lt
 8009768:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800976a:	1ae3      	sublt	r3, r4, r3
 800976c:	18d2      	addlt	r2, r2, r3
 800976e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009770:	bfb6      	itet	lt
 8009772:	4623      	movlt	r3, r4
 8009774:	1b1c      	subge	r4, r3, r4
 8009776:	2400      	movlt	r4, #0
 8009778:	f1b9 0f00 	cmp.w	r9, #0
 800977c:	bfb5      	itete	lt
 800977e:	9a04      	ldrlt	r2, [sp, #16]
 8009780:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009784:	eba2 0809 	sublt.w	r8, r2, r9
 8009788:	464a      	movge	r2, r9
 800978a:	bfb8      	it	lt
 800978c:	2200      	movlt	r2, #0
 800978e:	e73c      	b.n	800960a <_dtoa_r+0x642>
 8009790:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009794:	9f07      	ldr	r7, [sp, #28]
 8009796:	461c      	mov	r4, r3
 8009798:	e744      	b.n	8009624 <_dtoa_r+0x65c>
 800979a:	461a      	mov	r2, r3
 800979c:	e770      	b.n	8009680 <_dtoa_r+0x6b8>
 800979e:	9b06      	ldr	r3, [sp, #24]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	dc18      	bgt.n	80097d6 <_dtoa_r+0x80e>
 80097a4:	9b02      	ldr	r3, [sp, #8]
 80097a6:	b9b3      	cbnz	r3, 80097d6 <_dtoa_r+0x80e>
 80097a8:	9b03      	ldr	r3, [sp, #12]
 80097aa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80097ae:	b9a2      	cbnz	r2, 80097da <_dtoa_r+0x812>
 80097b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80097b4:	0d12      	lsrs	r2, r2, #20
 80097b6:	0512      	lsls	r2, r2, #20
 80097b8:	b18a      	cbz	r2, 80097de <_dtoa_r+0x816>
 80097ba:	9b04      	ldr	r3, [sp, #16]
 80097bc:	3301      	adds	r3, #1
 80097be:	9304      	str	r3, [sp, #16]
 80097c0:	9b05      	ldr	r3, [sp, #20]
 80097c2:	3301      	adds	r3, #1
 80097c4:	9305      	str	r3, [sp, #20]
 80097c6:	2301      	movs	r3, #1
 80097c8:	930a      	str	r3, [sp, #40]	; 0x28
 80097ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f47f af70 	bne.w	80096b2 <_dtoa_r+0x6ea>
 80097d2:	2001      	movs	r0, #1
 80097d4:	e775      	b.n	80096c2 <_dtoa_r+0x6fa>
 80097d6:	2300      	movs	r3, #0
 80097d8:	e7f6      	b.n	80097c8 <_dtoa_r+0x800>
 80097da:	9b02      	ldr	r3, [sp, #8]
 80097dc:	e7f4      	b.n	80097c8 <_dtoa_r+0x800>
 80097de:	920a      	str	r2, [sp, #40]	; 0x28
 80097e0:	e7f3      	b.n	80097ca <_dtoa_r+0x802>
 80097e2:	d082      	beq.n	80096ea <_dtoa_r+0x722>
 80097e4:	4610      	mov	r0, r2
 80097e6:	301c      	adds	r0, #28
 80097e8:	e778      	b.n	80096dc <_dtoa_r+0x714>
 80097ea:	f1b9 0f00 	cmp.w	r9, #0
 80097ee:	dc37      	bgt.n	8009860 <_dtoa_r+0x898>
 80097f0:	9b06      	ldr	r3, [sp, #24]
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	dd34      	ble.n	8009860 <_dtoa_r+0x898>
 80097f6:	46ca      	mov	sl, r9
 80097f8:	f1ba 0f00 	cmp.w	sl, #0
 80097fc:	d10d      	bne.n	800981a <_dtoa_r+0x852>
 80097fe:	4621      	mov	r1, r4
 8009800:	4653      	mov	r3, sl
 8009802:	2205      	movs	r2, #5
 8009804:	4630      	mov	r0, r6
 8009806:	f000 f9c9 	bl	8009b9c <__multadd>
 800980a:	4601      	mov	r1, r0
 800980c:	4604      	mov	r4, r0
 800980e:	4628      	mov	r0, r5
 8009810:	f000 fbe4 	bl	8009fdc <__mcmp>
 8009814:	2800      	cmp	r0, #0
 8009816:	f73f adeb 	bgt.w	80093f0 <_dtoa_r+0x428>
 800981a:	9b08      	ldr	r3, [sp, #32]
 800981c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009820:	ea6f 0b03 	mvn.w	fp, r3
 8009824:	f04f 0900 	mov.w	r9, #0
 8009828:	4621      	mov	r1, r4
 800982a:	4630      	mov	r0, r6
 800982c:	f000 f994 	bl	8009b58 <_Bfree>
 8009830:	2f00      	cmp	r7, #0
 8009832:	f43f aea8 	beq.w	8009586 <_dtoa_r+0x5be>
 8009836:	f1b9 0f00 	cmp.w	r9, #0
 800983a:	d005      	beq.n	8009848 <_dtoa_r+0x880>
 800983c:	45b9      	cmp	r9, r7
 800983e:	d003      	beq.n	8009848 <_dtoa_r+0x880>
 8009840:	4649      	mov	r1, r9
 8009842:	4630      	mov	r0, r6
 8009844:	f000 f988 	bl	8009b58 <_Bfree>
 8009848:	4639      	mov	r1, r7
 800984a:	4630      	mov	r0, r6
 800984c:	f000 f984 	bl	8009b58 <_Bfree>
 8009850:	e699      	b.n	8009586 <_dtoa_r+0x5be>
 8009852:	2400      	movs	r4, #0
 8009854:	4627      	mov	r7, r4
 8009856:	e7e0      	b.n	800981a <_dtoa_r+0x852>
 8009858:	46bb      	mov	fp, r7
 800985a:	4604      	mov	r4, r0
 800985c:	4607      	mov	r7, r0
 800985e:	e5c7      	b.n	80093f0 <_dtoa_r+0x428>
 8009860:	9b07      	ldr	r3, [sp, #28]
 8009862:	46ca      	mov	sl, r9
 8009864:	2b00      	cmp	r3, #0
 8009866:	f000 8100 	beq.w	8009a6a <_dtoa_r+0xaa2>
 800986a:	f1b8 0f00 	cmp.w	r8, #0
 800986e:	dd05      	ble.n	800987c <_dtoa_r+0x8b4>
 8009870:	4639      	mov	r1, r7
 8009872:	4642      	mov	r2, r8
 8009874:	4630      	mov	r0, r6
 8009876:	f000 fb41 	bl	8009efc <__lshift>
 800987a:	4607      	mov	r7, r0
 800987c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800987e:	2b00      	cmp	r3, #0
 8009880:	d05d      	beq.n	800993e <_dtoa_r+0x976>
 8009882:	6879      	ldr	r1, [r7, #4]
 8009884:	4630      	mov	r0, r6
 8009886:	f000 f927 	bl	8009ad8 <_Balloc>
 800988a:	4680      	mov	r8, r0
 800988c:	b928      	cbnz	r0, 800989a <_dtoa_r+0x8d2>
 800988e:	4b82      	ldr	r3, [pc, #520]	; (8009a98 <_dtoa_r+0xad0>)
 8009890:	4602      	mov	r2, r0
 8009892:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009896:	f7ff bbaf 	b.w	8008ff8 <_dtoa_r+0x30>
 800989a:	693a      	ldr	r2, [r7, #16]
 800989c:	3202      	adds	r2, #2
 800989e:	0092      	lsls	r2, r2, #2
 80098a0:	f107 010c 	add.w	r1, r7, #12
 80098a4:	300c      	adds	r0, #12
 80098a6:	f000 f909 	bl	8009abc <memcpy>
 80098aa:	2201      	movs	r2, #1
 80098ac:	4641      	mov	r1, r8
 80098ae:	4630      	mov	r0, r6
 80098b0:	f000 fb24 	bl	8009efc <__lshift>
 80098b4:	9b01      	ldr	r3, [sp, #4]
 80098b6:	3301      	adds	r3, #1
 80098b8:	9304      	str	r3, [sp, #16]
 80098ba:	9b01      	ldr	r3, [sp, #4]
 80098bc:	4453      	add	r3, sl
 80098be:	9308      	str	r3, [sp, #32]
 80098c0:	9b02      	ldr	r3, [sp, #8]
 80098c2:	f003 0301 	and.w	r3, r3, #1
 80098c6:	46b9      	mov	r9, r7
 80098c8:	9307      	str	r3, [sp, #28]
 80098ca:	4607      	mov	r7, r0
 80098cc:	9b04      	ldr	r3, [sp, #16]
 80098ce:	4621      	mov	r1, r4
 80098d0:	3b01      	subs	r3, #1
 80098d2:	4628      	mov	r0, r5
 80098d4:	9302      	str	r3, [sp, #8]
 80098d6:	f7ff fae9 	bl	8008eac <quorem>
 80098da:	4603      	mov	r3, r0
 80098dc:	3330      	adds	r3, #48	; 0x30
 80098de:	9005      	str	r0, [sp, #20]
 80098e0:	4649      	mov	r1, r9
 80098e2:	4628      	mov	r0, r5
 80098e4:	9309      	str	r3, [sp, #36]	; 0x24
 80098e6:	f000 fb79 	bl	8009fdc <__mcmp>
 80098ea:	463a      	mov	r2, r7
 80098ec:	4682      	mov	sl, r0
 80098ee:	4621      	mov	r1, r4
 80098f0:	4630      	mov	r0, r6
 80098f2:	f000 fb8f 	bl	800a014 <__mdiff>
 80098f6:	68c2      	ldr	r2, [r0, #12]
 80098f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098fa:	4680      	mov	r8, r0
 80098fc:	bb0a      	cbnz	r2, 8009942 <_dtoa_r+0x97a>
 80098fe:	4601      	mov	r1, r0
 8009900:	4628      	mov	r0, r5
 8009902:	f000 fb6b 	bl	8009fdc <__mcmp>
 8009906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009908:	4602      	mov	r2, r0
 800990a:	4641      	mov	r1, r8
 800990c:	4630      	mov	r0, r6
 800990e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8009912:	f000 f921 	bl	8009b58 <_Bfree>
 8009916:	9b06      	ldr	r3, [sp, #24]
 8009918:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800991a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800991e:	ea43 0102 	orr.w	r1, r3, r2
 8009922:	9b07      	ldr	r3, [sp, #28]
 8009924:	430b      	orrs	r3, r1
 8009926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009928:	d10d      	bne.n	8009946 <_dtoa_r+0x97e>
 800992a:	2b39      	cmp	r3, #57	; 0x39
 800992c:	d029      	beq.n	8009982 <_dtoa_r+0x9ba>
 800992e:	f1ba 0f00 	cmp.w	sl, #0
 8009932:	dd01      	ble.n	8009938 <_dtoa_r+0x970>
 8009934:	9b05      	ldr	r3, [sp, #20]
 8009936:	3331      	adds	r3, #49	; 0x31
 8009938:	9a02      	ldr	r2, [sp, #8]
 800993a:	7013      	strb	r3, [r2, #0]
 800993c:	e774      	b.n	8009828 <_dtoa_r+0x860>
 800993e:	4638      	mov	r0, r7
 8009940:	e7b8      	b.n	80098b4 <_dtoa_r+0x8ec>
 8009942:	2201      	movs	r2, #1
 8009944:	e7e1      	b.n	800990a <_dtoa_r+0x942>
 8009946:	f1ba 0f00 	cmp.w	sl, #0
 800994a:	db06      	blt.n	800995a <_dtoa_r+0x992>
 800994c:	9906      	ldr	r1, [sp, #24]
 800994e:	ea41 0a0a 	orr.w	sl, r1, sl
 8009952:	9907      	ldr	r1, [sp, #28]
 8009954:	ea5a 0101 	orrs.w	r1, sl, r1
 8009958:	d120      	bne.n	800999c <_dtoa_r+0x9d4>
 800995a:	2a00      	cmp	r2, #0
 800995c:	ddec      	ble.n	8009938 <_dtoa_r+0x970>
 800995e:	4629      	mov	r1, r5
 8009960:	2201      	movs	r2, #1
 8009962:	4630      	mov	r0, r6
 8009964:	9304      	str	r3, [sp, #16]
 8009966:	f000 fac9 	bl	8009efc <__lshift>
 800996a:	4621      	mov	r1, r4
 800996c:	4605      	mov	r5, r0
 800996e:	f000 fb35 	bl	8009fdc <__mcmp>
 8009972:	2800      	cmp	r0, #0
 8009974:	9b04      	ldr	r3, [sp, #16]
 8009976:	dc02      	bgt.n	800997e <_dtoa_r+0x9b6>
 8009978:	d1de      	bne.n	8009938 <_dtoa_r+0x970>
 800997a:	07da      	lsls	r2, r3, #31
 800997c:	d5dc      	bpl.n	8009938 <_dtoa_r+0x970>
 800997e:	2b39      	cmp	r3, #57	; 0x39
 8009980:	d1d8      	bne.n	8009934 <_dtoa_r+0x96c>
 8009982:	9a02      	ldr	r2, [sp, #8]
 8009984:	2339      	movs	r3, #57	; 0x39
 8009986:	7013      	strb	r3, [r2, #0]
 8009988:	4643      	mov	r3, r8
 800998a:	4698      	mov	r8, r3
 800998c:	3b01      	subs	r3, #1
 800998e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009992:	2a39      	cmp	r2, #57	; 0x39
 8009994:	d051      	beq.n	8009a3a <_dtoa_r+0xa72>
 8009996:	3201      	adds	r2, #1
 8009998:	701a      	strb	r2, [r3, #0]
 800999a:	e745      	b.n	8009828 <_dtoa_r+0x860>
 800999c:	2a00      	cmp	r2, #0
 800999e:	dd03      	ble.n	80099a8 <_dtoa_r+0x9e0>
 80099a0:	2b39      	cmp	r3, #57	; 0x39
 80099a2:	d0ee      	beq.n	8009982 <_dtoa_r+0x9ba>
 80099a4:	3301      	adds	r3, #1
 80099a6:	e7c7      	b.n	8009938 <_dtoa_r+0x970>
 80099a8:	9a04      	ldr	r2, [sp, #16]
 80099aa:	9908      	ldr	r1, [sp, #32]
 80099ac:	f802 3c01 	strb.w	r3, [r2, #-1]
 80099b0:	428a      	cmp	r2, r1
 80099b2:	d02b      	beq.n	8009a0c <_dtoa_r+0xa44>
 80099b4:	4629      	mov	r1, r5
 80099b6:	2300      	movs	r3, #0
 80099b8:	220a      	movs	r2, #10
 80099ba:	4630      	mov	r0, r6
 80099bc:	f000 f8ee 	bl	8009b9c <__multadd>
 80099c0:	45b9      	cmp	r9, r7
 80099c2:	4605      	mov	r5, r0
 80099c4:	f04f 0300 	mov.w	r3, #0
 80099c8:	f04f 020a 	mov.w	r2, #10
 80099cc:	4649      	mov	r1, r9
 80099ce:	4630      	mov	r0, r6
 80099d0:	d107      	bne.n	80099e2 <_dtoa_r+0xa1a>
 80099d2:	f000 f8e3 	bl	8009b9c <__multadd>
 80099d6:	4681      	mov	r9, r0
 80099d8:	4607      	mov	r7, r0
 80099da:	9b04      	ldr	r3, [sp, #16]
 80099dc:	3301      	adds	r3, #1
 80099de:	9304      	str	r3, [sp, #16]
 80099e0:	e774      	b.n	80098cc <_dtoa_r+0x904>
 80099e2:	f000 f8db 	bl	8009b9c <__multadd>
 80099e6:	4639      	mov	r1, r7
 80099e8:	4681      	mov	r9, r0
 80099ea:	2300      	movs	r3, #0
 80099ec:	220a      	movs	r2, #10
 80099ee:	4630      	mov	r0, r6
 80099f0:	f000 f8d4 	bl	8009b9c <__multadd>
 80099f4:	4607      	mov	r7, r0
 80099f6:	e7f0      	b.n	80099da <_dtoa_r+0xa12>
 80099f8:	f1ba 0f00 	cmp.w	sl, #0
 80099fc:	9a01      	ldr	r2, [sp, #4]
 80099fe:	bfcc      	ite	gt
 8009a00:	46d0      	movgt	r8, sl
 8009a02:	f04f 0801 	movle.w	r8, #1
 8009a06:	4490      	add	r8, r2
 8009a08:	f04f 0900 	mov.w	r9, #0
 8009a0c:	4629      	mov	r1, r5
 8009a0e:	2201      	movs	r2, #1
 8009a10:	4630      	mov	r0, r6
 8009a12:	9302      	str	r3, [sp, #8]
 8009a14:	f000 fa72 	bl	8009efc <__lshift>
 8009a18:	4621      	mov	r1, r4
 8009a1a:	4605      	mov	r5, r0
 8009a1c:	f000 fade 	bl	8009fdc <__mcmp>
 8009a20:	2800      	cmp	r0, #0
 8009a22:	dcb1      	bgt.n	8009988 <_dtoa_r+0x9c0>
 8009a24:	d102      	bne.n	8009a2c <_dtoa_r+0xa64>
 8009a26:	9b02      	ldr	r3, [sp, #8]
 8009a28:	07db      	lsls	r3, r3, #31
 8009a2a:	d4ad      	bmi.n	8009988 <_dtoa_r+0x9c0>
 8009a2c:	4643      	mov	r3, r8
 8009a2e:	4698      	mov	r8, r3
 8009a30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a34:	2a30      	cmp	r2, #48	; 0x30
 8009a36:	d0fa      	beq.n	8009a2e <_dtoa_r+0xa66>
 8009a38:	e6f6      	b.n	8009828 <_dtoa_r+0x860>
 8009a3a:	9a01      	ldr	r2, [sp, #4]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d1a4      	bne.n	800998a <_dtoa_r+0x9c2>
 8009a40:	f10b 0b01 	add.w	fp, fp, #1
 8009a44:	2331      	movs	r3, #49	; 0x31
 8009a46:	e778      	b.n	800993a <_dtoa_r+0x972>
 8009a48:	4b14      	ldr	r3, [pc, #80]	; (8009a9c <_dtoa_r+0xad4>)
 8009a4a:	f7ff bb27 	b.w	800909c <_dtoa_r+0xd4>
 8009a4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f47f ab03 	bne.w	800905c <_dtoa_r+0x94>
 8009a56:	4b12      	ldr	r3, [pc, #72]	; (8009aa0 <_dtoa_r+0xad8>)
 8009a58:	f7ff bb20 	b.w	800909c <_dtoa_r+0xd4>
 8009a5c:	f1ba 0f00 	cmp.w	sl, #0
 8009a60:	dc03      	bgt.n	8009a6a <_dtoa_r+0xaa2>
 8009a62:	9b06      	ldr	r3, [sp, #24]
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	f73f aec7 	bgt.w	80097f8 <_dtoa_r+0x830>
 8009a6a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009a6e:	4621      	mov	r1, r4
 8009a70:	4628      	mov	r0, r5
 8009a72:	f7ff fa1b 	bl	8008eac <quorem>
 8009a76:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009a7a:	f808 3b01 	strb.w	r3, [r8], #1
 8009a7e:	9a01      	ldr	r2, [sp, #4]
 8009a80:	eba8 0202 	sub.w	r2, r8, r2
 8009a84:	4592      	cmp	sl, r2
 8009a86:	ddb7      	ble.n	80099f8 <_dtoa_r+0xa30>
 8009a88:	4629      	mov	r1, r5
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	220a      	movs	r2, #10
 8009a8e:	4630      	mov	r0, r6
 8009a90:	f000 f884 	bl	8009b9c <__multadd>
 8009a94:	4605      	mov	r5, r0
 8009a96:	e7ea      	b.n	8009a6e <_dtoa_r+0xaa6>
 8009a98:	0800b5a4 	.word	0x0800b5a4
 8009a9c:	0800b400 	.word	0x0800b400
 8009aa0:	0800b525 	.word	0x0800b525

08009aa4 <_localeconv_r>:
 8009aa4:	4800      	ldr	r0, [pc, #0]	; (8009aa8 <_localeconv_r+0x4>)
 8009aa6:	4770      	bx	lr
 8009aa8:	2000061c 	.word	0x2000061c

08009aac <malloc>:
 8009aac:	4b02      	ldr	r3, [pc, #8]	; (8009ab8 <malloc+0xc>)
 8009aae:	4601      	mov	r1, r0
 8009ab0:	6818      	ldr	r0, [r3, #0]
 8009ab2:	f000 bc17 	b.w	800a2e4 <_malloc_r>
 8009ab6:	bf00      	nop
 8009ab8:	200004c8 	.word	0x200004c8

08009abc <memcpy>:
 8009abc:	440a      	add	r2, r1
 8009abe:	4291      	cmp	r1, r2
 8009ac0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ac4:	d100      	bne.n	8009ac8 <memcpy+0xc>
 8009ac6:	4770      	bx	lr
 8009ac8:	b510      	push	{r4, lr}
 8009aca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ace:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ad2:	4291      	cmp	r1, r2
 8009ad4:	d1f9      	bne.n	8009aca <memcpy+0xe>
 8009ad6:	bd10      	pop	{r4, pc}

08009ad8 <_Balloc>:
 8009ad8:	b570      	push	{r4, r5, r6, lr}
 8009ada:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009adc:	4604      	mov	r4, r0
 8009ade:	460d      	mov	r5, r1
 8009ae0:	b976      	cbnz	r6, 8009b00 <_Balloc+0x28>
 8009ae2:	2010      	movs	r0, #16
 8009ae4:	f7ff ffe2 	bl	8009aac <malloc>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	6260      	str	r0, [r4, #36]	; 0x24
 8009aec:	b920      	cbnz	r0, 8009af8 <_Balloc+0x20>
 8009aee:	4b18      	ldr	r3, [pc, #96]	; (8009b50 <_Balloc+0x78>)
 8009af0:	4818      	ldr	r0, [pc, #96]	; (8009b54 <_Balloc+0x7c>)
 8009af2:	2166      	movs	r1, #102	; 0x66
 8009af4:	f000 fdd6 	bl	800a6a4 <__assert_func>
 8009af8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009afc:	6006      	str	r6, [r0, #0]
 8009afe:	60c6      	str	r6, [r0, #12]
 8009b00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b02:	68f3      	ldr	r3, [r6, #12]
 8009b04:	b183      	cbz	r3, 8009b28 <_Balloc+0x50>
 8009b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b0e:	b9b8      	cbnz	r0, 8009b40 <_Balloc+0x68>
 8009b10:	2101      	movs	r1, #1
 8009b12:	fa01 f605 	lsl.w	r6, r1, r5
 8009b16:	1d72      	adds	r2, r6, #5
 8009b18:	0092      	lsls	r2, r2, #2
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	f000 fb60 	bl	800a1e0 <_calloc_r>
 8009b20:	b160      	cbz	r0, 8009b3c <_Balloc+0x64>
 8009b22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b26:	e00e      	b.n	8009b46 <_Balloc+0x6e>
 8009b28:	2221      	movs	r2, #33	; 0x21
 8009b2a:	2104      	movs	r1, #4
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f000 fb57 	bl	800a1e0 <_calloc_r>
 8009b32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b34:	60f0      	str	r0, [r6, #12]
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d1e4      	bne.n	8009b06 <_Balloc+0x2e>
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	bd70      	pop	{r4, r5, r6, pc}
 8009b40:	6802      	ldr	r2, [r0, #0]
 8009b42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b46:	2300      	movs	r3, #0
 8009b48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b4c:	e7f7      	b.n	8009b3e <_Balloc+0x66>
 8009b4e:	bf00      	nop
 8009b50:	0800b532 	.word	0x0800b532
 8009b54:	0800b5b5 	.word	0x0800b5b5

08009b58 <_Bfree>:
 8009b58:	b570      	push	{r4, r5, r6, lr}
 8009b5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b5c:	4605      	mov	r5, r0
 8009b5e:	460c      	mov	r4, r1
 8009b60:	b976      	cbnz	r6, 8009b80 <_Bfree+0x28>
 8009b62:	2010      	movs	r0, #16
 8009b64:	f7ff ffa2 	bl	8009aac <malloc>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	6268      	str	r0, [r5, #36]	; 0x24
 8009b6c:	b920      	cbnz	r0, 8009b78 <_Bfree+0x20>
 8009b6e:	4b09      	ldr	r3, [pc, #36]	; (8009b94 <_Bfree+0x3c>)
 8009b70:	4809      	ldr	r0, [pc, #36]	; (8009b98 <_Bfree+0x40>)
 8009b72:	218a      	movs	r1, #138	; 0x8a
 8009b74:	f000 fd96 	bl	800a6a4 <__assert_func>
 8009b78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b7c:	6006      	str	r6, [r0, #0]
 8009b7e:	60c6      	str	r6, [r0, #12]
 8009b80:	b13c      	cbz	r4, 8009b92 <_Bfree+0x3a>
 8009b82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b84:	6862      	ldr	r2, [r4, #4]
 8009b86:	68db      	ldr	r3, [r3, #12]
 8009b88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b8c:	6021      	str	r1, [r4, #0]
 8009b8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b92:	bd70      	pop	{r4, r5, r6, pc}
 8009b94:	0800b532 	.word	0x0800b532
 8009b98:	0800b5b5 	.word	0x0800b5b5

08009b9c <__multadd>:
 8009b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba0:	690d      	ldr	r5, [r1, #16]
 8009ba2:	4607      	mov	r7, r0
 8009ba4:	460c      	mov	r4, r1
 8009ba6:	461e      	mov	r6, r3
 8009ba8:	f101 0c14 	add.w	ip, r1, #20
 8009bac:	2000      	movs	r0, #0
 8009bae:	f8dc 3000 	ldr.w	r3, [ip]
 8009bb2:	b299      	uxth	r1, r3
 8009bb4:	fb02 6101 	mla	r1, r2, r1, r6
 8009bb8:	0c1e      	lsrs	r6, r3, #16
 8009bba:	0c0b      	lsrs	r3, r1, #16
 8009bbc:	fb02 3306 	mla	r3, r2, r6, r3
 8009bc0:	b289      	uxth	r1, r1
 8009bc2:	3001      	adds	r0, #1
 8009bc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009bc8:	4285      	cmp	r5, r0
 8009bca:	f84c 1b04 	str.w	r1, [ip], #4
 8009bce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009bd2:	dcec      	bgt.n	8009bae <__multadd+0x12>
 8009bd4:	b30e      	cbz	r6, 8009c1a <__multadd+0x7e>
 8009bd6:	68a3      	ldr	r3, [r4, #8]
 8009bd8:	42ab      	cmp	r3, r5
 8009bda:	dc19      	bgt.n	8009c10 <__multadd+0x74>
 8009bdc:	6861      	ldr	r1, [r4, #4]
 8009bde:	4638      	mov	r0, r7
 8009be0:	3101      	adds	r1, #1
 8009be2:	f7ff ff79 	bl	8009ad8 <_Balloc>
 8009be6:	4680      	mov	r8, r0
 8009be8:	b928      	cbnz	r0, 8009bf6 <__multadd+0x5a>
 8009bea:	4602      	mov	r2, r0
 8009bec:	4b0c      	ldr	r3, [pc, #48]	; (8009c20 <__multadd+0x84>)
 8009bee:	480d      	ldr	r0, [pc, #52]	; (8009c24 <__multadd+0x88>)
 8009bf0:	21b5      	movs	r1, #181	; 0xb5
 8009bf2:	f000 fd57 	bl	800a6a4 <__assert_func>
 8009bf6:	6922      	ldr	r2, [r4, #16]
 8009bf8:	3202      	adds	r2, #2
 8009bfa:	f104 010c 	add.w	r1, r4, #12
 8009bfe:	0092      	lsls	r2, r2, #2
 8009c00:	300c      	adds	r0, #12
 8009c02:	f7ff ff5b 	bl	8009abc <memcpy>
 8009c06:	4621      	mov	r1, r4
 8009c08:	4638      	mov	r0, r7
 8009c0a:	f7ff ffa5 	bl	8009b58 <_Bfree>
 8009c0e:	4644      	mov	r4, r8
 8009c10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c14:	3501      	adds	r5, #1
 8009c16:	615e      	str	r6, [r3, #20]
 8009c18:	6125      	str	r5, [r4, #16]
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c20:	0800b5a4 	.word	0x0800b5a4
 8009c24:	0800b5b5 	.word	0x0800b5b5

08009c28 <__hi0bits>:
 8009c28:	0c03      	lsrs	r3, r0, #16
 8009c2a:	041b      	lsls	r3, r3, #16
 8009c2c:	b9d3      	cbnz	r3, 8009c64 <__hi0bits+0x3c>
 8009c2e:	0400      	lsls	r0, r0, #16
 8009c30:	2310      	movs	r3, #16
 8009c32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009c36:	bf04      	itt	eq
 8009c38:	0200      	lsleq	r0, r0, #8
 8009c3a:	3308      	addeq	r3, #8
 8009c3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009c40:	bf04      	itt	eq
 8009c42:	0100      	lsleq	r0, r0, #4
 8009c44:	3304      	addeq	r3, #4
 8009c46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009c4a:	bf04      	itt	eq
 8009c4c:	0080      	lsleq	r0, r0, #2
 8009c4e:	3302      	addeq	r3, #2
 8009c50:	2800      	cmp	r0, #0
 8009c52:	db05      	blt.n	8009c60 <__hi0bits+0x38>
 8009c54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009c58:	f103 0301 	add.w	r3, r3, #1
 8009c5c:	bf08      	it	eq
 8009c5e:	2320      	moveq	r3, #32
 8009c60:	4618      	mov	r0, r3
 8009c62:	4770      	bx	lr
 8009c64:	2300      	movs	r3, #0
 8009c66:	e7e4      	b.n	8009c32 <__hi0bits+0xa>

08009c68 <__lo0bits>:
 8009c68:	6803      	ldr	r3, [r0, #0]
 8009c6a:	f013 0207 	ands.w	r2, r3, #7
 8009c6e:	4601      	mov	r1, r0
 8009c70:	d00b      	beq.n	8009c8a <__lo0bits+0x22>
 8009c72:	07da      	lsls	r2, r3, #31
 8009c74:	d423      	bmi.n	8009cbe <__lo0bits+0x56>
 8009c76:	0798      	lsls	r0, r3, #30
 8009c78:	bf49      	itett	mi
 8009c7a:	085b      	lsrmi	r3, r3, #1
 8009c7c:	089b      	lsrpl	r3, r3, #2
 8009c7e:	2001      	movmi	r0, #1
 8009c80:	600b      	strmi	r3, [r1, #0]
 8009c82:	bf5c      	itt	pl
 8009c84:	600b      	strpl	r3, [r1, #0]
 8009c86:	2002      	movpl	r0, #2
 8009c88:	4770      	bx	lr
 8009c8a:	b298      	uxth	r0, r3
 8009c8c:	b9a8      	cbnz	r0, 8009cba <__lo0bits+0x52>
 8009c8e:	0c1b      	lsrs	r3, r3, #16
 8009c90:	2010      	movs	r0, #16
 8009c92:	b2da      	uxtb	r2, r3
 8009c94:	b90a      	cbnz	r2, 8009c9a <__lo0bits+0x32>
 8009c96:	3008      	adds	r0, #8
 8009c98:	0a1b      	lsrs	r3, r3, #8
 8009c9a:	071a      	lsls	r2, r3, #28
 8009c9c:	bf04      	itt	eq
 8009c9e:	091b      	lsreq	r3, r3, #4
 8009ca0:	3004      	addeq	r0, #4
 8009ca2:	079a      	lsls	r2, r3, #30
 8009ca4:	bf04      	itt	eq
 8009ca6:	089b      	lsreq	r3, r3, #2
 8009ca8:	3002      	addeq	r0, #2
 8009caa:	07da      	lsls	r2, r3, #31
 8009cac:	d403      	bmi.n	8009cb6 <__lo0bits+0x4e>
 8009cae:	085b      	lsrs	r3, r3, #1
 8009cb0:	f100 0001 	add.w	r0, r0, #1
 8009cb4:	d005      	beq.n	8009cc2 <__lo0bits+0x5a>
 8009cb6:	600b      	str	r3, [r1, #0]
 8009cb8:	4770      	bx	lr
 8009cba:	4610      	mov	r0, r2
 8009cbc:	e7e9      	b.n	8009c92 <__lo0bits+0x2a>
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	4770      	bx	lr
 8009cc2:	2020      	movs	r0, #32
 8009cc4:	4770      	bx	lr
	...

08009cc8 <__i2b>:
 8009cc8:	b510      	push	{r4, lr}
 8009cca:	460c      	mov	r4, r1
 8009ccc:	2101      	movs	r1, #1
 8009cce:	f7ff ff03 	bl	8009ad8 <_Balloc>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	b928      	cbnz	r0, 8009ce2 <__i2b+0x1a>
 8009cd6:	4b05      	ldr	r3, [pc, #20]	; (8009cec <__i2b+0x24>)
 8009cd8:	4805      	ldr	r0, [pc, #20]	; (8009cf0 <__i2b+0x28>)
 8009cda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009cde:	f000 fce1 	bl	800a6a4 <__assert_func>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	6144      	str	r4, [r0, #20]
 8009ce6:	6103      	str	r3, [r0, #16]
 8009ce8:	bd10      	pop	{r4, pc}
 8009cea:	bf00      	nop
 8009cec:	0800b5a4 	.word	0x0800b5a4
 8009cf0:	0800b5b5 	.word	0x0800b5b5

08009cf4 <__multiply>:
 8009cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf8:	4691      	mov	r9, r2
 8009cfa:	690a      	ldr	r2, [r1, #16]
 8009cfc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	bfb8      	it	lt
 8009d04:	460b      	movlt	r3, r1
 8009d06:	460c      	mov	r4, r1
 8009d08:	bfbc      	itt	lt
 8009d0a:	464c      	movlt	r4, r9
 8009d0c:	4699      	movlt	r9, r3
 8009d0e:	6927      	ldr	r7, [r4, #16]
 8009d10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d14:	68a3      	ldr	r3, [r4, #8]
 8009d16:	6861      	ldr	r1, [r4, #4]
 8009d18:	eb07 060a 	add.w	r6, r7, sl
 8009d1c:	42b3      	cmp	r3, r6
 8009d1e:	b085      	sub	sp, #20
 8009d20:	bfb8      	it	lt
 8009d22:	3101      	addlt	r1, #1
 8009d24:	f7ff fed8 	bl	8009ad8 <_Balloc>
 8009d28:	b930      	cbnz	r0, 8009d38 <__multiply+0x44>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	4b44      	ldr	r3, [pc, #272]	; (8009e40 <__multiply+0x14c>)
 8009d2e:	4845      	ldr	r0, [pc, #276]	; (8009e44 <__multiply+0x150>)
 8009d30:	f240 115d 	movw	r1, #349	; 0x15d
 8009d34:	f000 fcb6 	bl	800a6a4 <__assert_func>
 8009d38:	f100 0514 	add.w	r5, r0, #20
 8009d3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d40:	462b      	mov	r3, r5
 8009d42:	2200      	movs	r2, #0
 8009d44:	4543      	cmp	r3, r8
 8009d46:	d321      	bcc.n	8009d8c <__multiply+0x98>
 8009d48:	f104 0314 	add.w	r3, r4, #20
 8009d4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009d50:	f109 0314 	add.w	r3, r9, #20
 8009d54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009d58:	9202      	str	r2, [sp, #8]
 8009d5a:	1b3a      	subs	r2, r7, r4
 8009d5c:	3a15      	subs	r2, #21
 8009d5e:	f022 0203 	bic.w	r2, r2, #3
 8009d62:	3204      	adds	r2, #4
 8009d64:	f104 0115 	add.w	r1, r4, #21
 8009d68:	428f      	cmp	r7, r1
 8009d6a:	bf38      	it	cc
 8009d6c:	2204      	movcc	r2, #4
 8009d6e:	9201      	str	r2, [sp, #4]
 8009d70:	9a02      	ldr	r2, [sp, #8]
 8009d72:	9303      	str	r3, [sp, #12]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d80c      	bhi.n	8009d92 <__multiply+0x9e>
 8009d78:	2e00      	cmp	r6, #0
 8009d7a:	dd03      	ble.n	8009d84 <__multiply+0x90>
 8009d7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d05a      	beq.n	8009e3a <__multiply+0x146>
 8009d84:	6106      	str	r6, [r0, #16]
 8009d86:	b005      	add	sp, #20
 8009d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8c:	f843 2b04 	str.w	r2, [r3], #4
 8009d90:	e7d8      	b.n	8009d44 <__multiply+0x50>
 8009d92:	f8b3 a000 	ldrh.w	sl, [r3]
 8009d96:	f1ba 0f00 	cmp.w	sl, #0
 8009d9a:	d024      	beq.n	8009de6 <__multiply+0xf2>
 8009d9c:	f104 0e14 	add.w	lr, r4, #20
 8009da0:	46a9      	mov	r9, r5
 8009da2:	f04f 0c00 	mov.w	ip, #0
 8009da6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009daa:	f8d9 1000 	ldr.w	r1, [r9]
 8009dae:	fa1f fb82 	uxth.w	fp, r2
 8009db2:	b289      	uxth	r1, r1
 8009db4:	fb0a 110b 	mla	r1, sl, fp, r1
 8009db8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009dbc:	f8d9 2000 	ldr.w	r2, [r9]
 8009dc0:	4461      	add	r1, ip
 8009dc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009dc6:	fb0a c20b 	mla	r2, sl, fp, ip
 8009dca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009dce:	b289      	uxth	r1, r1
 8009dd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009dd4:	4577      	cmp	r7, lr
 8009dd6:	f849 1b04 	str.w	r1, [r9], #4
 8009dda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009dde:	d8e2      	bhi.n	8009da6 <__multiply+0xb2>
 8009de0:	9a01      	ldr	r2, [sp, #4]
 8009de2:	f845 c002 	str.w	ip, [r5, r2]
 8009de6:	9a03      	ldr	r2, [sp, #12]
 8009de8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009dec:	3304      	adds	r3, #4
 8009dee:	f1b9 0f00 	cmp.w	r9, #0
 8009df2:	d020      	beq.n	8009e36 <__multiply+0x142>
 8009df4:	6829      	ldr	r1, [r5, #0]
 8009df6:	f104 0c14 	add.w	ip, r4, #20
 8009dfa:	46ae      	mov	lr, r5
 8009dfc:	f04f 0a00 	mov.w	sl, #0
 8009e00:	f8bc b000 	ldrh.w	fp, [ip]
 8009e04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009e08:	fb09 220b 	mla	r2, r9, fp, r2
 8009e0c:	4492      	add	sl, r2
 8009e0e:	b289      	uxth	r1, r1
 8009e10:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009e14:	f84e 1b04 	str.w	r1, [lr], #4
 8009e18:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009e1c:	f8be 1000 	ldrh.w	r1, [lr]
 8009e20:	0c12      	lsrs	r2, r2, #16
 8009e22:	fb09 1102 	mla	r1, r9, r2, r1
 8009e26:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009e2a:	4567      	cmp	r7, ip
 8009e2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e30:	d8e6      	bhi.n	8009e00 <__multiply+0x10c>
 8009e32:	9a01      	ldr	r2, [sp, #4]
 8009e34:	50a9      	str	r1, [r5, r2]
 8009e36:	3504      	adds	r5, #4
 8009e38:	e79a      	b.n	8009d70 <__multiply+0x7c>
 8009e3a:	3e01      	subs	r6, #1
 8009e3c:	e79c      	b.n	8009d78 <__multiply+0x84>
 8009e3e:	bf00      	nop
 8009e40:	0800b5a4 	.word	0x0800b5a4
 8009e44:	0800b5b5 	.word	0x0800b5b5

08009e48 <__pow5mult>:
 8009e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e4c:	4615      	mov	r5, r2
 8009e4e:	f012 0203 	ands.w	r2, r2, #3
 8009e52:	4606      	mov	r6, r0
 8009e54:	460f      	mov	r7, r1
 8009e56:	d007      	beq.n	8009e68 <__pow5mult+0x20>
 8009e58:	4c25      	ldr	r4, [pc, #148]	; (8009ef0 <__pow5mult+0xa8>)
 8009e5a:	3a01      	subs	r2, #1
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e62:	f7ff fe9b 	bl	8009b9c <__multadd>
 8009e66:	4607      	mov	r7, r0
 8009e68:	10ad      	asrs	r5, r5, #2
 8009e6a:	d03d      	beq.n	8009ee8 <__pow5mult+0xa0>
 8009e6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009e6e:	b97c      	cbnz	r4, 8009e90 <__pow5mult+0x48>
 8009e70:	2010      	movs	r0, #16
 8009e72:	f7ff fe1b 	bl	8009aac <malloc>
 8009e76:	4602      	mov	r2, r0
 8009e78:	6270      	str	r0, [r6, #36]	; 0x24
 8009e7a:	b928      	cbnz	r0, 8009e88 <__pow5mult+0x40>
 8009e7c:	4b1d      	ldr	r3, [pc, #116]	; (8009ef4 <__pow5mult+0xac>)
 8009e7e:	481e      	ldr	r0, [pc, #120]	; (8009ef8 <__pow5mult+0xb0>)
 8009e80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009e84:	f000 fc0e 	bl	800a6a4 <__assert_func>
 8009e88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e8c:	6004      	str	r4, [r0, #0]
 8009e8e:	60c4      	str	r4, [r0, #12]
 8009e90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009e94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e98:	b94c      	cbnz	r4, 8009eae <__pow5mult+0x66>
 8009e9a:	f240 2171 	movw	r1, #625	; 0x271
 8009e9e:	4630      	mov	r0, r6
 8009ea0:	f7ff ff12 	bl	8009cc8 <__i2b>
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009eaa:	4604      	mov	r4, r0
 8009eac:	6003      	str	r3, [r0, #0]
 8009eae:	f04f 0900 	mov.w	r9, #0
 8009eb2:	07eb      	lsls	r3, r5, #31
 8009eb4:	d50a      	bpl.n	8009ecc <__pow5mult+0x84>
 8009eb6:	4639      	mov	r1, r7
 8009eb8:	4622      	mov	r2, r4
 8009eba:	4630      	mov	r0, r6
 8009ebc:	f7ff ff1a 	bl	8009cf4 <__multiply>
 8009ec0:	4639      	mov	r1, r7
 8009ec2:	4680      	mov	r8, r0
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	f7ff fe47 	bl	8009b58 <_Bfree>
 8009eca:	4647      	mov	r7, r8
 8009ecc:	106d      	asrs	r5, r5, #1
 8009ece:	d00b      	beq.n	8009ee8 <__pow5mult+0xa0>
 8009ed0:	6820      	ldr	r0, [r4, #0]
 8009ed2:	b938      	cbnz	r0, 8009ee4 <__pow5mult+0x9c>
 8009ed4:	4622      	mov	r2, r4
 8009ed6:	4621      	mov	r1, r4
 8009ed8:	4630      	mov	r0, r6
 8009eda:	f7ff ff0b 	bl	8009cf4 <__multiply>
 8009ede:	6020      	str	r0, [r4, #0]
 8009ee0:	f8c0 9000 	str.w	r9, [r0]
 8009ee4:	4604      	mov	r4, r0
 8009ee6:	e7e4      	b.n	8009eb2 <__pow5mult+0x6a>
 8009ee8:	4638      	mov	r0, r7
 8009eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eee:	bf00      	nop
 8009ef0:	0800b708 	.word	0x0800b708
 8009ef4:	0800b532 	.word	0x0800b532
 8009ef8:	0800b5b5 	.word	0x0800b5b5

08009efc <__lshift>:
 8009efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f00:	460c      	mov	r4, r1
 8009f02:	6849      	ldr	r1, [r1, #4]
 8009f04:	6923      	ldr	r3, [r4, #16]
 8009f06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f0a:	68a3      	ldr	r3, [r4, #8]
 8009f0c:	4607      	mov	r7, r0
 8009f0e:	4691      	mov	r9, r2
 8009f10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f14:	f108 0601 	add.w	r6, r8, #1
 8009f18:	42b3      	cmp	r3, r6
 8009f1a:	db0b      	blt.n	8009f34 <__lshift+0x38>
 8009f1c:	4638      	mov	r0, r7
 8009f1e:	f7ff fddb 	bl	8009ad8 <_Balloc>
 8009f22:	4605      	mov	r5, r0
 8009f24:	b948      	cbnz	r0, 8009f3a <__lshift+0x3e>
 8009f26:	4602      	mov	r2, r0
 8009f28:	4b2a      	ldr	r3, [pc, #168]	; (8009fd4 <__lshift+0xd8>)
 8009f2a:	482b      	ldr	r0, [pc, #172]	; (8009fd8 <__lshift+0xdc>)
 8009f2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009f30:	f000 fbb8 	bl	800a6a4 <__assert_func>
 8009f34:	3101      	adds	r1, #1
 8009f36:	005b      	lsls	r3, r3, #1
 8009f38:	e7ee      	b.n	8009f18 <__lshift+0x1c>
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	f100 0114 	add.w	r1, r0, #20
 8009f40:	f100 0210 	add.w	r2, r0, #16
 8009f44:	4618      	mov	r0, r3
 8009f46:	4553      	cmp	r3, sl
 8009f48:	db37      	blt.n	8009fba <__lshift+0xbe>
 8009f4a:	6920      	ldr	r0, [r4, #16]
 8009f4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f50:	f104 0314 	add.w	r3, r4, #20
 8009f54:	f019 091f 	ands.w	r9, r9, #31
 8009f58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009f60:	d02f      	beq.n	8009fc2 <__lshift+0xc6>
 8009f62:	f1c9 0e20 	rsb	lr, r9, #32
 8009f66:	468a      	mov	sl, r1
 8009f68:	f04f 0c00 	mov.w	ip, #0
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	fa02 f209 	lsl.w	r2, r2, r9
 8009f72:	ea42 020c 	orr.w	r2, r2, ip
 8009f76:	f84a 2b04 	str.w	r2, [sl], #4
 8009f7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f7e:	4298      	cmp	r0, r3
 8009f80:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009f84:	d8f2      	bhi.n	8009f6c <__lshift+0x70>
 8009f86:	1b03      	subs	r3, r0, r4
 8009f88:	3b15      	subs	r3, #21
 8009f8a:	f023 0303 	bic.w	r3, r3, #3
 8009f8e:	3304      	adds	r3, #4
 8009f90:	f104 0215 	add.w	r2, r4, #21
 8009f94:	4290      	cmp	r0, r2
 8009f96:	bf38      	it	cc
 8009f98:	2304      	movcc	r3, #4
 8009f9a:	f841 c003 	str.w	ip, [r1, r3]
 8009f9e:	f1bc 0f00 	cmp.w	ip, #0
 8009fa2:	d001      	beq.n	8009fa8 <__lshift+0xac>
 8009fa4:	f108 0602 	add.w	r6, r8, #2
 8009fa8:	3e01      	subs	r6, #1
 8009faa:	4638      	mov	r0, r7
 8009fac:	612e      	str	r6, [r5, #16]
 8009fae:	4621      	mov	r1, r4
 8009fb0:	f7ff fdd2 	bl	8009b58 <_Bfree>
 8009fb4:	4628      	mov	r0, r5
 8009fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fba:	f842 0f04 	str.w	r0, [r2, #4]!
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	e7c1      	b.n	8009f46 <__lshift+0x4a>
 8009fc2:	3904      	subs	r1, #4
 8009fc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fc8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009fcc:	4298      	cmp	r0, r3
 8009fce:	d8f9      	bhi.n	8009fc4 <__lshift+0xc8>
 8009fd0:	e7ea      	b.n	8009fa8 <__lshift+0xac>
 8009fd2:	bf00      	nop
 8009fd4:	0800b5a4 	.word	0x0800b5a4
 8009fd8:	0800b5b5 	.word	0x0800b5b5

08009fdc <__mcmp>:
 8009fdc:	b530      	push	{r4, r5, lr}
 8009fde:	6902      	ldr	r2, [r0, #16]
 8009fe0:	690c      	ldr	r4, [r1, #16]
 8009fe2:	1b12      	subs	r2, r2, r4
 8009fe4:	d10e      	bne.n	800a004 <__mcmp+0x28>
 8009fe6:	f100 0314 	add.w	r3, r0, #20
 8009fea:	3114      	adds	r1, #20
 8009fec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ff0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ff4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ff8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ffc:	42a5      	cmp	r5, r4
 8009ffe:	d003      	beq.n	800a008 <__mcmp+0x2c>
 800a000:	d305      	bcc.n	800a00e <__mcmp+0x32>
 800a002:	2201      	movs	r2, #1
 800a004:	4610      	mov	r0, r2
 800a006:	bd30      	pop	{r4, r5, pc}
 800a008:	4283      	cmp	r3, r0
 800a00a:	d3f3      	bcc.n	8009ff4 <__mcmp+0x18>
 800a00c:	e7fa      	b.n	800a004 <__mcmp+0x28>
 800a00e:	f04f 32ff 	mov.w	r2, #4294967295
 800a012:	e7f7      	b.n	800a004 <__mcmp+0x28>

0800a014 <__mdiff>:
 800a014:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a018:	460c      	mov	r4, r1
 800a01a:	4606      	mov	r6, r0
 800a01c:	4611      	mov	r1, r2
 800a01e:	4620      	mov	r0, r4
 800a020:	4690      	mov	r8, r2
 800a022:	f7ff ffdb 	bl	8009fdc <__mcmp>
 800a026:	1e05      	subs	r5, r0, #0
 800a028:	d110      	bne.n	800a04c <__mdiff+0x38>
 800a02a:	4629      	mov	r1, r5
 800a02c:	4630      	mov	r0, r6
 800a02e:	f7ff fd53 	bl	8009ad8 <_Balloc>
 800a032:	b930      	cbnz	r0, 800a042 <__mdiff+0x2e>
 800a034:	4b3a      	ldr	r3, [pc, #232]	; (800a120 <__mdiff+0x10c>)
 800a036:	4602      	mov	r2, r0
 800a038:	f240 2132 	movw	r1, #562	; 0x232
 800a03c:	4839      	ldr	r0, [pc, #228]	; (800a124 <__mdiff+0x110>)
 800a03e:	f000 fb31 	bl	800a6a4 <__assert_func>
 800a042:	2301      	movs	r3, #1
 800a044:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a048:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a04c:	bfa4      	itt	ge
 800a04e:	4643      	movge	r3, r8
 800a050:	46a0      	movge	r8, r4
 800a052:	4630      	mov	r0, r6
 800a054:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a058:	bfa6      	itte	ge
 800a05a:	461c      	movge	r4, r3
 800a05c:	2500      	movge	r5, #0
 800a05e:	2501      	movlt	r5, #1
 800a060:	f7ff fd3a 	bl	8009ad8 <_Balloc>
 800a064:	b920      	cbnz	r0, 800a070 <__mdiff+0x5c>
 800a066:	4b2e      	ldr	r3, [pc, #184]	; (800a120 <__mdiff+0x10c>)
 800a068:	4602      	mov	r2, r0
 800a06a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a06e:	e7e5      	b.n	800a03c <__mdiff+0x28>
 800a070:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a074:	6926      	ldr	r6, [r4, #16]
 800a076:	60c5      	str	r5, [r0, #12]
 800a078:	f104 0914 	add.w	r9, r4, #20
 800a07c:	f108 0514 	add.w	r5, r8, #20
 800a080:	f100 0e14 	add.w	lr, r0, #20
 800a084:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a088:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a08c:	f108 0210 	add.w	r2, r8, #16
 800a090:	46f2      	mov	sl, lr
 800a092:	2100      	movs	r1, #0
 800a094:	f859 3b04 	ldr.w	r3, [r9], #4
 800a098:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a09c:	fa1f f883 	uxth.w	r8, r3
 800a0a0:	fa11 f18b 	uxtah	r1, r1, fp
 800a0a4:	0c1b      	lsrs	r3, r3, #16
 800a0a6:	eba1 0808 	sub.w	r8, r1, r8
 800a0aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a0ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a0b2:	fa1f f888 	uxth.w	r8, r8
 800a0b6:	1419      	asrs	r1, r3, #16
 800a0b8:	454e      	cmp	r6, r9
 800a0ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a0be:	f84a 3b04 	str.w	r3, [sl], #4
 800a0c2:	d8e7      	bhi.n	800a094 <__mdiff+0x80>
 800a0c4:	1b33      	subs	r3, r6, r4
 800a0c6:	3b15      	subs	r3, #21
 800a0c8:	f023 0303 	bic.w	r3, r3, #3
 800a0cc:	3304      	adds	r3, #4
 800a0ce:	3415      	adds	r4, #21
 800a0d0:	42a6      	cmp	r6, r4
 800a0d2:	bf38      	it	cc
 800a0d4:	2304      	movcc	r3, #4
 800a0d6:	441d      	add	r5, r3
 800a0d8:	4473      	add	r3, lr
 800a0da:	469e      	mov	lr, r3
 800a0dc:	462e      	mov	r6, r5
 800a0de:	4566      	cmp	r6, ip
 800a0e0:	d30e      	bcc.n	800a100 <__mdiff+0xec>
 800a0e2:	f10c 0203 	add.w	r2, ip, #3
 800a0e6:	1b52      	subs	r2, r2, r5
 800a0e8:	f022 0203 	bic.w	r2, r2, #3
 800a0ec:	3d03      	subs	r5, #3
 800a0ee:	45ac      	cmp	ip, r5
 800a0f0:	bf38      	it	cc
 800a0f2:	2200      	movcc	r2, #0
 800a0f4:	441a      	add	r2, r3
 800a0f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a0fa:	b17b      	cbz	r3, 800a11c <__mdiff+0x108>
 800a0fc:	6107      	str	r7, [r0, #16]
 800a0fe:	e7a3      	b.n	800a048 <__mdiff+0x34>
 800a100:	f856 8b04 	ldr.w	r8, [r6], #4
 800a104:	fa11 f288 	uxtah	r2, r1, r8
 800a108:	1414      	asrs	r4, r2, #16
 800a10a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a10e:	b292      	uxth	r2, r2
 800a110:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a114:	f84e 2b04 	str.w	r2, [lr], #4
 800a118:	1421      	asrs	r1, r4, #16
 800a11a:	e7e0      	b.n	800a0de <__mdiff+0xca>
 800a11c:	3f01      	subs	r7, #1
 800a11e:	e7ea      	b.n	800a0f6 <__mdiff+0xe2>
 800a120:	0800b5a4 	.word	0x0800b5a4
 800a124:	0800b5b5 	.word	0x0800b5b5

0800a128 <__d2b>:
 800a128:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a12c:	4689      	mov	r9, r1
 800a12e:	2101      	movs	r1, #1
 800a130:	ec57 6b10 	vmov	r6, r7, d0
 800a134:	4690      	mov	r8, r2
 800a136:	f7ff fccf 	bl	8009ad8 <_Balloc>
 800a13a:	4604      	mov	r4, r0
 800a13c:	b930      	cbnz	r0, 800a14c <__d2b+0x24>
 800a13e:	4602      	mov	r2, r0
 800a140:	4b25      	ldr	r3, [pc, #148]	; (800a1d8 <__d2b+0xb0>)
 800a142:	4826      	ldr	r0, [pc, #152]	; (800a1dc <__d2b+0xb4>)
 800a144:	f240 310a 	movw	r1, #778	; 0x30a
 800a148:	f000 faac 	bl	800a6a4 <__assert_func>
 800a14c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a150:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a154:	bb35      	cbnz	r5, 800a1a4 <__d2b+0x7c>
 800a156:	2e00      	cmp	r6, #0
 800a158:	9301      	str	r3, [sp, #4]
 800a15a:	d028      	beq.n	800a1ae <__d2b+0x86>
 800a15c:	4668      	mov	r0, sp
 800a15e:	9600      	str	r6, [sp, #0]
 800a160:	f7ff fd82 	bl	8009c68 <__lo0bits>
 800a164:	9900      	ldr	r1, [sp, #0]
 800a166:	b300      	cbz	r0, 800a1aa <__d2b+0x82>
 800a168:	9a01      	ldr	r2, [sp, #4]
 800a16a:	f1c0 0320 	rsb	r3, r0, #32
 800a16e:	fa02 f303 	lsl.w	r3, r2, r3
 800a172:	430b      	orrs	r3, r1
 800a174:	40c2      	lsrs	r2, r0
 800a176:	6163      	str	r3, [r4, #20]
 800a178:	9201      	str	r2, [sp, #4]
 800a17a:	9b01      	ldr	r3, [sp, #4]
 800a17c:	61a3      	str	r3, [r4, #24]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	bf14      	ite	ne
 800a182:	2202      	movne	r2, #2
 800a184:	2201      	moveq	r2, #1
 800a186:	6122      	str	r2, [r4, #16]
 800a188:	b1d5      	cbz	r5, 800a1c0 <__d2b+0x98>
 800a18a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a18e:	4405      	add	r5, r0
 800a190:	f8c9 5000 	str.w	r5, [r9]
 800a194:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a198:	f8c8 0000 	str.w	r0, [r8]
 800a19c:	4620      	mov	r0, r4
 800a19e:	b003      	add	sp, #12
 800a1a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1a8:	e7d5      	b.n	800a156 <__d2b+0x2e>
 800a1aa:	6161      	str	r1, [r4, #20]
 800a1ac:	e7e5      	b.n	800a17a <__d2b+0x52>
 800a1ae:	a801      	add	r0, sp, #4
 800a1b0:	f7ff fd5a 	bl	8009c68 <__lo0bits>
 800a1b4:	9b01      	ldr	r3, [sp, #4]
 800a1b6:	6163      	str	r3, [r4, #20]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	6122      	str	r2, [r4, #16]
 800a1bc:	3020      	adds	r0, #32
 800a1be:	e7e3      	b.n	800a188 <__d2b+0x60>
 800a1c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a1c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a1c8:	f8c9 0000 	str.w	r0, [r9]
 800a1cc:	6918      	ldr	r0, [r3, #16]
 800a1ce:	f7ff fd2b 	bl	8009c28 <__hi0bits>
 800a1d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a1d6:	e7df      	b.n	800a198 <__d2b+0x70>
 800a1d8:	0800b5a4 	.word	0x0800b5a4
 800a1dc:	0800b5b5 	.word	0x0800b5b5

0800a1e0 <_calloc_r>:
 800a1e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1e2:	fba1 2402 	umull	r2, r4, r1, r2
 800a1e6:	b94c      	cbnz	r4, 800a1fc <_calloc_r+0x1c>
 800a1e8:	4611      	mov	r1, r2
 800a1ea:	9201      	str	r2, [sp, #4]
 800a1ec:	f000 f87a 	bl	800a2e4 <_malloc_r>
 800a1f0:	9a01      	ldr	r2, [sp, #4]
 800a1f2:	4605      	mov	r5, r0
 800a1f4:	b930      	cbnz	r0, 800a204 <_calloc_r+0x24>
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	b003      	add	sp, #12
 800a1fa:	bd30      	pop	{r4, r5, pc}
 800a1fc:	220c      	movs	r2, #12
 800a1fe:	6002      	str	r2, [r0, #0]
 800a200:	2500      	movs	r5, #0
 800a202:	e7f8      	b.n	800a1f6 <_calloc_r+0x16>
 800a204:	4621      	mov	r1, r4
 800a206:	f7fe f911 	bl	800842c <memset>
 800a20a:	e7f4      	b.n	800a1f6 <_calloc_r+0x16>

0800a20c <_free_r>:
 800a20c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a20e:	2900      	cmp	r1, #0
 800a210:	d044      	beq.n	800a29c <_free_r+0x90>
 800a212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a216:	9001      	str	r0, [sp, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f1a1 0404 	sub.w	r4, r1, #4
 800a21e:	bfb8      	it	lt
 800a220:	18e4      	addlt	r4, r4, r3
 800a222:	f000 fa9b 	bl	800a75c <__malloc_lock>
 800a226:	4a1e      	ldr	r2, [pc, #120]	; (800a2a0 <_free_r+0x94>)
 800a228:	9801      	ldr	r0, [sp, #4]
 800a22a:	6813      	ldr	r3, [r2, #0]
 800a22c:	b933      	cbnz	r3, 800a23c <_free_r+0x30>
 800a22e:	6063      	str	r3, [r4, #4]
 800a230:	6014      	str	r4, [r2, #0]
 800a232:	b003      	add	sp, #12
 800a234:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a238:	f000 ba96 	b.w	800a768 <__malloc_unlock>
 800a23c:	42a3      	cmp	r3, r4
 800a23e:	d908      	bls.n	800a252 <_free_r+0x46>
 800a240:	6825      	ldr	r5, [r4, #0]
 800a242:	1961      	adds	r1, r4, r5
 800a244:	428b      	cmp	r3, r1
 800a246:	bf01      	itttt	eq
 800a248:	6819      	ldreq	r1, [r3, #0]
 800a24a:	685b      	ldreq	r3, [r3, #4]
 800a24c:	1949      	addeq	r1, r1, r5
 800a24e:	6021      	streq	r1, [r4, #0]
 800a250:	e7ed      	b.n	800a22e <_free_r+0x22>
 800a252:	461a      	mov	r2, r3
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	b10b      	cbz	r3, 800a25c <_free_r+0x50>
 800a258:	42a3      	cmp	r3, r4
 800a25a:	d9fa      	bls.n	800a252 <_free_r+0x46>
 800a25c:	6811      	ldr	r1, [r2, #0]
 800a25e:	1855      	adds	r5, r2, r1
 800a260:	42a5      	cmp	r5, r4
 800a262:	d10b      	bne.n	800a27c <_free_r+0x70>
 800a264:	6824      	ldr	r4, [r4, #0]
 800a266:	4421      	add	r1, r4
 800a268:	1854      	adds	r4, r2, r1
 800a26a:	42a3      	cmp	r3, r4
 800a26c:	6011      	str	r1, [r2, #0]
 800a26e:	d1e0      	bne.n	800a232 <_free_r+0x26>
 800a270:	681c      	ldr	r4, [r3, #0]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	6053      	str	r3, [r2, #4]
 800a276:	4421      	add	r1, r4
 800a278:	6011      	str	r1, [r2, #0]
 800a27a:	e7da      	b.n	800a232 <_free_r+0x26>
 800a27c:	d902      	bls.n	800a284 <_free_r+0x78>
 800a27e:	230c      	movs	r3, #12
 800a280:	6003      	str	r3, [r0, #0]
 800a282:	e7d6      	b.n	800a232 <_free_r+0x26>
 800a284:	6825      	ldr	r5, [r4, #0]
 800a286:	1961      	adds	r1, r4, r5
 800a288:	428b      	cmp	r3, r1
 800a28a:	bf04      	itt	eq
 800a28c:	6819      	ldreq	r1, [r3, #0]
 800a28e:	685b      	ldreq	r3, [r3, #4]
 800a290:	6063      	str	r3, [r4, #4]
 800a292:	bf04      	itt	eq
 800a294:	1949      	addeq	r1, r1, r5
 800a296:	6021      	streq	r1, [r4, #0]
 800a298:	6054      	str	r4, [r2, #4]
 800a29a:	e7ca      	b.n	800a232 <_free_r+0x26>
 800a29c:	b003      	add	sp, #12
 800a29e:	bd30      	pop	{r4, r5, pc}
 800a2a0:	20000ea4 	.word	0x20000ea4

0800a2a4 <sbrk_aligned>:
 800a2a4:	b570      	push	{r4, r5, r6, lr}
 800a2a6:	4e0e      	ldr	r6, [pc, #56]	; (800a2e0 <sbrk_aligned+0x3c>)
 800a2a8:	460c      	mov	r4, r1
 800a2aa:	6831      	ldr	r1, [r6, #0]
 800a2ac:	4605      	mov	r5, r0
 800a2ae:	b911      	cbnz	r1, 800a2b6 <sbrk_aligned+0x12>
 800a2b0:	f000 f9e8 	bl	800a684 <_sbrk_r>
 800a2b4:	6030      	str	r0, [r6, #0]
 800a2b6:	4621      	mov	r1, r4
 800a2b8:	4628      	mov	r0, r5
 800a2ba:	f000 f9e3 	bl	800a684 <_sbrk_r>
 800a2be:	1c43      	adds	r3, r0, #1
 800a2c0:	d00a      	beq.n	800a2d8 <sbrk_aligned+0x34>
 800a2c2:	1cc4      	adds	r4, r0, #3
 800a2c4:	f024 0403 	bic.w	r4, r4, #3
 800a2c8:	42a0      	cmp	r0, r4
 800a2ca:	d007      	beq.n	800a2dc <sbrk_aligned+0x38>
 800a2cc:	1a21      	subs	r1, r4, r0
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	f000 f9d8 	bl	800a684 <_sbrk_r>
 800a2d4:	3001      	adds	r0, #1
 800a2d6:	d101      	bne.n	800a2dc <sbrk_aligned+0x38>
 800a2d8:	f04f 34ff 	mov.w	r4, #4294967295
 800a2dc:	4620      	mov	r0, r4
 800a2de:	bd70      	pop	{r4, r5, r6, pc}
 800a2e0:	20000ea8 	.word	0x20000ea8

0800a2e4 <_malloc_r>:
 800a2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e8:	1ccd      	adds	r5, r1, #3
 800a2ea:	f025 0503 	bic.w	r5, r5, #3
 800a2ee:	3508      	adds	r5, #8
 800a2f0:	2d0c      	cmp	r5, #12
 800a2f2:	bf38      	it	cc
 800a2f4:	250c      	movcc	r5, #12
 800a2f6:	2d00      	cmp	r5, #0
 800a2f8:	4607      	mov	r7, r0
 800a2fa:	db01      	blt.n	800a300 <_malloc_r+0x1c>
 800a2fc:	42a9      	cmp	r1, r5
 800a2fe:	d905      	bls.n	800a30c <_malloc_r+0x28>
 800a300:	230c      	movs	r3, #12
 800a302:	603b      	str	r3, [r7, #0]
 800a304:	2600      	movs	r6, #0
 800a306:	4630      	mov	r0, r6
 800a308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a30c:	4e2e      	ldr	r6, [pc, #184]	; (800a3c8 <_malloc_r+0xe4>)
 800a30e:	f000 fa25 	bl	800a75c <__malloc_lock>
 800a312:	6833      	ldr	r3, [r6, #0]
 800a314:	461c      	mov	r4, r3
 800a316:	bb34      	cbnz	r4, 800a366 <_malloc_r+0x82>
 800a318:	4629      	mov	r1, r5
 800a31a:	4638      	mov	r0, r7
 800a31c:	f7ff ffc2 	bl	800a2a4 <sbrk_aligned>
 800a320:	1c43      	adds	r3, r0, #1
 800a322:	4604      	mov	r4, r0
 800a324:	d14d      	bne.n	800a3c2 <_malloc_r+0xde>
 800a326:	6834      	ldr	r4, [r6, #0]
 800a328:	4626      	mov	r6, r4
 800a32a:	2e00      	cmp	r6, #0
 800a32c:	d140      	bne.n	800a3b0 <_malloc_r+0xcc>
 800a32e:	6823      	ldr	r3, [r4, #0]
 800a330:	4631      	mov	r1, r6
 800a332:	4638      	mov	r0, r7
 800a334:	eb04 0803 	add.w	r8, r4, r3
 800a338:	f000 f9a4 	bl	800a684 <_sbrk_r>
 800a33c:	4580      	cmp	r8, r0
 800a33e:	d13a      	bne.n	800a3b6 <_malloc_r+0xd2>
 800a340:	6821      	ldr	r1, [r4, #0]
 800a342:	3503      	adds	r5, #3
 800a344:	1a6d      	subs	r5, r5, r1
 800a346:	f025 0503 	bic.w	r5, r5, #3
 800a34a:	3508      	adds	r5, #8
 800a34c:	2d0c      	cmp	r5, #12
 800a34e:	bf38      	it	cc
 800a350:	250c      	movcc	r5, #12
 800a352:	4629      	mov	r1, r5
 800a354:	4638      	mov	r0, r7
 800a356:	f7ff ffa5 	bl	800a2a4 <sbrk_aligned>
 800a35a:	3001      	adds	r0, #1
 800a35c:	d02b      	beq.n	800a3b6 <_malloc_r+0xd2>
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	442b      	add	r3, r5
 800a362:	6023      	str	r3, [r4, #0]
 800a364:	e00e      	b.n	800a384 <_malloc_r+0xa0>
 800a366:	6822      	ldr	r2, [r4, #0]
 800a368:	1b52      	subs	r2, r2, r5
 800a36a:	d41e      	bmi.n	800a3aa <_malloc_r+0xc6>
 800a36c:	2a0b      	cmp	r2, #11
 800a36e:	d916      	bls.n	800a39e <_malloc_r+0xba>
 800a370:	1961      	adds	r1, r4, r5
 800a372:	42a3      	cmp	r3, r4
 800a374:	6025      	str	r5, [r4, #0]
 800a376:	bf18      	it	ne
 800a378:	6059      	strne	r1, [r3, #4]
 800a37a:	6863      	ldr	r3, [r4, #4]
 800a37c:	bf08      	it	eq
 800a37e:	6031      	streq	r1, [r6, #0]
 800a380:	5162      	str	r2, [r4, r5]
 800a382:	604b      	str	r3, [r1, #4]
 800a384:	4638      	mov	r0, r7
 800a386:	f104 060b 	add.w	r6, r4, #11
 800a38a:	f000 f9ed 	bl	800a768 <__malloc_unlock>
 800a38e:	f026 0607 	bic.w	r6, r6, #7
 800a392:	1d23      	adds	r3, r4, #4
 800a394:	1af2      	subs	r2, r6, r3
 800a396:	d0b6      	beq.n	800a306 <_malloc_r+0x22>
 800a398:	1b9b      	subs	r3, r3, r6
 800a39a:	50a3      	str	r3, [r4, r2]
 800a39c:	e7b3      	b.n	800a306 <_malloc_r+0x22>
 800a39e:	6862      	ldr	r2, [r4, #4]
 800a3a0:	42a3      	cmp	r3, r4
 800a3a2:	bf0c      	ite	eq
 800a3a4:	6032      	streq	r2, [r6, #0]
 800a3a6:	605a      	strne	r2, [r3, #4]
 800a3a8:	e7ec      	b.n	800a384 <_malloc_r+0xa0>
 800a3aa:	4623      	mov	r3, r4
 800a3ac:	6864      	ldr	r4, [r4, #4]
 800a3ae:	e7b2      	b.n	800a316 <_malloc_r+0x32>
 800a3b0:	4634      	mov	r4, r6
 800a3b2:	6876      	ldr	r6, [r6, #4]
 800a3b4:	e7b9      	b.n	800a32a <_malloc_r+0x46>
 800a3b6:	230c      	movs	r3, #12
 800a3b8:	603b      	str	r3, [r7, #0]
 800a3ba:	4638      	mov	r0, r7
 800a3bc:	f000 f9d4 	bl	800a768 <__malloc_unlock>
 800a3c0:	e7a1      	b.n	800a306 <_malloc_r+0x22>
 800a3c2:	6025      	str	r5, [r4, #0]
 800a3c4:	e7de      	b.n	800a384 <_malloc_r+0xa0>
 800a3c6:	bf00      	nop
 800a3c8:	20000ea4 	.word	0x20000ea4

0800a3cc <__ssputs_r>:
 800a3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3d0:	688e      	ldr	r6, [r1, #8]
 800a3d2:	429e      	cmp	r6, r3
 800a3d4:	4682      	mov	sl, r0
 800a3d6:	460c      	mov	r4, r1
 800a3d8:	4690      	mov	r8, r2
 800a3da:	461f      	mov	r7, r3
 800a3dc:	d838      	bhi.n	800a450 <__ssputs_r+0x84>
 800a3de:	898a      	ldrh	r2, [r1, #12]
 800a3e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3e4:	d032      	beq.n	800a44c <__ssputs_r+0x80>
 800a3e6:	6825      	ldr	r5, [r4, #0]
 800a3e8:	6909      	ldr	r1, [r1, #16]
 800a3ea:	eba5 0901 	sub.w	r9, r5, r1
 800a3ee:	6965      	ldr	r5, [r4, #20]
 800a3f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	444b      	add	r3, r9
 800a3fc:	106d      	asrs	r5, r5, #1
 800a3fe:	429d      	cmp	r5, r3
 800a400:	bf38      	it	cc
 800a402:	461d      	movcc	r5, r3
 800a404:	0553      	lsls	r3, r2, #21
 800a406:	d531      	bpl.n	800a46c <__ssputs_r+0xa0>
 800a408:	4629      	mov	r1, r5
 800a40a:	f7ff ff6b 	bl	800a2e4 <_malloc_r>
 800a40e:	4606      	mov	r6, r0
 800a410:	b950      	cbnz	r0, 800a428 <__ssputs_r+0x5c>
 800a412:	230c      	movs	r3, #12
 800a414:	f8ca 3000 	str.w	r3, [sl]
 800a418:	89a3      	ldrh	r3, [r4, #12]
 800a41a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a41e:	81a3      	strh	r3, [r4, #12]
 800a420:	f04f 30ff 	mov.w	r0, #4294967295
 800a424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a428:	6921      	ldr	r1, [r4, #16]
 800a42a:	464a      	mov	r2, r9
 800a42c:	f7ff fb46 	bl	8009abc <memcpy>
 800a430:	89a3      	ldrh	r3, [r4, #12]
 800a432:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a43a:	81a3      	strh	r3, [r4, #12]
 800a43c:	6126      	str	r6, [r4, #16]
 800a43e:	6165      	str	r5, [r4, #20]
 800a440:	444e      	add	r6, r9
 800a442:	eba5 0509 	sub.w	r5, r5, r9
 800a446:	6026      	str	r6, [r4, #0]
 800a448:	60a5      	str	r5, [r4, #8]
 800a44a:	463e      	mov	r6, r7
 800a44c:	42be      	cmp	r6, r7
 800a44e:	d900      	bls.n	800a452 <__ssputs_r+0x86>
 800a450:	463e      	mov	r6, r7
 800a452:	6820      	ldr	r0, [r4, #0]
 800a454:	4632      	mov	r2, r6
 800a456:	4641      	mov	r1, r8
 800a458:	f000 f966 	bl	800a728 <memmove>
 800a45c:	68a3      	ldr	r3, [r4, #8]
 800a45e:	1b9b      	subs	r3, r3, r6
 800a460:	60a3      	str	r3, [r4, #8]
 800a462:	6823      	ldr	r3, [r4, #0]
 800a464:	4433      	add	r3, r6
 800a466:	6023      	str	r3, [r4, #0]
 800a468:	2000      	movs	r0, #0
 800a46a:	e7db      	b.n	800a424 <__ssputs_r+0x58>
 800a46c:	462a      	mov	r2, r5
 800a46e:	f000 f981 	bl	800a774 <_realloc_r>
 800a472:	4606      	mov	r6, r0
 800a474:	2800      	cmp	r0, #0
 800a476:	d1e1      	bne.n	800a43c <__ssputs_r+0x70>
 800a478:	6921      	ldr	r1, [r4, #16]
 800a47a:	4650      	mov	r0, sl
 800a47c:	f7ff fec6 	bl	800a20c <_free_r>
 800a480:	e7c7      	b.n	800a412 <__ssputs_r+0x46>
	...

0800a484 <_svfiprintf_r>:
 800a484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a488:	4698      	mov	r8, r3
 800a48a:	898b      	ldrh	r3, [r1, #12]
 800a48c:	061b      	lsls	r3, r3, #24
 800a48e:	b09d      	sub	sp, #116	; 0x74
 800a490:	4607      	mov	r7, r0
 800a492:	460d      	mov	r5, r1
 800a494:	4614      	mov	r4, r2
 800a496:	d50e      	bpl.n	800a4b6 <_svfiprintf_r+0x32>
 800a498:	690b      	ldr	r3, [r1, #16]
 800a49a:	b963      	cbnz	r3, 800a4b6 <_svfiprintf_r+0x32>
 800a49c:	2140      	movs	r1, #64	; 0x40
 800a49e:	f7ff ff21 	bl	800a2e4 <_malloc_r>
 800a4a2:	6028      	str	r0, [r5, #0]
 800a4a4:	6128      	str	r0, [r5, #16]
 800a4a6:	b920      	cbnz	r0, 800a4b2 <_svfiprintf_r+0x2e>
 800a4a8:	230c      	movs	r3, #12
 800a4aa:	603b      	str	r3, [r7, #0]
 800a4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b0:	e0d1      	b.n	800a656 <_svfiprintf_r+0x1d2>
 800a4b2:	2340      	movs	r3, #64	; 0x40
 800a4b4:	616b      	str	r3, [r5, #20]
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ba:	2320      	movs	r3, #32
 800a4bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4c4:	2330      	movs	r3, #48	; 0x30
 800a4c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a670 <_svfiprintf_r+0x1ec>
 800a4ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4ce:	f04f 0901 	mov.w	r9, #1
 800a4d2:	4623      	mov	r3, r4
 800a4d4:	469a      	mov	sl, r3
 800a4d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4da:	b10a      	cbz	r2, 800a4e0 <_svfiprintf_r+0x5c>
 800a4dc:	2a25      	cmp	r2, #37	; 0x25
 800a4de:	d1f9      	bne.n	800a4d4 <_svfiprintf_r+0x50>
 800a4e0:	ebba 0b04 	subs.w	fp, sl, r4
 800a4e4:	d00b      	beq.n	800a4fe <_svfiprintf_r+0x7a>
 800a4e6:	465b      	mov	r3, fp
 800a4e8:	4622      	mov	r2, r4
 800a4ea:	4629      	mov	r1, r5
 800a4ec:	4638      	mov	r0, r7
 800a4ee:	f7ff ff6d 	bl	800a3cc <__ssputs_r>
 800a4f2:	3001      	adds	r0, #1
 800a4f4:	f000 80aa 	beq.w	800a64c <_svfiprintf_r+0x1c8>
 800a4f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4fa:	445a      	add	r2, fp
 800a4fc:	9209      	str	r2, [sp, #36]	; 0x24
 800a4fe:	f89a 3000 	ldrb.w	r3, [sl]
 800a502:	2b00      	cmp	r3, #0
 800a504:	f000 80a2 	beq.w	800a64c <_svfiprintf_r+0x1c8>
 800a508:	2300      	movs	r3, #0
 800a50a:	f04f 32ff 	mov.w	r2, #4294967295
 800a50e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a512:	f10a 0a01 	add.w	sl, sl, #1
 800a516:	9304      	str	r3, [sp, #16]
 800a518:	9307      	str	r3, [sp, #28]
 800a51a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a51e:	931a      	str	r3, [sp, #104]	; 0x68
 800a520:	4654      	mov	r4, sl
 800a522:	2205      	movs	r2, #5
 800a524:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a528:	4851      	ldr	r0, [pc, #324]	; (800a670 <_svfiprintf_r+0x1ec>)
 800a52a:	f7f5 fe91 	bl	8000250 <memchr>
 800a52e:	9a04      	ldr	r2, [sp, #16]
 800a530:	b9d8      	cbnz	r0, 800a56a <_svfiprintf_r+0xe6>
 800a532:	06d0      	lsls	r0, r2, #27
 800a534:	bf44      	itt	mi
 800a536:	2320      	movmi	r3, #32
 800a538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a53c:	0711      	lsls	r1, r2, #28
 800a53e:	bf44      	itt	mi
 800a540:	232b      	movmi	r3, #43	; 0x2b
 800a542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a546:	f89a 3000 	ldrb.w	r3, [sl]
 800a54a:	2b2a      	cmp	r3, #42	; 0x2a
 800a54c:	d015      	beq.n	800a57a <_svfiprintf_r+0xf6>
 800a54e:	9a07      	ldr	r2, [sp, #28]
 800a550:	4654      	mov	r4, sl
 800a552:	2000      	movs	r0, #0
 800a554:	f04f 0c0a 	mov.w	ip, #10
 800a558:	4621      	mov	r1, r4
 800a55a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a55e:	3b30      	subs	r3, #48	; 0x30
 800a560:	2b09      	cmp	r3, #9
 800a562:	d94e      	bls.n	800a602 <_svfiprintf_r+0x17e>
 800a564:	b1b0      	cbz	r0, 800a594 <_svfiprintf_r+0x110>
 800a566:	9207      	str	r2, [sp, #28]
 800a568:	e014      	b.n	800a594 <_svfiprintf_r+0x110>
 800a56a:	eba0 0308 	sub.w	r3, r0, r8
 800a56e:	fa09 f303 	lsl.w	r3, r9, r3
 800a572:	4313      	orrs	r3, r2
 800a574:	9304      	str	r3, [sp, #16]
 800a576:	46a2      	mov	sl, r4
 800a578:	e7d2      	b.n	800a520 <_svfiprintf_r+0x9c>
 800a57a:	9b03      	ldr	r3, [sp, #12]
 800a57c:	1d19      	adds	r1, r3, #4
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	9103      	str	r1, [sp, #12]
 800a582:	2b00      	cmp	r3, #0
 800a584:	bfbb      	ittet	lt
 800a586:	425b      	neglt	r3, r3
 800a588:	f042 0202 	orrlt.w	r2, r2, #2
 800a58c:	9307      	strge	r3, [sp, #28]
 800a58e:	9307      	strlt	r3, [sp, #28]
 800a590:	bfb8      	it	lt
 800a592:	9204      	strlt	r2, [sp, #16]
 800a594:	7823      	ldrb	r3, [r4, #0]
 800a596:	2b2e      	cmp	r3, #46	; 0x2e
 800a598:	d10c      	bne.n	800a5b4 <_svfiprintf_r+0x130>
 800a59a:	7863      	ldrb	r3, [r4, #1]
 800a59c:	2b2a      	cmp	r3, #42	; 0x2a
 800a59e:	d135      	bne.n	800a60c <_svfiprintf_r+0x188>
 800a5a0:	9b03      	ldr	r3, [sp, #12]
 800a5a2:	1d1a      	adds	r2, r3, #4
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	9203      	str	r2, [sp, #12]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	bfb8      	it	lt
 800a5ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5b0:	3402      	adds	r4, #2
 800a5b2:	9305      	str	r3, [sp, #20]
 800a5b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a680 <_svfiprintf_r+0x1fc>
 800a5b8:	7821      	ldrb	r1, [r4, #0]
 800a5ba:	2203      	movs	r2, #3
 800a5bc:	4650      	mov	r0, sl
 800a5be:	f7f5 fe47 	bl	8000250 <memchr>
 800a5c2:	b140      	cbz	r0, 800a5d6 <_svfiprintf_r+0x152>
 800a5c4:	2340      	movs	r3, #64	; 0x40
 800a5c6:	eba0 000a 	sub.w	r0, r0, sl
 800a5ca:	fa03 f000 	lsl.w	r0, r3, r0
 800a5ce:	9b04      	ldr	r3, [sp, #16]
 800a5d0:	4303      	orrs	r3, r0
 800a5d2:	3401      	adds	r4, #1
 800a5d4:	9304      	str	r3, [sp, #16]
 800a5d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5da:	4826      	ldr	r0, [pc, #152]	; (800a674 <_svfiprintf_r+0x1f0>)
 800a5dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5e0:	2206      	movs	r2, #6
 800a5e2:	f7f5 fe35 	bl	8000250 <memchr>
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	d038      	beq.n	800a65c <_svfiprintf_r+0x1d8>
 800a5ea:	4b23      	ldr	r3, [pc, #140]	; (800a678 <_svfiprintf_r+0x1f4>)
 800a5ec:	bb1b      	cbnz	r3, 800a636 <_svfiprintf_r+0x1b2>
 800a5ee:	9b03      	ldr	r3, [sp, #12]
 800a5f0:	3307      	adds	r3, #7
 800a5f2:	f023 0307 	bic.w	r3, r3, #7
 800a5f6:	3308      	adds	r3, #8
 800a5f8:	9303      	str	r3, [sp, #12]
 800a5fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5fc:	4433      	add	r3, r6
 800a5fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a600:	e767      	b.n	800a4d2 <_svfiprintf_r+0x4e>
 800a602:	fb0c 3202 	mla	r2, ip, r2, r3
 800a606:	460c      	mov	r4, r1
 800a608:	2001      	movs	r0, #1
 800a60a:	e7a5      	b.n	800a558 <_svfiprintf_r+0xd4>
 800a60c:	2300      	movs	r3, #0
 800a60e:	3401      	adds	r4, #1
 800a610:	9305      	str	r3, [sp, #20]
 800a612:	4619      	mov	r1, r3
 800a614:	f04f 0c0a 	mov.w	ip, #10
 800a618:	4620      	mov	r0, r4
 800a61a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a61e:	3a30      	subs	r2, #48	; 0x30
 800a620:	2a09      	cmp	r2, #9
 800a622:	d903      	bls.n	800a62c <_svfiprintf_r+0x1a8>
 800a624:	2b00      	cmp	r3, #0
 800a626:	d0c5      	beq.n	800a5b4 <_svfiprintf_r+0x130>
 800a628:	9105      	str	r1, [sp, #20]
 800a62a:	e7c3      	b.n	800a5b4 <_svfiprintf_r+0x130>
 800a62c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a630:	4604      	mov	r4, r0
 800a632:	2301      	movs	r3, #1
 800a634:	e7f0      	b.n	800a618 <_svfiprintf_r+0x194>
 800a636:	ab03      	add	r3, sp, #12
 800a638:	9300      	str	r3, [sp, #0]
 800a63a:	462a      	mov	r2, r5
 800a63c:	4b0f      	ldr	r3, [pc, #60]	; (800a67c <_svfiprintf_r+0x1f8>)
 800a63e:	a904      	add	r1, sp, #16
 800a640:	4638      	mov	r0, r7
 800a642:	f7fd ff8d 	bl	8008560 <_printf_float>
 800a646:	1c42      	adds	r2, r0, #1
 800a648:	4606      	mov	r6, r0
 800a64a:	d1d6      	bne.n	800a5fa <_svfiprintf_r+0x176>
 800a64c:	89ab      	ldrh	r3, [r5, #12]
 800a64e:	065b      	lsls	r3, r3, #25
 800a650:	f53f af2c 	bmi.w	800a4ac <_svfiprintf_r+0x28>
 800a654:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a656:	b01d      	add	sp, #116	; 0x74
 800a658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a65c:	ab03      	add	r3, sp, #12
 800a65e:	9300      	str	r3, [sp, #0]
 800a660:	462a      	mov	r2, r5
 800a662:	4b06      	ldr	r3, [pc, #24]	; (800a67c <_svfiprintf_r+0x1f8>)
 800a664:	a904      	add	r1, sp, #16
 800a666:	4638      	mov	r0, r7
 800a668:	f7fe fa06 	bl	8008a78 <_printf_i>
 800a66c:	e7eb      	b.n	800a646 <_svfiprintf_r+0x1c2>
 800a66e:	bf00      	nop
 800a670:	0800b714 	.word	0x0800b714
 800a674:	0800b71e 	.word	0x0800b71e
 800a678:	08008561 	.word	0x08008561
 800a67c:	0800a3cd 	.word	0x0800a3cd
 800a680:	0800b71a 	.word	0x0800b71a

0800a684 <_sbrk_r>:
 800a684:	b538      	push	{r3, r4, r5, lr}
 800a686:	4d06      	ldr	r5, [pc, #24]	; (800a6a0 <_sbrk_r+0x1c>)
 800a688:	2300      	movs	r3, #0
 800a68a:	4604      	mov	r4, r0
 800a68c:	4608      	mov	r0, r1
 800a68e:	602b      	str	r3, [r5, #0]
 800a690:	f7f6 fd90 	bl	80011b4 <_sbrk>
 800a694:	1c43      	adds	r3, r0, #1
 800a696:	d102      	bne.n	800a69e <_sbrk_r+0x1a>
 800a698:	682b      	ldr	r3, [r5, #0]
 800a69a:	b103      	cbz	r3, 800a69e <_sbrk_r+0x1a>
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	bd38      	pop	{r3, r4, r5, pc}
 800a6a0:	20000eac 	.word	0x20000eac

0800a6a4 <__assert_func>:
 800a6a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6a6:	4614      	mov	r4, r2
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	4b09      	ldr	r3, [pc, #36]	; (800a6d0 <__assert_func+0x2c>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4605      	mov	r5, r0
 800a6b0:	68d8      	ldr	r0, [r3, #12]
 800a6b2:	b14c      	cbz	r4, 800a6c8 <__assert_func+0x24>
 800a6b4:	4b07      	ldr	r3, [pc, #28]	; (800a6d4 <__assert_func+0x30>)
 800a6b6:	9100      	str	r1, [sp, #0]
 800a6b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6bc:	4906      	ldr	r1, [pc, #24]	; (800a6d8 <__assert_func+0x34>)
 800a6be:	462b      	mov	r3, r5
 800a6c0:	f000 f80e 	bl	800a6e0 <fiprintf>
 800a6c4:	f000 faac 	bl	800ac20 <abort>
 800a6c8:	4b04      	ldr	r3, [pc, #16]	; (800a6dc <__assert_func+0x38>)
 800a6ca:	461c      	mov	r4, r3
 800a6cc:	e7f3      	b.n	800a6b6 <__assert_func+0x12>
 800a6ce:	bf00      	nop
 800a6d0:	200004c8 	.word	0x200004c8
 800a6d4:	0800b725 	.word	0x0800b725
 800a6d8:	0800b732 	.word	0x0800b732
 800a6dc:	0800b760 	.word	0x0800b760

0800a6e0 <fiprintf>:
 800a6e0:	b40e      	push	{r1, r2, r3}
 800a6e2:	b503      	push	{r0, r1, lr}
 800a6e4:	4601      	mov	r1, r0
 800a6e6:	ab03      	add	r3, sp, #12
 800a6e8:	4805      	ldr	r0, [pc, #20]	; (800a700 <fiprintf+0x20>)
 800a6ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6ee:	6800      	ldr	r0, [r0, #0]
 800a6f0:	9301      	str	r3, [sp, #4]
 800a6f2:	f000 f897 	bl	800a824 <_vfiprintf_r>
 800a6f6:	b002      	add	sp, #8
 800a6f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6fc:	b003      	add	sp, #12
 800a6fe:	4770      	bx	lr
 800a700:	200004c8 	.word	0x200004c8

0800a704 <__ascii_mbtowc>:
 800a704:	b082      	sub	sp, #8
 800a706:	b901      	cbnz	r1, 800a70a <__ascii_mbtowc+0x6>
 800a708:	a901      	add	r1, sp, #4
 800a70a:	b142      	cbz	r2, 800a71e <__ascii_mbtowc+0x1a>
 800a70c:	b14b      	cbz	r3, 800a722 <__ascii_mbtowc+0x1e>
 800a70e:	7813      	ldrb	r3, [r2, #0]
 800a710:	600b      	str	r3, [r1, #0]
 800a712:	7812      	ldrb	r2, [r2, #0]
 800a714:	1e10      	subs	r0, r2, #0
 800a716:	bf18      	it	ne
 800a718:	2001      	movne	r0, #1
 800a71a:	b002      	add	sp, #8
 800a71c:	4770      	bx	lr
 800a71e:	4610      	mov	r0, r2
 800a720:	e7fb      	b.n	800a71a <__ascii_mbtowc+0x16>
 800a722:	f06f 0001 	mvn.w	r0, #1
 800a726:	e7f8      	b.n	800a71a <__ascii_mbtowc+0x16>

0800a728 <memmove>:
 800a728:	4288      	cmp	r0, r1
 800a72a:	b510      	push	{r4, lr}
 800a72c:	eb01 0402 	add.w	r4, r1, r2
 800a730:	d902      	bls.n	800a738 <memmove+0x10>
 800a732:	4284      	cmp	r4, r0
 800a734:	4623      	mov	r3, r4
 800a736:	d807      	bhi.n	800a748 <memmove+0x20>
 800a738:	1e43      	subs	r3, r0, #1
 800a73a:	42a1      	cmp	r1, r4
 800a73c:	d008      	beq.n	800a750 <memmove+0x28>
 800a73e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a742:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a746:	e7f8      	b.n	800a73a <memmove+0x12>
 800a748:	4402      	add	r2, r0
 800a74a:	4601      	mov	r1, r0
 800a74c:	428a      	cmp	r2, r1
 800a74e:	d100      	bne.n	800a752 <memmove+0x2a>
 800a750:	bd10      	pop	{r4, pc}
 800a752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a756:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a75a:	e7f7      	b.n	800a74c <memmove+0x24>

0800a75c <__malloc_lock>:
 800a75c:	4801      	ldr	r0, [pc, #4]	; (800a764 <__malloc_lock+0x8>)
 800a75e:	f000 bc1f 	b.w	800afa0 <__retarget_lock_acquire_recursive>
 800a762:	bf00      	nop
 800a764:	20000eb0 	.word	0x20000eb0

0800a768 <__malloc_unlock>:
 800a768:	4801      	ldr	r0, [pc, #4]	; (800a770 <__malloc_unlock+0x8>)
 800a76a:	f000 bc1a 	b.w	800afa2 <__retarget_lock_release_recursive>
 800a76e:	bf00      	nop
 800a770:	20000eb0 	.word	0x20000eb0

0800a774 <_realloc_r>:
 800a774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a778:	4680      	mov	r8, r0
 800a77a:	4614      	mov	r4, r2
 800a77c:	460e      	mov	r6, r1
 800a77e:	b921      	cbnz	r1, 800a78a <_realloc_r+0x16>
 800a780:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a784:	4611      	mov	r1, r2
 800a786:	f7ff bdad 	b.w	800a2e4 <_malloc_r>
 800a78a:	b92a      	cbnz	r2, 800a798 <_realloc_r+0x24>
 800a78c:	f7ff fd3e 	bl	800a20c <_free_r>
 800a790:	4625      	mov	r5, r4
 800a792:	4628      	mov	r0, r5
 800a794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a798:	f000 fc6a 	bl	800b070 <_malloc_usable_size_r>
 800a79c:	4284      	cmp	r4, r0
 800a79e:	4607      	mov	r7, r0
 800a7a0:	d802      	bhi.n	800a7a8 <_realloc_r+0x34>
 800a7a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a7a6:	d812      	bhi.n	800a7ce <_realloc_r+0x5a>
 800a7a8:	4621      	mov	r1, r4
 800a7aa:	4640      	mov	r0, r8
 800a7ac:	f7ff fd9a 	bl	800a2e4 <_malloc_r>
 800a7b0:	4605      	mov	r5, r0
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	d0ed      	beq.n	800a792 <_realloc_r+0x1e>
 800a7b6:	42bc      	cmp	r4, r7
 800a7b8:	4622      	mov	r2, r4
 800a7ba:	4631      	mov	r1, r6
 800a7bc:	bf28      	it	cs
 800a7be:	463a      	movcs	r2, r7
 800a7c0:	f7ff f97c 	bl	8009abc <memcpy>
 800a7c4:	4631      	mov	r1, r6
 800a7c6:	4640      	mov	r0, r8
 800a7c8:	f7ff fd20 	bl	800a20c <_free_r>
 800a7cc:	e7e1      	b.n	800a792 <_realloc_r+0x1e>
 800a7ce:	4635      	mov	r5, r6
 800a7d0:	e7df      	b.n	800a792 <_realloc_r+0x1e>

0800a7d2 <__sfputc_r>:
 800a7d2:	6893      	ldr	r3, [r2, #8]
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	b410      	push	{r4}
 800a7da:	6093      	str	r3, [r2, #8]
 800a7dc:	da08      	bge.n	800a7f0 <__sfputc_r+0x1e>
 800a7de:	6994      	ldr	r4, [r2, #24]
 800a7e0:	42a3      	cmp	r3, r4
 800a7e2:	db01      	blt.n	800a7e8 <__sfputc_r+0x16>
 800a7e4:	290a      	cmp	r1, #10
 800a7e6:	d103      	bne.n	800a7f0 <__sfputc_r+0x1e>
 800a7e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7ec:	f000 b94a 	b.w	800aa84 <__swbuf_r>
 800a7f0:	6813      	ldr	r3, [r2, #0]
 800a7f2:	1c58      	adds	r0, r3, #1
 800a7f4:	6010      	str	r0, [r2, #0]
 800a7f6:	7019      	strb	r1, [r3, #0]
 800a7f8:	4608      	mov	r0, r1
 800a7fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <__sfputs_r>:
 800a800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a802:	4606      	mov	r6, r0
 800a804:	460f      	mov	r7, r1
 800a806:	4614      	mov	r4, r2
 800a808:	18d5      	adds	r5, r2, r3
 800a80a:	42ac      	cmp	r4, r5
 800a80c:	d101      	bne.n	800a812 <__sfputs_r+0x12>
 800a80e:	2000      	movs	r0, #0
 800a810:	e007      	b.n	800a822 <__sfputs_r+0x22>
 800a812:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a816:	463a      	mov	r2, r7
 800a818:	4630      	mov	r0, r6
 800a81a:	f7ff ffda 	bl	800a7d2 <__sfputc_r>
 800a81e:	1c43      	adds	r3, r0, #1
 800a820:	d1f3      	bne.n	800a80a <__sfputs_r+0xa>
 800a822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a824 <_vfiprintf_r>:
 800a824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a828:	460d      	mov	r5, r1
 800a82a:	b09d      	sub	sp, #116	; 0x74
 800a82c:	4614      	mov	r4, r2
 800a82e:	4698      	mov	r8, r3
 800a830:	4606      	mov	r6, r0
 800a832:	b118      	cbz	r0, 800a83c <_vfiprintf_r+0x18>
 800a834:	6983      	ldr	r3, [r0, #24]
 800a836:	b90b      	cbnz	r3, 800a83c <_vfiprintf_r+0x18>
 800a838:	f000 fb14 	bl	800ae64 <__sinit>
 800a83c:	4b89      	ldr	r3, [pc, #548]	; (800aa64 <_vfiprintf_r+0x240>)
 800a83e:	429d      	cmp	r5, r3
 800a840:	d11b      	bne.n	800a87a <_vfiprintf_r+0x56>
 800a842:	6875      	ldr	r5, [r6, #4]
 800a844:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a846:	07d9      	lsls	r1, r3, #31
 800a848:	d405      	bmi.n	800a856 <_vfiprintf_r+0x32>
 800a84a:	89ab      	ldrh	r3, [r5, #12]
 800a84c:	059a      	lsls	r2, r3, #22
 800a84e:	d402      	bmi.n	800a856 <_vfiprintf_r+0x32>
 800a850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a852:	f000 fba5 	bl	800afa0 <__retarget_lock_acquire_recursive>
 800a856:	89ab      	ldrh	r3, [r5, #12]
 800a858:	071b      	lsls	r3, r3, #28
 800a85a:	d501      	bpl.n	800a860 <_vfiprintf_r+0x3c>
 800a85c:	692b      	ldr	r3, [r5, #16]
 800a85e:	b9eb      	cbnz	r3, 800a89c <_vfiprintf_r+0x78>
 800a860:	4629      	mov	r1, r5
 800a862:	4630      	mov	r0, r6
 800a864:	f000 f96e 	bl	800ab44 <__swsetup_r>
 800a868:	b1c0      	cbz	r0, 800a89c <_vfiprintf_r+0x78>
 800a86a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a86c:	07dc      	lsls	r4, r3, #31
 800a86e:	d50e      	bpl.n	800a88e <_vfiprintf_r+0x6a>
 800a870:	f04f 30ff 	mov.w	r0, #4294967295
 800a874:	b01d      	add	sp, #116	; 0x74
 800a876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a87a:	4b7b      	ldr	r3, [pc, #492]	; (800aa68 <_vfiprintf_r+0x244>)
 800a87c:	429d      	cmp	r5, r3
 800a87e:	d101      	bne.n	800a884 <_vfiprintf_r+0x60>
 800a880:	68b5      	ldr	r5, [r6, #8]
 800a882:	e7df      	b.n	800a844 <_vfiprintf_r+0x20>
 800a884:	4b79      	ldr	r3, [pc, #484]	; (800aa6c <_vfiprintf_r+0x248>)
 800a886:	429d      	cmp	r5, r3
 800a888:	bf08      	it	eq
 800a88a:	68f5      	ldreq	r5, [r6, #12]
 800a88c:	e7da      	b.n	800a844 <_vfiprintf_r+0x20>
 800a88e:	89ab      	ldrh	r3, [r5, #12]
 800a890:	0598      	lsls	r0, r3, #22
 800a892:	d4ed      	bmi.n	800a870 <_vfiprintf_r+0x4c>
 800a894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a896:	f000 fb84 	bl	800afa2 <__retarget_lock_release_recursive>
 800a89a:	e7e9      	b.n	800a870 <_vfiprintf_r+0x4c>
 800a89c:	2300      	movs	r3, #0
 800a89e:	9309      	str	r3, [sp, #36]	; 0x24
 800a8a0:	2320      	movs	r3, #32
 800a8a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8aa:	2330      	movs	r3, #48	; 0x30
 800a8ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aa70 <_vfiprintf_r+0x24c>
 800a8b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8b4:	f04f 0901 	mov.w	r9, #1
 800a8b8:	4623      	mov	r3, r4
 800a8ba:	469a      	mov	sl, r3
 800a8bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8c0:	b10a      	cbz	r2, 800a8c6 <_vfiprintf_r+0xa2>
 800a8c2:	2a25      	cmp	r2, #37	; 0x25
 800a8c4:	d1f9      	bne.n	800a8ba <_vfiprintf_r+0x96>
 800a8c6:	ebba 0b04 	subs.w	fp, sl, r4
 800a8ca:	d00b      	beq.n	800a8e4 <_vfiprintf_r+0xc0>
 800a8cc:	465b      	mov	r3, fp
 800a8ce:	4622      	mov	r2, r4
 800a8d0:	4629      	mov	r1, r5
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	f7ff ff94 	bl	800a800 <__sfputs_r>
 800a8d8:	3001      	adds	r0, #1
 800a8da:	f000 80aa 	beq.w	800aa32 <_vfiprintf_r+0x20e>
 800a8de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8e0:	445a      	add	r2, fp
 800a8e2:	9209      	str	r2, [sp, #36]	; 0x24
 800a8e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f000 80a2 	beq.w	800aa32 <_vfiprintf_r+0x20e>
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a8f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8f8:	f10a 0a01 	add.w	sl, sl, #1
 800a8fc:	9304      	str	r3, [sp, #16]
 800a8fe:	9307      	str	r3, [sp, #28]
 800a900:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a904:	931a      	str	r3, [sp, #104]	; 0x68
 800a906:	4654      	mov	r4, sl
 800a908:	2205      	movs	r2, #5
 800a90a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a90e:	4858      	ldr	r0, [pc, #352]	; (800aa70 <_vfiprintf_r+0x24c>)
 800a910:	f7f5 fc9e 	bl	8000250 <memchr>
 800a914:	9a04      	ldr	r2, [sp, #16]
 800a916:	b9d8      	cbnz	r0, 800a950 <_vfiprintf_r+0x12c>
 800a918:	06d1      	lsls	r1, r2, #27
 800a91a:	bf44      	itt	mi
 800a91c:	2320      	movmi	r3, #32
 800a91e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a922:	0713      	lsls	r3, r2, #28
 800a924:	bf44      	itt	mi
 800a926:	232b      	movmi	r3, #43	; 0x2b
 800a928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a92c:	f89a 3000 	ldrb.w	r3, [sl]
 800a930:	2b2a      	cmp	r3, #42	; 0x2a
 800a932:	d015      	beq.n	800a960 <_vfiprintf_r+0x13c>
 800a934:	9a07      	ldr	r2, [sp, #28]
 800a936:	4654      	mov	r4, sl
 800a938:	2000      	movs	r0, #0
 800a93a:	f04f 0c0a 	mov.w	ip, #10
 800a93e:	4621      	mov	r1, r4
 800a940:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a944:	3b30      	subs	r3, #48	; 0x30
 800a946:	2b09      	cmp	r3, #9
 800a948:	d94e      	bls.n	800a9e8 <_vfiprintf_r+0x1c4>
 800a94a:	b1b0      	cbz	r0, 800a97a <_vfiprintf_r+0x156>
 800a94c:	9207      	str	r2, [sp, #28]
 800a94e:	e014      	b.n	800a97a <_vfiprintf_r+0x156>
 800a950:	eba0 0308 	sub.w	r3, r0, r8
 800a954:	fa09 f303 	lsl.w	r3, r9, r3
 800a958:	4313      	orrs	r3, r2
 800a95a:	9304      	str	r3, [sp, #16]
 800a95c:	46a2      	mov	sl, r4
 800a95e:	e7d2      	b.n	800a906 <_vfiprintf_r+0xe2>
 800a960:	9b03      	ldr	r3, [sp, #12]
 800a962:	1d19      	adds	r1, r3, #4
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	9103      	str	r1, [sp, #12]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	bfbb      	ittet	lt
 800a96c:	425b      	neglt	r3, r3
 800a96e:	f042 0202 	orrlt.w	r2, r2, #2
 800a972:	9307      	strge	r3, [sp, #28]
 800a974:	9307      	strlt	r3, [sp, #28]
 800a976:	bfb8      	it	lt
 800a978:	9204      	strlt	r2, [sp, #16]
 800a97a:	7823      	ldrb	r3, [r4, #0]
 800a97c:	2b2e      	cmp	r3, #46	; 0x2e
 800a97e:	d10c      	bne.n	800a99a <_vfiprintf_r+0x176>
 800a980:	7863      	ldrb	r3, [r4, #1]
 800a982:	2b2a      	cmp	r3, #42	; 0x2a
 800a984:	d135      	bne.n	800a9f2 <_vfiprintf_r+0x1ce>
 800a986:	9b03      	ldr	r3, [sp, #12]
 800a988:	1d1a      	adds	r2, r3, #4
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	9203      	str	r2, [sp, #12]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	bfb8      	it	lt
 800a992:	f04f 33ff 	movlt.w	r3, #4294967295
 800a996:	3402      	adds	r4, #2
 800a998:	9305      	str	r3, [sp, #20]
 800a99a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aa80 <_vfiprintf_r+0x25c>
 800a99e:	7821      	ldrb	r1, [r4, #0]
 800a9a0:	2203      	movs	r2, #3
 800a9a2:	4650      	mov	r0, sl
 800a9a4:	f7f5 fc54 	bl	8000250 <memchr>
 800a9a8:	b140      	cbz	r0, 800a9bc <_vfiprintf_r+0x198>
 800a9aa:	2340      	movs	r3, #64	; 0x40
 800a9ac:	eba0 000a 	sub.w	r0, r0, sl
 800a9b0:	fa03 f000 	lsl.w	r0, r3, r0
 800a9b4:	9b04      	ldr	r3, [sp, #16]
 800a9b6:	4303      	orrs	r3, r0
 800a9b8:	3401      	adds	r4, #1
 800a9ba:	9304      	str	r3, [sp, #16]
 800a9bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9c0:	482c      	ldr	r0, [pc, #176]	; (800aa74 <_vfiprintf_r+0x250>)
 800a9c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9c6:	2206      	movs	r2, #6
 800a9c8:	f7f5 fc42 	bl	8000250 <memchr>
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	d03f      	beq.n	800aa50 <_vfiprintf_r+0x22c>
 800a9d0:	4b29      	ldr	r3, [pc, #164]	; (800aa78 <_vfiprintf_r+0x254>)
 800a9d2:	bb1b      	cbnz	r3, 800aa1c <_vfiprintf_r+0x1f8>
 800a9d4:	9b03      	ldr	r3, [sp, #12]
 800a9d6:	3307      	adds	r3, #7
 800a9d8:	f023 0307 	bic.w	r3, r3, #7
 800a9dc:	3308      	adds	r3, #8
 800a9de:	9303      	str	r3, [sp, #12]
 800a9e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9e2:	443b      	add	r3, r7
 800a9e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a9e6:	e767      	b.n	800a8b8 <_vfiprintf_r+0x94>
 800a9e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9ec:	460c      	mov	r4, r1
 800a9ee:	2001      	movs	r0, #1
 800a9f0:	e7a5      	b.n	800a93e <_vfiprintf_r+0x11a>
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	3401      	adds	r4, #1
 800a9f6:	9305      	str	r3, [sp, #20]
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	f04f 0c0a 	mov.w	ip, #10
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa04:	3a30      	subs	r2, #48	; 0x30
 800aa06:	2a09      	cmp	r2, #9
 800aa08:	d903      	bls.n	800aa12 <_vfiprintf_r+0x1ee>
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d0c5      	beq.n	800a99a <_vfiprintf_r+0x176>
 800aa0e:	9105      	str	r1, [sp, #20]
 800aa10:	e7c3      	b.n	800a99a <_vfiprintf_r+0x176>
 800aa12:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa16:	4604      	mov	r4, r0
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e7f0      	b.n	800a9fe <_vfiprintf_r+0x1da>
 800aa1c:	ab03      	add	r3, sp, #12
 800aa1e:	9300      	str	r3, [sp, #0]
 800aa20:	462a      	mov	r2, r5
 800aa22:	4b16      	ldr	r3, [pc, #88]	; (800aa7c <_vfiprintf_r+0x258>)
 800aa24:	a904      	add	r1, sp, #16
 800aa26:	4630      	mov	r0, r6
 800aa28:	f7fd fd9a 	bl	8008560 <_printf_float>
 800aa2c:	4607      	mov	r7, r0
 800aa2e:	1c78      	adds	r0, r7, #1
 800aa30:	d1d6      	bne.n	800a9e0 <_vfiprintf_r+0x1bc>
 800aa32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa34:	07d9      	lsls	r1, r3, #31
 800aa36:	d405      	bmi.n	800aa44 <_vfiprintf_r+0x220>
 800aa38:	89ab      	ldrh	r3, [r5, #12]
 800aa3a:	059a      	lsls	r2, r3, #22
 800aa3c:	d402      	bmi.n	800aa44 <_vfiprintf_r+0x220>
 800aa3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa40:	f000 faaf 	bl	800afa2 <__retarget_lock_release_recursive>
 800aa44:	89ab      	ldrh	r3, [r5, #12]
 800aa46:	065b      	lsls	r3, r3, #25
 800aa48:	f53f af12 	bmi.w	800a870 <_vfiprintf_r+0x4c>
 800aa4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa4e:	e711      	b.n	800a874 <_vfiprintf_r+0x50>
 800aa50:	ab03      	add	r3, sp, #12
 800aa52:	9300      	str	r3, [sp, #0]
 800aa54:	462a      	mov	r2, r5
 800aa56:	4b09      	ldr	r3, [pc, #36]	; (800aa7c <_vfiprintf_r+0x258>)
 800aa58:	a904      	add	r1, sp, #16
 800aa5a:	4630      	mov	r0, r6
 800aa5c:	f7fe f80c 	bl	8008a78 <_printf_i>
 800aa60:	e7e4      	b.n	800aa2c <_vfiprintf_r+0x208>
 800aa62:	bf00      	nop
 800aa64:	0800b78c 	.word	0x0800b78c
 800aa68:	0800b7ac 	.word	0x0800b7ac
 800aa6c:	0800b76c 	.word	0x0800b76c
 800aa70:	0800b714 	.word	0x0800b714
 800aa74:	0800b71e 	.word	0x0800b71e
 800aa78:	08008561 	.word	0x08008561
 800aa7c:	0800a801 	.word	0x0800a801
 800aa80:	0800b71a 	.word	0x0800b71a

0800aa84 <__swbuf_r>:
 800aa84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa86:	460e      	mov	r6, r1
 800aa88:	4614      	mov	r4, r2
 800aa8a:	4605      	mov	r5, r0
 800aa8c:	b118      	cbz	r0, 800aa96 <__swbuf_r+0x12>
 800aa8e:	6983      	ldr	r3, [r0, #24]
 800aa90:	b90b      	cbnz	r3, 800aa96 <__swbuf_r+0x12>
 800aa92:	f000 f9e7 	bl	800ae64 <__sinit>
 800aa96:	4b21      	ldr	r3, [pc, #132]	; (800ab1c <__swbuf_r+0x98>)
 800aa98:	429c      	cmp	r4, r3
 800aa9a:	d12b      	bne.n	800aaf4 <__swbuf_r+0x70>
 800aa9c:	686c      	ldr	r4, [r5, #4]
 800aa9e:	69a3      	ldr	r3, [r4, #24]
 800aaa0:	60a3      	str	r3, [r4, #8]
 800aaa2:	89a3      	ldrh	r3, [r4, #12]
 800aaa4:	071a      	lsls	r2, r3, #28
 800aaa6:	d52f      	bpl.n	800ab08 <__swbuf_r+0x84>
 800aaa8:	6923      	ldr	r3, [r4, #16]
 800aaaa:	b36b      	cbz	r3, 800ab08 <__swbuf_r+0x84>
 800aaac:	6923      	ldr	r3, [r4, #16]
 800aaae:	6820      	ldr	r0, [r4, #0]
 800aab0:	1ac0      	subs	r0, r0, r3
 800aab2:	6963      	ldr	r3, [r4, #20]
 800aab4:	b2f6      	uxtb	r6, r6
 800aab6:	4283      	cmp	r3, r0
 800aab8:	4637      	mov	r7, r6
 800aaba:	dc04      	bgt.n	800aac6 <__swbuf_r+0x42>
 800aabc:	4621      	mov	r1, r4
 800aabe:	4628      	mov	r0, r5
 800aac0:	f000 f93c 	bl	800ad3c <_fflush_r>
 800aac4:	bb30      	cbnz	r0, 800ab14 <__swbuf_r+0x90>
 800aac6:	68a3      	ldr	r3, [r4, #8]
 800aac8:	3b01      	subs	r3, #1
 800aaca:	60a3      	str	r3, [r4, #8]
 800aacc:	6823      	ldr	r3, [r4, #0]
 800aace:	1c5a      	adds	r2, r3, #1
 800aad0:	6022      	str	r2, [r4, #0]
 800aad2:	701e      	strb	r6, [r3, #0]
 800aad4:	6963      	ldr	r3, [r4, #20]
 800aad6:	3001      	adds	r0, #1
 800aad8:	4283      	cmp	r3, r0
 800aada:	d004      	beq.n	800aae6 <__swbuf_r+0x62>
 800aadc:	89a3      	ldrh	r3, [r4, #12]
 800aade:	07db      	lsls	r3, r3, #31
 800aae0:	d506      	bpl.n	800aaf0 <__swbuf_r+0x6c>
 800aae2:	2e0a      	cmp	r6, #10
 800aae4:	d104      	bne.n	800aaf0 <__swbuf_r+0x6c>
 800aae6:	4621      	mov	r1, r4
 800aae8:	4628      	mov	r0, r5
 800aaea:	f000 f927 	bl	800ad3c <_fflush_r>
 800aaee:	b988      	cbnz	r0, 800ab14 <__swbuf_r+0x90>
 800aaf0:	4638      	mov	r0, r7
 800aaf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaf4:	4b0a      	ldr	r3, [pc, #40]	; (800ab20 <__swbuf_r+0x9c>)
 800aaf6:	429c      	cmp	r4, r3
 800aaf8:	d101      	bne.n	800aafe <__swbuf_r+0x7a>
 800aafa:	68ac      	ldr	r4, [r5, #8]
 800aafc:	e7cf      	b.n	800aa9e <__swbuf_r+0x1a>
 800aafe:	4b09      	ldr	r3, [pc, #36]	; (800ab24 <__swbuf_r+0xa0>)
 800ab00:	429c      	cmp	r4, r3
 800ab02:	bf08      	it	eq
 800ab04:	68ec      	ldreq	r4, [r5, #12]
 800ab06:	e7ca      	b.n	800aa9e <__swbuf_r+0x1a>
 800ab08:	4621      	mov	r1, r4
 800ab0a:	4628      	mov	r0, r5
 800ab0c:	f000 f81a 	bl	800ab44 <__swsetup_r>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	d0cb      	beq.n	800aaac <__swbuf_r+0x28>
 800ab14:	f04f 37ff 	mov.w	r7, #4294967295
 800ab18:	e7ea      	b.n	800aaf0 <__swbuf_r+0x6c>
 800ab1a:	bf00      	nop
 800ab1c:	0800b78c 	.word	0x0800b78c
 800ab20:	0800b7ac 	.word	0x0800b7ac
 800ab24:	0800b76c 	.word	0x0800b76c

0800ab28 <__ascii_wctomb>:
 800ab28:	b149      	cbz	r1, 800ab3e <__ascii_wctomb+0x16>
 800ab2a:	2aff      	cmp	r2, #255	; 0xff
 800ab2c:	bf85      	ittet	hi
 800ab2e:	238a      	movhi	r3, #138	; 0x8a
 800ab30:	6003      	strhi	r3, [r0, #0]
 800ab32:	700a      	strbls	r2, [r1, #0]
 800ab34:	f04f 30ff 	movhi.w	r0, #4294967295
 800ab38:	bf98      	it	ls
 800ab3a:	2001      	movls	r0, #1
 800ab3c:	4770      	bx	lr
 800ab3e:	4608      	mov	r0, r1
 800ab40:	4770      	bx	lr
	...

0800ab44 <__swsetup_r>:
 800ab44:	4b32      	ldr	r3, [pc, #200]	; (800ac10 <__swsetup_r+0xcc>)
 800ab46:	b570      	push	{r4, r5, r6, lr}
 800ab48:	681d      	ldr	r5, [r3, #0]
 800ab4a:	4606      	mov	r6, r0
 800ab4c:	460c      	mov	r4, r1
 800ab4e:	b125      	cbz	r5, 800ab5a <__swsetup_r+0x16>
 800ab50:	69ab      	ldr	r3, [r5, #24]
 800ab52:	b913      	cbnz	r3, 800ab5a <__swsetup_r+0x16>
 800ab54:	4628      	mov	r0, r5
 800ab56:	f000 f985 	bl	800ae64 <__sinit>
 800ab5a:	4b2e      	ldr	r3, [pc, #184]	; (800ac14 <__swsetup_r+0xd0>)
 800ab5c:	429c      	cmp	r4, r3
 800ab5e:	d10f      	bne.n	800ab80 <__swsetup_r+0x3c>
 800ab60:	686c      	ldr	r4, [r5, #4]
 800ab62:	89a3      	ldrh	r3, [r4, #12]
 800ab64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab68:	0719      	lsls	r1, r3, #28
 800ab6a:	d42c      	bmi.n	800abc6 <__swsetup_r+0x82>
 800ab6c:	06dd      	lsls	r5, r3, #27
 800ab6e:	d411      	bmi.n	800ab94 <__swsetup_r+0x50>
 800ab70:	2309      	movs	r3, #9
 800ab72:	6033      	str	r3, [r6, #0]
 800ab74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab78:	81a3      	strh	r3, [r4, #12]
 800ab7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab7e:	e03e      	b.n	800abfe <__swsetup_r+0xba>
 800ab80:	4b25      	ldr	r3, [pc, #148]	; (800ac18 <__swsetup_r+0xd4>)
 800ab82:	429c      	cmp	r4, r3
 800ab84:	d101      	bne.n	800ab8a <__swsetup_r+0x46>
 800ab86:	68ac      	ldr	r4, [r5, #8]
 800ab88:	e7eb      	b.n	800ab62 <__swsetup_r+0x1e>
 800ab8a:	4b24      	ldr	r3, [pc, #144]	; (800ac1c <__swsetup_r+0xd8>)
 800ab8c:	429c      	cmp	r4, r3
 800ab8e:	bf08      	it	eq
 800ab90:	68ec      	ldreq	r4, [r5, #12]
 800ab92:	e7e6      	b.n	800ab62 <__swsetup_r+0x1e>
 800ab94:	0758      	lsls	r0, r3, #29
 800ab96:	d512      	bpl.n	800abbe <__swsetup_r+0x7a>
 800ab98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab9a:	b141      	cbz	r1, 800abae <__swsetup_r+0x6a>
 800ab9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aba0:	4299      	cmp	r1, r3
 800aba2:	d002      	beq.n	800abaa <__swsetup_r+0x66>
 800aba4:	4630      	mov	r0, r6
 800aba6:	f7ff fb31 	bl	800a20c <_free_r>
 800abaa:	2300      	movs	r3, #0
 800abac:	6363      	str	r3, [r4, #52]	; 0x34
 800abae:	89a3      	ldrh	r3, [r4, #12]
 800abb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800abb4:	81a3      	strh	r3, [r4, #12]
 800abb6:	2300      	movs	r3, #0
 800abb8:	6063      	str	r3, [r4, #4]
 800abba:	6923      	ldr	r3, [r4, #16]
 800abbc:	6023      	str	r3, [r4, #0]
 800abbe:	89a3      	ldrh	r3, [r4, #12]
 800abc0:	f043 0308 	orr.w	r3, r3, #8
 800abc4:	81a3      	strh	r3, [r4, #12]
 800abc6:	6923      	ldr	r3, [r4, #16]
 800abc8:	b94b      	cbnz	r3, 800abde <__swsetup_r+0x9a>
 800abca:	89a3      	ldrh	r3, [r4, #12]
 800abcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800abd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abd4:	d003      	beq.n	800abde <__swsetup_r+0x9a>
 800abd6:	4621      	mov	r1, r4
 800abd8:	4630      	mov	r0, r6
 800abda:	f000 fa09 	bl	800aff0 <__smakebuf_r>
 800abde:	89a0      	ldrh	r0, [r4, #12]
 800abe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abe4:	f010 0301 	ands.w	r3, r0, #1
 800abe8:	d00a      	beq.n	800ac00 <__swsetup_r+0xbc>
 800abea:	2300      	movs	r3, #0
 800abec:	60a3      	str	r3, [r4, #8]
 800abee:	6963      	ldr	r3, [r4, #20]
 800abf0:	425b      	negs	r3, r3
 800abf2:	61a3      	str	r3, [r4, #24]
 800abf4:	6923      	ldr	r3, [r4, #16]
 800abf6:	b943      	cbnz	r3, 800ac0a <__swsetup_r+0xc6>
 800abf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800abfc:	d1ba      	bne.n	800ab74 <__swsetup_r+0x30>
 800abfe:	bd70      	pop	{r4, r5, r6, pc}
 800ac00:	0781      	lsls	r1, r0, #30
 800ac02:	bf58      	it	pl
 800ac04:	6963      	ldrpl	r3, [r4, #20]
 800ac06:	60a3      	str	r3, [r4, #8]
 800ac08:	e7f4      	b.n	800abf4 <__swsetup_r+0xb0>
 800ac0a:	2000      	movs	r0, #0
 800ac0c:	e7f7      	b.n	800abfe <__swsetup_r+0xba>
 800ac0e:	bf00      	nop
 800ac10:	200004c8 	.word	0x200004c8
 800ac14:	0800b78c 	.word	0x0800b78c
 800ac18:	0800b7ac 	.word	0x0800b7ac
 800ac1c:	0800b76c 	.word	0x0800b76c

0800ac20 <abort>:
 800ac20:	b508      	push	{r3, lr}
 800ac22:	2006      	movs	r0, #6
 800ac24:	f000 fa54 	bl	800b0d0 <raise>
 800ac28:	2001      	movs	r0, #1
 800ac2a:	f7f6 fa4b 	bl	80010c4 <_exit>
	...

0800ac30 <__sflush_r>:
 800ac30:	898a      	ldrh	r2, [r1, #12]
 800ac32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac36:	4605      	mov	r5, r0
 800ac38:	0710      	lsls	r0, r2, #28
 800ac3a:	460c      	mov	r4, r1
 800ac3c:	d458      	bmi.n	800acf0 <__sflush_r+0xc0>
 800ac3e:	684b      	ldr	r3, [r1, #4]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	dc05      	bgt.n	800ac50 <__sflush_r+0x20>
 800ac44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	dc02      	bgt.n	800ac50 <__sflush_r+0x20>
 800ac4a:	2000      	movs	r0, #0
 800ac4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac52:	2e00      	cmp	r6, #0
 800ac54:	d0f9      	beq.n	800ac4a <__sflush_r+0x1a>
 800ac56:	2300      	movs	r3, #0
 800ac58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac5c:	682f      	ldr	r7, [r5, #0]
 800ac5e:	602b      	str	r3, [r5, #0]
 800ac60:	d032      	beq.n	800acc8 <__sflush_r+0x98>
 800ac62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac64:	89a3      	ldrh	r3, [r4, #12]
 800ac66:	075a      	lsls	r2, r3, #29
 800ac68:	d505      	bpl.n	800ac76 <__sflush_r+0x46>
 800ac6a:	6863      	ldr	r3, [r4, #4]
 800ac6c:	1ac0      	subs	r0, r0, r3
 800ac6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac70:	b10b      	cbz	r3, 800ac76 <__sflush_r+0x46>
 800ac72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac74:	1ac0      	subs	r0, r0, r3
 800ac76:	2300      	movs	r3, #0
 800ac78:	4602      	mov	r2, r0
 800ac7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac7c:	6a21      	ldr	r1, [r4, #32]
 800ac7e:	4628      	mov	r0, r5
 800ac80:	47b0      	blx	r6
 800ac82:	1c43      	adds	r3, r0, #1
 800ac84:	89a3      	ldrh	r3, [r4, #12]
 800ac86:	d106      	bne.n	800ac96 <__sflush_r+0x66>
 800ac88:	6829      	ldr	r1, [r5, #0]
 800ac8a:	291d      	cmp	r1, #29
 800ac8c:	d82c      	bhi.n	800ace8 <__sflush_r+0xb8>
 800ac8e:	4a2a      	ldr	r2, [pc, #168]	; (800ad38 <__sflush_r+0x108>)
 800ac90:	40ca      	lsrs	r2, r1
 800ac92:	07d6      	lsls	r6, r2, #31
 800ac94:	d528      	bpl.n	800ace8 <__sflush_r+0xb8>
 800ac96:	2200      	movs	r2, #0
 800ac98:	6062      	str	r2, [r4, #4]
 800ac9a:	04d9      	lsls	r1, r3, #19
 800ac9c:	6922      	ldr	r2, [r4, #16]
 800ac9e:	6022      	str	r2, [r4, #0]
 800aca0:	d504      	bpl.n	800acac <__sflush_r+0x7c>
 800aca2:	1c42      	adds	r2, r0, #1
 800aca4:	d101      	bne.n	800acaa <__sflush_r+0x7a>
 800aca6:	682b      	ldr	r3, [r5, #0]
 800aca8:	b903      	cbnz	r3, 800acac <__sflush_r+0x7c>
 800acaa:	6560      	str	r0, [r4, #84]	; 0x54
 800acac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acae:	602f      	str	r7, [r5, #0]
 800acb0:	2900      	cmp	r1, #0
 800acb2:	d0ca      	beq.n	800ac4a <__sflush_r+0x1a>
 800acb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acb8:	4299      	cmp	r1, r3
 800acba:	d002      	beq.n	800acc2 <__sflush_r+0x92>
 800acbc:	4628      	mov	r0, r5
 800acbe:	f7ff faa5 	bl	800a20c <_free_r>
 800acc2:	2000      	movs	r0, #0
 800acc4:	6360      	str	r0, [r4, #52]	; 0x34
 800acc6:	e7c1      	b.n	800ac4c <__sflush_r+0x1c>
 800acc8:	6a21      	ldr	r1, [r4, #32]
 800acca:	2301      	movs	r3, #1
 800accc:	4628      	mov	r0, r5
 800acce:	47b0      	blx	r6
 800acd0:	1c41      	adds	r1, r0, #1
 800acd2:	d1c7      	bne.n	800ac64 <__sflush_r+0x34>
 800acd4:	682b      	ldr	r3, [r5, #0]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d0c4      	beq.n	800ac64 <__sflush_r+0x34>
 800acda:	2b1d      	cmp	r3, #29
 800acdc:	d001      	beq.n	800ace2 <__sflush_r+0xb2>
 800acde:	2b16      	cmp	r3, #22
 800ace0:	d101      	bne.n	800ace6 <__sflush_r+0xb6>
 800ace2:	602f      	str	r7, [r5, #0]
 800ace4:	e7b1      	b.n	800ac4a <__sflush_r+0x1a>
 800ace6:	89a3      	ldrh	r3, [r4, #12]
 800ace8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acec:	81a3      	strh	r3, [r4, #12]
 800acee:	e7ad      	b.n	800ac4c <__sflush_r+0x1c>
 800acf0:	690f      	ldr	r7, [r1, #16]
 800acf2:	2f00      	cmp	r7, #0
 800acf4:	d0a9      	beq.n	800ac4a <__sflush_r+0x1a>
 800acf6:	0793      	lsls	r3, r2, #30
 800acf8:	680e      	ldr	r6, [r1, #0]
 800acfa:	bf08      	it	eq
 800acfc:	694b      	ldreq	r3, [r1, #20]
 800acfe:	600f      	str	r7, [r1, #0]
 800ad00:	bf18      	it	ne
 800ad02:	2300      	movne	r3, #0
 800ad04:	eba6 0807 	sub.w	r8, r6, r7
 800ad08:	608b      	str	r3, [r1, #8]
 800ad0a:	f1b8 0f00 	cmp.w	r8, #0
 800ad0e:	dd9c      	ble.n	800ac4a <__sflush_r+0x1a>
 800ad10:	6a21      	ldr	r1, [r4, #32]
 800ad12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad14:	4643      	mov	r3, r8
 800ad16:	463a      	mov	r2, r7
 800ad18:	4628      	mov	r0, r5
 800ad1a:	47b0      	blx	r6
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	dc06      	bgt.n	800ad2e <__sflush_r+0xfe>
 800ad20:	89a3      	ldrh	r3, [r4, #12]
 800ad22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad26:	81a3      	strh	r3, [r4, #12]
 800ad28:	f04f 30ff 	mov.w	r0, #4294967295
 800ad2c:	e78e      	b.n	800ac4c <__sflush_r+0x1c>
 800ad2e:	4407      	add	r7, r0
 800ad30:	eba8 0800 	sub.w	r8, r8, r0
 800ad34:	e7e9      	b.n	800ad0a <__sflush_r+0xda>
 800ad36:	bf00      	nop
 800ad38:	20400001 	.word	0x20400001

0800ad3c <_fflush_r>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	690b      	ldr	r3, [r1, #16]
 800ad40:	4605      	mov	r5, r0
 800ad42:	460c      	mov	r4, r1
 800ad44:	b913      	cbnz	r3, 800ad4c <_fflush_r+0x10>
 800ad46:	2500      	movs	r5, #0
 800ad48:	4628      	mov	r0, r5
 800ad4a:	bd38      	pop	{r3, r4, r5, pc}
 800ad4c:	b118      	cbz	r0, 800ad56 <_fflush_r+0x1a>
 800ad4e:	6983      	ldr	r3, [r0, #24]
 800ad50:	b90b      	cbnz	r3, 800ad56 <_fflush_r+0x1a>
 800ad52:	f000 f887 	bl	800ae64 <__sinit>
 800ad56:	4b14      	ldr	r3, [pc, #80]	; (800ada8 <_fflush_r+0x6c>)
 800ad58:	429c      	cmp	r4, r3
 800ad5a:	d11b      	bne.n	800ad94 <_fflush_r+0x58>
 800ad5c:	686c      	ldr	r4, [r5, #4]
 800ad5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d0ef      	beq.n	800ad46 <_fflush_r+0xa>
 800ad66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad68:	07d0      	lsls	r0, r2, #31
 800ad6a:	d404      	bmi.n	800ad76 <_fflush_r+0x3a>
 800ad6c:	0599      	lsls	r1, r3, #22
 800ad6e:	d402      	bmi.n	800ad76 <_fflush_r+0x3a>
 800ad70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad72:	f000 f915 	bl	800afa0 <__retarget_lock_acquire_recursive>
 800ad76:	4628      	mov	r0, r5
 800ad78:	4621      	mov	r1, r4
 800ad7a:	f7ff ff59 	bl	800ac30 <__sflush_r>
 800ad7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad80:	07da      	lsls	r2, r3, #31
 800ad82:	4605      	mov	r5, r0
 800ad84:	d4e0      	bmi.n	800ad48 <_fflush_r+0xc>
 800ad86:	89a3      	ldrh	r3, [r4, #12]
 800ad88:	059b      	lsls	r3, r3, #22
 800ad8a:	d4dd      	bmi.n	800ad48 <_fflush_r+0xc>
 800ad8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad8e:	f000 f908 	bl	800afa2 <__retarget_lock_release_recursive>
 800ad92:	e7d9      	b.n	800ad48 <_fflush_r+0xc>
 800ad94:	4b05      	ldr	r3, [pc, #20]	; (800adac <_fflush_r+0x70>)
 800ad96:	429c      	cmp	r4, r3
 800ad98:	d101      	bne.n	800ad9e <_fflush_r+0x62>
 800ad9a:	68ac      	ldr	r4, [r5, #8]
 800ad9c:	e7df      	b.n	800ad5e <_fflush_r+0x22>
 800ad9e:	4b04      	ldr	r3, [pc, #16]	; (800adb0 <_fflush_r+0x74>)
 800ada0:	429c      	cmp	r4, r3
 800ada2:	bf08      	it	eq
 800ada4:	68ec      	ldreq	r4, [r5, #12]
 800ada6:	e7da      	b.n	800ad5e <_fflush_r+0x22>
 800ada8:	0800b78c 	.word	0x0800b78c
 800adac:	0800b7ac 	.word	0x0800b7ac
 800adb0:	0800b76c 	.word	0x0800b76c

0800adb4 <std>:
 800adb4:	2300      	movs	r3, #0
 800adb6:	b510      	push	{r4, lr}
 800adb8:	4604      	mov	r4, r0
 800adba:	e9c0 3300 	strd	r3, r3, [r0]
 800adbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800adc2:	6083      	str	r3, [r0, #8]
 800adc4:	8181      	strh	r1, [r0, #12]
 800adc6:	6643      	str	r3, [r0, #100]	; 0x64
 800adc8:	81c2      	strh	r2, [r0, #14]
 800adca:	6183      	str	r3, [r0, #24]
 800adcc:	4619      	mov	r1, r3
 800adce:	2208      	movs	r2, #8
 800add0:	305c      	adds	r0, #92	; 0x5c
 800add2:	f7fd fb2b 	bl	800842c <memset>
 800add6:	4b05      	ldr	r3, [pc, #20]	; (800adec <std+0x38>)
 800add8:	6263      	str	r3, [r4, #36]	; 0x24
 800adda:	4b05      	ldr	r3, [pc, #20]	; (800adf0 <std+0x3c>)
 800addc:	62a3      	str	r3, [r4, #40]	; 0x28
 800adde:	4b05      	ldr	r3, [pc, #20]	; (800adf4 <std+0x40>)
 800ade0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ade2:	4b05      	ldr	r3, [pc, #20]	; (800adf8 <std+0x44>)
 800ade4:	6224      	str	r4, [r4, #32]
 800ade6:	6323      	str	r3, [r4, #48]	; 0x30
 800ade8:	bd10      	pop	{r4, pc}
 800adea:	bf00      	nop
 800adec:	0800b109 	.word	0x0800b109
 800adf0:	0800b12b 	.word	0x0800b12b
 800adf4:	0800b163 	.word	0x0800b163
 800adf8:	0800b187 	.word	0x0800b187

0800adfc <_cleanup_r>:
 800adfc:	4901      	ldr	r1, [pc, #4]	; (800ae04 <_cleanup_r+0x8>)
 800adfe:	f000 b8af 	b.w	800af60 <_fwalk_reent>
 800ae02:	bf00      	nop
 800ae04:	0800ad3d 	.word	0x0800ad3d

0800ae08 <__sfmoreglue>:
 800ae08:	b570      	push	{r4, r5, r6, lr}
 800ae0a:	2268      	movs	r2, #104	; 0x68
 800ae0c:	1e4d      	subs	r5, r1, #1
 800ae0e:	4355      	muls	r5, r2
 800ae10:	460e      	mov	r6, r1
 800ae12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae16:	f7ff fa65 	bl	800a2e4 <_malloc_r>
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	b140      	cbz	r0, 800ae30 <__sfmoreglue+0x28>
 800ae1e:	2100      	movs	r1, #0
 800ae20:	e9c0 1600 	strd	r1, r6, [r0]
 800ae24:	300c      	adds	r0, #12
 800ae26:	60a0      	str	r0, [r4, #8]
 800ae28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae2c:	f7fd fafe 	bl	800842c <memset>
 800ae30:	4620      	mov	r0, r4
 800ae32:	bd70      	pop	{r4, r5, r6, pc}

0800ae34 <__sfp_lock_acquire>:
 800ae34:	4801      	ldr	r0, [pc, #4]	; (800ae3c <__sfp_lock_acquire+0x8>)
 800ae36:	f000 b8b3 	b.w	800afa0 <__retarget_lock_acquire_recursive>
 800ae3a:	bf00      	nop
 800ae3c:	20000eb1 	.word	0x20000eb1

0800ae40 <__sfp_lock_release>:
 800ae40:	4801      	ldr	r0, [pc, #4]	; (800ae48 <__sfp_lock_release+0x8>)
 800ae42:	f000 b8ae 	b.w	800afa2 <__retarget_lock_release_recursive>
 800ae46:	bf00      	nop
 800ae48:	20000eb1 	.word	0x20000eb1

0800ae4c <__sinit_lock_acquire>:
 800ae4c:	4801      	ldr	r0, [pc, #4]	; (800ae54 <__sinit_lock_acquire+0x8>)
 800ae4e:	f000 b8a7 	b.w	800afa0 <__retarget_lock_acquire_recursive>
 800ae52:	bf00      	nop
 800ae54:	20000eb2 	.word	0x20000eb2

0800ae58 <__sinit_lock_release>:
 800ae58:	4801      	ldr	r0, [pc, #4]	; (800ae60 <__sinit_lock_release+0x8>)
 800ae5a:	f000 b8a2 	b.w	800afa2 <__retarget_lock_release_recursive>
 800ae5e:	bf00      	nop
 800ae60:	20000eb2 	.word	0x20000eb2

0800ae64 <__sinit>:
 800ae64:	b510      	push	{r4, lr}
 800ae66:	4604      	mov	r4, r0
 800ae68:	f7ff fff0 	bl	800ae4c <__sinit_lock_acquire>
 800ae6c:	69a3      	ldr	r3, [r4, #24]
 800ae6e:	b11b      	cbz	r3, 800ae78 <__sinit+0x14>
 800ae70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae74:	f7ff bff0 	b.w	800ae58 <__sinit_lock_release>
 800ae78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae7c:	6523      	str	r3, [r4, #80]	; 0x50
 800ae7e:	4b13      	ldr	r3, [pc, #76]	; (800aecc <__sinit+0x68>)
 800ae80:	4a13      	ldr	r2, [pc, #76]	; (800aed0 <__sinit+0x6c>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae86:	42a3      	cmp	r3, r4
 800ae88:	bf04      	itt	eq
 800ae8a:	2301      	moveq	r3, #1
 800ae8c:	61a3      	streq	r3, [r4, #24]
 800ae8e:	4620      	mov	r0, r4
 800ae90:	f000 f820 	bl	800aed4 <__sfp>
 800ae94:	6060      	str	r0, [r4, #4]
 800ae96:	4620      	mov	r0, r4
 800ae98:	f000 f81c 	bl	800aed4 <__sfp>
 800ae9c:	60a0      	str	r0, [r4, #8]
 800ae9e:	4620      	mov	r0, r4
 800aea0:	f000 f818 	bl	800aed4 <__sfp>
 800aea4:	2200      	movs	r2, #0
 800aea6:	60e0      	str	r0, [r4, #12]
 800aea8:	2104      	movs	r1, #4
 800aeaa:	6860      	ldr	r0, [r4, #4]
 800aeac:	f7ff ff82 	bl	800adb4 <std>
 800aeb0:	68a0      	ldr	r0, [r4, #8]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	2109      	movs	r1, #9
 800aeb6:	f7ff ff7d 	bl	800adb4 <std>
 800aeba:	68e0      	ldr	r0, [r4, #12]
 800aebc:	2202      	movs	r2, #2
 800aebe:	2112      	movs	r1, #18
 800aec0:	f7ff ff78 	bl	800adb4 <std>
 800aec4:	2301      	movs	r3, #1
 800aec6:	61a3      	str	r3, [r4, #24]
 800aec8:	e7d2      	b.n	800ae70 <__sinit+0xc>
 800aeca:	bf00      	nop
 800aecc:	0800b3ec 	.word	0x0800b3ec
 800aed0:	0800adfd 	.word	0x0800adfd

0800aed4 <__sfp>:
 800aed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed6:	4607      	mov	r7, r0
 800aed8:	f7ff ffac 	bl	800ae34 <__sfp_lock_acquire>
 800aedc:	4b1e      	ldr	r3, [pc, #120]	; (800af58 <__sfp+0x84>)
 800aede:	681e      	ldr	r6, [r3, #0]
 800aee0:	69b3      	ldr	r3, [r6, #24]
 800aee2:	b913      	cbnz	r3, 800aeea <__sfp+0x16>
 800aee4:	4630      	mov	r0, r6
 800aee6:	f7ff ffbd 	bl	800ae64 <__sinit>
 800aeea:	3648      	adds	r6, #72	; 0x48
 800aeec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aef0:	3b01      	subs	r3, #1
 800aef2:	d503      	bpl.n	800aefc <__sfp+0x28>
 800aef4:	6833      	ldr	r3, [r6, #0]
 800aef6:	b30b      	cbz	r3, 800af3c <__sfp+0x68>
 800aef8:	6836      	ldr	r6, [r6, #0]
 800aefa:	e7f7      	b.n	800aeec <__sfp+0x18>
 800aefc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af00:	b9d5      	cbnz	r5, 800af38 <__sfp+0x64>
 800af02:	4b16      	ldr	r3, [pc, #88]	; (800af5c <__sfp+0x88>)
 800af04:	60e3      	str	r3, [r4, #12]
 800af06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af0a:	6665      	str	r5, [r4, #100]	; 0x64
 800af0c:	f000 f847 	bl	800af9e <__retarget_lock_init_recursive>
 800af10:	f7ff ff96 	bl	800ae40 <__sfp_lock_release>
 800af14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af1c:	6025      	str	r5, [r4, #0]
 800af1e:	61a5      	str	r5, [r4, #24]
 800af20:	2208      	movs	r2, #8
 800af22:	4629      	mov	r1, r5
 800af24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af28:	f7fd fa80 	bl	800842c <memset>
 800af2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af34:	4620      	mov	r0, r4
 800af36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af38:	3468      	adds	r4, #104	; 0x68
 800af3a:	e7d9      	b.n	800aef0 <__sfp+0x1c>
 800af3c:	2104      	movs	r1, #4
 800af3e:	4638      	mov	r0, r7
 800af40:	f7ff ff62 	bl	800ae08 <__sfmoreglue>
 800af44:	4604      	mov	r4, r0
 800af46:	6030      	str	r0, [r6, #0]
 800af48:	2800      	cmp	r0, #0
 800af4a:	d1d5      	bne.n	800aef8 <__sfp+0x24>
 800af4c:	f7ff ff78 	bl	800ae40 <__sfp_lock_release>
 800af50:	230c      	movs	r3, #12
 800af52:	603b      	str	r3, [r7, #0]
 800af54:	e7ee      	b.n	800af34 <__sfp+0x60>
 800af56:	bf00      	nop
 800af58:	0800b3ec 	.word	0x0800b3ec
 800af5c:	ffff0001 	.word	0xffff0001

0800af60 <_fwalk_reent>:
 800af60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af64:	4606      	mov	r6, r0
 800af66:	4688      	mov	r8, r1
 800af68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af6c:	2700      	movs	r7, #0
 800af6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af72:	f1b9 0901 	subs.w	r9, r9, #1
 800af76:	d505      	bpl.n	800af84 <_fwalk_reent+0x24>
 800af78:	6824      	ldr	r4, [r4, #0]
 800af7a:	2c00      	cmp	r4, #0
 800af7c:	d1f7      	bne.n	800af6e <_fwalk_reent+0xe>
 800af7e:	4638      	mov	r0, r7
 800af80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af84:	89ab      	ldrh	r3, [r5, #12]
 800af86:	2b01      	cmp	r3, #1
 800af88:	d907      	bls.n	800af9a <_fwalk_reent+0x3a>
 800af8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af8e:	3301      	adds	r3, #1
 800af90:	d003      	beq.n	800af9a <_fwalk_reent+0x3a>
 800af92:	4629      	mov	r1, r5
 800af94:	4630      	mov	r0, r6
 800af96:	47c0      	blx	r8
 800af98:	4307      	orrs	r7, r0
 800af9a:	3568      	adds	r5, #104	; 0x68
 800af9c:	e7e9      	b.n	800af72 <_fwalk_reent+0x12>

0800af9e <__retarget_lock_init_recursive>:
 800af9e:	4770      	bx	lr

0800afa0 <__retarget_lock_acquire_recursive>:
 800afa0:	4770      	bx	lr

0800afa2 <__retarget_lock_release_recursive>:
 800afa2:	4770      	bx	lr

0800afa4 <__swhatbuf_r>:
 800afa4:	b570      	push	{r4, r5, r6, lr}
 800afa6:	460e      	mov	r6, r1
 800afa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afac:	2900      	cmp	r1, #0
 800afae:	b096      	sub	sp, #88	; 0x58
 800afb0:	4614      	mov	r4, r2
 800afb2:	461d      	mov	r5, r3
 800afb4:	da08      	bge.n	800afc8 <__swhatbuf_r+0x24>
 800afb6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800afba:	2200      	movs	r2, #0
 800afbc:	602a      	str	r2, [r5, #0]
 800afbe:	061a      	lsls	r2, r3, #24
 800afc0:	d410      	bmi.n	800afe4 <__swhatbuf_r+0x40>
 800afc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afc6:	e00e      	b.n	800afe6 <__swhatbuf_r+0x42>
 800afc8:	466a      	mov	r2, sp
 800afca:	f000 f903 	bl	800b1d4 <_fstat_r>
 800afce:	2800      	cmp	r0, #0
 800afd0:	dbf1      	blt.n	800afb6 <__swhatbuf_r+0x12>
 800afd2:	9a01      	ldr	r2, [sp, #4]
 800afd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800afd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800afdc:	425a      	negs	r2, r3
 800afde:	415a      	adcs	r2, r3
 800afe0:	602a      	str	r2, [r5, #0]
 800afe2:	e7ee      	b.n	800afc2 <__swhatbuf_r+0x1e>
 800afe4:	2340      	movs	r3, #64	; 0x40
 800afe6:	2000      	movs	r0, #0
 800afe8:	6023      	str	r3, [r4, #0]
 800afea:	b016      	add	sp, #88	; 0x58
 800afec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aff0 <__smakebuf_r>:
 800aff0:	898b      	ldrh	r3, [r1, #12]
 800aff2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aff4:	079d      	lsls	r5, r3, #30
 800aff6:	4606      	mov	r6, r0
 800aff8:	460c      	mov	r4, r1
 800affa:	d507      	bpl.n	800b00c <__smakebuf_r+0x1c>
 800affc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b000:	6023      	str	r3, [r4, #0]
 800b002:	6123      	str	r3, [r4, #16]
 800b004:	2301      	movs	r3, #1
 800b006:	6163      	str	r3, [r4, #20]
 800b008:	b002      	add	sp, #8
 800b00a:	bd70      	pop	{r4, r5, r6, pc}
 800b00c:	ab01      	add	r3, sp, #4
 800b00e:	466a      	mov	r2, sp
 800b010:	f7ff ffc8 	bl	800afa4 <__swhatbuf_r>
 800b014:	9900      	ldr	r1, [sp, #0]
 800b016:	4605      	mov	r5, r0
 800b018:	4630      	mov	r0, r6
 800b01a:	f7ff f963 	bl	800a2e4 <_malloc_r>
 800b01e:	b948      	cbnz	r0, 800b034 <__smakebuf_r+0x44>
 800b020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b024:	059a      	lsls	r2, r3, #22
 800b026:	d4ef      	bmi.n	800b008 <__smakebuf_r+0x18>
 800b028:	f023 0303 	bic.w	r3, r3, #3
 800b02c:	f043 0302 	orr.w	r3, r3, #2
 800b030:	81a3      	strh	r3, [r4, #12]
 800b032:	e7e3      	b.n	800affc <__smakebuf_r+0xc>
 800b034:	4b0d      	ldr	r3, [pc, #52]	; (800b06c <__smakebuf_r+0x7c>)
 800b036:	62b3      	str	r3, [r6, #40]	; 0x28
 800b038:	89a3      	ldrh	r3, [r4, #12]
 800b03a:	6020      	str	r0, [r4, #0]
 800b03c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b040:	81a3      	strh	r3, [r4, #12]
 800b042:	9b00      	ldr	r3, [sp, #0]
 800b044:	6163      	str	r3, [r4, #20]
 800b046:	9b01      	ldr	r3, [sp, #4]
 800b048:	6120      	str	r0, [r4, #16]
 800b04a:	b15b      	cbz	r3, 800b064 <__smakebuf_r+0x74>
 800b04c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b050:	4630      	mov	r0, r6
 800b052:	f000 f8d1 	bl	800b1f8 <_isatty_r>
 800b056:	b128      	cbz	r0, 800b064 <__smakebuf_r+0x74>
 800b058:	89a3      	ldrh	r3, [r4, #12]
 800b05a:	f023 0303 	bic.w	r3, r3, #3
 800b05e:	f043 0301 	orr.w	r3, r3, #1
 800b062:	81a3      	strh	r3, [r4, #12]
 800b064:	89a0      	ldrh	r0, [r4, #12]
 800b066:	4305      	orrs	r5, r0
 800b068:	81a5      	strh	r5, [r4, #12]
 800b06a:	e7cd      	b.n	800b008 <__smakebuf_r+0x18>
 800b06c:	0800adfd 	.word	0x0800adfd

0800b070 <_malloc_usable_size_r>:
 800b070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b074:	1f18      	subs	r0, r3, #4
 800b076:	2b00      	cmp	r3, #0
 800b078:	bfbc      	itt	lt
 800b07a:	580b      	ldrlt	r3, [r1, r0]
 800b07c:	18c0      	addlt	r0, r0, r3
 800b07e:	4770      	bx	lr

0800b080 <_raise_r>:
 800b080:	291f      	cmp	r1, #31
 800b082:	b538      	push	{r3, r4, r5, lr}
 800b084:	4604      	mov	r4, r0
 800b086:	460d      	mov	r5, r1
 800b088:	d904      	bls.n	800b094 <_raise_r+0x14>
 800b08a:	2316      	movs	r3, #22
 800b08c:	6003      	str	r3, [r0, #0]
 800b08e:	f04f 30ff 	mov.w	r0, #4294967295
 800b092:	bd38      	pop	{r3, r4, r5, pc}
 800b094:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b096:	b112      	cbz	r2, 800b09e <_raise_r+0x1e>
 800b098:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b09c:	b94b      	cbnz	r3, 800b0b2 <_raise_r+0x32>
 800b09e:	4620      	mov	r0, r4
 800b0a0:	f000 f830 	bl	800b104 <_getpid_r>
 800b0a4:	462a      	mov	r2, r5
 800b0a6:	4601      	mov	r1, r0
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0ae:	f000 b817 	b.w	800b0e0 <_kill_r>
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d00a      	beq.n	800b0cc <_raise_r+0x4c>
 800b0b6:	1c59      	adds	r1, r3, #1
 800b0b8:	d103      	bne.n	800b0c2 <_raise_r+0x42>
 800b0ba:	2316      	movs	r3, #22
 800b0bc:	6003      	str	r3, [r0, #0]
 800b0be:	2001      	movs	r0, #1
 800b0c0:	e7e7      	b.n	800b092 <_raise_r+0x12>
 800b0c2:	2400      	movs	r4, #0
 800b0c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	4798      	blx	r3
 800b0cc:	2000      	movs	r0, #0
 800b0ce:	e7e0      	b.n	800b092 <_raise_r+0x12>

0800b0d0 <raise>:
 800b0d0:	4b02      	ldr	r3, [pc, #8]	; (800b0dc <raise+0xc>)
 800b0d2:	4601      	mov	r1, r0
 800b0d4:	6818      	ldr	r0, [r3, #0]
 800b0d6:	f7ff bfd3 	b.w	800b080 <_raise_r>
 800b0da:	bf00      	nop
 800b0dc:	200004c8 	.word	0x200004c8

0800b0e0 <_kill_r>:
 800b0e0:	b538      	push	{r3, r4, r5, lr}
 800b0e2:	4d07      	ldr	r5, [pc, #28]	; (800b100 <_kill_r+0x20>)
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	4604      	mov	r4, r0
 800b0e8:	4608      	mov	r0, r1
 800b0ea:	4611      	mov	r1, r2
 800b0ec:	602b      	str	r3, [r5, #0]
 800b0ee:	f7f5 ffd9 	bl	80010a4 <_kill>
 800b0f2:	1c43      	adds	r3, r0, #1
 800b0f4:	d102      	bne.n	800b0fc <_kill_r+0x1c>
 800b0f6:	682b      	ldr	r3, [r5, #0]
 800b0f8:	b103      	cbz	r3, 800b0fc <_kill_r+0x1c>
 800b0fa:	6023      	str	r3, [r4, #0]
 800b0fc:	bd38      	pop	{r3, r4, r5, pc}
 800b0fe:	bf00      	nop
 800b100:	20000eac 	.word	0x20000eac

0800b104 <_getpid_r>:
 800b104:	f7f5 bfc6 	b.w	8001094 <_getpid>

0800b108 <__sread>:
 800b108:	b510      	push	{r4, lr}
 800b10a:	460c      	mov	r4, r1
 800b10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b110:	f000 f894 	bl	800b23c <_read_r>
 800b114:	2800      	cmp	r0, #0
 800b116:	bfab      	itete	ge
 800b118:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b11a:	89a3      	ldrhlt	r3, [r4, #12]
 800b11c:	181b      	addge	r3, r3, r0
 800b11e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b122:	bfac      	ite	ge
 800b124:	6563      	strge	r3, [r4, #84]	; 0x54
 800b126:	81a3      	strhlt	r3, [r4, #12]
 800b128:	bd10      	pop	{r4, pc}

0800b12a <__swrite>:
 800b12a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b12e:	461f      	mov	r7, r3
 800b130:	898b      	ldrh	r3, [r1, #12]
 800b132:	05db      	lsls	r3, r3, #23
 800b134:	4605      	mov	r5, r0
 800b136:	460c      	mov	r4, r1
 800b138:	4616      	mov	r6, r2
 800b13a:	d505      	bpl.n	800b148 <__swrite+0x1e>
 800b13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b140:	2302      	movs	r3, #2
 800b142:	2200      	movs	r2, #0
 800b144:	f000 f868 	bl	800b218 <_lseek_r>
 800b148:	89a3      	ldrh	r3, [r4, #12]
 800b14a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b14e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b152:	81a3      	strh	r3, [r4, #12]
 800b154:	4632      	mov	r2, r6
 800b156:	463b      	mov	r3, r7
 800b158:	4628      	mov	r0, r5
 800b15a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b15e:	f000 b817 	b.w	800b190 <_write_r>

0800b162 <__sseek>:
 800b162:	b510      	push	{r4, lr}
 800b164:	460c      	mov	r4, r1
 800b166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b16a:	f000 f855 	bl	800b218 <_lseek_r>
 800b16e:	1c43      	adds	r3, r0, #1
 800b170:	89a3      	ldrh	r3, [r4, #12]
 800b172:	bf15      	itete	ne
 800b174:	6560      	strne	r0, [r4, #84]	; 0x54
 800b176:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b17a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b17e:	81a3      	strheq	r3, [r4, #12]
 800b180:	bf18      	it	ne
 800b182:	81a3      	strhne	r3, [r4, #12]
 800b184:	bd10      	pop	{r4, pc}

0800b186 <__sclose>:
 800b186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b18a:	f000 b813 	b.w	800b1b4 <_close_r>
	...

0800b190 <_write_r>:
 800b190:	b538      	push	{r3, r4, r5, lr}
 800b192:	4d07      	ldr	r5, [pc, #28]	; (800b1b0 <_write_r+0x20>)
 800b194:	4604      	mov	r4, r0
 800b196:	4608      	mov	r0, r1
 800b198:	4611      	mov	r1, r2
 800b19a:	2200      	movs	r2, #0
 800b19c:	602a      	str	r2, [r5, #0]
 800b19e:	461a      	mov	r2, r3
 800b1a0:	f7f5 ffb7 	bl	8001112 <_write>
 800b1a4:	1c43      	adds	r3, r0, #1
 800b1a6:	d102      	bne.n	800b1ae <_write_r+0x1e>
 800b1a8:	682b      	ldr	r3, [r5, #0]
 800b1aa:	b103      	cbz	r3, 800b1ae <_write_r+0x1e>
 800b1ac:	6023      	str	r3, [r4, #0]
 800b1ae:	bd38      	pop	{r3, r4, r5, pc}
 800b1b0:	20000eac 	.word	0x20000eac

0800b1b4 <_close_r>:
 800b1b4:	b538      	push	{r3, r4, r5, lr}
 800b1b6:	4d06      	ldr	r5, [pc, #24]	; (800b1d0 <_close_r+0x1c>)
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	4608      	mov	r0, r1
 800b1be:	602b      	str	r3, [r5, #0]
 800b1c0:	f7f5 ffc3 	bl	800114a <_close>
 800b1c4:	1c43      	adds	r3, r0, #1
 800b1c6:	d102      	bne.n	800b1ce <_close_r+0x1a>
 800b1c8:	682b      	ldr	r3, [r5, #0]
 800b1ca:	b103      	cbz	r3, 800b1ce <_close_r+0x1a>
 800b1cc:	6023      	str	r3, [r4, #0]
 800b1ce:	bd38      	pop	{r3, r4, r5, pc}
 800b1d0:	20000eac 	.word	0x20000eac

0800b1d4 <_fstat_r>:
 800b1d4:	b538      	push	{r3, r4, r5, lr}
 800b1d6:	4d07      	ldr	r5, [pc, #28]	; (800b1f4 <_fstat_r+0x20>)
 800b1d8:	2300      	movs	r3, #0
 800b1da:	4604      	mov	r4, r0
 800b1dc:	4608      	mov	r0, r1
 800b1de:	4611      	mov	r1, r2
 800b1e0:	602b      	str	r3, [r5, #0]
 800b1e2:	f7f5 ffbe 	bl	8001162 <_fstat>
 800b1e6:	1c43      	adds	r3, r0, #1
 800b1e8:	d102      	bne.n	800b1f0 <_fstat_r+0x1c>
 800b1ea:	682b      	ldr	r3, [r5, #0]
 800b1ec:	b103      	cbz	r3, 800b1f0 <_fstat_r+0x1c>
 800b1ee:	6023      	str	r3, [r4, #0]
 800b1f0:	bd38      	pop	{r3, r4, r5, pc}
 800b1f2:	bf00      	nop
 800b1f4:	20000eac 	.word	0x20000eac

0800b1f8 <_isatty_r>:
 800b1f8:	b538      	push	{r3, r4, r5, lr}
 800b1fa:	4d06      	ldr	r5, [pc, #24]	; (800b214 <_isatty_r+0x1c>)
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	4604      	mov	r4, r0
 800b200:	4608      	mov	r0, r1
 800b202:	602b      	str	r3, [r5, #0]
 800b204:	f7f5 ffbd 	bl	8001182 <_isatty>
 800b208:	1c43      	adds	r3, r0, #1
 800b20a:	d102      	bne.n	800b212 <_isatty_r+0x1a>
 800b20c:	682b      	ldr	r3, [r5, #0]
 800b20e:	b103      	cbz	r3, 800b212 <_isatty_r+0x1a>
 800b210:	6023      	str	r3, [r4, #0]
 800b212:	bd38      	pop	{r3, r4, r5, pc}
 800b214:	20000eac 	.word	0x20000eac

0800b218 <_lseek_r>:
 800b218:	b538      	push	{r3, r4, r5, lr}
 800b21a:	4d07      	ldr	r5, [pc, #28]	; (800b238 <_lseek_r+0x20>)
 800b21c:	4604      	mov	r4, r0
 800b21e:	4608      	mov	r0, r1
 800b220:	4611      	mov	r1, r2
 800b222:	2200      	movs	r2, #0
 800b224:	602a      	str	r2, [r5, #0]
 800b226:	461a      	mov	r2, r3
 800b228:	f7f5 ffb6 	bl	8001198 <_lseek>
 800b22c:	1c43      	adds	r3, r0, #1
 800b22e:	d102      	bne.n	800b236 <_lseek_r+0x1e>
 800b230:	682b      	ldr	r3, [r5, #0]
 800b232:	b103      	cbz	r3, 800b236 <_lseek_r+0x1e>
 800b234:	6023      	str	r3, [r4, #0]
 800b236:	bd38      	pop	{r3, r4, r5, pc}
 800b238:	20000eac 	.word	0x20000eac

0800b23c <_read_r>:
 800b23c:	b538      	push	{r3, r4, r5, lr}
 800b23e:	4d07      	ldr	r5, [pc, #28]	; (800b25c <_read_r+0x20>)
 800b240:	4604      	mov	r4, r0
 800b242:	4608      	mov	r0, r1
 800b244:	4611      	mov	r1, r2
 800b246:	2200      	movs	r2, #0
 800b248:	602a      	str	r2, [r5, #0]
 800b24a:	461a      	mov	r2, r3
 800b24c:	f7f5 ff44 	bl	80010d8 <_read>
 800b250:	1c43      	adds	r3, r0, #1
 800b252:	d102      	bne.n	800b25a <_read_r+0x1e>
 800b254:	682b      	ldr	r3, [r5, #0]
 800b256:	b103      	cbz	r3, 800b25a <_read_r+0x1e>
 800b258:	6023      	str	r3, [r4, #0]
 800b25a:	bd38      	pop	{r3, r4, r5, pc}
 800b25c:	20000eac 	.word	0x20000eac

0800b260 <_init>:
 800b260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b262:	bf00      	nop
 800b264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b266:	bc08      	pop	{r3}
 800b268:	469e      	mov	lr, r3
 800b26a:	4770      	bx	lr

0800b26c <_fini>:
 800b26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26e:	bf00      	nop
 800b270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b272:	bc08      	pop	{r3}
 800b274:	469e      	mov	lr, r3
 800b276:	4770      	bx	lr
