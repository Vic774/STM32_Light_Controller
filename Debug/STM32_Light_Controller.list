
STM32_Light_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae48  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800b048  0800b048  0001b048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b59c  0800b59c  00020698  2**0
                  CONTENTS
  4 .ARM          00000008  0800b59c  0800b59c  0001b59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5a4  0800b5a4  00020698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5a4  0800b5a4  0001b5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5a8  0800b5a8  0001b5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000698  20000000  0800b5ac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000814  20000698  0800bc44  00020698  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000eac  0800bc44  00020eac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020698  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fc93  00000000  00000000  000206c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000432a  00000000  00000000  00040359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e0  00000000  00000000  00044688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c0  00000000  00000000  00045e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c625  00000000  00000000  00047428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020a82  00000000  00000000  00073a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101b6d  00000000  00000000  000944cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019603c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072d4  00000000  00000000  0019608c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000698 	.word	0x20000698
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b030 	.word	0x0800b030

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000069c 	.word	0x2000069c
 800023c:	0800b030 	.word	0x0800b030

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08c      	sub	sp, #48	; 0x30
 80005f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	4b90      	ldr	r3, [pc, #576]	; (800084c <MX_GPIO_Init+0x258>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a8f      	ldr	r2, [pc, #572]	; (800084c <MX_GPIO_Init+0x258>)
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b8d      	ldr	r3, [pc, #564]	; (800084c <MX_GPIO_Init+0x258>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0304 	and.w	r3, r3, #4
 800061e:	61bb      	str	r3, [r7, #24]
 8000620:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000622:	4b8a      	ldr	r3, [pc, #552]	; (800084c <MX_GPIO_Init+0x258>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a89      	ldr	r2, [pc, #548]	; (800084c <MX_GPIO_Init+0x258>)
 8000628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b87      	ldr	r3, [pc, #540]	; (800084c <MX_GPIO_Init+0x258>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b84      	ldr	r3, [pc, #528]	; (800084c <MX_GPIO_Init+0x258>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a83      	ldr	r2, [pc, #524]	; (800084c <MX_GPIO_Init+0x258>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b81      	ldr	r3, [pc, #516]	; (800084c <MX_GPIO_Init+0x258>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	4b7e      	ldr	r3, [pc, #504]	; (800084c <MX_GPIO_Init+0x258>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a7d      	ldr	r2, [pc, #500]	; (800084c <MX_GPIO_Init+0x258>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b7b      	ldr	r3, [pc, #492]	; (800084c <MX_GPIO_Init+0x258>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800066a:	4b78      	ldr	r3, [pc, #480]	; (800084c <MX_GPIO_Init+0x258>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a77      	ldr	r2, [pc, #476]	; (800084c <MX_GPIO_Init+0x258>)
 8000670:	f043 0320 	orr.w	r3, r3, #32
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b75      	ldr	r3, [pc, #468]	; (800084c <MX_GPIO_Init+0x258>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0320 	and.w	r3, r3, #32
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000682:	4b72      	ldr	r3, [pc, #456]	; (800084c <MX_GPIO_Init+0x258>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a71      	ldr	r2, [pc, #452]	; (800084c <MX_GPIO_Init+0x258>)
 8000688:	f043 0308 	orr.w	r3, r3, #8
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b6f      	ldr	r3, [pc, #444]	; (800084c <MX_GPIO_Init+0x258>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0308 	and.w	r3, r3, #8
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800069a:	4b6c      	ldr	r3, [pc, #432]	; (800084c <MX_GPIO_Init+0x258>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a6b      	ldr	r2, [pc, #428]	; (800084c <MX_GPIO_Init+0x258>)
 80006a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b69      	ldr	r3, [pc, #420]	; (800084c <MX_GPIO_Init+0x258>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	21e0      	movs	r1, #224	; 0xe0
 80006b6:	4866      	ldr	r0, [pc, #408]	; (8000850 <MX_GPIO_Init+0x25c>)
 80006b8:	f002 fb84 	bl	8002dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f244 0181 	movw	r1, #16513	; 0x4081
 80006c2:	4864      	ldr	r0, [pc, #400]	; (8000854 <MX_GPIO_Init+0x260>)
 80006c4:	f002 fb7e 	bl	8002dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ce:	4862      	ldr	r0, [pc, #392]	; (8000858 <MX_GPIO_Init+0x264>)
 80006d0:	f002 fb78 	bl	8002dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_D4_Pin|LCD_E_Pin, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80006da:	4860      	ldr	r0, [pc, #384]	; (800085c <MX_GPIO_Init+0x268>)
 80006dc:	f002 fb72 	bl	8002dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2140      	movs	r1, #64	; 0x40
 80006e4:	485e      	ldr	r0, [pc, #376]	; (8000860 <MX_GPIO_Init+0x26c>)
 80006e6:	f002 fb6d 	bl	8002dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4619      	mov	r1, r3
 8000700:	4858      	ldr	r0, [pc, #352]	; (8000864 <MX_GPIO_Init+0x270>)
 8000702:	f002 f99b 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000706:	2332      	movs	r3, #50	; 0x32
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070a:	2302      	movs	r3, #2
 800070c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000716:	230b      	movs	r3, #11
 8000718:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	4619      	mov	r1, r3
 8000720:	4850      	ldr	r0, [pc, #320]	; (8000864 <MX_GPIO_Init+0x270>)
 8000722:	f002 f98b 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8000726:	2306      	movs	r3, #6
 8000728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072a:	2302      	movs	r3, #2
 800072c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000732:	2303      	movs	r3, #3
 8000734:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000736:	230b      	movs	r3, #11
 8000738:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	4619      	mov	r1, r3
 8000740:	4843      	ldr	r0, [pc, #268]	; (8000850 <MX_GPIO_Init+0x25c>)
 8000742:	f002 f97b 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin;
 8000746:	23e0      	movs	r3, #224	; 0xe0
 8000748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	4619      	mov	r1, r3
 800075c:	483c      	ldr	r0, [pc, #240]	; (8000850 <MX_GPIO_Init+0x25c>)
 800075e:	f002 f96d 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000762:	f244 0381 	movw	r3, #16513	; 0x4081
 8000766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	4836      	ldr	r0, [pc, #216]	; (8000854 <MX_GPIO_Init+0x260>)
 800077c:	f002 f95e 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 8000780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	482f      	ldr	r0, [pc, #188]	; (8000858 <MX_GPIO_Init+0x264>)
 800079a:	f002 f94f 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800079e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ac:	2303      	movs	r3, #3
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b0:	230b      	movs	r3, #11
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	4826      	ldr	r0, [pc, #152]	; (8000854 <MX_GPIO_Init+0x260>)
 80007bc:	f002 f93e 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_E_Pin;
 80007c0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	4820      	ldr	r0, [pc, #128]	; (800085c <MX_GPIO_Init+0x268>)
 80007da:	f002 f92f 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007de:	2340      	movs	r3, #64	; 0x40
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	481a      	ldr	r0, [pc, #104]	; (8000860 <MX_GPIO_Init+0x26c>)
 80007f6:	f002 f921 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007fa:	2380      	movs	r3, #128	; 0x80
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4814      	ldr	r0, [pc, #80]	; (8000860 <MX_GPIO_Init+0x26c>)
 800080e:	f002 f915 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000812:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000818:	2302      	movs	r3, #2
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000820:	2303      	movs	r3, #3
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000824:	230b      	movs	r3, #11
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4619      	mov	r1, r3
 800082e:	480c      	ldr	r0, [pc, #48]	; (8000860 <MX_GPIO_Init+0x26c>)
 8000830:	f002 f904 	bl	8002a3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	2028      	movs	r0, #40	; 0x28
 800083a:	f002 f836 	bl	80028aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800083e:	2028      	movs	r0, #40	; 0x28
 8000840:	f002 f84f 	bl	80028e2 <HAL_NVIC_EnableIRQ>

}
 8000844:	bf00      	nop
 8000846:	3730      	adds	r7, #48	; 0x30
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40020000 	.word	0x40020000
 8000854:	40020400 	.word	0x40020400
 8000858:	40021400 	.word	0x40021400
 800085c:	40020c00 	.word	0x40020c00
 8000860:	40021800 	.word	0x40021800
 8000864:	40020800 	.word	0x40020800

08000868 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_I2C1_Init+0x74>)
 800086e:	4a1c      	ldr	r2, [pc, #112]	; (80008e0 <MX_I2C1_Init+0x78>)
 8000870:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_I2C1_Init+0x74>)
 8000874:	4a1b      	ldr	r2, [pc, #108]	; (80008e4 <MX_I2C1_Init+0x7c>)
 8000876:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_I2C1_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_I2C1_Init+0x74>)
 8000880:	2201      	movs	r2, #1
 8000882:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_I2C1_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_I2C1_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_I2C1_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_I2C1_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_I2C1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008a2:	480e      	ldr	r0, [pc, #56]	; (80008dc <MX_I2C1_Init+0x74>)
 80008a4:	f002 fae6 	bl	8002e74 <HAL_I2C_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008ae:	f000 fad7 	bl	8000e60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008b2:	2100      	movs	r1, #0
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <MX_I2C1_Init+0x74>)
 80008b6:	f002 ffc3 	bl	8003840 <HAL_I2CEx_ConfigAnalogFilter>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008c0:	f000 face 	bl	8000e60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008c4:	2100      	movs	r1, #0
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_I2C1_Init+0x74>)
 80008c8:	f003 f805 	bl	80038d6 <HAL_I2CEx_ConfigDigitalFilter>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008d2:	f000 fac5 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200006b4 	.word	0x200006b4
 80008e0:	40005400 	.word	0x40005400
 80008e4:	20303e5d 	.word	0x20303e5d

080008e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b0ae      	sub	sp, #184	; 0xb8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2290      	movs	r2, #144	; 0x90
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f007 fc77 	bl	80081fc <memset>
  if(i2cHandle->Instance==I2C1)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a22      	ldr	r2, [pc, #136]	; (800099c <HAL_I2C_MspInit+0xb4>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d13c      	bne.n	8000992 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000918:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800091c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800091e:	2300      	movs	r3, #0
 8000920:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4618      	mov	r0, r3
 8000928:	f003 fe9e 	bl	8004668 <HAL_RCCEx_PeriphCLKConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000932:	f000 fa95 	bl	8000e60 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <HAL_I2C_MspInit+0xb8>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a19      	ldr	r2, [pc, #100]	; (80009a0 <HAL_I2C_MspInit+0xb8>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <HAL_I2C_MspInit+0xb8>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800094e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000952:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000956:	2312      	movs	r3, #18
 8000958:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000968:	2304      	movs	r3, #4
 800096a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000972:	4619      	mov	r1, r3
 8000974:	480b      	ldr	r0, [pc, #44]	; (80009a4 <HAL_I2C_MspInit+0xbc>)
 8000976:	f002 f861 	bl	8002a3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_I2C_MspInit+0xb8>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_I2C_MspInit+0xb8>)
 8000980:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_I2C_MspInit+0xb8>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000992:	bf00      	nop
 8000994:	37b8      	adds	r7, #184	; 0xb8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40005400 	.word	0x40005400
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020400 	.word	0x40020400

080009a8 <send_string>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void send_string(char* s)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)s, strlen(s));
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff fc45 	bl	8000240 <strlen>
 80009b6:	4603      	mov	r3, r0
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	461a      	mov	r2, r3
 80009bc:	6879      	ldr	r1, [r7, #4]
 80009be:	4803      	ldr	r0, [pc, #12]	; (80009cc <send_string+0x24>)
 80009c0:	f005 fda0 	bl	8006504 <HAL_UART_Transmit_IT>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000904 	.word	0x20000904

080009d0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af02      	add	r7, sp, #8
 80009d6:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM3)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a40      	ldr	r2, [pc, #256]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d13e      	bne.n	8000a60 <HAL_TIM_PeriodElapsedCallback+0x90>
  {
	  static int time_ms2 = 0;

	  MENU_ROUTINE(&hmenu);
 80009e2:	4840      	ldr	r0, [pc, #256]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80009e4:	f001 facc 	bl	8001f80 <MENU_ROUTINE>

	  if(time_ms2 % 1000 == 0)
 80009e8:	4b3f      	ldr	r3, [pc, #252]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b3f      	ldr	r3, [pc, #252]	; (8000aec <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80009ee:	fb83 1302 	smull	r1, r3, r3, r2
 80009f2:	1199      	asrs	r1, r3, #6
 80009f4:	17d3      	asrs	r3, r2, #31
 80009f6:	1acb      	subs	r3, r1, r3
 80009f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009fc:	fb01 f303 	mul.w	r3, r1, r3
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d11d      	bne.n	8000a42 <HAL_TIM_PeriodElapsedCallback+0x72>
	  {

		  sprintf(send_buffer, "*****\n\nLight set value: %4d [lx]\nCurrent value: %4d [lx]\nController Signal: %2.1f [%%]\n\n", (int)LightSetpoint, (int)Light, PID_Out/10);
 8000a06:	4b3a      	ldr	r3, [pc, #232]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000a08:	ed93 7b00 	vldr	d7, [r3]
 8000a0c:	eefd 4bc7 	vcvt.s32.f64	s9, d7
 8000a10:	4b38      	ldr	r3, [pc, #224]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000a12:	ed93 7b00 	vldr	d7, [r3]
 8000a16:	eebd 4bc7 	vcvt.s32.f64	s8, d7
 8000a1a:	4b37      	ldr	r3, [pc, #220]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000a1c:	ed93 6b00 	vldr	d6, [r3]
 8000a20:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8000a24:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a28:	ed8d 7b00 	vstr	d7, [sp]
 8000a2c:	ee14 3a10 	vmov	r3, s8
 8000a30:	ee14 2a90 	vmov	r2, s9
 8000a34:	4931      	ldr	r1, [pc, #196]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000a36:	4832      	ldr	r0, [pc, #200]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000a38:	f008 f860 	bl	8008afc <siprintf>
		  send_string(send_buffer);
 8000a3c:	4830      	ldr	r0, [pc, #192]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000a3e:	f7ff ffb3 	bl	80009a8 <send_string>
	  }

	  time_ms2 += 500;
 8000a42:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000a4a:	4a27      	ldr	r2, [pc, #156]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000a4c:	6013      	str	r3, [r2, #0]
	  if(time_ms2 == 3000)
 8000a4e:	4b26      	ldr	r3, [pc, #152]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d102      	bne.n	8000a60 <HAL_TIM_PeriodElapsedCallback+0x90>
	  {
		  time_ms2 = 0;
 8000a5a:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
	  }
  }

  if (htim->Instance == TIM6)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a27      	ldr	r2, [pc, #156]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d136      	bne.n	8000ad8 <HAL_TIM_PeriodElapsedCallback+0x108>
    {
	  static int time_ms = 0;

	  if(time_ms % 20 == 0)
 8000a6a:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000a6c:	6819      	ldr	r1, [r3, #0]
 8000a6e:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000a70:	fb83 2301 	smull	r2, r3, r3, r1
 8000a74:	10da      	asrs	r2, r3, #3
 8000a76:	17cb      	asrs	r3, r1, #31
 8000a78:	1ad2      	subs	r2, r2, r3
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	4413      	add	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	1aca      	subs	r2, r1, r3
 8000a84:	2a00      	cmp	r2, #0
 8000a86:	d11a      	bne.n	8000abe <HAL_TIM_PeriodElapsedCallback+0xee>
	  {
		  Light = BH1750_ReadLux(&hbh1750_1);
 8000a88:	4821      	ldr	r0, [pc, #132]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000a8a:	f000 fea1 	bl	80017d0 <BH1750_ReadLux>
 8000a8e:	eef0 7a40 	vmov.f32	s15, s0
 8000a92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a96:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000a98:	ed83 7b00 	vstr	d7, [r3]

		  PID_Compute(&Light_PID);
 8000a9c:	481d      	ldr	r0, [pc, #116]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000a9e:	f001 fb47 	bl	8002130 <PID_Compute>

		  int_pulse = (int)PID_Out;
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000aa4:	ed93 7b00 	vldr	d7, [r3]
 8000aa8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000aac:	ee17 2a90 	vmov	r2, s15
 8000ab0:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000ab2:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, int_pulse);
 8000ab4:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	635a      	str	r2, [r3, #52]	; 0x34
	  }

	  time_ms += 20;
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	3314      	adds	r3, #20
 8000ac4:	4a10      	ldr	r2, [pc, #64]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000ac6:	6013      	str	r3, [r2, #0]
	  if(time_ms == 1000)
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ad0:	d102      	bne.n	8000ad8 <HAL_TIM_PeriodElapsedCallback+0x108>
	  {
		  time_ms = 0;
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
	  }
    }


}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40000400 	.word	0x40000400
 8000ae4:	20000048 	.word	0x20000048
 8000ae8:	200007c8 	.word	0x200007c8
 8000aec:	10624dd3 	.word	0x10624dd3
 8000af0:	20000728 	.word	0x20000728
 8000af4:	20000718 	.word	0x20000718
 8000af8:	20000720 	.word	0x20000720
 8000afc:	0800b048 	.word	0x0800b048
 8000b00:	20000730 	.word	0x20000730
 8000b04:	40001000 	.word	0x40001000
 8000b08:	200007cc 	.word	0x200007cc
 8000b0c:	66666667 	.word	0x66666667
 8000b10:	20000004 	.word	0x20000004
 8000b14:	20000450 	.word	0x20000450
 8000b18:	20000714 	.word	0x20000714
 8000b1c:	20000820 	.word	0x20000820

08000b20 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08e      	sub	sp, #56	; 0x38
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	uint8_t Data[6];
	sprintf(Data, "%s",Received);
 8000b28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b2c:	4a4a      	ldr	r2, [pc, #296]	; (8000c58 <HAL_UART_RxCpltCallback+0x138>)
 8000b2e:	494b      	ldr	r1, [pc, #300]	; (8000c5c <HAL_UART_RxCpltCallback+0x13c>)
 8000b30:	4618      	mov	r0, r3
 8000b32:	f007 ffe3 	bl	8008afc <siprintf>
	if(Data[0]=='L')
 8000b36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b3a:	2b4c      	cmp	r3, #76	; 0x4c
 8000b3c:	d122      	bne.n	8000b84 <HAL_UART_RxCpltCallback+0x64>
	{
		int value = atoi(&Data[1]);
 8000b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b42:	3301      	adds	r3, #1
 8000b44:	4618      	mov	r0, r3
 8000b46:	f007 fb2b 	bl	80081a0 <atoi>
 8000b4a:	6378      	str	r0, [r7, #52]	; 0x34
		if(value >= 0 && value <=9999)
 8000b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	db18      	blt.n	8000b84 <HAL_UART_RxCpltCallback+0x64>
 8000b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b54:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	dc13      	bgt.n	8000b84 <HAL_UART_RxCpltCallback+0x64>
		{
			char send_buffer[32];
			LightSetpoint = value;
 8000b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b5e:	ee07 3a90 	vmov	s15, r3
 8000b62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b66:	4b3e      	ldr	r3, [pc, #248]	; (8000c60 <HAL_UART_RxCpltCallback+0x140>)
 8000b68:	ed83 7b00 	vstr	d7, [r3]
			sprintf(send_buffer, "Light: %4d [lx]\r\n", value);
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b72:	493c      	ldr	r1, [pc, #240]	; (8000c64 <HAL_UART_RxCpltCallback+0x144>)
 8000b74:	4618      	mov	r0, r3
 8000b76:	f007 ffc1 	bl	8008afc <siprintf>
			send_string(send_buffer);
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ff12 	bl	80009a8 <send_string>
		}
	}
	if(Data[0]=='M')
 8000b84:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b88:	2b4d      	cmp	r3, #77	; 0x4d
 8000b8a:	d15b      	bne.n	8000c44 <HAL_UART_RxCpltCallback+0x124>
	{
		if(!strncmp( Data, "MNext", 5 ) && hmenu.Item->Next != NULL)
 8000b8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b90:	2205      	movs	r2, #5
 8000b92:	4935      	ldr	r1, [pc, #212]	; (8000c68 <HAL_UART_RxCpltCallback+0x148>)
 8000b94:	4618      	mov	r0, r3
 8000b96:	f007 ffd1 	bl	8008b3c <strncmp>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d10c      	bne.n	8000bba <HAL_UART_RxCpltCallback+0x9a>
 8000ba0:	4b32      	ldr	r3, [pc, #200]	; (8000c6c <HAL_UART_RxCpltCallback+0x14c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d007      	beq.n	8000bba <HAL_UART_RxCpltCallback+0x9a>
		{
			hmenu.Item = hmenu.Item->Next;
 8000baa:	4b30      	ldr	r3, [pc, #192]	; (8000c6c <HAL_UART_RxCpltCallback+0x14c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb0:	4a2e      	ldr	r2, [pc, #184]	; (8000c6c <HAL_UART_RxCpltCallback+0x14c>)
 8000bb2:	6013      	str	r3, [r2, #0]
			hmenu.ItemChanged = 1;
 8000bb4:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <HAL_UART_RxCpltCallback+0x14c>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	711a      	strb	r2, [r3, #4]
		}
		if(!strncmp( Data, "MPrev", 5 ) && hmenu.Item->Prev != NULL)
 8000bba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bbe:	2205      	movs	r2, #5
 8000bc0:	492b      	ldr	r1, [pc, #172]	; (8000c70 <HAL_UART_RxCpltCallback+0x150>)
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f007 ffba 	bl	8008b3c <strncmp>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10c      	bne.n	8000be8 <HAL_UART_RxCpltCallback+0xc8>
 8000bce:	4b27      	ldr	r3, [pc, #156]	; (8000c6c <HAL_UART_RxCpltCallback+0x14c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d007      	beq.n	8000be8 <HAL_UART_RxCpltCallback+0xc8>
		{
			hmenu.Item = hmenu.Item->Prev;
 8000bd8:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <HAL_UART_RxCpltCallback+0x14c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bde:	4a23      	ldr	r2, [pc, #140]	; (8000c6c <HAL_UART_RxCpltCallback+0x14c>)
 8000be0:	6013      	str	r3, [r2, #0]
			hmenu.ItemChanged = 1;
 8000be2:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <HAL_UART_RxCpltCallback+0x14c>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	711a      	strb	r2, [r3, #4]
		}
		if(!strncmp( Data, "MChld", 5 ) && hmenu.Item->Child != NULL)
 8000be8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bec:	2205      	movs	r2, #5
 8000bee:	4921      	ldr	r1, [pc, #132]	; (8000c74 <HAL_UART_RxCpltCallback+0x154>)
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f007 ffa3 	bl	8008b3c <strncmp>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d10c      	bne.n	8000c16 <HAL_UART_RxCpltCallback+0xf6>
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <HAL_UART_RxCpltCallback+0x14c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d007      	beq.n	8000c16 <HAL_UART_RxCpltCallback+0xf6>
		{
			hmenu.Item = hmenu.Item->Child;
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <HAL_UART_RxCpltCallback+0x14c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c0c:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <HAL_UART_RxCpltCallback+0x14c>)
 8000c0e:	6013      	str	r3, [r2, #0]
			hmenu.ItemChanged = 1;
 8000c10:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <HAL_UART_RxCpltCallback+0x14c>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	711a      	strb	r2, [r3, #4]
		}
		if(!strncmp( Data, "MPrnt", 5 ) && hmenu.Item->Parent != NULL)
 8000c16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c1a:	2205      	movs	r2, #5
 8000c1c:	4916      	ldr	r1, [pc, #88]	; (8000c78 <HAL_UART_RxCpltCallback+0x158>)
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f007 ff8c 	bl	8008b3c <strncmp>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d10c      	bne.n	8000c44 <HAL_UART_RxCpltCallback+0x124>
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <HAL_UART_RxCpltCallback+0x14c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d007      	beq.n	8000c44 <HAL_UART_RxCpltCallback+0x124>
		{
			hmenu.Item = hmenu.Item->Parent;
 8000c34:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <HAL_UART_RxCpltCallback+0x14c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000c3a:	4a0c      	ldr	r2, [pc, #48]	; (8000c6c <HAL_UART_RxCpltCallback+0x14c>)
 8000c3c:	6013      	str	r3, [r2, #0]
			hmenu.ItemChanged = 1;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <HAL_UART_RxCpltCallback+0x14c>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	711a      	strb	r2, [r3, #4]
		}
	}
	HAL_UART_Receive_IT(&huart3, Received, 5);
 8000c44:	2205      	movs	r2, #5
 8000c46:	4904      	ldr	r1, [pc, #16]	; (8000c58 <HAL_UART_RxCpltCallback+0x138>)
 8000c48:	480c      	ldr	r0, [pc, #48]	; (8000c7c <HAL_UART_RxCpltCallback+0x15c>)
 8000c4a:	f005 fcb9 	bl	80065c0 <HAL_UART_Receive_IT>
}
 8000c4e:	bf00      	nop
 8000c50:	3738      	adds	r7, #56	; 0x38
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000708 	.word	0x20000708
 8000c5c:	0800b0a4 	.word	0x0800b0a4
 8000c60:	20000728 	.word	0x20000728
 8000c64:	0800b0a8 	.word	0x0800b0a8
 8000c68:	0800b0bc 	.word	0x0800b0bc
 8000c6c:	20000048 	.word	0x20000048
 8000c70:	0800b0c4 	.word	0x0800b0c4
 8000c74:	0800b0cc 	.word	0x0800b0cc
 8000c78:	0800b0d4 	.word	0x0800b0d4
 8000c7c:	20000904 	.word	0x20000904

08000c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c86:	f001 fcb3 	bl	80025f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8a:	f000 f877 	bl	8000d7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c8e:	f7ff fcb1 	bl	80005f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c92:	f000 fc0d 	bl	80014b0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c96:	f000 fca3 	bl	80015e0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 8000c9a:	f000 fa8d 	bl	80011b8 <MX_TIM4_Init>
  MX_I2C1_Init();
 8000c9e:	f7ff fde3 	bl	8000868 <MX_I2C1_Init>
  MX_TIM6_Init();
 8000ca2:	f000 fb01 	bl	80012a8 <MX_TIM6_Init>
  MX_TIM14_Init();
 8000ca6:	f000 fb35 	bl	8001314 <MX_TIM14_Init>
  MX_TIM3_Init();
 8000caa:	f000 fa35 	bl	8001118 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  BH1750_Init(&hbh1750_1);
 8000cae:	4826      	ldr	r0, [pc, #152]	; (8000d48 <main+0xc8>)
 8000cb0:	f000 fd67 	bl	8001782 <BH1750_Init>
  Lcd_init(&lcd);
 8000cb4:	4825      	ldr	r0, [pc, #148]	; (8000d4c <main+0xcc>)
 8000cb6:	f000 fdbb 	bl	8001830 <Lcd_init>

  LightSetpoint = 200;
 8000cba:	4925      	ldr	r1, [pc, #148]	; (8000d50 <main+0xd0>)
 8000cbc:	f04f 0200 	mov.w	r2, #0
 8000cc0:	4b24      	ldr	r3, [pc, #144]	; (8000d54 <main+0xd4>)
 8000cc2:	e9c1 2300 	strd	r2, r3, [r1]
  PID(&Light_PID, &Light, &PID_Out, &LightSetpoint, 0.2, 10, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	9301      	str	r3, [sp, #4]
 8000cca:	2301      	movs	r3, #1
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	ed9f 2b18 	vldr	d2, [pc, #96]	; 8000d30 <main+0xb0>
 8000cd2:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0
 8000cd6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8000d38 <main+0xb8>
 8000cda:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <main+0xd0>)
 8000cdc:	4a1e      	ldr	r2, [pc, #120]	; (8000d58 <main+0xd8>)
 8000cde:	491f      	ldr	r1, [pc, #124]	; (8000d5c <main+0xdc>)
 8000ce0:	481f      	ldr	r0, [pc, #124]	; (8000d60 <main+0xe0>)
 8000ce2:	f001 f9d9 	bl	8002098 <PID>

  PID_SetMode(&Light_PID, _PID_MODE_AUTOMATIC);
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	481d      	ldr	r0, [pc, #116]	; (8000d60 <main+0xe0>)
 8000cea:	f001 faf1 	bl	80022d0 <PID_SetMode>
  PID_SetSampleTime(&Light_PID, 20);
 8000cee:	2114      	movs	r1, #20
 8000cf0:	481b      	ldr	r0, [pc, #108]	; (8000d60 <main+0xe0>)
 8000cf2:	f001 fc49 	bl	8002588 <PID_SetSampleTime>
  PID_SetOutputLimits(&Light_PID, 0, 999);
 8000cf6:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8000d40 <main+0xc0>
 8000cfa:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8000d30 <main+0xb0>
 8000cfe:	4818      	ldr	r0, [pc, #96]	; (8000d60 <main+0xe0>)
 8000d00:	f001 fb04 	bl	800230c <PID_SetOutputLimits>

  MENU_Init(&hmenu);
 8000d04:	4817      	ldr	r0, [pc, #92]	; (8000d64 <main+0xe4>)
 8000d06:	f001 f859 	bl	8001dbc <MENU_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  HAL_TIM_Base_Start_IT(&htim3);
 8000d0a:	4817      	ldr	r0, [pc, #92]	; (8000d68 <main+0xe8>)
 8000d0c:	f004 f9c4 	bl	8005098 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000d10:	4816      	ldr	r0, [pc, #88]	; (8000d6c <main+0xec>)
 8000d12:	f004 f9c1 	bl	8005098 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000d16:	4816      	ldr	r0, [pc, #88]	; (8000d70 <main+0xf0>)
 8000d18:	f004 f9be 	bl	8005098 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4813      	ldr	r0, [pc, #76]	; (8000d6c <main+0xec>)
 8000d20:	f004 fa94 	bl	800524c <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, Received, 5);
 8000d24:	2205      	movs	r2, #5
 8000d26:	4913      	ldr	r1, [pc, #76]	; (8000d74 <main+0xf4>)
 8000d28:	4813      	ldr	r0, [pc, #76]	; (8000d78 <main+0xf8>)
 8000d2a:	f005 fc49 	bl	80065c0 <HAL_UART_Receive_IT>

  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <main+0xae>
	...
 8000d38:	9999999a 	.word	0x9999999a
 8000d3c:	3fc99999 	.word	0x3fc99999
 8000d40:	00000000 	.word	0x00000000
 8000d44:	408f3800 	.word	0x408f3800
 8000d48:	20000004 	.word	0x20000004
 8000d4c:	2000002c 	.word	0x2000002c
 8000d50:	20000728 	.word	0x20000728
 8000d54:	40690000 	.word	0x40690000
 8000d58:	20000720 	.word	0x20000720
 8000d5c:	20000718 	.word	0x20000718
 8000d60:	20000450 	.word	0x20000450
 8000d64:	20000048 	.word	0x20000048
 8000d68:	200007d4 	.word	0x200007d4
 8000d6c:	20000820 	.word	0x20000820
 8000d70:	2000086c 	.word	0x2000086c
 8000d74:	20000708 	.word	0x20000708
 8000d78:	20000904 	.word	0x20000904

08000d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b094      	sub	sp, #80	; 0x50
 8000d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	2234      	movs	r2, #52	; 0x34
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f007 fa36 	bl	80081fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d90:	f107 0308 	add.w	r3, r7, #8
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000da0:	f002 ff2e 	bl	8003c00 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da4:	4b2c      	ldr	r3, [pc, #176]	; (8000e58 <SystemClock_Config+0xdc>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	4a2b      	ldr	r2, [pc, #172]	; (8000e58 <SystemClock_Config+0xdc>)
 8000daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dae:	6413      	str	r3, [r2, #64]	; 0x40
 8000db0:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <SystemClock_Config+0xdc>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000dbc:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <SystemClock_Config+0xe0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dc4:	4a25      	ldr	r2, [pc, #148]	; (8000e5c <SystemClock_Config+0xe0>)
 8000dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <SystemClock_Config+0xe0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ddc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000de0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de2:	2302      	movs	r3, #2
 8000de4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dec:	2304      	movs	r3, #4
 8000dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000df0:	2360      	movs	r3, #96	; 0x60
 8000df2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000df4:	2302      	movs	r3, #2
 8000df6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000df8:	2304      	movs	r3, #4
 8000dfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	4618      	mov	r0, r3
 8000e06:	f002 ff5b 	bl	8003cc0 <HAL_RCC_OscConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e10:	f000 f826 	bl	8000e60 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e14:	f002 ff04 	bl	8003c20 <HAL_PWREx_EnableOverDrive>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e1e:	f000 f81f 	bl	8000e60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e22:	230f      	movs	r3, #15
 8000e24:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e26:	2302      	movs	r3, #2
 8000e28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e38:	f107 0308 	add.w	r3, r7, #8
 8000e3c:	2103      	movs	r1, #3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f003 f9ec 	bl	800421c <HAL_RCC_ClockConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000e4a:	f000 f809 	bl	8000e60 <Error_Handler>
  }
}
 8000e4e:	bf00      	nop
 8000e50:	3750      	adds	r7, #80	; 0x50
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40007000 	.word	0x40007000

08000e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e64:	b672      	cpsid	i
}
 8000e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <Error_Handler+0x8>
	...

08000e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	4a0e      	ldr	r2, [pc, #56]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40023800 	.word	0x40023800

08000eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <NMI_Handler+0x4>

08000eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <HardFault_Handler+0x4>

08000ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <MemManage_Handler+0x4>

08000ec6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <BusFault_Handler+0x4>

08000ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <UsageFault_Handler+0x4>

08000ed2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f00:	f001 fbb4 	bl	800266c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <TIM3_IRQHandler+0x10>)
 8000f0e:	f004 fa97 	bl	8005440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200007d4 	.word	0x200007d4

08000f1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <TIM4_IRQHandler+0x10>)
 8000f22:	f004 fa8d 	bl	8005440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000820 	.word	0x20000820

08000f30 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <USART3_IRQHandler+0x10>)
 8000f36:	f005 fb87 	bl	8006648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000904 	.word	0x20000904

08000f44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000f48:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f4c:	f001 ff6e 	bl	8002e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <TIM6_DAC_IRQHandler+0x10>)
 8000f5a:	f004 fa71 	bl	8005440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000086c 	.word	0x2000086c

08000f68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
	return 1;
 8000f6c:	2301      	movs	r3, #1
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <_kill>:

int _kill(int pid, int sig)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f82:	f007 f911 	bl	80081a8 <__errno>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2216      	movs	r2, #22
 8000f8a:	601a      	str	r2, [r3, #0]
	return -1;
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <_exit>:

void _exit (int status)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ffe7 	bl	8000f78 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000faa:	e7fe      	b.n	8000faa <_exit+0x12>

08000fac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	e00a      	b.n	8000fd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fbe:	f3af 8000 	nop.w
 8000fc2:	4601      	mov	r1, r0
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	60ba      	str	r2, [r7, #8]
 8000fca:	b2ca      	uxtb	r2, r1
 8000fcc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dbf0      	blt.n	8000fbe <_read+0x12>
	}

return len;
 8000fdc:	687b      	ldr	r3, [r7, #4]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	60f8      	str	r0, [r7, #12]
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	e009      	b.n	800100c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	1c5a      	adds	r2, r3, #1
 8000ffc:	60ba      	str	r2, [r7, #8]
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	3301      	adds	r3, #1
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	429a      	cmp	r2, r3
 8001012:	dbf1      	blt.n	8000ff8 <_write+0x12>
	}
	return len;
 8001014:	687b      	ldr	r3, [r7, #4]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <_close>:

int _close(int file)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
	return -1;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001046:	605a      	str	r2, [r3, #4]
	return 0;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <_isatty>:

int _isatty(int file)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
	return 1;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
	return 0;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001090:	4a14      	ldr	r2, [pc, #80]	; (80010e4 <_sbrk+0x5c>)
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <_sbrk+0x60>)
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <_sbrk+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d102      	bne.n	80010aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <_sbrk+0x64>)
 80010a6:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <_sbrk+0x68>)
 80010a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <_sbrk+0x64>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d207      	bcs.n	80010c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b8:	f007 f876 	bl	80081a8 <__errno>
 80010bc:	4603      	mov	r3, r0
 80010be:	220c      	movs	r2, #12
 80010c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	e009      	b.n	80010dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ce:	4b07      	ldr	r3, [pc, #28]	; (80010ec <_sbrk+0x64>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <_sbrk+0x64>)
 80010d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010da:	68fb      	ldr	r3, [r7, #12]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20080000 	.word	0x20080000
 80010e8:	00000400 	.word	0x00000400
 80010ec:	200007d0 	.word	0x200007d0
 80010f0:	20000eb0 	.word	0x20000eb0

080010f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <SystemInit+0x20>)
 80010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <SystemInit+0x20>)
 8001100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800111e:	f107 0310 	add.w	r3, r7, #16
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001136:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <MX_TIM3_Init+0x98>)
 8001138:	4a1e      	ldr	r2, [pc, #120]	; (80011b4 <MX_TIM3_Init+0x9c>)
 800113a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9599;
 800113c:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <MX_TIM3_Init+0x98>)
 800113e:	f242 527f 	movw	r2, #9599	; 0x257f
 8001142:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <MX_TIM3_Init+0x98>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 800114a:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <MX_TIM3_Init+0x98>)
 800114c:	f241 3287 	movw	r2, #4999	; 0x1387
 8001150:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <MX_TIM3_Init+0x98>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001158:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <MX_TIM3_Init+0x98>)
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800115e:	4814      	ldr	r0, [pc, #80]	; (80011b0 <MX_TIM3_Init+0x98>)
 8001160:	f003 feaa 	bl	8004eb8 <HAL_TIM_Base_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800116a:	f7ff fe79 	bl	8000e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800116e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001172:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	4619      	mov	r1, r3
 800117a:	480d      	ldr	r0, [pc, #52]	; (80011b0 <MX_TIM3_Init+0x98>)
 800117c:	f004 fb94 	bl	80058a8 <HAL_TIM_ConfigClockSource>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001186:	f7ff fe6b 	bl	8000e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	4619      	mov	r1, r3
 8001196:	4806      	ldr	r0, [pc, #24]	; (80011b0 <MX_TIM3_Init+0x98>)
 8001198:	f005 f836 	bl	8006208 <HAL_TIMEx_MasterConfigSynchronization>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80011a2:	f7ff fe5d 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	3720      	adds	r7, #32
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200007d4 	.word	0x200007d4
 80011b4:	40000400 	.word	0x40000400

080011b8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08e      	sub	sp, #56	; 0x38
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011d8:	463b      	mov	r3, r7
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	611a      	str	r2, [r3, #16]
 80011e6:	615a      	str	r2, [r3, #20]
 80011e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011ea:	4b2d      	ldr	r3, [pc, #180]	; (80012a0 <MX_TIM4_Init+0xe8>)
 80011ec:	4a2d      	ldr	r2, [pc, #180]	; (80012a4 <MX_TIM4_Init+0xec>)
 80011ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 95;
 80011f0:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <MX_TIM4_Init+0xe8>)
 80011f2:	225f      	movs	r2, #95	; 0x5f
 80011f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f6:	4b2a      	ldr	r3, [pc, #168]	; (80012a0 <MX_TIM4_Init+0xe8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80011fc:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <MX_TIM4_Init+0xe8>)
 80011fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001202:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001204:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <MX_TIM4_Init+0xe8>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120a:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <MX_TIM4_Init+0xe8>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001210:	4823      	ldr	r0, [pc, #140]	; (80012a0 <MX_TIM4_Init+0xe8>)
 8001212:	f003 fe51 	bl	8004eb8 <HAL_TIM_Base_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800121c:	f7ff fe20 	bl	8000e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001226:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800122a:	4619      	mov	r1, r3
 800122c:	481c      	ldr	r0, [pc, #112]	; (80012a0 <MX_TIM4_Init+0xe8>)
 800122e:	f004 fb3b 	bl	80058a8 <HAL_TIM_ConfigClockSource>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001238:	f7ff fe12 	bl	8000e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800123c:	4818      	ldr	r0, [pc, #96]	; (80012a0 <MX_TIM4_Init+0xe8>)
 800123e:	f003 ffa3 	bl	8005188 <HAL_TIM_PWM_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001248:	f7ff fe0a 	bl	8000e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	4619      	mov	r1, r3
 800125a:	4811      	ldr	r0, [pc, #68]	; (80012a0 <MX_TIM4_Init+0xe8>)
 800125c:	f004 ffd4 	bl	8006208 <HAL_TIMEx_MasterConfigSynchronization>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001266:	f7ff fdfb 	bl	8000e60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800126a:	2360      	movs	r3, #96	; 0x60
 800126c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800126e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001272:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800127c:	463b      	mov	r3, r7
 800127e:	2200      	movs	r2, #0
 8001280:	4619      	mov	r1, r3
 8001282:	4807      	ldr	r0, [pc, #28]	; (80012a0 <MX_TIM4_Init+0xe8>)
 8001284:	f004 f9fc 	bl	8005680 <HAL_TIM_PWM_ConfigChannel>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800128e:	f7ff fde7 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001292:	4803      	ldr	r0, [pc, #12]	; (80012a0 <MX_TIM4_Init+0xe8>)
 8001294:	f000 f8d4 	bl	8001440 <HAL_TIM_MspPostInit>

}
 8001298:	bf00      	nop
 800129a:	3738      	adds	r7, #56	; 0x38
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000820 	.word	0x20000820
 80012a4:	40000800 	.word	0x40000800

080012a8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012b8:	4b14      	ldr	r3, [pc, #80]	; (800130c <MX_TIM6_Init+0x64>)
 80012ba:	4a15      	ldr	r2, [pc, #84]	; (8001310 <MX_TIM6_Init+0x68>)
 80012bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 80012be:	4b13      	ldr	r3, [pc, #76]	; (800130c <MX_TIM6_Init+0x64>)
 80012c0:	f242 527f 	movw	r2, #9599	; 0x257f
 80012c4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_TIM6_Init+0x64>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 199;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_TIM6_Init+0x64>)
 80012ce:	22c7      	movs	r2, #199	; 0xc7
 80012d0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_TIM6_Init+0x64>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012d8:	480c      	ldr	r0, [pc, #48]	; (800130c <MX_TIM6_Init+0x64>)
 80012da:	f003 fded 	bl	8004eb8 <HAL_TIM_Base_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80012e4:	f7ff fdbc 	bl	8000e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e8:	2300      	movs	r3, #0
 80012ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_TIM6_Init+0x64>)
 80012f6:	f004 ff87 	bl	8006208 <HAL_TIMEx_MasterConfigSynchronization>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001300:	f7ff fdae 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	2000086c 	.word	0x2000086c
 8001310:	40001000 	.word	0x40001000

08001314 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_TIM14_Init+0x40>)
 800131a:	4a0f      	ldr	r2, [pc, #60]	; (8001358 <MX_TIM14_Init+0x44>)
 800131c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 95;
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <MX_TIM14_Init+0x40>)
 8001320:	225f      	movs	r2, #95	; 0x5f
 8001322:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <MX_TIM14_Init+0x40>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65000;
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <MX_TIM14_Init+0x40>)
 800132c:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001330:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <MX_TIM14_Init+0x40>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <MX_TIM14_Init+0x40>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_TIM14_Init+0x40>)
 8001340:	f003 fdba 	bl	8004eb8 <HAL_TIM_Base_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800134a:	f7ff fd89 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200008b8 	.word	0x200008b8
 8001358:	40002000 	.word	0x40002000

0800135c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a30      	ldr	r2, [pc, #192]	; (800142c <HAL_TIM_Base_MspInit+0xd0>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d114      	bne.n	8001398 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800136e:	4b30      	ldr	r3, [pc, #192]	; (8001430 <HAL_TIM_Base_MspInit+0xd4>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	4a2f      	ldr	r2, [pc, #188]	; (8001430 <HAL_TIM_Base_MspInit+0xd4>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	6413      	str	r3, [r2, #64]	; 0x40
 800137a:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <HAL_TIM_Base_MspInit+0xd4>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	201d      	movs	r0, #29
 800138c:	f001 fa8d 	bl	80028aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001390:	201d      	movs	r0, #29
 8001392:	f001 faa6 	bl	80028e2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8001396:	e044      	b.n	8001422 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a25      	ldr	r2, [pc, #148]	; (8001434 <HAL_TIM_Base_MspInit+0xd8>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d114      	bne.n	80013cc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013a2:	4b23      	ldr	r3, [pc, #140]	; (8001430 <HAL_TIM_Base_MspInit+0xd4>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a22      	ldr	r2, [pc, #136]	; (8001430 <HAL_TIM_Base_MspInit+0xd4>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b20      	ldr	r3, [pc, #128]	; (8001430 <HAL_TIM_Base_MspInit+0xd4>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	201e      	movs	r0, #30
 80013c0:	f001 fa73 	bl	80028aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013c4:	201e      	movs	r0, #30
 80013c6:	f001 fa8c 	bl	80028e2 <HAL_NVIC_EnableIRQ>
}
 80013ca:	e02a      	b.n	8001422 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a19      	ldr	r2, [pc, #100]	; (8001438 <HAL_TIM_Base_MspInit+0xdc>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d114      	bne.n	8001400 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013d6:	4b16      	ldr	r3, [pc, #88]	; (8001430 <HAL_TIM_Base_MspInit+0xd4>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	4a15      	ldr	r2, [pc, #84]	; (8001430 <HAL_TIM_Base_MspInit+0xd4>)
 80013dc:	f043 0310 	orr.w	r3, r3, #16
 80013e0:	6413      	str	r3, [r2, #64]	; 0x40
 80013e2:	4b13      	ldr	r3, [pc, #76]	; (8001430 <HAL_TIM_Base_MspInit+0xd4>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f003 0310 	and.w	r3, r3, #16
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	2036      	movs	r0, #54	; 0x36
 80013f4:	f001 fa59 	bl	80028aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013f8:	2036      	movs	r0, #54	; 0x36
 80013fa:	f001 fa72 	bl	80028e2 <HAL_NVIC_EnableIRQ>
}
 80013fe:	e010      	b.n	8001422 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM14)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0d      	ldr	r2, [pc, #52]	; (800143c <HAL_TIM_Base_MspInit+0xe0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d10b      	bne.n	8001422 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <HAL_TIM_Base_MspInit+0xd4>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	4a08      	ldr	r2, [pc, #32]	; (8001430 <HAL_TIM_Base_MspInit+0xd4>)
 8001410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001414:	6413      	str	r3, [r2, #64]	; 0x40
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_TIM_Base_MspInit+0xd4>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
}
 8001422:	bf00      	nop
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40000400 	.word	0x40000400
 8001430:	40023800 	.word	0x40023800
 8001434:	40000800 	.word	0x40000800
 8001438:	40001000 	.word	0x40001000
 800143c:	40002000 	.word	0x40002000

08001440 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a11      	ldr	r2, [pc, #68]	; (80014a4 <HAL_TIM_MspPostInit+0x64>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d11c      	bne.n	800149c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_TIM_MspPostInit+0x68>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a10      	ldr	r2, [pc, #64]	; (80014a8 <HAL_TIM_MspPostInit+0x68>)
 8001468:	f043 0308 	orr.w	r3, r3, #8
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <HAL_TIM_MspPostInit+0x68>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800147a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800148c:	2302      	movs	r3, #2
 800148e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4619      	mov	r1, r3
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <HAL_TIM_MspPostInit+0x6c>)
 8001498:	f001 fad0 	bl	8002a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800149c:	bf00      	nop
 800149e:	3720      	adds	r7, #32
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40000800 	.word	0x40000800
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40020c00 	.word	0x40020c00

080014b0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <MX_USART3_UART_Init+0x54>)
 80014b6:	4a14      	ldr	r2, [pc, #80]	; (8001508 <MX_USART3_UART_Init+0x58>)
 80014b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 112500;
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <MX_USART3_UART_Init+0x54>)
 80014bc:	4a13      	ldr	r2, [pc, #76]	; (800150c <MX_USART3_UART_Init+0x5c>)
 80014be:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014c0:	4b10      	ldr	r3, [pc, #64]	; (8001504 <MX_USART3_UART_Init+0x54>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_USART3_UART_Init+0x54>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014cc:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <MX_USART3_UART_Init+0x54>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <MX_USART3_UART_Init+0x54>)
 80014d4:	220c      	movs	r2, #12
 80014d6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <MX_USART3_UART_Init+0x54>)
 80014da:	2200      	movs	r2, #0
 80014dc:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_USART3_UART_Init+0x54>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <MX_USART3_UART_Init+0x54>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_USART3_UART_Init+0x54>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014f0:	4804      	ldr	r0, [pc, #16]	; (8001504 <MX_USART3_UART_Init+0x54>)
 80014f2:	f004 ff35 	bl	8006360 <HAL_UART_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 80014fc:	f7ff fcb0 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000904 	.word	0x20000904
 8001508:	40004800 	.word	0x40004800
 800150c:	0001b774 	.word	0x0001b774

08001510 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b0ae      	sub	sp, #184	; 0xb8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2290      	movs	r2, #144	; 0x90
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f006 fe63 	bl	80081fc <memset>
  if(uartHandle->Instance==USART3)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a26      	ldr	r2, [pc, #152]	; (80015d4 <HAL_UART_MspInit+0xc4>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d144      	bne.n	80015ca <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001540:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001544:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001546:	2300      	movs	r3, #0
 8001548:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4618      	mov	r0, r3
 8001550:	f003 f88a 	bl	8004668 <HAL_RCCEx_PeriphCLKConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800155a:	f7ff fc81 	bl	8000e60 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800155e:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <HAL_UART_MspInit+0xc8>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	4a1d      	ldr	r2, [pc, #116]	; (80015d8 <HAL_UART_MspInit+0xc8>)
 8001564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001568:	6413      	str	r3, [r2, #64]	; 0x40
 800156a:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <HAL_UART_MspInit+0xc8>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001576:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <HAL_UART_MspInit+0xc8>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a17      	ldr	r2, [pc, #92]	; (80015d8 <HAL_UART_MspInit+0xc8>)
 800157c:	f043 0308 	orr.w	r3, r3, #8
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <HAL_UART_MspInit+0xc8>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800158e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001592:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a2:	2303      	movs	r3, #3
 80015a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015a8:	2307      	movs	r3, #7
 80015aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015b2:	4619      	mov	r1, r3
 80015b4:	4809      	ldr	r0, [pc, #36]	; (80015dc <HAL_UART_MspInit+0xcc>)
 80015b6:	f001 fa41 	bl	8002a3c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	2027      	movs	r0, #39	; 0x27
 80015c0:	f001 f973 	bl	80028aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015c4:	2027      	movs	r0, #39	; 0x27
 80015c6:	f001 f98c 	bl	80028e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015ca:	bf00      	nop
 80015cc:	37b8      	adds	r7, #184	; 0xb8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40004800 	.word	0x40004800
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020c00 	.word	0x40020c00

080015e0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80015e4:	4b14      	ldr	r3, [pc, #80]	; (8001638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80015ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015ee:	2206      	movs	r2, #6
 80015f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015f4:	2202      	movs	r2, #2
 80015f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001600:	2202      	movs	r2, #2
 8001602:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001606:	2201      	movs	r2, #1
 8001608:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001618:	2201      	movs	r2, #1
 800161a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800161e:	2200      	movs	r2, #0
 8001620:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001624:	f002 f9a3 	bl	800396e <HAL_PCD_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800162e:	f7ff fc17 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	2000098c 	.word	0x2000098c

0800163c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b0ae      	sub	sp, #184	; 0xb8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2290      	movs	r2, #144	; 0x90
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f006 fdcd 	bl	80081fc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800166a:	d159      	bne.n	8001720 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800166c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001670:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001672:	2300      	movs	r3, #0
 8001674:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	4618      	mov	r0, r3
 800167e:	f002 fff3 	bl	8004668 <HAL_RCCEx_PeriphCLKConfig>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001688:	f7ff fbea 	bl	8000e60 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	4b26      	ldr	r3, [pc, #152]	; (8001728 <HAL_PCD_MspInit+0xec>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	4a25      	ldr	r2, [pc, #148]	; (8001728 <HAL_PCD_MspInit+0xec>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6313      	str	r3, [r2, #48]	; 0x30
 8001698:	4b23      	ldr	r3, [pc, #140]	; (8001728 <HAL_PCD_MspInit+0xec>)
 800169a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80016a4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80016a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	2302      	movs	r3, #2
 80016ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b8:	2303      	movs	r3, #3
 80016ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016be:	230a      	movs	r3, #10
 80016c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016c8:	4619      	mov	r1, r3
 80016ca:	4818      	ldr	r0, [pc, #96]	; (800172c <HAL_PCD_MspInit+0xf0>)
 80016cc:	f001 f9b6 	bl	8002a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d8:	2300      	movs	r3, #0
 80016da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016e8:	4619      	mov	r1, r3
 80016ea:	4810      	ldr	r0, [pc, #64]	; (800172c <HAL_PCD_MspInit+0xf0>)
 80016ec:	f001 f9a6 	bl	8002a3c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016f0:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <HAL_PCD_MspInit+0xec>)
 80016f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f4:	4a0c      	ldr	r2, [pc, #48]	; (8001728 <HAL_PCD_MspInit+0xec>)
 80016f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016fa:	6353      	str	r3, [r2, #52]	; 0x34
 80016fc:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <HAL_PCD_MspInit+0xec>)
 80016fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <HAL_PCD_MspInit+0xec>)
 800170a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170c:	4a06      	ldr	r2, [pc, #24]	; (8001728 <HAL_PCD_MspInit+0xec>)
 800170e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001712:	6453      	str	r3, [r2, #68]	; 0x44
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <HAL_PCD_MspInit+0xec>)
 8001716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001720:	bf00      	nop
 8001722:	37b8      	adds	r7, #184	; 0xb8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40023800 	.word	0x40023800
 800172c:	40020000 	.word	0x40020000

08001730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001768 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001734:	480d      	ldr	r0, [pc, #52]	; (800176c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001736:	490e      	ldr	r1, [pc, #56]	; (8001770 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001738:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800173c:	e002      	b.n	8001744 <LoopCopyDataInit>

0800173e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001742:	3304      	adds	r3, #4

08001744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001748:	d3f9      	bcc.n	800173e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174a:	4a0b      	ldr	r2, [pc, #44]	; (8001778 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800174c:	4c0b      	ldr	r4, [pc, #44]	; (800177c <LoopFillZerobss+0x26>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001750:	e001      	b.n	8001756 <LoopFillZerobss>

08001752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001754:	3204      	adds	r2, #4

08001756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001758:	d3fb      	bcc.n	8001752 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800175a:	f7ff fccb 	bl	80010f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800175e:	f006 fd29 	bl	80081b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001762:	f7ff fa8d 	bl	8000c80 <main>
  bx  lr    
 8001766:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001768:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800176c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001770:	20000698 	.word	0x20000698
  ldr r2, =_sidata
 8001774:	0800b5ac 	.word	0x0800b5ac
  ldr r2, =_sbss
 8001778:	20000698 	.word	0x20000698
  ldr r4, =_ebss
 800177c:	20000eac 	.word	0x20000eac

08001780 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001780:	e7fe      	b.n	8001780 <ADC_IRQHandler>

08001782 <BH1750_Init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hbh1750 BH1750 digital light sensor handler
 * @return None
 */
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af02      	add	r7, sp, #8
 8001788:	6078      	str	r0, [r7, #4]
  uint8_t command;
  command = BH1750_POWER_ON;
 800178a:	2301      	movs	r3, #1
 800178c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6818      	ldr	r0, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	791b      	ldrb	r3, [r3, #4]
 8001796:	b299      	uxth	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f107 020f 	add.w	r2, r7, #15
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	2301      	movs	r3, #1
 80017a4:	f001 fbf6 	bl	8002f94 <HAL_I2C_Master_Transmit>
  command = BH1750_CONTINOUS_L_RES_MODE;
 80017a8:	2313      	movs	r3, #19
 80017aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	791b      	ldrb	r3, [r3, #4]
 80017b4:	b299      	uxth	r1, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f107 020f 	add.w	r2, r7, #15
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2301      	movs	r3, #1
 80017c2:	f001 fbe7 	bl	8002f94 <HAL_I2C_Master_Transmit>
}
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <BH1750_ReadLux>:
 * @note Uses blocking mode I2C receiving routine.
 * @param[in] hbh1750 BH1750 digital light sensor handler
 * @return Measurement result in lux [lx]
 */
float BH1750_ReadLux(BH1750_HandleTypeDef* hbh1750)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af02      	add	r7, sp, #8
 80017d6:	6078      	str	r0, [r7, #4]
  float measure;
  uint8_t rxarray[BH1750_DATA_SIZE];
  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	791b      	ldrb	r3, [r3, #4]
 80017e0:	b299      	uxth	r1, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f107 0208 	add.w	r2, r7, #8
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	2302      	movs	r3, #2
 80017ee:	f001 fcc5 	bl	800317c <HAL_I2C_Master_Receive>
  measure = ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2;
 80017f2:	7a3b      	ldrb	r3, [r7, #8]
 80017f4:	021b      	lsls	r3, r3, #8
 80017f6:	7a7a      	ldrb	r2, [r7, #9]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	ee07 3a90 	vmov	s15, r3
 80017fe:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001802:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8001828 <BH1750_ReadLux+0x58>
 8001806:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800180a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800180e:	edc7 7a03 	vstr	s15, [r7, #12]
  hbh1750->Readout = measure;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	60da      	str	r2, [r3, #12]
  return  measure;// @see BH1750 technical note p. 10;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	ee07 3a90 	vmov	s15, r3
}
 800181e:	eeb0 0a67 	vmov.f32	s0, s15
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	33333333 	.word	0x33333333
 800182c:	3ff33333 	.word	0x3ff33333

08001830 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	HAL_Delay(16);
 8001838:	2010      	movs	r0, #16
 800183a:	f000 ff37 	bl	80026ac <HAL_Delay>

	if(lcd->mode == LCD_4_BIT_MODE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	7d9b      	ldrb	r3, [r3, #22]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d115      	bne.n	8001872 <Lcd_init+0x42>
	{
			lcd_write_command(lcd, 0x33);
 8001846:	2133      	movs	r1, #51	; 0x33
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f88a 	bl	8001962 <lcd_write_command>
			HAL_Delay(5);
 800184e:	2005      	movs	r0, #5
 8001850:	f000 ff2c 	bl	80026ac <HAL_Delay>
			lcd_write_command(lcd, 0x32);
 8001854:	2132      	movs	r1, #50	; 0x32
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f883 	bl	8001962 <lcd_write_command>
			HAL_Delay(1);
 800185c:	2001      	movs	r0, #1
 800185e:	f000 ff25 	bl	80026ac <HAL_Delay>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8001862:	2128      	movs	r1, #40	; 0x28
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f87c 	bl	8001962 <lcd_write_command>
			HAL_Delay(1);
 800186a:	2001      	movs	r0, #1
 800186c:	f000 ff1e 	bl	80026ac <HAL_Delay>
 8001870:	e003      	b.n	800187a <Lcd_init+0x4a>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8001872:	2138      	movs	r1, #56	; 0x38
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 f874 	bl	8001962 <lcd_write_command>

	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 800187a:	2101      	movs	r1, #1
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f870 	bl	8001962 <lcd_write_command>
	HAL_Delay(2);
 8001882:	2002      	movs	r0, #2
 8001884:	f000 ff12 	bl	80026ac <HAL_Delay>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8001888:	210c      	movs	r1, #12
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f869 	bl	8001962 <lcd_write_command>
	HAL_Delay(2);
 8001890:	2002      	movs	r0, #2
 8001892:	f000 ff0b 	bl	80026ac <HAL_Delay>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8001896:	2106      	movs	r1, #6
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f862 	bl	8001962 <lcd_write_command>
	HAL_Delay(2);
 800189e:	2002      	movs	r0, #2
 80018a0:	f000 ff04 	bl	80026ac <HAL_Delay>
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	73fb      	strb	r3, [r7, #15]
 80018ba:	e00a      	b.n	80018d2 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	4413      	add	r3, r2
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	4619      	mov	r1, r3
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f879 	bl	80019be <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	3301      	adds	r3, #1
 80018d0:	73fb      	strb	r3, [r7, #15]
 80018d2:	7bfc      	ldrb	r4, [r7, #15]
 80018d4:	6838      	ldr	r0, [r7, #0]
 80018d6:	f7fe fcb3 	bl	8000240 <strlen>
 80018da:	4603      	mov	r3, r0
 80018dc:	429c      	cmp	r4, r3
 80018de:	d3ed      	bcc.n	80018bc <Lcd_string+0x10>
	}
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd90      	pop	{r4, r7, pc}
	...

080018ec <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	70fb      	strb	r3, [r7, #3]
 80018f8:	4613      	mov	r3, r2
 80018fa:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	4a07      	ldr	r2, [pc, #28]	; (800191c <Lcd_cursor+0x30>)
 8001900:	5cd2      	ldrb	r2, [r2, r3]
 8001902:	78bb      	ldrb	r3, [r7, #2]
 8001904:	4413      	add	r3, r2
 8001906:	b2db      	uxtb	r3, r3
 8001908:	3b80      	subs	r3, #128	; 0x80
 800190a:	b2db      	uxtb	r3, r3
 800190c:	4619      	mov	r1, r3
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f827 	bl	8001962 <lcd_write_command>
	#endif
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	0800b1a0 	.word	0x0800b1a0

08001920 <DELAY_func>:


/************************************** Static function definition **************************************/

void DELAY_func(Lcd_HandleTypeDef* lcd, uint16_t delay_us)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COUNTER(lcd->timer, 0);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2200      	movs	r2, #0
 8001934:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(lcd->timer);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	4618      	mov	r0, r3
 800193c:	f003 fb14 	bl	8004f68 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(lcd->timer) < delay_us);
 8001940:	bf00      	nop
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800194a:	887b      	ldrh	r3, [r7, #2]
 800194c:	429a      	cmp	r2, r3
 800194e:	d3f8      	bcc.n	8001942 <DELAY_func+0x22>
  HAL_TIM_Base_Stop(lcd->timer);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4618      	mov	r0, r3
 8001956:	f003 fb77 	bl	8005048 <HAL_TIM_Base_Stop>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	460b      	mov	r3, r1
 800196c:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6898      	ldr	r0, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	899b      	ldrh	r3, [r3, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	4619      	mov	r1, r3
 800197a:	f001 fa23 	bl	8002dc4 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	7d9b      	ldrb	r3, [r3, #22]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d111      	bne.n	80019aa <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	091b      	lsrs	r3, r3, #4
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2204      	movs	r2, #4
 800198e:	4619      	mov	r1, r3
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 f842 	bl	8001a1a <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8001996:	78fb      	ldrb	r3, [r7, #3]
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2204      	movs	r2, #4
 80019a0:	4619      	mov	r1, r3
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f839 	bl	8001a1a <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80019a8:	e005      	b.n	80019b6 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	2208      	movs	r2, #8
 80019ae:	4619      	mov	r1, r3
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 f832 	bl	8001a1a <lcd_write>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	460b      	mov	r3, r1
 80019c8:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6898      	ldr	r0, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	899b      	ldrh	r3, [r3, #12]
 80019d2:	2201      	movs	r2, #1
 80019d4:	4619      	mov	r1, r3
 80019d6:	f001 f9f5 	bl	8002dc4 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	7d9b      	ldrb	r3, [r3, #22]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d111      	bne.n	8001a06 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80019e2:	78fb      	ldrb	r3, [r7, #3]
 80019e4:	091b      	lsrs	r3, r3, #4
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2204      	movs	r2, #4
 80019ea:	4619      	mov	r1, r3
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 f814 	bl	8001a1a <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80019f2:	78fb      	ldrb	r3, [r7, #3]
 80019f4:	f003 030f 	and.w	r3, r3, #15
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2204      	movs	r2, #4
 80019fc:	4619      	mov	r1, r3
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f80b 	bl	8001a1a <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8001a04:	e005      	b.n	8001a12 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001a06:	78fb      	ldrb	r3, [r7, #3]
 8001a08:	2208      	movs	r2, #8
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 f804 	bl	8001a1a <lcd_write>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	460b      	mov	r3, r1
 8001a24:	70fb      	strb	r3, [r7, #3]
 8001a26:	4613      	mov	r3, r2
 8001a28:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6918      	ldr	r0, [r3, #16]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	8a9b      	ldrh	r3, [r3, #20]
 8001a32:	2201      	movs	r2, #1
 8001a34:	4619      	mov	r1, r3
 8001a36:	f001 f9c5 	bl	8002dc4 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	73fb      	strb	r3, [r7, #15]
 8001a3e:	e019      	b.n	8001a74 <lcd_write+0x5a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	6818      	ldr	r0, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4413      	add	r3, r2
 8001a56:	8819      	ldrh	r1, [r3, #0]
 8001a58:	78fa      	ldrb	r2, [r7, #3]
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	fa42 f303 	asr.w	r3, r2, r3
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	461a      	mov	r2, r3
 8001a6a:	f001 f9ab 	bl	8002dc4 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	3301      	adds	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	7bfa      	ldrb	r2, [r7, #15]
 8001a76:	78bb      	ldrb	r3, [r7, #2]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d3e1      	bcc.n	8001a40 <lcd_write+0x26>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6918      	ldr	r0, [r3, #16]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	8a9b      	ldrh	r3, [r3, #20]
 8001a84:	2200      	movs	r2, #0
 8001a86:	4619      	mov	r1, r3
 8001a88:	f001 f99c 	bl	8002dc4 <HAL_GPIO_WritePin>
	DELAY(lcd, 0.08);// Data receive on falling edge
 8001a8c:	214f      	movs	r1, #79	; 0x4f
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff ff46 	bl	8001920 <DELAY_func>
}
 8001a94:	bf00      	nop
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <MENU_ITEM_WriteDisplayBuffer>:
/**
 * @brief Write menu item display buffer content
 * @param[in/out] hmenuitem : Menu item handler
 */
void MENU_ITEM_WriteDisplayBuffer(MenuItem_TypeDef* hmenuitem, const char* str)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  int pad_len = LCD_LINE_LEN - hmenuitem->DisplayStrLen;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	8a5b      	ldrh	r3, [r3, #18]
 8001aaa:	f1c3 0310 	rsb	r3, r3, #16
 8001aae:	60fb      	str	r3, [r7, #12]
  sprintf(hmenuitem->DisplayStr, "%s%.*s", str, pad_len, __menu__padding);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <MENU_ITEM_WriteDisplayBuffer+0x2c>)
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	4904      	ldr	r1, [pc, #16]	; (8001acc <MENU_ITEM_WriteDisplayBuffer+0x30>)
 8001abc:	f007 f81e 	bl	8008afc <siprintf>
}
 8001ac0:	bf00      	nop
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	0800b1a4 	.word	0x0800b1a4
 8001acc:	0800b0e4 	.word	0x0800b0e4

08001ad0 <__menu_DO_folder_routine>:

unsigned int ADC1_ConvResults_mV[16];
_Bool last = 0;

/* Private variables ---------------------------------------------------------*/
MENU_ITEM_CONTRUCTOR(menu_DO_folder, {menu_folder_routine(hmenuitem, "Dgtl Outputs");} );
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	4903      	ldr	r1, [pc, #12]	; (8001ae8 <__menu_DO_folder_routine+0x18>)
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f920 	bl	8001d20 <menu_folder_routine>
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	0800b0ec 	.word	0x0800b0ec

08001aec <__menu_DI_folder_routine>:
MENU_ITEM_CONTRUCTOR(menu_DI_folder, {menu_folder_routine(hmenuitem, "Dgtl Inputs");} );
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	4903      	ldr	r1, [pc, #12]	; (8001b04 <__menu_DI_folder_routine+0x18>)
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f912 	bl	8001d20 <menu_folder_routine>
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	0800b0fc 	.word	0x0800b0fc

08001b08 <__menu_ld1_routine>:
MENU_ITEM_CONTRUCTOR(menu_AO_folder, {menu_folder_routine(hmenuitem, "Anlg Outputs");} );
MENU_ITEM_CONTRUCTOR(menu_AI_folder, {menu_folder_routine(hmenuitem, "Anlg Inputs");} );

MENU_ITEM_CONTRUCTOR(menu_ld1, {menu_dout_routine(hmenuitem, LD1_GPIO_Port, LD1_Pin, "LD1");} );
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <__menu_ld1_routine+0x1c>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	4904      	ldr	r1, [pc, #16]	; (8001b28 <__menu_ld1_routine+0x20>)
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f898 	bl	8001c4c <menu_dout_routine>
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	0800b124 	.word	0x0800b124
 8001b28:	40020400 	.word	0x40020400

08001b2c <__menu_ld2_routine>:
MENU_ITEM_CONTRUCTOR(menu_ld2, {menu_dout_routine(hmenuitem, LD2_GPIO_Port, LD2_Pin, "LD2");} );
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <__menu_ld2_routine+0x1c>)
 8001b36:	2280      	movs	r2, #128	; 0x80
 8001b38:	4904      	ldr	r1, [pc, #16]	; (8001b4c <__menu_ld2_routine+0x20>)
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f886 	bl	8001c4c <menu_dout_routine>
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	0800b128 	.word	0x0800b128
 8001b4c:	40020400 	.word	0x40020400

08001b50 <__menu_ld3_routine>:
MENU_ITEM_CONTRUCTOR(menu_ld3, {menu_dout_routine(hmenuitem, LD3_GPIO_Port, LD3_Pin, "LD3");} );
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <__menu_ld3_routine+0x20>)
 8001b5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b5e:	4905      	ldr	r1, [pc, #20]	; (8001b74 <__menu_ld3_routine+0x24>)
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f873 	bl	8001c4c <menu_dout_routine>
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	0800b12c 	.word	0x0800b12c
 8001b74:	40020400 	.word	0x40020400

08001b78 <__menu_pwm_width_routine>:
MENU_ITEM_CONTRUCTOR(menu_pwm_width, {menu_float_io_routine(hmenuitem, *Light_PID.MyOutput/10, 3, "PWM WDTH", "%%");} );
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <__menu_pwm_width_routine+0x34>)
 8001b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b84:	ed93 6b00 	vldr	d6, [r3]
 8001b88:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8001b8c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b90:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <__menu_pwm_width_routine+0x38>)
 8001b96:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <__menu_pwm_width_routine+0x3c>)
 8001b98:	2103      	movs	r1, #3
 8001b9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f8de 	bl	8001d60 <menu_float_io_routine>
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000450 	.word	0x20000450
 8001bb0:	0800b130 	.word	0x0800b130
 8001bb4:	0800b134 	.word	0x0800b134

08001bb8 <__menu_light_ref_routine>:
MENU_ITEM_CONTRUCTOR(menu_light_ref, {menu_float_io_routine(hmenuitem, *Light_PID.MySetpoint, 4, "LGT ST PNT", "lx");} );
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <__menu_light_ref_routine+0x2c>)
 8001bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc4:	ed93 7b00 	vldr	d7, [r3]
 8001bc8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <__menu_light_ref_routine+0x30>)
 8001bce:	4a07      	ldr	r2, [pc, #28]	; (8001bec <__menu_light_ref_routine+0x34>)
 8001bd0:	2104      	movs	r1, #4
 8001bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f8c2 	bl	8001d60 <menu_float_io_routine>
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000450 	.word	0x20000450
 8001be8:	0800b140 	.word	0x0800b140
 8001bec:	0800b144 	.word	0x0800b144

08001bf0 <__menu_bh1750_routine>:

MENU_ITEM_CONTRUCTOR(menu_bh1750, {menu_float_io_routine(hmenuitem, hbh1750_1.Readout, 6, "LIGHT", "lx");} );
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <__menu_bh1750_routine+0x28>)
 8001bfa:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bfe:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <__menu_bh1750_routine+0x2c>)
 8001c00:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <__menu_bh1750_routine+0x30>)
 8001c02:	2106      	movs	r1, #6
 8001c04:	eeb0 0a67 	vmov.f32	s0, s15
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f8a9 	bl	8001d60 <menu_float_io_routine>
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000004 	.word	0x20000004
 8001c1c:	0800b140 	.word	0x0800b140
 8001c20:	0800b150 	.word	0x0800b150

08001c24 <__menu_USR_Btn_routine>:
MENU_ITEM_CONTRUCTOR(menu_USR_Btn, {menu_dout_routine(hmenuitem, USER_Btn_GPIO_Port, USER_Btn_Pin, "USR BTN");} );
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <__menu_USR_Btn_routine+0x20>)
 8001c2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c32:	4905      	ldr	r1, [pc, #20]	; (8001c48 <__menu_USR_Btn_routine+0x24>)
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f809 	bl	8001c4c <menu_dout_routine>
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	0800b158 	.word	0x0800b158
 8001c48:	40020800 	.word	0x40020800

08001c4c <menu_dout_routine>:
 * @param[in/out] hmenuitem : Menu item structure
 * @param[in]     hled      : Digital output handler
 * @param[in]     name      : Output display name
 */
void menu_dout_routine(MenuItem_TypeDef* hmenuitem, GPIO_TypeDef* Port, uint16_t Pin, const char* name)
{
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	b08d      	sub	sp, #52	; 0x34
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	80fb      	strh	r3, [r7, #6]

  if(hmenu.Item == hmenuitem)
 8001c5c:	4b2a      	ldr	r3, [pc, #168]	; (8001d08 <menu_dout_routine+0xbc>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d12b      	bne.n	8001cbe <menu_dout_routine+0x72>
  {
	  if(!last == (_Bool)HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) && last == 0)
 8001c66:	4b29      	ldr	r3, [pc, #164]	; (8001d0c <menu_dout_routine+0xc0>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	f083 0301 	eor.w	r3, r3, #1
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	461c      	mov	r4, r3
 8001c72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c76:	4826      	ldr	r0, [pc, #152]	; (8001d10 <menu_dout_routine+0xc4>)
 8001c78:	f001 f88c 	bl	8002d94 <HAL_GPIO_ReadPin>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	bf14      	ite	ne
 8001c82:	2301      	movne	r3, #1
 8001c84:	2300      	moveq	r3, #0
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	429c      	cmp	r4, r3
 8001c8a:	d10b      	bne.n	8001ca4 <menu_dout_routine+0x58>
 8001c8c:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <menu_dout_routine+0xc0>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	f083 0301 	eor.w	r3, r3, #1
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d004      	beq.n	8001ca4 <menu_dout_routine+0x58>
  	  {
	  	  HAL_GPIO_TogglePin(Port, Pin);
 8001c9a:	88fb      	ldrh	r3, [r7, #6]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	68b8      	ldr	r0, [r7, #8]
 8001ca0:	f001 f8a9 	bl	8002df6 <HAL_GPIO_TogglePin>
  	  }
  	  last = (_Bool)HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin);
 8001ca4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ca8:	4819      	ldr	r0, [pc, #100]	; (8001d10 <menu_dout_routine+0xc4>)
 8001caa:	f001 f873 	bl	8002d94 <HAL_GPIO_ReadPin>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	bf14      	ite	ne
 8001cb4:	2301      	movne	r3, #1
 8001cb6:	2300      	moveq	r3, #0
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <menu_dout_routine+0xc0>)
 8001cbc:	701a      	strb	r2, [r3, #0]
  }

  char temp_str[LCD_LINE_BUF_LEN];
  hmenuitem->DisplayStrLen = snprintf(temp_str, LCD_LINE_LEN, "%s: %s", name, (_Bool)HAL_GPIO_ReadPin(Port, Pin) ? "ON" : "OFF");
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	68b8      	ldr	r0, [r7, #8]
 8001cc4:	f001 f866 	bl	8002d94 <HAL_GPIO_ReadPin>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <menu_dout_routine+0x86>
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <menu_dout_routine+0xc8>)
 8001cd0:	e000      	b.n	8001cd4 <menu_dout_routine+0x88>
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <menu_dout_routine+0xcc>)
 8001cd4:	f107 0014 	add.w	r0, r7, #20
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	4a0f      	ldr	r2, [pc, #60]	; (8001d1c <menu_dout_routine+0xd0>)
 8001cde:	2110      	movs	r1, #16
 8001ce0:	f006 fed8 	bl	8008a94 <sniprintf>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	825a      	strh	r2, [r3, #18]
  MENU_ITEM_WriteDisplayBuffer(hmenuitem, temp_str); // Set display buffer
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f7ff fed2 	bl	8001a9c <MENU_ITEM_WriteDisplayBuffer>
  hmenuitem->SerialPortStrLen = 0;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
}
 8001d00:	bf00      	nop
 8001d02:	372c      	adds	r7, #44	; 0x2c
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd90      	pop	{r4, r7, pc}
 8001d08:	20000048 	.word	0x20000048
 8001d0c:	20000e94 	.word	0x20000e94
 8001d10:	40020800 	.word	0x40020800
 8001d14:	0800b160 	.word	0x0800b160
 8001d18:	0800b164 	.word	0x0800b164
 8001d1c:	0800b168 	.word	0x0800b168

08001d20 <menu_folder_routine>:
 * @brief Common menu folders routine.
 * @param[in/out] hmenuitem : Menu item structure
 * @param[in]     name      : Output display name
 */
void menu_folder_routine(MenuItem_TypeDef* hmenuitem, const char* name)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
	char temp_str[LCD_LINE_BUF_LEN];
	hmenuitem->DisplayStrLen = snprintf(temp_str, LCD_LINE_LEN, "%s", name);
 8001d2a:	f107 000c 	add.w	r0, r7, #12
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <menu_folder_routine+0x3c>)
 8001d32:	2110      	movs	r1, #16
 8001d34:	f006 feae 	bl	8008a94 <sniprintf>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	825a      	strh	r2, [r3, #18]
	MENU_ITEM_WriteDisplayBuffer(hmenuitem, temp_str); // Set display buffer
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	4619      	mov	r1, r3
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff fea8 	bl	8001a9c <MENU_ITEM_WriteDisplayBuffer>
	hmenuitem->SerialPortStrLen = 0;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
}
 8001d54:	bf00      	nop
 8001d56:	3720      	adds	r7, #32
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	0800b170 	.word	0x0800b170

08001d60 <menu_float_io_routine>:
//  MENU_ITEM_WriteDisplayBuffer(hmenuitem, temp_str); // Set display buffer
//  hmenuitem->SerialPortStrLen = 0;
//}

void menu_float_io_routine(MenuItem_TypeDef* hmenuitem, float value, unsigned int len, const char* name, const char* unit)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b092      	sub	sp, #72	; 0x48
 8001d64:	af06      	add	r7, sp, #24
 8001d66:	6178      	str	r0, [r7, #20]
 8001d68:	ed87 0a04 	vstr	s0, [r7, #16]
 8001d6c:	60f9      	str	r1, [r7, #12]
 8001d6e:	60ba      	str	r2, [r7, #8]
 8001d70:	607b      	str	r3, [r7, #4]
  char temp_str[LCD_LINE_BUF_LEN];
  hmenuitem->DisplayStrLen = snprintf(temp_str, LCD_LINE_LEN, "%s: %*.1f%s", name, len, value, unit);
 8001d72:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d7a:	f107 001c 	add.w	r0, r7, #28
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	9304      	str	r3, [sp, #16]
 8001d82:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <menu_float_io_routine+0x58>)
 8001d8e:	2110      	movs	r1, #16
 8001d90:	f006 fe80 	bl	8008a94 <sniprintf>
 8001d94:	4603      	mov	r3, r0
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	825a      	strh	r2, [r3, #18]
  MENU_ITEM_WriteDisplayBuffer(hmenuitem, temp_str); // Set display buffer
 8001d9c:	f107 031c 	add.w	r3, r7, #28
 8001da0:	4619      	mov	r1, r3
 8001da2:	6978      	ldr	r0, [r7, #20]
 8001da4:	f7ff fe7a 	bl	8001a9c <MENU_ITEM_WriteDisplayBuffer>
  hmenuitem->SerialPortStrLen = 0;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
}
 8001db0:	bf00      	nop
 8001db2:	3730      	adds	r7, #48	; 0x30
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	0800b174 	.word	0x0800b174

08001dbc <MENU_Init>:
/**
 * @brief Menu initialization. Creates doubly-linked list from elements of MENU_MAIN_ARRAY.
 * @param[in/out] hmenu : Menu structure
 */
void MENU_Init(Menu_TypeDef* hmenu)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Active element initialization */
  hmenu->Item = MENU_MAIN_ARRAY[0];
 8001dc4:	4b6b      	ldr	r3, [pc, #428]	; (8001f74 <MENU_Init+0x1b8>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	601a      	str	r2, [r3, #0]

  /* Folders loop*/
  for(uint8_t i = 0; i < (uint8_t)(MENU_FOLDERS_NBR-1); i++) //< Next item
 8001dcc:	2300      	movs	r3, #0
 8001dce:	73fb      	strb	r3, [r7, #15]
 8001dd0:	e00c      	b.n	8001dec <MENU_Init+0x30>
      {
  	  MENU_MAIN_ARRAY[i]->Next = MENU_MAIN_ARRAY[i+1];
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	4966      	ldr	r1, [pc, #408]	; (8001f74 <MENU_Init+0x1b8>)
 8001dda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001dde:	4965      	ldr	r1, [pc, #404]	; (8001f74 <MENU_Init+0x1b8>)
 8001de0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001de4:	659a      	str	r2, [r3, #88]	; 0x58
  for(uint8_t i = 0; i < (uint8_t)(MENU_FOLDERS_NBR-1); i++) //< Next item
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	3301      	adds	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0ef      	beq.n	8001dd2 <MENU_Init+0x16>
      }

  for(uint8_t i = 1; i < (uint8_t)MENU_FOLDERS_NBR; i++)     //< Previous item
 8001df2:	2301      	movs	r3, #1
 8001df4:	73bb      	strb	r3, [r7, #14]
 8001df6:	e00c      	b.n	8001e12 <MENU_Init+0x56>
      {
  	  MENU_MAIN_ARRAY[i]->Prev = MENU_MAIN_ARRAY[i-1];
 8001df8:	7bbb      	ldrb	r3, [r7, #14]
 8001dfa:	1e5a      	subs	r2, r3, #1
 8001dfc:	7bbb      	ldrb	r3, [r7, #14]
 8001dfe:	495d      	ldr	r1, [pc, #372]	; (8001f74 <MENU_Init+0x1b8>)
 8001e00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e04:	495b      	ldr	r1, [pc, #364]	; (8001f74 <MENU_Init+0x1b8>)
 8001e06:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001e0a:	65da      	str	r2, [r3, #92]	; 0x5c
  for(uint8_t i = 1; i < (uint8_t)MENU_FOLDERS_NBR; i++)     //< Previous item
 8001e0c:	7bbb      	ldrb	r3, [r7, #14]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	73bb      	strb	r3, [r7, #14]
 8001e12:	7bbb      	ldrb	r3, [r7, #14]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d9ef      	bls.n	8001df8 <MENU_Init+0x3c>
      }
  /* Cyclic list */
  MENU_MAIN_ARRAY[MENU_FOLDERS_NBR-1]->Next = MENU_MAIN_ARRAY[0]; //< Next of last is first item
 8001e18:	4b56      	ldr	r3, [pc, #344]	; (8001f74 <MENU_Init+0x1b8>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	4a55      	ldr	r2, [pc, #340]	; (8001f74 <MENU_Init+0x1b8>)
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	659a      	str	r2, [r3, #88]	; 0x58
  MENU_MAIN_ARRAY[0]->Prev = MENU_MAIN_ARRAY[MENU_FOLDERS_NBR-1]; //< Previous of first is last item
 8001e22:	4b54      	ldr	r3, [pc, #336]	; (8001f74 <MENU_Init+0x1b8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a53      	ldr	r2, [pc, #332]	; (8001f74 <MENU_Init+0x1b8>)
 8001e28:	6852      	ldr	r2, [r2, #4]
 8001e2a:	65da      	str	r2, [r3, #92]	; 0x5c

  MENU_MAIN_ARRAY[0]->Child = MENU_MAIN_ARRAY[MENU_1ST_DO];
 8001e2c:	4b51      	ldr	r3, [pc, #324]	; (8001f74 <MENU_Init+0x1b8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a50      	ldr	r2, [pc, #320]	; (8001f74 <MENU_Init+0x1b8>)
 8001e32:	6892      	ldr	r2, [r2, #8]
 8001e34:	661a      	str	r2, [r3, #96]	; 0x60

  /* Digital outputs loop */
    for(uint8_t i = MENU_1ST_DO; i < (uint8_t)(MENU_1ST_DO + MENU_DO_NBR-1); i++) //< Next item
 8001e36:	2302      	movs	r3, #2
 8001e38:	737b      	strb	r3, [r7, #13]
 8001e3a:	e00c      	b.n	8001e56 <MENU_Init+0x9a>
        {
    	  MENU_MAIN_ARRAY[i]->Next = MENU_MAIN_ARRAY[i+1];
 8001e3c:	7b7b      	ldrb	r3, [r7, #13]
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	7b7b      	ldrb	r3, [r7, #13]
 8001e42:	494c      	ldr	r1, [pc, #304]	; (8001f74 <MENU_Init+0x1b8>)
 8001e44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e48:	494a      	ldr	r1, [pc, #296]	; (8001f74 <MENU_Init+0x1b8>)
 8001e4a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001e4e:	659a      	str	r2, [r3, #88]	; 0x58
    for(uint8_t i = MENU_1ST_DO; i < (uint8_t)(MENU_1ST_DO + MENU_DO_NBR-1); i++) //< Next item
 8001e50:	7b7b      	ldrb	r3, [r7, #13]
 8001e52:	3301      	adds	r3, #1
 8001e54:	737b      	strb	r3, [r7, #13]
 8001e56:	7b7b      	ldrb	r3, [r7, #13]
 8001e58:	2b05      	cmp	r3, #5
 8001e5a:	d9ef      	bls.n	8001e3c <MENU_Init+0x80>
        }

    for(uint8_t i = MENU_1ST_DO + 1; i < (uint8_t)MENU_1ST_DO + MENU_DO_NBR; i++)     //< Previous item
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	733b      	strb	r3, [r7, #12]
 8001e60:	e013      	b.n	8001e8a <MENU_Init+0xce>
        {
    	  MENU_MAIN_ARRAY[i]->Prev = MENU_MAIN_ARRAY[i-1];
 8001e62:	7b3b      	ldrb	r3, [r7, #12]
 8001e64:	1e5a      	subs	r2, r3, #1
 8001e66:	7b3b      	ldrb	r3, [r7, #12]
 8001e68:	4942      	ldr	r1, [pc, #264]	; (8001f74 <MENU_Init+0x1b8>)
 8001e6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e6e:	4941      	ldr	r1, [pc, #260]	; (8001f74 <MENU_Init+0x1b8>)
 8001e70:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001e74:	65da      	str	r2, [r3, #92]	; 0x5c
    	  MENU_MAIN_ARRAY[i]->Parent = MENU_MAIN_ARRAY[0];
 8001e76:	7b3b      	ldrb	r3, [r7, #12]
 8001e78:	4a3e      	ldr	r2, [pc, #248]	; (8001f74 <MENU_Init+0x1b8>)
 8001e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7e:	4a3d      	ldr	r2, [pc, #244]	; (8001f74 <MENU_Init+0x1b8>)
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	665a      	str	r2, [r3, #100]	; 0x64
    for(uint8_t i = MENU_1ST_DO + 1; i < (uint8_t)MENU_1ST_DO + MENU_DO_NBR; i++)     //< Previous item
 8001e84:	7b3b      	ldrb	r3, [r7, #12]
 8001e86:	3301      	adds	r3, #1
 8001e88:	733b      	strb	r3, [r7, #12]
 8001e8a:	7b3b      	ldrb	r3, [r7, #12]
 8001e8c:	2b06      	cmp	r3, #6
 8001e8e:	d9e8      	bls.n	8001e62 <MENU_Init+0xa6>
        }
    MENU_MAIN_ARRAY[MENU_1ST_DO]->Parent = MENU_MAIN_ARRAY[0];
 8001e90:	4b38      	ldr	r3, [pc, #224]	; (8001f74 <MENU_Init+0x1b8>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	4a37      	ldr	r2, [pc, #220]	; (8001f74 <MENU_Init+0x1b8>)
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	665a      	str	r2, [r3, #100]	; 0x64

    /* Cyclic list */
    MENU_MAIN_ARRAY[MENU_1ST_DO + MENU_DO_NBR-1]->Next = MENU_MAIN_ARRAY[MENU_1ST_DO]; //< Next of last is first item
 8001e9a:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <MENU_Init+0x1b8>)
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	4a35      	ldr	r2, [pc, #212]	; (8001f74 <MENU_Init+0x1b8>)
 8001ea0:	6892      	ldr	r2, [r2, #8]
 8001ea2:	659a      	str	r2, [r3, #88]	; 0x58
    MENU_MAIN_ARRAY[MENU_1ST_DO]->Prev = MENU_MAIN_ARRAY[MENU_1ST_DO + MENU_DO_NBR-1]; //< Previous of first is last item
 8001ea4:	4b33      	ldr	r3, [pc, #204]	; (8001f74 <MENU_Init+0x1b8>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	4a32      	ldr	r2, [pc, #200]	; (8001f74 <MENU_Init+0x1b8>)
 8001eaa:	6992      	ldr	r2, [r2, #24]
 8001eac:	65da      	str	r2, [r3, #92]	; 0x5c


    MENU_MAIN_ARRAY[1]->Child = MENU_MAIN_ARRAY[MENU_1ST_DI];
 8001eae:	4b31      	ldr	r3, [pc, #196]	; (8001f74 <MENU_Init+0x1b8>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4a30      	ldr	r2, [pc, #192]	; (8001f74 <MENU_Init+0x1b8>)
 8001eb4:	69d2      	ldr	r2, [r2, #28]
 8001eb6:	661a      	str	r2, [r3, #96]	; 0x60
    /* Digital Input loop */
    for(uint8_t i = MENU_1ST_DI; i < (uint8_t)(MENU_1ST_DI + MENU_DI_NBR-1); i++) //< Next item
 8001eb8:	2307      	movs	r3, #7
 8001eba:	72fb      	strb	r3, [r7, #11]
 8001ebc:	e00c      	b.n	8001ed8 <MENU_Init+0x11c>
    {
        MENU_MAIN_ARRAY[i]->Next = MENU_MAIN_ARRAY[i+1];
 8001ebe:	7afb      	ldrb	r3, [r7, #11]
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	7afb      	ldrb	r3, [r7, #11]
 8001ec4:	492b      	ldr	r1, [pc, #172]	; (8001f74 <MENU_Init+0x1b8>)
 8001ec6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001eca:	492a      	ldr	r1, [pc, #168]	; (8001f74 <MENU_Init+0x1b8>)
 8001ecc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ed0:	659a      	str	r2, [r3, #88]	; 0x58
    for(uint8_t i = MENU_1ST_DI; i < (uint8_t)(MENU_1ST_DI + MENU_DI_NBR-1); i++) //< Next item
 8001ed2:	7afb      	ldrb	r3, [r7, #11]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	72fb      	strb	r3, [r7, #11]
 8001ed8:	7afb      	ldrb	r3, [r7, #11]
 8001eda:	2b07      	cmp	r3, #7
 8001edc:	d9ef      	bls.n	8001ebe <MENU_Init+0x102>
    }

    for(uint8_t i = MENU_1ST_DI + 1; i < (uint8_t)MENU_1ST_DI + MENU_DI_NBR; i++)     //< Previous item
 8001ede:	2308      	movs	r3, #8
 8001ee0:	72bb      	strb	r3, [r7, #10]
 8001ee2:	e013      	b.n	8001f0c <MENU_Init+0x150>
    {
    	MENU_MAIN_ARRAY[i]->Prev = MENU_MAIN_ARRAY[i-1];
 8001ee4:	7abb      	ldrb	r3, [r7, #10]
 8001ee6:	1e5a      	subs	r2, r3, #1
 8001ee8:	7abb      	ldrb	r3, [r7, #10]
 8001eea:	4922      	ldr	r1, [pc, #136]	; (8001f74 <MENU_Init+0x1b8>)
 8001eec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ef0:	4920      	ldr	r1, [pc, #128]	; (8001f74 <MENU_Init+0x1b8>)
 8001ef2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ef6:	65da      	str	r2, [r3, #92]	; 0x5c
    	MENU_MAIN_ARRAY[i]->Parent = MENU_MAIN_ARRAY[1];
 8001ef8:	7abb      	ldrb	r3, [r7, #10]
 8001efa:	4a1e      	ldr	r2, [pc, #120]	; (8001f74 <MENU_Init+0x1b8>)
 8001efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f00:	4a1c      	ldr	r2, [pc, #112]	; (8001f74 <MENU_Init+0x1b8>)
 8001f02:	6852      	ldr	r2, [r2, #4]
 8001f04:	665a      	str	r2, [r3, #100]	; 0x64
    for(uint8_t i = MENU_1ST_DI + 1; i < (uint8_t)MENU_1ST_DI + MENU_DI_NBR; i++)     //< Previous item
 8001f06:	7abb      	ldrb	r3, [r7, #10]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	72bb      	strb	r3, [r7, #10]
 8001f0c:	7abb      	ldrb	r3, [r7, #10]
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d9e8      	bls.n	8001ee4 <MENU_Init+0x128>
    }
    MENU_MAIN_ARRAY[MENU_1ST_DI]->Parent = MENU_MAIN_ARRAY[1];
 8001f12:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <MENU_Init+0x1b8>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	4a17      	ldr	r2, [pc, #92]	; (8001f74 <MENU_Init+0x1b8>)
 8001f18:	6852      	ldr	r2, [r2, #4]
 8001f1a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Cyclic list */
    MENU_MAIN_ARRAY[MENU_1ST_DI + MENU_DI_NBR-1]->Next = MENU_MAIN_ARRAY[MENU_1ST_DI]; //< Next of last is first item
 8001f1c:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <MENU_Init+0x1b8>)
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	4a14      	ldr	r2, [pc, #80]	; (8001f74 <MENU_Init+0x1b8>)
 8001f22:	69d2      	ldr	r2, [r2, #28]
 8001f24:	659a      	str	r2, [r3, #88]	; 0x58
    MENU_MAIN_ARRAY[MENU_1ST_DI]->Prev = MENU_MAIN_ARRAY[MENU_1ST_DI + MENU_DI_NBR-1]; //< Previous of first is last item
 8001f26:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <MENU_Init+0x1b8>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <MENU_Init+0x1b8>)
 8001f2c:	6a12      	ldr	r2, [r2, #32]
 8001f2e:	65da      	str	r2, [r3, #92]	; 0x5c


  hmenu->Initialized = 1;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	751a      	strb	r2, [r3, #20]

  /* LCD set-up */
  Lcd_cursor(hmenu->Display, 0, 0);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fcd4 	bl	80018ec <Lcd_cursor>
  Lcd_string(hmenu->Display, ">");
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	490b      	ldr	r1, [pc, #44]	; (8001f78 <MENU_Init+0x1bc>)
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff fcae 	bl	80018ac <Lcd_string>
  Lcd_cursor(hmenu->Display, 1, 0);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2200      	movs	r2, #0
 8001f56:	2101      	movs	r1, #1
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fcc7 	bl	80018ec <Lcd_cursor>
  Lcd_string(hmenu->Display, " ");
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	4906      	ldr	r1, [pc, #24]	; (8001f7c <MENU_Init+0x1c0>)
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fca1 	bl	80018ac <Lcd_string>
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	2000042c 	.word	0x2000042c
 8001f78:	0800b180 	.word	0x0800b180
 8001f7c:	0800b184 	.word	0x0800b184

08001f80 <MENU_ROUTINE>:
/**
 * @brief Menu routine. Calls active items routines and updates output devices.
 * @param[in/out] hmenu : Menu structure
 */
void MENU_ROUTINE(Menu_TypeDef* hmenu)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]

  if(!hmenu->Initialized)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	7d1b      	ldrb	r3, [r3, #20]
 8001f8c:	f083 0301 	eor.w	r3, r3, #1
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d13f      	bne.n	8002016 <MENU_ROUTINE+0x96>
  {
	  return;
  }

  MENU_CALL_ROUTINE(hmenu->Item);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4798      	blx	r3
  MENU_CALL_ROUTINE(hmenu->Item->Next);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	4798      	blx	r3

  hmenu->ItemChanged = 0;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	711a      	strb	r2, [r3, #4]

  // #1 line - active item
  Lcd_cursor(hmenu->Display, 0, 1);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fc91 	bl	80018ec <Lcd_cursor>
  Lcd_string(hmenu->Display, hmenu->Item->DisplayStr);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	f7ff fc69 	bl	80018ac <Lcd_string>

  // #1 line - next item
  Lcd_cursor(hmenu->Display, 1, 1);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff fc82 	bl	80018ec <Lcd_cursor>
  Lcd_string(hmenu->Display, hmenu->Item->Next->DisplayStr);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	f7ff fc59 	bl	80018ac <Lcd_string>


  // Serial port streaming
  HAL_UART_Transmit(hmenu->SerialPort, (uint8_t*)hmenu->Item->SerialPortStr, hmenu->Item->SerialPortStrLen, 10);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6918      	ldr	r0, [r3, #16]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f103 0114 	add.w	r1, r3, #20
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800200e:	230a      	movs	r3, #10
 8002010:	f004 f9f4 	bl	80063fc <HAL_UART_Transmit>
 8002014:	e000      	b.n	8002018 <MENU_ROUTINE+0x98>
	  return;
 8002016:	bf00      	nop
}
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <PID_Init>:
#include "main.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	if (uPID->OutputSum > uPID->OutMax)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800204e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002056:	dd06      	ble.n	8002066 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8002064:	e011      	b.n	800208a <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8002072:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207a:	d400      	bmi.n	800207e <PID_Init+0x60>
}
 800207c:	e005      	b.n	800208a <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	; 0x28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6278      	str	r0, [r7, #36]	; 0x24
 80020a0:	6239      	str	r1, [r7, #32]
 80020a2:	61fa      	str	r2, [r7, #28]
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	ed87 0b04 	vstr	d0, [r7, #16]
 80020aa:	ed87 1b02 	vstr	d1, [r7, #8]
 80020ae:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	69fa      	ldr	r2, [r7, #28]
 80020b6:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	6a3a      	ldr	r2, [r7, #32]
 80020bc:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	2200      	movs	r2, #0
 80020c8:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 80020ca:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8002120 <PID+0x88>
 80020ce:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8002128 <PID+0x90>
 80020d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020d4:	f000 f91a 	bl	800230c <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	2264      	movs	r2, #100	; 0x64
 80020dc:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 80020de:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80020e2:	4619      	mov	r1, r3
 80020e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020e6:	f000 fa13 	bl	8002510 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80020ea:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80020ee:	4619      	mov	r1, r3
 80020f0:	ed97 2b00 	vldr	d2, [r7]
 80020f4:	ed97 1b02 	vldr	d1, [r7, #8]
 80020f8:	ed97 0b04 	vldr	d0, [r7, #16]
 80020fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020fe:	f000 f977 	bl	80023f0 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 8002102:	f000 fac7 	bl	8002694 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	1ad2      	subs	r2, r2, r3
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	605a      	str	r2, [r3, #4]

}
 8002112:	bf00      	nop
 8002114:	3728      	adds	r7, #40	; 0x28
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	f3af 8000 	nop.w
 8002120:	00000000 	.word	0x00000000
 8002124:	406fe000 	.word	0x406fe000
	...

08002130 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08c      	sub	sp, #48	; 0x30
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	785b      	ldrb	r3, [r3, #1]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <PID_Compute+0x14>
	{
		return _FALSE;
 8002140:	2300      	movs	r3, #0
 8002142:	e0c1      	b.n	80022c8 <PID_Compute+0x198>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8002144:	f000 faa6 	bl	8002694 <HAL_GetTick>
 8002148:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	6a3a      	ldr	r2, [r7, #32]
 800215a:	429a      	cmp	r2, r3
 800215c:	f0c0 80b3 	bcc.w	80022c6 <PID_Compute+0x196>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002168:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002170:	ed93 6b00 	vldr	d6, [r3]
 8002174:	ed97 7b06 	vldr	d7, [r7, #24]
 8002178:	ee36 7b47 	vsub.f64	d7, d6, d7
 800217c:	ed87 7b04 	vstr	d7, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8002186:	ed97 6b06 	vldr	d6, [r7, #24]
 800218a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800218e:	ed87 7b02 	vstr	d7, [r7, #8]

		uPID->OutputSum     += (uPID->Ki * error);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	ed93 5b0c 	vldr	d5, [r3, #48]	; 0x30
 800219e:	ed97 7b04 	vldr	d7, [r7, #16]
 80021a2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80021a6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50

		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10e      	bne.n	80021d6 <PID_Compute+0xa6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 80021c4:	ed97 7b02 	vldr	d7, [r7, #8]
 80021c8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80021cc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
		}

		if (uPID->OutputSum > uPID->OutMax)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80021e2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80021e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ea:	dd06      	ble.n	80021fa <PID_Compute+0xca>
		{
			uPID->OutputSum = uPID->OutMax;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80021f8:	e010      	b.n	800221c <PID_Compute+0xec>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8002206:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800220a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220e:	d505      	bpl.n	800221c <PID_Compute+0xec>
		{
			uPID->OutputSum = uPID->OutMin;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }

		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d009      	beq.n	8002238 <PID_Compute+0x108>
		{
			output = uPID->Kp * error;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800222a:	ed97 6b04 	vldr	d6, [r7, #16]
 800222e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002232:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
 8002236:	e005      	b.n	8002244 <PID_Compute+0x114>
		}
		else
		{
			output = 0;
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 8002250:	ed97 7b02 	vldr	d7, [r7, #8]
 8002254:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002258:	ee36 7b47 	vsub.f64	d7, d6, d7
 800225c:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8002260:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002264:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800226e:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8002272:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227a:	dd05      	ble.n	8002288 <PID_Compute+0x158>
		{
			output = uPID->OutMax;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002282:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002286:	e00e      	b.n	80022a6 <PID_Compute+0x176>
		}
		else if (output < uPID->OutMin)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 800228e:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8002292:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800229a:	d504      	bpl.n	80022a6 <PID_Compute+0x176>
		{
			output = uPID->OutMin;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80022a2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }

		*uPID->MyOutput = output;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80022aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022ae:	e9c1 2300 	strd	r2, r3, [r1]

		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022b8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c0:	605a      	str	r2, [r3, #4]

		return _TRUE;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <PID_Compute+0x198>

	}
	else
	{
		return _FALSE;
 80022c6:	2300      	movs	r3, #0
	}

}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3730      	adds	r7, #48	; 0x30
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	bf0c      	ite	eq
 80022e2:	2301      	moveq	r3, #1
 80022e4:	2300      	movne	r3, #0
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d006      	beq.n	80022fe <PID_SetMode+0x2e>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	785b      	ldrb	r3, [r3, #1]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d102      	bne.n	80022fe <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff fe90 	bl	800201e <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	7bfa      	ldrb	r2, [r7, #15]
 8002302:	705a      	strb	r2, [r3, #1]

}
 8002304:	bf00      	nop
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6178      	str	r0, [r7, #20]
 8002314:	ed87 0b02 	vstr	d0, [r7, #8]
 8002318:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 800231c:	ed97 6b02 	vldr	d6, [r7, #8]
 8002320:	ed97 7b00 	vldr	d7, [r7]
 8002324:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232c:	da58      	bge.n	80023e0 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 800232e:	6979      	ldr	r1, [r7, #20]
 8002330:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002334:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8002338:	6979      	ldr	r1, [r7, #20]
 800233a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800233e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	785b      	ldrb	r3, [r3, #1]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d04b      	beq.n	80023e2 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	ed93 6b00 	vldr	d6, [r3]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8002358:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800235c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002360:	dd07      	ble.n	8002372 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800236c:	e9c1 2300 	strd	r2, r3, [r1]
 8002370:	e012      	b.n	8002398 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	ed93 6b00 	vldr	d6, [r3]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8002380:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002388:	d506      	bpl.n	8002398 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002394:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80023a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80023a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ac:	dd06      	ble.n	80023bc <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80023b4:	6979      	ldr	r1, [r7, #20]
 80023b6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80023ba:	e012      	b.n	80023e2 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80023c8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80023cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d0:	d507      	bpl.n	80023e2 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80023d8:	6979      	ldr	r1, [r7, #20]
 80023da:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80023de:	e000      	b.n	80023e2 <PID_SetOutputLimits+0xd6>
		return;
 80023e0:	bf00      	nop
		}
		else { }

	}

}
 80023e2:	371c      	adds	r7, #28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	0000      	movs	r0, r0
	...

080023f0 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b08b      	sub	sp, #44	; 0x2c
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	61f8      	str	r0, [r7, #28]
 80023f8:	ed87 0b04 	vstr	d0, [r7, #16]
 80023fc:	ed87 1b02 	vstr	d1, [r7, #8]
 8002400:	ed87 2b00 	vstr	d2, [r7]
 8002404:	460b      	mov	r3, r1
 8002406:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002408:	ed97 7b04 	vldr	d7, [r7, #16]
 800240c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002414:	d46e      	bmi.n	80024f4 <PID_SetTunings2+0x104>
 8002416:	ed97 7b02 	vldr	d7, [r7, #8]
 800241a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800241e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002422:	d467      	bmi.n	80024f4 <PID_SetTunings2+0x104>
 8002424:	ed97 7b00 	vldr	d7, [r7]
 8002428:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800242c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002430:	d460      	bmi.n	80024f4 <PID_SetTunings2+0x104>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	7efa      	ldrb	r2, [r7, #27]
 8002436:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002438:	7efb      	ldrb	r3, [r7, #27]
 800243a:	2b01      	cmp	r3, #1
 800243c:	bf0c      	ite	eq
 800243e:	2301      	moveq	r3, #1
 8002440:	2300      	movne	r3, #0
 8002442:	b2db      	uxtb	r3, r3
 8002444:	461a      	mov	r2, r3
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 800244a:	69f9      	ldr	r1, [r7, #28]
 800244c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002450:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8002454:	69f9      	ldr	r1, [r7, #28]
 8002456:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800245a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 800245e:	69f9      	ldr	r1, [r7, #28]
 8002460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002464:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	ee07 3a90 	vmov	s15, r3
 8002470:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002474:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8002500 <PID_SetTunings2+0x110>
 8002478:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800247c:	ed87 7b08 	vstr	d7, [r7, #32]

	uPID->Kp = Kp;
 8002480:	69f9      	ldr	r1, [r7, #28]
 8002482:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002486:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 800248a:	ed97 6b02 	vldr	d6, [r7, #8]
 800248e:	ed97 7b08 	vldr	d7, [r7, #32]
 8002492:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 800249c:	ed97 5b00 	vldr	d5, [r7]
 80024a0:	ed97 6b08 	vldr	d6, [r7, #32]
 80024a4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	78db      	ldrb	r3, [r3, #3]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d11f      	bne.n	80024f6 <PID_SetTunings2+0x106>
	{

		uPID->Kp = (0 - uPID->Kp);
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80024bc:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8002508 <PID_SetTunings2+0x118>
 80024c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80024d0:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8002508 <PID_SetTunings2+0x118>
 80024d4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80024e4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8002508 <PID_SetTunings2+0x118>
 80024e8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
 80024f2:	e000      	b.n	80024f6 <PID_SetTunings2+0x106>
		return;
 80024f4:	bf00      	nop

	}

}
 80024f6:	372c      	adds	r7, #44	; 0x2c
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	00000000 	.word	0x00000000
 8002504:	408f4000 	.word	0x408f4000
	...

08002510 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	785b      	ldrb	r3, [r3, #1]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d022      	beq.n	800256a <PID_SetControllerDirection+0x5a>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	78db      	ldrb	r3, [r3, #3]
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	429a      	cmp	r2, r3
 800252c:	d01d      	beq.n	800256a <PID_SetControllerDirection+0x5a>
	{

		uPID->Kp = (0 - uPID->Kp);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002534:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8002580 <PID_SetControllerDirection+0x70>
 8002538:	ee36 7b47 	vsub.f64	d7, d6, d7
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002548:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8002580 <PID_SetControllerDirection+0x70>
 800254c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800255c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8002580 <PID_SetControllerDirection+0x70>
 8002560:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	70da      	strb	r2, [r3, #3]

}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	f3af 8000 	nop.w
	...

08002588 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	dd25      	ble.n	80025e4 <PID_SetSampleTime+0x5c>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	ee07 3a90 	vmov	s15, r3
 800259e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	ee07 3a90 	vmov	s15, r3
 80025aa:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80025ae:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80025b2:	ed87 7b02 	vstr	d7, [r7, #8]

		uPID->Ki *= ratio;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 80025bc:	ed97 7b02 	vldr	d7, [r7, #8]
 80025c0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		uPID->Kd /= ratio;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 80025d0:	ed97 6b02 	vldr	d6, [r7, #8]
 80025d4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	609a      	str	r2, [r3, #8]

	}

}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025f4:	2003      	movs	r0, #3
 80025f6:	f000 f94d 	bl	8002894 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025fa:	2000      	movs	r0, #0
 80025fc:	f000 f806 	bl	800260c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002600:	f7fe fc34 	bl	8000e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002614:	4b12      	ldr	r3, [pc, #72]	; (8002660 <HAL_InitTick+0x54>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4b12      	ldr	r3, [pc, #72]	; (8002664 <HAL_InitTick+0x58>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	4619      	mov	r1, r3
 800261e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002622:	fbb3 f3f1 	udiv	r3, r3, r1
 8002626:	fbb2 f3f3 	udiv	r3, r2, r3
 800262a:	4618      	mov	r0, r3
 800262c:	f000 f967 	bl	80028fe <HAL_SYSTICK_Config>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e00e      	b.n	8002658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b0f      	cmp	r3, #15
 800263e:	d80a      	bhi.n	8002656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002640:	2200      	movs	r2, #0
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	f04f 30ff 	mov.w	r0, #4294967295
 8002648:	f000 f92f 	bl	80028aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800264c:	4a06      	ldr	r2, [pc, #24]	; (8002668 <HAL_InitTick+0x5c>)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	e000      	b.n	8002658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
}
 8002658:	4618      	mov	r0, r3
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	20000000 	.word	0x20000000
 8002664:	200004c4 	.word	0x200004c4
 8002668:	200004c0 	.word	0x200004c0

0800266c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_IncTick+0x20>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_IncTick+0x24>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4413      	add	r3, r2
 800267c:	4a04      	ldr	r2, [pc, #16]	; (8002690 <HAL_IncTick+0x24>)
 800267e:	6013      	str	r3, [r2, #0]
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	200004c4 	.word	0x200004c4
 8002690:	20000e98 	.word	0x20000e98

08002694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return uwTick;
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <HAL_GetTick+0x14>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000e98 	.word	0x20000e98

080026ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026b4:	f7ff ffee 	bl	8002694 <HAL_GetTick>
 80026b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c4:	d005      	beq.n	80026d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026c6:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <HAL_Delay+0x44>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4413      	add	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026d2:	bf00      	nop
 80026d4:	f7ff ffde 	bl	8002694 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d8f7      	bhi.n	80026d4 <HAL_Delay+0x28>
  {
  }
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	200004c4 	.word	0x200004c4

080026f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <__NVIC_SetPriorityGrouping+0x40>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002710:	4013      	ands	r3, r2
 8002712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800271c:	4b06      	ldr	r3, [pc, #24]	; (8002738 <__NVIC_SetPriorityGrouping+0x44>)
 800271e:	4313      	orrs	r3, r2
 8002720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002722:	4a04      	ldr	r2, [pc, #16]	; (8002734 <__NVIC_SetPriorityGrouping+0x40>)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	60d3      	str	r3, [r2, #12]
}
 8002728:	bf00      	nop
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000ed00 	.word	0xe000ed00
 8002738:	05fa0000 	.word	0x05fa0000

0800273c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002740:	4b04      	ldr	r3, [pc, #16]	; (8002754 <__NVIC_GetPriorityGrouping+0x18>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	0a1b      	lsrs	r3, r3, #8
 8002746:	f003 0307 	and.w	r3, r3, #7
}
 800274a:	4618      	mov	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	2b00      	cmp	r3, #0
 8002768:	db0b      	blt.n	8002782 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	f003 021f 	and.w	r2, r3, #31
 8002770:	4907      	ldr	r1, [pc, #28]	; (8002790 <__NVIC_EnableIRQ+0x38>)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	2001      	movs	r0, #1
 800277a:	fa00 f202 	lsl.w	r2, r0, r2
 800277e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	e000e100 	.word	0xe000e100

08002794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	6039      	str	r1, [r7, #0]
 800279e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	db0a      	blt.n	80027be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	490c      	ldr	r1, [pc, #48]	; (80027e0 <__NVIC_SetPriority+0x4c>)
 80027ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b2:	0112      	lsls	r2, r2, #4
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	440b      	add	r3, r1
 80027b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027bc:	e00a      	b.n	80027d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	4908      	ldr	r1, [pc, #32]	; (80027e4 <__NVIC_SetPriority+0x50>)
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	3b04      	subs	r3, #4
 80027cc:	0112      	lsls	r2, r2, #4
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	440b      	add	r3, r1
 80027d2:	761a      	strb	r2, [r3, #24]
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	e000e100 	.word	0xe000e100
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b089      	sub	sp, #36	; 0x24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f1c3 0307 	rsb	r3, r3, #7
 8002802:	2b04      	cmp	r3, #4
 8002804:	bf28      	it	cs
 8002806:	2304      	movcs	r3, #4
 8002808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3304      	adds	r3, #4
 800280e:	2b06      	cmp	r3, #6
 8002810:	d902      	bls.n	8002818 <NVIC_EncodePriority+0x30>
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3b03      	subs	r3, #3
 8002816:	e000      	b.n	800281a <NVIC_EncodePriority+0x32>
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281c:	f04f 32ff 	mov.w	r2, #4294967295
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43da      	mvns	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	401a      	ands	r2, r3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002830:	f04f 31ff 	mov.w	r1, #4294967295
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	fa01 f303 	lsl.w	r3, r1, r3
 800283a:	43d9      	mvns	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002840:	4313      	orrs	r3, r2
         );
}
 8002842:	4618      	mov	r0, r3
 8002844:	3724      	adds	r7, #36	; 0x24
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3b01      	subs	r3, #1
 800285c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002860:	d301      	bcc.n	8002866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002862:	2301      	movs	r3, #1
 8002864:	e00f      	b.n	8002886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002866:	4a0a      	ldr	r2, [pc, #40]	; (8002890 <SysTick_Config+0x40>)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3b01      	subs	r3, #1
 800286c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800286e:	210f      	movs	r1, #15
 8002870:	f04f 30ff 	mov.w	r0, #4294967295
 8002874:	f7ff ff8e 	bl	8002794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <SysTick_Config+0x40>)
 800287a:	2200      	movs	r2, #0
 800287c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800287e:	4b04      	ldr	r3, [pc, #16]	; (8002890 <SysTick_Config+0x40>)
 8002880:	2207      	movs	r2, #7
 8002882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	e000e010 	.word	0xe000e010

08002894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff ff29 	bl	80026f4 <__NVIC_SetPriorityGrouping>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b086      	sub	sp, #24
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	4603      	mov	r3, r0
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	607a      	str	r2, [r7, #4]
 80028b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028bc:	f7ff ff3e 	bl	800273c <__NVIC_GetPriorityGrouping>
 80028c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	68b9      	ldr	r1, [r7, #8]
 80028c6:	6978      	ldr	r0, [r7, #20]
 80028c8:	f7ff ff8e 	bl	80027e8 <NVIC_EncodePriority>
 80028cc:	4602      	mov	r2, r0
 80028ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028d2:	4611      	mov	r1, r2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ff5d 	bl	8002794 <__NVIC_SetPriority>
}
 80028da:	bf00      	nop
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	4603      	mov	r3, r0
 80028ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ff31 	bl	8002758 <__NVIC_EnableIRQ>
}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff ffa2 	bl	8002850 <SysTick_Config>
 800290c:	4603      	mov	r3, r0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002922:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002924:	f7ff feb6 	bl	8002694 <HAL_GetTick>
 8002928:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d008      	beq.n	8002948 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2280      	movs	r2, #128	; 0x80
 800293a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e052      	b.n	80029ee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0216 	bic.w	r2, r2, #22
 8002956:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695a      	ldr	r2, [r3, #20]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002966:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	2b00      	cmp	r3, #0
 800296e:	d103      	bne.n	8002978 <HAL_DMA_Abort+0x62>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002974:	2b00      	cmp	r3, #0
 8002976:	d007      	beq.n	8002988 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0208 	bic.w	r2, r2, #8
 8002986:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0201 	bic.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002998:	e013      	b.n	80029c2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800299a:	f7ff fe7b 	bl	8002694 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b05      	cmp	r3, #5
 80029a6:	d90c      	bls.n	80029c2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2220      	movs	r2, #32
 80029ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2203      	movs	r2, #3
 80029b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e015      	b.n	80029ee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1e4      	bne.n	800299a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d4:	223f      	movs	r2, #63	; 0x3f
 80029d6:	409a      	lsls	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d004      	beq.n	8002a14 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2280      	movs	r2, #128	; 0x80
 8002a0e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e00c      	b.n	8002a2e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2205      	movs	r2, #5
 8002a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0201 	bic.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
	...

08002a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b089      	sub	sp, #36	; 0x24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	e175      	b.n	8002d48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	f040 8164 	bne.w	8002d42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d005      	beq.n	8002a92 <HAL_GPIO_Init+0x56>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d130      	bne.n	8002af4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ac8:	2201      	movs	r2, #1
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	091b      	lsrs	r3, r3, #4
 8002ade:	f003 0201 	and.w	r2, r3, #1
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 0303 	and.w	r3, r3, #3
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d017      	beq.n	8002b30 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d123      	bne.n	8002b84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	08da      	lsrs	r2, r3, #3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3208      	adds	r2, #8
 8002b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	220f      	movs	r2, #15
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	08da      	lsrs	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3208      	adds	r2, #8
 8002b7e:	69b9      	ldr	r1, [r7, #24]
 8002b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	2203      	movs	r2, #3
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0203 	and.w	r2, r3, #3
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 80be 	beq.w	8002d42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc6:	4b66      	ldr	r3, [pc, #408]	; (8002d60 <HAL_GPIO_Init+0x324>)
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	4a65      	ldr	r2, [pc, #404]	; (8002d60 <HAL_GPIO_Init+0x324>)
 8002bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bd2:	4b63      	ldr	r3, [pc, #396]	; (8002d60 <HAL_GPIO_Init+0x324>)
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002bde:	4a61      	ldr	r2, [pc, #388]	; (8002d64 <HAL_GPIO_Init+0x328>)
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	089b      	lsrs	r3, r3, #2
 8002be4:	3302      	adds	r3, #2
 8002be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	220f      	movs	r2, #15
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a58      	ldr	r2, [pc, #352]	; (8002d68 <HAL_GPIO_Init+0x32c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d037      	beq.n	8002c7a <HAL_GPIO_Init+0x23e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a57      	ldr	r2, [pc, #348]	; (8002d6c <HAL_GPIO_Init+0x330>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d031      	beq.n	8002c76 <HAL_GPIO_Init+0x23a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a56      	ldr	r2, [pc, #344]	; (8002d70 <HAL_GPIO_Init+0x334>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d02b      	beq.n	8002c72 <HAL_GPIO_Init+0x236>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a55      	ldr	r2, [pc, #340]	; (8002d74 <HAL_GPIO_Init+0x338>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d025      	beq.n	8002c6e <HAL_GPIO_Init+0x232>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a54      	ldr	r2, [pc, #336]	; (8002d78 <HAL_GPIO_Init+0x33c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d01f      	beq.n	8002c6a <HAL_GPIO_Init+0x22e>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a53      	ldr	r2, [pc, #332]	; (8002d7c <HAL_GPIO_Init+0x340>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d019      	beq.n	8002c66 <HAL_GPIO_Init+0x22a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a52      	ldr	r2, [pc, #328]	; (8002d80 <HAL_GPIO_Init+0x344>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d013      	beq.n	8002c62 <HAL_GPIO_Init+0x226>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a51      	ldr	r2, [pc, #324]	; (8002d84 <HAL_GPIO_Init+0x348>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d00d      	beq.n	8002c5e <HAL_GPIO_Init+0x222>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a50      	ldr	r2, [pc, #320]	; (8002d88 <HAL_GPIO_Init+0x34c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d007      	beq.n	8002c5a <HAL_GPIO_Init+0x21e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a4f      	ldr	r2, [pc, #316]	; (8002d8c <HAL_GPIO_Init+0x350>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d101      	bne.n	8002c56 <HAL_GPIO_Init+0x21a>
 8002c52:	2309      	movs	r3, #9
 8002c54:	e012      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c56:	230a      	movs	r3, #10
 8002c58:	e010      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c5a:	2308      	movs	r3, #8
 8002c5c:	e00e      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c5e:	2307      	movs	r3, #7
 8002c60:	e00c      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c62:	2306      	movs	r3, #6
 8002c64:	e00a      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c66:	2305      	movs	r3, #5
 8002c68:	e008      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c6a:	2304      	movs	r3, #4
 8002c6c:	e006      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e004      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e002      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	69fa      	ldr	r2, [r7, #28]
 8002c7e:	f002 0203 	and.w	r2, r2, #3
 8002c82:	0092      	lsls	r2, r2, #2
 8002c84:	4093      	lsls	r3, r2
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c8c:	4935      	ldr	r1, [pc, #212]	; (8002d64 <HAL_GPIO_Init+0x328>)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	089b      	lsrs	r3, r3, #2
 8002c92:	3302      	adds	r3, #2
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c9a:	4b3d      	ldr	r3, [pc, #244]	; (8002d90 <HAL_GPIO_Init+0x354>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cbe:	4a34      	ldr	r2, [pc, #208]	; (8002d90 <HAL_GPIO_Init+0x354>)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cc4:	4b32      	ldr	r3, [pc, #200]	; (8002d90 <HAL_GPIO_Init+0x354>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ce8:	4a29      	ldr	r2, [pc, #164]	; (8002d90 <HAL_GPIO_Init+0x354>)
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cee:	4b28      	ldr	r3, [pc, #160]	; (8002d90 <HAL_GPIO_Init+0x354>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d12:	4a1f      	ldr	r2, [pc, #124]	; (8002d90 <HAL_GPIO_Init+0x354>)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d18:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <HAL_GPIO_Init+0x354>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d3c:	4a14      	ldr	r2, [pc, #80]	; (8002d90 <HAL_GPIO_Init+0x354>)
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3301      	adds	r3, #1
 8002d46:	61fb      	str	r3, [r7, #28]
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	2b0f      	cmp	r3, #15
 8002d4c:	f67f ae86 	bls.w	8002a5c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	3724      	adds	r7, #36	; 0x24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40013800 	.word	0x40013800
 8002d68:	40020000 	.word	0x40020000
 8002d6c:	40020400 	.word	0x40020400
 8002d70:	40020800 	.word	0x40020800
 8002d74:	40020c00 	.word	0x40020c00
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40021400 	.word	0x40021400
 8002d80:	40021800 	.word	0x40021800
 8002d84:	40021c00 	.word	0x40021c00
 8002d88:	40022000 	.word	0x40022000
 8002d8c:	40022400 	.word	0x40022400
 8002d90:	40013c00 	.word	0x40013c00

08002d94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	887b      	ldrh	r3, [r7, #2]
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
 8002db0:	e001      	b.n	8002db6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002db2:	2300      	movs	r3, #0
 8002db4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	807b      	strh	r3, [r7, #2]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dd4:	787b      	ldrb	r3, [r7, #1]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dda:	887a      	ldrh	r2, [r7, #2]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002de0:	e003      	b.n	8002dea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002de2:	887b      	ldrh	r3, [r7, #2]
 8002de4:	041a      	lsls	r2, r3, #16
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	619a      	str	r2, [r3, #24]
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b085      	sub	sp, #20
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e08:	887a      	ldrh	r2, [r7, #2]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	041a      	lsls	r2, r3, #16
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	43d9      	mvns	r1, r3
 8002e14:	887b      	ldrh	r3, [r7, #2]
 8002e16:	400b      	ands	r3, r1
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	619a      	str	r2, [r3, #24]
}
 8002e1e:	bf00      	nop
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
	...

08002e2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e36:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	88fb      	ldrh	r3, [r7, #6]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d006      	beq.n	8002e50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e42:	4a05      	ldr	r2, [pc, #20]	; (8002e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e48:	88fb      	ldrh	r3, [r7, #6]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 f806 	bl	8002e5c <HAL_GPIO_EXTI_Callback>
  }
}
 8002e50:	bf00      	nop
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40013c00 	.word	0x40013c00

08002e5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
	...

08002e74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e07f      	b.n	8002f86 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fd fd24 	bl	80008e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2224      	movs	r2, #36	; 0x24
 8002ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0201 	bic.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ec4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ed4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d107      	bne.n	8002eee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	e006      	b.n	8002efc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002efa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d104      	bne.n	8002f0e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6859      	ldr	r1, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <HAL_I2C_Init+0x11c>)
 8002f1a:	430b      	orrs	r3, r1
 8002f1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691a      	ldr	r2, [r3, #16]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69d9      	ldr	r1, [r3, #28]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1a      	ldr	r2, [r3, #32]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2220      	movs	r2, #32
 8002f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	02008000 	.word	0x02008000

08002f94 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	817b      	strh	r3, [r7, #10]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b20      	cmp	r3, #32
 8002fb2:	f040 80da 	bne.w	800316a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_I2C_Master_Transmit+0x30>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e0d3      	b.n	800316c <HAL_I2C_Master_Transmit+0x1d8>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fcc:	f7ff fb62 	bl	8002694 <HAL_GetTick>
 8002fd0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	2319      	movs	r3, #25
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 f9e6 	bl	80033b0 <I2C_WaitOnFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e0be      	b.n	800316c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2221      	movs	r2, #33	; 0x21
 8002ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2210      	movs	r2, #16
 8002ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	893a      	ldrh	r2, [r7, #8]
 800300e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301a:	b29b      	uxth	r3, r3
 800301c:	2bff      	cmp	r3, #255	; 0xff
 800301e:	d90e      	bls.n	800303e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	22ff      	movs	r2, #255	; 0xff
 8003024:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302a:	b2da      	uxtb	r2, r3
 800302c:	8979      	ldrh	r1, [r7, #10]
 800302e:	4b51      	ldr	r3, [pc, #324]	; (8003174 <HAL_I2C_Master_Transmit+0x1e0>)
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 fbd0 	bl	80037dc <I2C_TransferConfig>
 800303c:	e06c      	b.n	8003118 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304c:	b2da      	uxtb	r2, r3
 800304e:	8979      	ldrh	r1, [r7, #10]
 8003050:	4b48      	ldr	r3, [pc, #288]	; (8003174 <HAL_I2C_Master_Transmit+0x1e0>)
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 fbbf 	bl	80037dc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800305e:	e05b      	b.n	8003118 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	6a39      	ldr	r1, [r7, #32]
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f9e3 	bl	8003430 <I2C_WaitOnTXISFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e07b      	b.n	800316c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	781a      	ldrb	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	1c5a      	adds	r2, r3, #1
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308e:	b29b      	uxth	r3, r3
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d034      	beq.n	8003118 <HAL_I2C_Master_Transmit+0x184>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d130      	bne.n	8003118 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	2200      	movs	r2, #0
 80030be:	2180      	movs	r1, #128	; 0x80
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f975 	bl	80033b0 <I2C_WaitOnFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e04d      	b.n	800316c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2bff      	cmp	r3, #255	; 0xff
 80030d8:	d90e      	bls.n	80030f8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	22ff      	movs	r2, #255	; 0xff
 80030de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	8979      	ldrh	r1, [r7, #10]
 80030e8:	2300      	movs	r3, #0
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 fb73 	bl	80037dc <I2C_TransferConfig>
 80030f6:	e00f      	b.n	8003118 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003106:	b2da      	uxtb	r2, r3
 8003108:	8979      	ldrh	r1, [r7, #10]
 800310a:	2300      	movs	r3, #0
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 fb62 	bl	80037dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311c:	b29b      	uxth	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d19e      	bne.n	8003060 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	6a39      	ldr	r1, [r7, #32]
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f9c2 	bl	80034b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e01a      	b.n	800316c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2220      	movs	r2, #32
 800313c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6859      	ldr	r1, [r3, #4]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <HAL_I2C_Master_Transmit+0x1e4>)
 800314a:	400b      	ands	r3, r1
 800314c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	e000      	b.n	800316c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800316a:	2302      	movs	r3, #2
  }
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	80002000 	.word	0x80002000
 8003178:	fe00e800 	.word	0xfe00e800

0800317c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af02      	add	r7, sp, #8
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	607a      	str	r2, [r7, #4]
 8003186:	461a      	mov	r2, r3
 8003188:	460b      	mov	r3, r1
 800318a:	817b      	strh	r3, [r7, #10]
 800318c:	4613      	mov	r3, r2
 800318e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b20      	cmp	r3, #32
 800319a:	f040 80db 	bne.w	8003354 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_I2C_Master_Receive+0x30>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e0d4      	b.n	8003356 <HAL_I2C_Master_Receive+0x1da>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031b4:	f7ff fa6e 	bl	8002694 <HAL_GetTick>
 80031b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	2319      	movs	r3, #25
 80031c0:	2201      	movs	r2, #1
 80031c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 f8f2 	bl	80033b0 <I2C_WaitOnFlagUntilTimeout>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e0bf      	b.n	8003356 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2222      	movs	r2, #34	; 0x22
 80031da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2210      	movs	r2, #16
 80031e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	893a      	ldrh	r2, [r7, #8]
 80031f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003202:	b29b      	uxth	r3, r3
 8003204:	2bff      	cmp	r3, #255	; 0xff
 8003206:	d90e      	bls.n	8003226 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	22ff      	movs	r2, #255	; 0xff
 800320c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003212:	b2da      	uxtb	r2, r3
 8003214:	8979      	ldrh	r1, [r7, #10]
 8003216:	4b52      	ldr	r3, [pc, #328]	; (8003360 <HAL_I2C_Master_Receive+0x1e4>)
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 fadc 	bl	80037dc <I2C_TransferConfig>
 8003224:	e06d      	b.n	8003302 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322a:	b29a      	uxth	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003234:	b2da      	uxtb	r2, r3
 8003236:	8979      	ldrh	r1, [r7, #10]
 8003238:	4b49      	ldr	r3, [pc, #292]	; (8003360 <HAL_I2C_Master_Receive+0x1e4>)
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 facb 	bl	80037dc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003246:	e05c      	b.n	8003302 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	6a39      	ldr	r1, [r7, #32]
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f96b 	bl	8003528 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e07c      	b.n	8003356 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003278:	3b01      	subs	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d034      	beq.n	8003302 <HAL_I2C_Master_Receive+0x186>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329c:	2b00      	cmp	r3, #0
 800329e:	d130      	bne.n	8003302 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	2200      	movs	r2, #0
 80032a8:	2180      	movs	r1, #128	; 0x80
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 f880 	bl	80033b0 <I2C_WaitOnFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e04d      	b.n	8003356 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032be:	b29b      	uxth	r3, r3
 80032c0:	2bff      	cmp	r3, #255	; 0xff
 80032c2:	d90e      	bls.n	80032e2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	22ff      	movs	r2, #255	; 0xff
 80032c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	8979      	ldrh	r1, [r7, #10]
 80032d2:	2300      	movs	r3, #0
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 fa7e 	bl	80037dc <I2C_TransferConfig>
 80032e0:	e00f      	b.n	8003302 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	8979      	ldrh	r1, [r7, #10]
 80032f4:	2300      	movs	r3, #0
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 fa6d 	bl	80037dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003306:	b29b      	uxth	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	d19d      	bne.n	8003248 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	6a39      	ldr	r1, [r7, #32]
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 f8cd 	bl	80034b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e01a      	b.n	8003356 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2220      	movs	r2, #32
 8003326:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6859      	ldr	r1, [r3, #4]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <HAL_I2C_Master_Receive+0x1e8>)
 8003334:	400b      	ands	r3, r1
 8003336:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	e000      	b.n	8003356 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003354:	2302      	movs	r3, #2
  }
}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	80002400 	.word	0x80002400
 8003364:	fe00e800 	.word	0xfe00e800

08003368 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b02      	cmp	r3, #2
 800337c:	d103      	bne.n	8003386 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2200      	movs	r2, #0
 8003384:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b01      	cmp	r3, #1
 8003392:	d007      	beq.n	80033a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699a      	ldr	r2, [r3, #24]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0201 	orr.w	r2, r2, #1
 80033a2:	619a      	str	r2, [r3, #24]
  }
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	4613      	mov	r3, r2
 80033be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033c0:	e022      	b.n	8003408 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c8:	d01e      	beq.n	8003408 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ca:	f7ff f963 	bl	8002694 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d302      	bcc.n	80033e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d113      	bne.n	8003408 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e4:	f043 0220 	orr.w	r2, r3, #32
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e00f      	b.n	8003428 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699a      	ldr	r2, [r3, #24]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	4013      	ands	r3, r2
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	429a      	cmp	r2, r3
 8003416:	bf0c      	ite	eq
 8003418:	2301      	moveq	r3, #1
 800341a:	2300      	movne	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	461a      	mov	r2, r3
 8003420:	79fb      	ldrb	r3, [r7, #7]
 8003422:	429a      	cmp	r2, r3
 8003424:	d0cd      	beq.n	80033c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800343c:	e02c      	b.n	8003498 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	68b9      	ldr	r1, [r7, #8]
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 f8ea 	bl	800361c <I2C_IsErrorOccurred>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e02a      	b.n	80034a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003458:	d01e      	beq.n	8003498 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800345a:	f7ff f91b 	bl	8002694 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	429a      	cmp	r2, r3
 8003468:	d302      	bcc.n	8003470 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d113      	bne.n	8003498 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003474:	f043 0220 	orr.w	r2, r3, #32
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e007      	b.n	80034a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d1cb      	bne.n	800343e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034bc:	e028      	b.n	8003510 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	68b9      	ldr	r1, [r7, #8]
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 f8aa 	bl	800361c <I2C_IsErrorOccurred>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e026      	b.n	8003520 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d2:	f7ff f8df 	bl	8002694 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d302      	bcc.n	80034e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d113      	bne.n	8003510 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ec:	f043 0220 	orr.w	r2, r3, #32
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e007      	b.n	8003520 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	f003 0320 	and.w	r3, r3, #32
 800351a:	2b20      	cmp	r3, #32
 800351c:	d1cf      	bne.n	80034be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003534:	e064      	b.n	8003600 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68b9      	ldr	r1, [r7, #8]
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 f86e 	bl	800361c <I2C_IsErrorOccurred>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e062      	b.n	8003610 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	f003 0320 	and.w	r3, r3, #32
 8003554:	2b20      	cmp	r3, #32
 8003556:	d138      	bne.n	80035ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b04      	cmp	r3, #4
 8003564:	d105      	bne.n	8003572 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	e04e      	b.n	8003610 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b10      	cmp	r3, #16
 800357e:	d107      	bne.n	8003590 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2210      	movs	r2, #16
 8003586:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2204      	movs	r2, #4
 800358c:	645a      	str	r2, [r3, #68]	; 0x44
 800358e:	e002      	b.n	8003596 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2220      	movs	r2, #32
 800359c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6859      	ldr	r1, [r3, #4]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	4b1b      	ldr	r3, [pc, #108]	; (8003618 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80035aa:	400b      	ands	r3, r1
 80035ac:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2220      	movs	r2, #32
 80035b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e022      	b.n	8003610 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ca:	f7ff f863 	bl	8002694 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d302      	bcc.n	80035e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10f      	bne.n	8003600 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e4:	f043 0220 	orr.w	r2, r3, #32
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e007      	b.n	8003610 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b04      	cmp	r3, #4
 800360c:	d193      	bne.n	8003536 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	fe00e800 	.word	0xfe00e800

0800361c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003636:	2300      	movs	r3, #0
 8003638:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b00      	cmp	r3, #0
 8003646:	d068      	beq.n	800371a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2210      	movs	r2, #16
 800364e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003650:	e049      	b.n	80036e6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003658:	d045      	beq.n	80036e6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800365a:	f7ff f81b 	bl	8002694 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	429a      	cmp	r2, r3
 8003668:	d302      	bcc.n	8003670 <I2C_IsErrorOccurred+0x54>
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d13a      	bne.n	80036e6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800367a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003682:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800368e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003692:	d121      	bne.n	80036d8 <I2C_IsErrorOccurred+0xbc>
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800369a:	d01d      	beq.n	80036d8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800369c:	7cfb      	ldrb	r3, [r7, #19]
 800369e:	2b20      	cmp	r3, #32
 80036a0:	d01a      	beq.n	80036d8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036b2:	f7fe ffef 	bl	8002694 <HAL_GetTick>
 80036b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036b8:	e00e      	b.n	80036d8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036ba:	f7fe ffeb 	bl	8002694 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b19      	cmp	r3, #25
 80036c6:	d907      	bls.n	80036d8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	f043 0320 	orr.w	r3, r3, #32
 80036ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80036d6:	e006      	b.n	80036e6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	d1e9      	bne.n	80036ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	d003      	beq.n	80036fc <I2C_IsErrorOccurred+0xe0>
 80036f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0aa      	beq.n	8003652 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80036fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003700:	2b00      	cmp	r3, #0
 8003702:	d103      	bne.n	800370c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2220      	movs	r2, #32
 800370a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	f043 0304 	orr.w	r3, r3, #4
 8003712:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00b      	beq.n	8003744 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f44f 7280 	mov.w	r2, #256	; 0x100
 800373c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00b      	beq.n	8003766 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	f043 0308 	orr.w	r3, r3, #8
 8003754:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800375e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00b      	beq.n	8003788 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	f043 0302 	orr.w	r3, r3, #2
 8003776:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003780:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800378c:	2b00      	cmp	r3, #0
 800378e:	d01c      	beq.n	80037ca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f7ff fde9 	bl	8003368 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6859      	ldr	r1, [r3, #4]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	4b0d      	ldr	r3, [pc, #52]	; (80037d8 <I2C_IsErrorOccurred+0x1bc>)
 80037a2:	400b      	ands	r3, r1
 80037a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	431a      	orrs	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80037ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3728      	adds	r7, #40	; 0x28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	fe00e800 	.word	0xfe00e800

080037dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	607b      	str	r3, [r7, #4]
 80037e6:	460b      	mov	r3, r1
 80037e8:	817b      	strh	r3, [r7, #10]
 80037ea:	4613      	mov	r3, r2
 80037ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037ee:	897b      	ldrh	r3, [r7, #10]
 80037f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037f4:	7a7b      	ldrb	r3, [r7, #9]
 80037f6:	041b      	lsls	r3, r3, #16
 80037f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	4313      	orrs	r3, r2
 8003806:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800380a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	0d5b      	lsrs	r3, r3, #21
 8003816:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800381a:	4b08      	ldr	r3, [pc, #32]	; (800383c <I2C_TransferConfig+0x60>)
 800381c:	430b      	orrs	r3, r1
 800381e:	43db      	mvns	r3, r3
 8003820:	ea02 0103 	and.w	r1, r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800382e:	bf00      	nop
 8003830:	371c      	adds	r7, #28
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	03ff63ff 	.word	0x03ff63ff

08003840 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b20      	cmp	r3, #32
 8003854:	d138      	bne.n	80038c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003860:	2302      	movs	r3, #2
 8003862:	e032      	b.n	80038ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2224      	movs	r2, #36	; 0x24
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0201 	bic.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003892:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6819      	ldr	r1, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	e000      	b.n	80038ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038c8:	2302      	movs	r3, #2
  }
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b085      	sub	sp, #20
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d139      	bne.n	8003960 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e033      	b.n	8003962 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2224      	movs	r2, #36	; 0x24
 8003906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0201 	bic.w	r2, r2, #1
 8003918:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003928:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	021b      	lsls	r3, r3, #8
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4313      	orrs	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0201 	orr.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800395c:	2300      	movs	r3, #0
 800395e:	e000      	b.n	8003962 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003960:	2302      	movs	r3, #2
  }
}
 8003962:	4618      	mov	r0, r3
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800396e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003970:	b08f      	sub	sp, #60	; 0x3c
 8003972:	af0a      	add	r7, sp, #40	; 0x28
 8003974:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e116      	b.n	8003bae <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fd fe4e 	bl	800163c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2203      	movs	r2, #3
 80039a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d102      	bne.n	80039ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f004 f952 	bl	8007c68 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	603b      	str	r3, [r7, #0]
 80039ca:	687e      	ldr	r6, [r7, #4]
 80039cc:	466d      	mov	r5, sp
 80039ce:	f106 0410 	add.w	r4, r6, #16
 80039d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039de:	e885 0003 	stmia.w	r5, {r0, r1}
 80039e2:	1d33      	adds	r3, r6, #4
 80039e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039e6:	6838      	ldr	r0, [r7, #0]
 80039e8:	f004 f8e6 	bl	8007bb8 <USB_CoreInit>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d005      	beq.n	80039fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2202      	movs	r2, #2
 80039f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e0d7      	b.n	8003bae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2100      	movs	r1, #0
 8003a04:	4618      	mov	r0, r3
 8003a06:	f004 f940 	bl	8007c8a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	73fb      	strb	r3, [r7, #15]
 8003a0e:	e04a      	b.n	8003aa6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a10:	7bfa      	ldrb	r2, [r7, #15]
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	333d      	adds	r3, #61	; 0x3d
 8003a20:	2201      	movs	r2, #1
 8003a22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a24:	7bfa      	ldrb	r2, [r7, #15]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	333c      	adds	r3, #60	; 0x3c
 8003a34:	7bfa      	ldrb	r2, [r7, #15]
 8003a36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
 8003a3c:	b298      	uxth	r0, r3
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	4413      	add	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	3344      	adds	r3, #68	; 0x44
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a50:	7bfa      	ldrb	r2, [r7, #15]
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	4613      	mov	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	3340      	adds	r3, #64	; 0x40
 8003a60:	2200      	movs	r2, #0
 8003a62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a64:	7bfa      	ldrb	r2, [r7, #15]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	3348      	adds	r3, #72	; 0x48
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a78:	7bfa      	ldrb	r2, [r7, #15]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	334c      	adds	r3, #76	; 0x4c
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a8c:	7bfa      	ldrb	r2, [r7, #15]
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	3354      	adds	r3, #84	; 0x54
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
 8003aa6:	7bfa      	ldrb	r2, [r7, #15]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d3af      	bcc.n	8003a10 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	73fb      	strb	r3, [r7, #15]
 8003ab4:	e044      	b.n	8003b40 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ab6:	7bfa      	ldrb	r2, [r7, #15]
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	4613      	mov	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003ac8:	2200      	movs	r2, #0
 8003aca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003acc:	7bfa      	ldrb	r2, [r7, #15]
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003ade:	7bfa      	ldrb	r2, [r7, #15]
 8003ae0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ae2:	7bfa      	ldrb	r2, [r7, #15]
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	440b      	add	r3, r1
 8003af0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003af4:	2200      	movs	r2, #0
 8003af6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003af8:	7bfa      	ldrb	r2, [r7, #15]
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b0e:	7bfa      	ldrb	r2, [r7, #15]
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	4413      	add	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b24:	7bfa      	ldrb	r2, [r7, #15]
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]
 8003b40:	7bfa      	ldrb	r2, [r7, #15]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d3b5      	bcc.n	8003ab6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	603b      	str	r3, [r7, #0]
 8003b50:	687e      	ldr	r6, [r7, #4]
 8003b52:	466d      	mov	r5, sp
 8003b54:	f106 0410 	add.w	r4, r6, #16
 8003b58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b64:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b68:	1d33      	adds	r3, r6, #4
 8003b6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b6c:	6838      	ldr	r0, [r7, #0]
 8003b6e:	f004 f8d9 	bl	8007d24 <USB_DevInit>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e014      	b.n	8003bae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d102      	bne.n	8003ba2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f80b 	bl	8003bb8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f004 fa97 	bl	80080da <USB_DevDisconnect>

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003bb8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003be6:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <HAL_PCDEx_ActivateLPM+0x44>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	10000003 	.word	0x10000003

08003c00 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c04:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a04      	ldr	r2, [pc, #16]	; (8003c1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c0e:	6013      	str	r3, [r2, #0]
}
 8003c10:	bf00      	nop
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	40007000 	.word	0x40007000

08003c20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003c26:	2300      	movs	r3, #0
 8003c28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c2a:	4b23      	ldr	r3, [pc, #140]	; (8003cb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	4a22      	ldr	r2, [pc, #136]	; (8003cb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c34:	6413      	str	r3, [r2, #64]	; 0x40
 8003c36:	4b20      	ldr	r3, [pc, #128]	; (8003cb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c42:	4b1e      	ldr	r3, [pc, #120]	; (8003cbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a1d      	ldr	r2, [pc, #116]	; (8003cbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c4c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c4e:	f7fe fd21 	bl	8002694 <HAL_GetTick>
 8003c52:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c54:	e009      	b.n	8003c6a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c56:	f7fe fd1d 	bl	8002694 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c64:	d901      	bls.n	8003c6a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e022      	b.n	8003cb0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c6a:	4b14      	ldr	r3, [pc, #80]	; (8003cbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c76:	d1ee      	bne.n	8003c56 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c78:	4b10      	ldr	r3, [pc, #64]	; (8003cbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a0f      	ldr	r2, [pc, #60]	; (8003cbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c82:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c84:	f7fe fd06 	bl	8002694 <HAL_GetTick>
 8003c88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c8a:	e009      	b.n	8003ca0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c8c:	f7fe fd02 	bl	8002694 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c9a:	d901      	bls.n	8003ca0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e007      	b.n	8003cb0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ca0:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cac:	d1ee      	bne.n	8003c8c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	40007000 	.word	0x40007000

08003cc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e29b      	b.n	800420e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 8087 	beq.w	8003df2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ce4:	4b96      	ldr	r3, [pc, #600]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 030c 	and.w	r3, r3, #12
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d00c      	beq.n	8003d0a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cf0:	4b93      	ldr	r3, [pc, #588]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 030c 	and.w	r3, r3, #12
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d112      	bne.n	8003d22 <HAL_RCC_OscConfig+0x62>
 8003cfc:	4b90      	ldr	r3, [pc, #576]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d08:	d10b      	bne.n	8003d22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d0a:	4b8d      	ldr	r3, [pc, #564]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d06c      	beq.n	8003df0 <HAL_RCC_OscConfig+0x130>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d168      	bne.n	8003df0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e275      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2a:	d106      	bne.n	8003d3a <HAL_RCC_OscConfig+0x7a>
 8003d2c:	4b84      	ldr	r3, [pc, #528]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a83      	ldr	r2, [pc, #524]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	e02e      	b.n	8003d98 <HAL_RCC_OscConfig+0xd8>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x9c>
 8003d42:	4b7f      	ldr	r3, [pc, #508]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a7e      	ldr	r2, [pc, #504]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	4b7c      	ldr	r3, [pc, #496]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a7b      	ldr	r2, [pc, #492]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	e01d      	b.n	8003d98 <HAL_RCC_OscConfig+0xd8>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCC_OscConfig+0xc0>
 8003d66:	4b76      	ldr	r3, [pc, #472]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a75      	ldr	r2, [pc, #468]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	4b73      	ldr	r3, [pc, #460]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a72      	ldr	r2, [pc, #456]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e00b      	b.n	8003d98 <HAL_RCC_OscConfig+0xd8>
 8003d80:	4b6f      	ldr	r3, [pc, #444]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a6e      	ldr	r2, [pc, #440]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	4b6c      	ldr	r3, [pc, #432]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a6b      	ldr	r2, [pc, #428]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d013      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da0:	f7fe fc78 	bl	8002694 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da8:	f7fe fc74 	bl	8002694 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b64      	cmp	r3, #100	; 0x64
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e229      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dba:	4b61      	ldr	r3, [pc, #388]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0xe8>
 8003dc6:	e014      	b.n	8003df2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7fe fc64 	bl	8002694 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd0:	f7fe fc60 	bl	8002694 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b64      	cmp	r3, #100	; 0x64
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e215      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de2:	4b57      	ldr	r3, [pc, #348]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x110>
 8003dee:	e000      	b.n	8003df2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d069      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dfe:	4b50      	ldr	r3, [pc, #320]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00b      	beq.n	8003e22 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e0a:	4b4d      	ldr	r3, [pc, #308]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d11c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x190>
 8003e16:	4b4a      	ldr	r3, [pc, #296]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d116      	bne.n	8003e50 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e22:	4b47      	ldr	r3, [pc, #284]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_RCC_OscConfig+0x17a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d001      	beq.n	8003e3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e1e9      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e3a:	4b41      	ldr	r3, [pc, #260]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	493d      	ldr	r1, [pc, #244]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e4e:	e040      	b.n	8003ed2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d023      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e58:	4b39      	ldr	r3, [pc, #228]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a38      	ldr	r2, [pc, #224]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e64:	f7fe fc16 	bl	8002694 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e6c:	f7fe fc12 	bl	8002694 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e1c7      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7e:	4b30      	ldr	r3, [pc, #192]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f0      	beq.n	8003e6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8a:	4b2d      	ldr	r3, [pc, #180]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4929      	ldr	r1, [pc, #164]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	600b      	str	r3, [r1, #0]
 8003e9e:	e018      	b.n	8003ed2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ea0:	4b27      	ldr	r3, [pc, #156]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a26      	ldr	r2, [pc, #152]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003ea6:	f023 0301 	bic.w	r3, r3, #1
 8003eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eac:	f7fe fbf2 	bl	8002694 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb4:	f7fe fbee 	bl	8002694 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e1a3      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec6:	4b1e      	ldr	r3, [pc, #120]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f0      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d038      	beq.n	8003f50 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d019      	beq.n	8003f1a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ee6:	4b16      	ldr	r3, [pc, #88]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eea:	4a15      	ldr	r2, [pc, #84]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef2:	f7fe fbcf 	bl	8002694 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003efa:	f7fe fbcb 	bl	8002694 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e180      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0c:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0f0      	beq.n	8003efa <HAL_RCC_OscConfig+0x23a>
 8003f18:	e01a      	b.n	8003f50 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f1a:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f1e:	4a08      	ldr	r2, [pc, #32]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003f20:	f023 0301 	bic.w	r3, r3, #1
 8003f24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f26:	f7fe fbb5 	bl	8002694 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f2c:	e00a      	b.n	8003f44 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f2e:	f7fe fbb1 	bl	8002694 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d903      	bls.n	8003f44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e166      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
 8003f40:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f44:	4b92      	ldr	r3, [pc, #584]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1ee      	bne.n	8003f2e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 80a4 	beq.w	80040a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f5e:	4b8c      	ldr	r3, [pc, #560]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10d      	bne.n	8003f86 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f6a:	4b89      	ldr	r3, [pc, #548]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	4a88      	ldr	r2, [pc, #544]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f74:	6413      	str	r3, [r2, #64]	; 0x40
 8003f76:	4b86      	ldr	r3, [pc, #536]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7e:	60bb      	str	r3, [r7, #8]
 8003f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f82:	2301      	movs	r3, #1
 8003f84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f86:	4b83      	ldr	r3, [pc, #524]	; (8004194 <HAL_RCC_OscConfig+0x4d4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d118      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f92:	4b80      	ldr	r3, [pc, #512]	; (8004194 <HAL_RCC_OscConfig+0x4d4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a7f      	ldr	r2, [pc, #508]	; (8004194 <HAL_RCC_OscConfig+0x4d4>)
 8003f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f9e:	f7fe fb79 	bl	8002694 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa6:	f7fe fb75 	bl	8002694 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b64      	cmp	r3, #100	; 0x64
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e12a      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb8:	4b76      	ldr	r3, [pc, #472]	; (8004194 <HAL_RCC_OscConfig+0x4d4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0f0      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d106      	bne.n	8003fda <HAL_RCC_OscConfig+0x31a>
 8003fcc:	4b70      	ldr	r3, [pc, #448]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	4a6f      	ldr	r2, [pc, #444]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd8:	e02d      	b.n	8004036 <HAL_RCC_OscConfig+0x376>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10c      	bne.n	8003ffc <HAL_RCC_OscConfig+0x33c>
 8003fe2:	4b6b      	ldr	r3, [pc, #428]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe6:	4a6a      	ldr	r2, [pc, #424]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003fe8:	f023 0301 	bic.w	r3, r3, #1
 8003fec:	6713      	str	r3, [r2, #112]	; 0x70
 8003fee:	4b68      	ldr	r3, [pc, #416]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff2:	4a67      	ldr	r2, [pc, #412]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003ff4:	f023 0304 	bic.w	r3, r3, #4
 8003ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8003ffa:	e01c      	b.n	8004036 <HAL_RCC_OscConfig+0x376>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2b05      	cmp	r3, #5
 8004002:	d10c      	bne.n	800401e <HAL_RCC_OscConfig+0x35e>
 8004004:	4b62      	ldr	r3, [pc, #392]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004008:	4a61      	ldr	r2, [pc, #388]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 800400a:	f043 0304 	orr.w	r3, r3, #4
 800400e:	6713      	str	r3, [r2, #112]	; 0x70
 8004010:	4b5f      	ldr	r3, [pc, #380]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004014:	4a5e      	ldr	r2, [pc, #376]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8004016:	f043 0301 	orr.w	r3, r3, #1
 800401a:	6713      	str	r3, [r2, #112]	; 0x70
 800401c:	e00b      	b.n	8004036 <HAL_RCC_OscConfig+0x376>
 800401e:	4b5c      	ldr	r3, [pc, #368]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	4a5b      	ldr	r2, [pc, #364]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8004024:	f023 0301 	bic.w	r3, r3, #1
 8004028:	6713      	str	r3, [r2, #112]	; 0x70
 800402a:	4b59      	ldr	r3, [pc, #356]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	4a58      	ldr	r2, [pc, #352]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8004030:	f023 0304 	bic.w	r3, r3, #4
 8004034:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d015      	beq.n	800406a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403e:	f7fe fb29 	bl	8002694 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004044:	e00a      	b.n	800405c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004046:	f7fe fb25 	bl	8002694 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	f241 3288 	movw	r2, #5000	; 0x1388
 8004054:	4293      	cmp	r3, r2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e0d8      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405c:	4b4c      	ldr	r3, [pc, #304]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 800405e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0ee      	beq.n	8004046 <HAL_RCC_OscConfig+0x386>
 8004068:	e014      	b.n	8004094 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406a:	f7fe fb13 	bl	8002694 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004070:	e00a      	b.n	8004088 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004072:	f7fe fb0f 	bl	8002694 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004080:	4293      	cmp	r3, r2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e0c2      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004088:	4b41      	ldr	r3, [pc, #260]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1ee      	bne.n	8004072 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004094:	7dfb      	ldrb	r3, [r7, #23]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d105      	bne.n	80040a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800409a:	4b3d      	ldr	r3, [pc, #244]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	4a3c      	ldr	r2, [pc, #240]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 80040a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 80ae 	beq.w	800420c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040b0:	4b37      	ldr	r3, [pc, #220]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 030c 	and.w	r3, r3, #12
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d06d      	beq.n	8004198 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d14b      	bne.n	800415c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c4:	4b32      	ldr	r3, [pc, #200]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a31      	ldr	r2, [pc, #196]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 80040ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d0:	f7fe fae0 	bl	8002694 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d8:	f7fe fadc 	bl	8002694 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e091      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ea:	4b29      	ldr	r3, [pc, #164]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69da      	ldr	r2, [r3, #28]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	019b      	lsls	r3, r3, #6
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410c:	085b      	lsrs	r3, r3, #1
 800410e:	3b01      	subs	r3, #1
 8004110:	041b      	lsls	r3, r3, #16
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	061b      	lsls	r3, r3, #24
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004120:	071b      	lsls	r3, r3, #28
 8004122:	491b      	ldr	r1, [pc, #108]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8004124:	4313      	orrs	r3, r2
 8004126:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004128:	4b19      	ldr	r3, [pc, #100]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a18      	ldr	r2, [pc, #96]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 800412e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004134:	f7fe faae 	bl	8002694 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800413c:	f7fe faaa 	bl	8002694 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e05f      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414e:	4b10      	ldr	r3, [pc, #64]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0f0      	beq.n	800413c <HAL_RCC_OscConfig+0x47c>
 800415a:	e057      	b.n	800420c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415c:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a0b      	ldr	r2, [pc, #44]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8004162:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004168:	f7fe fa94 	bl	8002694 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004170:	f7fe fa90 	bl	8002694 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e045      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004182:	4b03      	ldr	r3, [pc, #12]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f0      	bne.n	8004170 <HAL_RCC_OscConfig+0x4b0>
 800418e:	e03d      	b.n	800420c <HAL_RCC_OscConfig+0x54c>
 8004190:	40023800 	.word	0x40023800
 8004194:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004198:	4b1f      	ldr	r3, [pc, #124]	; (8004218 <HAL_RCC_OscConfig+0x558>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d030      	beq.n	8004208 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d129      	bne.n	8004208 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041be:	429a      	cmp	r2, r3
 80041c0:	d122      	bne.n	8004208 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041c8:	4013      	ands	r3, r2
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d119      	bne.n	8004208 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	085b      	lsrs	r3, r3, #1
 80041e0:	3b01      	subs	r3, #1
 80041e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d10f      	bne.n	8004208 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d107      	bne.n	8004208 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004204:	429a      	cmp	r2, r3
 8004206:	d001      	beq.n	800420c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	40023800 	.word	0x40023800

0800421c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0d0      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004234:	4b6a      	ldr	r3, [pc, #424]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 030f 	and.w	r3, r3, #15
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	429a      	cmp	r2, r3
 8004240:	d910      	bls.n	8004264 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004242:	4b67      	ldr	r3, [pc, #412]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f023 020f 	bic.w	r2, r3, #15
 800424a:	4965      	ldr	r1, [pc, #404]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	4313      	orrs	r3, r2
 8004250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004252:	4b63      	ldr	r3, [pc, #396]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d001      	beq.n	8004264 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e0b8      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d020      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800427c:	4b59      	ldr	r3, [pc, #356]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	4a58      	ldr	r2, [pc, #352]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004282:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004286:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	d005      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004294:	4b53      	ldr	r3, [pc, #332]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	4a52      	ldr	r2, [pc, #328]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 800429a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800429e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a0:	4b50      	ldr	r3, [pc, #320]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	494d      	ldr	r1, [pc, #308]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d040      	beq.n	8004340 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d107      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c6:	4b47      	ldr	r3, [pc, #284]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d115      	bne.n	80042fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e07f      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d107      	bne.n	80042ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042de:	4b41      	ldr	r3, [pc, #260]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d109      	bne.n	80042fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e073      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ee:	4b3d      	ldr	r3, [pc, #244]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e06b      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042fe:	4b39      	ldr	r3, [pc, #228]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f023 0203 	bic.w	r2, r3, #3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	4936      	ldr	r1, [pc, #216]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 800430c:	4313      	orrs	r3, r2
 800430e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004310:	f7fe f9c0 	bl	8002694 <HAL_GetTick>
 8004314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004316:	e00a      	b.n	800432e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004318:	f7fe f9bc 	bl	8002694 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	f241 3288 	movw	r2, #5000	; 0x1388
 8004326:	4293      	cmp	r3, r2
 8004328:	d901      	bls.n	800432e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e053      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432e:	4b2d      	ldr	r3, [pc, #180]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 020c 	and.w	r2, r3, #12
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	429a      	cmp	r2, r3
 800433e:	d1eb      	bne.n	8004318 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004340:	4b27      	ldr	r3, [pc, #156]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d210      	bcs.n	8004370 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434e:	4b24      	ldr	r3, [pc, #144]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 020f 	bic.w	r2, r3, #15
 8004356:	4922      	ldr	r1, [pc, #136]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	4313      	orrs	r3, r2
 800435c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800435e:	4b20      	ldr	r3, [pc, #128]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d001      	beq.n	8004370 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e032      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d008      	beq.n	800438e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800437c:	4b19      	ldr	r3, [pc, #100]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	4916      	ldr	r1, [pc, #88]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 800438a:	4313      	orrs	r3, r2
 800438c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b00      	cmp	r3, #0
 8004398:	d009      	beq.n	80043ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800439a:	4b12      	ldr	r3, [pc, #72]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	490e      	ldr	r1, [pc, #56]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043ae:	f000 f821 	bl	80043f4 <HAL_RCC_GetSysClockFreq>
 80043b2:	4602      	mov	r2, r0
 80043b4:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	091b      	lsrs	r3, r3, #4
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	490a      	ldr	r1, [pc, #40]	; (80043e8 <HAL_RCC_ClockConfig+0x1cc>)
 80043c0:	5ccb      	ldrb	r3, [r1, r3]
 80043c2:	fa22 f303 	lsr.w	r3, r2, r3
 80043c6:	4a09      	ldr	r2, [pc, #36]	; (80043ec <HAL_RCC_ClockConfig+0x1d0>)
 80043c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043ca:	4b09      	ldr	r3, [pc, #36]	; (80043f0 <HAL_RCC_ClockConfig+0x1d4>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fe f91c 	bl	800260c <HAL_InitTick>

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40023c00 	.word	0x40023c00
 80043e4:	40023800 	.word	0x40023800
 80043e8:	0800b188 	.word	0x0800b188
 80043ec:	20000000 	.word	0x20000000
 80043f0:	200004c0 	.word	0x200004c0

080043f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043f8:	b094      	sub	sp, #80	; 0x50
 80043fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80043fc:	2300      	movs	r3, #0
 80043fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004400:	2300      	movs	r3, #0
 8004402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004404:	2300      	movs	r3, #0
 8004406:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004408:	2300      	movs	r3, #0
 800440a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800440c:	4b79      	ldr	r3, [pc, #484]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 030c 	and.w	r3, r3, #12
 8004414:	2b08      	cmp	r3, #8
 8004416:	d00d      	beq.n	8004434 <HAL_RCC_GetSysClockFreq+0x40>
 8004418:	2b08      	cmp	r3, #8
 800441a:	f200 80e1 	bhi.w	80045e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <HAL_RCC_GetSysClockFreq+0x34>
 8004422:	2b04      	cmp	r3, #4
 8004424:	d003      	beq.n	800442e <HAL_RCC_GetSysClockFreq+0x3a>
 8004426:	e0db      	b.n	80045e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004428:	4b73      	ldr	r3, [pc, #460]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800442a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800442c:	e0db      	b.n	80045e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800442e:	4b73      	ldr	r3, [pc, #460]	; (80045fc <HAL_RCC_GetSysClockFreq+0x208>)
 8004430:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004432:	e0d8      	b.n	80045e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004434:	4b6f      	ldr	r3, [pc, #444]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800443c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800443e:	4b6d      	ldr	r3, [pc, #436]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d063      	beq.n	8004512 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800444a:	4b6a      	ldr	r3, [pc, #424]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	099b      	lsrs	r3, r3, #6
 8004450:	2200      	movs	r2, #0
 8004452:	63bb      	str	r3, [r7, #56]	; 0x38
 8004454:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445c:	633b      	str	r3, [r7, #48]	; 0x30
 800445e:	2300      	movs	r3, #0
 8004460:	637b      	str	r3, [r7, #52]	; 0x34
 8004462:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004466:	4622      	mov	r2, r4
 8004468:	462b      	mov	r3, r5
 800446a:	f04f 0000 	mov.w	r0, #0
 800446e:	f04f 0100 	mov.w	r1, #0
 8004472:	0159      	lsls	r1, r3, #5
 8004474:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004478:	0150      	lsls	r0, r2, #5
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	4621      	mov	r1, r4
 8004480:	1a51      	subs	r1, r2, r1
 8004482:	6139      	str	r1, [r7, #16]
 8004484:	4629      	mov	r1, r5
 8004486:	eb63 0301 	sbc.w	r3, r3, r1
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004498:	4659      	mov	r1, fp
 800449a:	018b      	lsls	r3, r1, #6
 800449c:	4651      	mov	r1, sl
 800449e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044a2:	4651      	mov	r1, sl
 80044a4:	018a      	lsls	r2, r1, #6
 80044a6:	4651      	mov	r1, sl
 80044a8:	ebb2 0801 	subs.w	r8, r2, r1
 80044ac:	4659      	mov	r1, fp
 80044ae:	eb63 0901 	sbc.w	r9, r3, r1
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044c6:	4690      	mov	r8, r2
 80044c8:	4699      	mov	r9, r3
 80044ca:	4623      	mov	r3, r4
 80044cc:	eb18 0303 	adds.w	r3, r8, r3
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	462b      	mov	r3, r5
 80044d4:	eb49 0303 	adc.w	r3, r9, r3
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044e6:	4629      	mov	r1, r5
 80044e8:	024b      	lsls	r3, r1, #9
 80044ea:	4621      	mov	r1, r4
 80044ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044f0:	4621      	mov	r1, r4
 80044f2:	024a      	lsls	r2, r1, #9
 80044f4:	4610      	mov	r0, r2
 80044f6:	4619      	mov	r1, r3
 80044f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044fa:	2200      	movs	r2, #0
 80044fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80044fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004500:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004504:	f7fb fef4 	bl	80002f0 <__aeabi_uldivmod>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4613      	mov	r3, r2
 800450e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004510:	e058      	b.n	80045c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004512:	4b38      	ldr	r3, [pc, #224]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	099b      	lsrs	r3, r3, #6
 8004518:	2200      	movs	r2, #0
 800451a:	4618      	mov	r0, r3
 800451c:	4611      	mov	r1, r2
 800451e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004522:	623b      	str	r3, [r7, #32]
 8004524:	2300      	movs	r3, #0
 8004526:	627b      	str	r3, [r7, #36]	; 0x24
 8004528:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800452c:	4642      	mov	r2, r8
 800452e:	464b      	mov	r3, r9
 8004530:	f04f 0000 	mov.w	r0, #0
 8004534:	f04f 0100 	mov.w	r1, #0
 8004538:	0159      	lsls	r1, r3, #5
 800453a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800453e:	0150      	lsls	r0, r2, #5
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4641      	mov	r1, r8
 8004546:	ebb2 0a01 	subs.w	sl, r2, r1
 800454a:	4649      	mov	r1, r9
 800454c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800455c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004560:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004564:	ebb2 040a 	subs.w	r4, r2, sl
 8004568:	eb63 050b 	sbc.w	r5, r3, fp
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	00eb      	lsls	r3, r5, #3
 8004576:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800457a:	00e2      	lsls	r2, r4, #3
 800457c:	4614      	mov	r4, r2
 800457e:	461d      	mov	r5, r3
 8004580:	4643      	mov	r3, r8
 8004582:	18e3      	adds	r3, r4, r3
 8004584:	603b      	str	r3, [r7, #0]
 8004586:	464b      	mov	r3, r9
 8004588:	eb45 0303 	adc.w	r3, r5, r3
 800458c:	607b      	str	r3, [r7, #4]
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	e9d7 4500 	ldrd	r4, r5, [r7]
 800459a:	4629      	mov	r1, r5
 800459c:	028b      	lsls	r3, r1, #10
 800459e:	4621      	mov	r1, r4
 80045a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045a4:	4621      	mov	r1, r4
 80045a6:	028a      	lsls	r2, r1, #10
 80045a8:	4610      	mov	r0, r2
 80045aa:	4619      	mov	r1, r3
 80045ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045ae:	2200      	movs	r2, #0
 80045b0:	61bb      	str	r3, [r7, #24]
 80045b2:	61fa      	str	r2, [r7, #28]
 80045b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045b8:	f7fb fe9a 	bl	80002f0 <__aeabi_uldivmod>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4613      	mov	r3, r2
 80045c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80045c4:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	0c1b      	lsrs	r3, r3, #16
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	3301      	adds	r3, #1
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80045d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045de:	e002      	b.n	80045e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045e0:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80045e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3750      	adds	r7, #80	; 0x50
 80045ec:	46bd      	mov	sp, r7
 80045ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045f2:	bf00      	nop
 80045f4:	40023800 	.word	0x40023800
 80045f8:	00f42400 	.word	0x00f42400
 80045fc:	007a1200 	.word	0x007a1200

08004600 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004604:	4b03      	ldr	r3, [pc, #12]	; (8004614 <HAL_RCC_GetHCLKFreq+0x14>)
 8004606:	681b      	ldr	r3, [r3, #0]
}
 8004608:	4618      	mov	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	20000000 	.word	0x20000000

08004618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800461c:	f7ff fff0 	bl	8004600 <HAL_RCC_GetHCLKFreq>
 8004620:	4602      	mov	r2, r0
 8004622:	4b05      	ldr	r3, [pc, #20]	; (8004638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	0a9b      	lsrs	r3, r3, #10
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	4903      	ldr	r1, [pc, #12]	; (800463c <HAL_RCC_GetPCLK1Freq+0x24>)
 800462e:	5ccb      	ldrb	r3, [r1, r3]
 8004630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004634:	4618      	mov	r0, r3
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40023800 	.word	0x40023800
 800463c:	0800b198 	.word	0x0800b198

08004640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004644:	f7ff ffdc 	bl	8004600 <HAL_RCC_GetHCLKFreq>
 8004648:	4602      	mov	r2, r0
 800464a:	4b05      	ldr	r3, [pc, #20]	; (8004660 <HAL_RCC_GetPCLK2Freq+0x20>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	0b5b      	lsrs	r3, r3, #13
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	4903      	ldr	r1, [pc, #12]	; (8004664 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004656:	5ccb      	ldrb	r3, [r1, r3]
 8004658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800465c:	4618      	mov	r0, r3
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40023800 	.word	0x40023800
 8004664:	0800b198 	.word	0x0800b198

08004668 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004670:	2300      	movs	r3, #0
 8004672:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800467c:	2300      	movs	r3, #0
 800467e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004680:	2300      	movs	r3, #0
 8004682:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b00      	cmp	r3, #0
 800468e:	d012      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004690:	4b69      	ldr	r3, [pc, #420]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	4a68      	ldr	r2, [pc, #416]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004696:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800469a:	6093      	str	r3, [r2, #8]
 800469c:	4b66      	ldr	r3, [pc, #408]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a4:	4964      	ldr	r1, [pc, #400]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80046b2:	2301      	movs	r3, #1
 80046b4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d017      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046c2:	4b5d      	ldr	r3, [pc, #372]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d0:	4959      	ldr	r1, [pc, #356]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046e0:	d101      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80046e2:	2301      	movs	r3, #1
 80046e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80046ee:	2301      	movs	r3, #1
 80046f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d017      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046fe:	4b4e      	ldr	r3, [pc, #312]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004704:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470c:	494a      	ldr	r1, [pc, #296]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470e:	4313      	orrs	r3, r2
 8004710:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800471c:	d101      	bne.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800471e:	2301      	movs	r3, #1
 8004720:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800472a:	2301      	movs	r3, #1
 800472c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800473a:	2301      	movs	r3, #1
 800473c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0320 	and.w	r3, r3, #32
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 808b 	beq.w	8004862 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800474c:	4b3a      	ldr	r3, [pc, #232]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	4a39      	ldr	r2, [pc, #228]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004756:	6413      	str	r3, [r2, #64]	; 0x40
 8004758:	4b37      	ldr	r3, [pc, #220]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800475a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004760:	60bb      	str	r3, [r7, #8]
 8004762:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004764:	4b35      	ldr	r3, [pc, #212]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a34      	ldr	r2, [pc, #208]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800476a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800476e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004770:	f7fd ff90 	bl	8002694 <HAL_GetTick>
 8004774:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004776:	e008      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004778:	f7fd ff8c 	bl	8002694 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b64      	cmp	r3, #100	; 0x64
 8004784:	d901      	bls.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e38f      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800478a:	4b2c      	ldr	r3, [pc, #176]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0f0      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004796:	4b28      	ldr	r3, [pc, #160]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800479e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d035      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d02e      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047b4:	4b20      	ldr	r3, [pc, #128]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047bc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047be:	4b1e      	ldr	r3, [pc, #120]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c2:	4a1d      	ldr	r2, [pc, #116]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047ca:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	4a1a      	ldr	r2, [pc, #104]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80047d6:	4a18      	ldr	r2, [pc, #96]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047dc:	4b16      	ldr	r3, [pc, #88]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d114      	bne.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e8:	f7fd ff54 	bl	8002694 <HAL_GetTick>
 80047ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ee:	e00a      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047f0:	f7fd ff50 	bl	8002694 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fe:	4293      	cmp	r3, r2
 8004800:	d901      	bls.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e351      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004806:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0ee      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800481a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800481e:	d111      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004820:	4b05      	ldr	r3, [pc, #20]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800482c:	4b04      	ldr	r3, [pc, #16]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800482e:	400b      	ands	r3, r1
 8004830:	4901      	ldr	r1, [pc, #4]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004832:	4313      	orrs	r3, r2
 8004834:	608b      	str	r3, [r1, #8]
 8004836:	e00b      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004838:	40023800 	.word	0x40023800
 800483c:	40007000 	.word	0x40007000
 8004840:	0ffffcff 	.word	0x0ffffcff
 8004844:	4bac      	ldr	r3, [pc, #688]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	4aab      	ldr	r2, [pc, #684]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800484a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800484e:	6093      	str	r3, [r2, #8]
 8004850:	4ba9      	ldr	r3, [pc, #676]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004852:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800485c:	49a6      	ldr	r1, [pc, #664]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800485e:	4313      	orrs	r3, r2
 8004860:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0310 	and.w	r3, r3, #16
 800486a:	2b00      	cmp	r3, #0
 800486c:	d010      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800486e:	4ba2      	ldr	r3, [pc, #648]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004874:	4aa0      	ldr	r2, [pc, #640]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004876:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800487a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800487e:	4b9e      	ldr	r3, [pc, #632]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004880:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004888:	499b      	ldr	r1, [pc, #620]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00a      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800489c:	4b96      	ldr	r3, [pc, #600]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800489e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048aa:	4993      	ldr	r1, [pc, #588]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048be:	4b8e      	ldr	r3, [pc, #568]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048cc:	498a      	ldr	r1, [pc, #552]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00a      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048e0:	4b85      	ldr	r3, [pc, #532]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ee:	4982      	ldr	r1, [pc, #520]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004902:	4b7d      	ldr	r3, [pc, #500]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004908:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004910:	4979      	ldr	r1, [pc, #484]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004924:	4b74      	ldr	r3, [pc, #464]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492a:	f023 0203 	bic.w	r2, r3, #3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004932:	4971      	ldr	r1, [pc, #452]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004934:	4313      	orrs	r3, r2
 8004936:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004946:	4b6c      	ldr	r3, [pc, #432]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494c:	f023 020c 	bic.w	r2, r3, #12
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004954:	4968      	ldr	r1, [pc, #416]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00a      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004968:	4b63      	ldr	r3, [pc, #396]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800496a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004976:	4960      	ldr	r1, [pc, #384]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800498a:	4b5b      	ldr	r3, [pc, #364]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800498c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004990:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004998:	4957      	ldr	r1, [pc, #348]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049ac:	4b52      	ldr	r3, [pc, #328]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ba:	494f      	ldr	r1, [pc, #316]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80049ce:	4b4a      	ldr	r3, [pc, #296]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049dc:	4946      	ldr	r1, [pc, #280]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80049f0:	4b41      	ldr	r3, [pc, #260]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049fe:	493e      	ldr	r1, [pc, #248]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004a12:	4b39      	ldr	r3, [pc, #228]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a20:	4935      	ldr	r1, [pc, #212]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00a      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a34:	4b30      	ldr	r3, [pc, #192]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a42:	492d      	ldr	r1, [pc, #180]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d011      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a56:	4b28      	ldr	r3, [pc, #160]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a64:	4924      	ldr	r1, [pc, #144]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a74:	d101      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004a76:	2301      	movs	r3, #1
 8004a78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004a86:	2301      	movs	r3, #1
 8004a88:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00a      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a96:	4b18      	ldr	r3, [pc, #96]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa4:	4914      	ldr	r1, [pc, #80]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00b      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ab8:	4b0f      	ldr	r3, [pc, #60]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ac8:	490b      	ldr	r1, [pc, #44]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00f      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004adc:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aec:	4902      	ldr	r1, [pc, #8]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004af4:	e002      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004af6:	bf00      	nop
 8004af8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00b      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b08:	4b8a      	ldr	r3, [pc, #552]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b18:	4986      	ldr	r1, [pc, #536]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00b      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b2c:	4b81      	ldr	r3, [pc, #516]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b32:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b3c:	497d      	ldr	r1, [pc, #500]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d006      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 80d6 	beq.w	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b58:	4b76      	ldr	r3, [pc, #472]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a75      	ldr	r2, [pc, #468]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b64:	f7fd fd96 	bl	8002694 <HAL_GetTick>
 8004b68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b6c:	f7fd fd92 	bl	8002694 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b64      	cmp	r3, #100	; 0x64
 8004b78:	d901      	bls.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e195      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b7e:	4b6d      	ldr	r3, [pc, #436]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f0      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d021      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d11d      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b9e:	4b65      	ldr	r3, [pc, #404]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba4:	0c1b      	lsrs	r3, r3, #16
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004bac:	4b61      	ldr	r3, [pc, #388]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bb2:	0e1b      	lsrs	r3, r3, #24
 8004bb4:	f003 030f 	and.w	r3, r3, #15
 8004bb8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	019a      	lsls	r2, r3, #6
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	041b      	lsls	r3, r3, #16
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	061b      	lsls	r3, r3, #24
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	071b      	lsls	r3, r3, #28
 8004bd2:	4958      	ldr	r1, [pc, #352]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d004      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bee:	d00a      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d02e      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c04:	d129      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c06:	4b4b      	ldr	r3, [pc, #300]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c0c:	0c1b      	lsrs	r3, r3, #16
 8004c0e:	f003 0303 	and.w	r3, r3, #3
 8004c12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c14:	4b47      	ldr	r3, [pc, #284]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c1a:	0f1b      	lsrs	r3, r3, #28
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	019a      	lsls	r2, r3, #6
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	041b      	lsls	r3, r3, #16
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	061b      	lsls	r3, r3, #24
 8004c34:	431a      	orrs	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	071b      	lsls	r3, r3, #28
 8004c3a:	493e      	ldr	r1, [pc, #248]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c42:	4b3c      	ldr	r3, [pc, #240]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c48:	f023 021f 	bic.w	r2, r3, #31
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	3b01      	subs	r3, #1
 8004c52:	4938      	ldr	r1, [pc, #224]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d01d      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c66:	4b33      	ldr	r3, [pc, #204]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c6c:	0e1b      	lsrs	r3, r3, #24
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c74:	4b2f      	ldr	r3, [pc, #188]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c7a:	0f1b      	lsrs	r3, r3, #28
 8004c7c:	f003 0307 	and.w	r3, r3, #7
 8004c80:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	019a      	lsls	r2, r3, #6
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	041b      	lsls	r3, r3, #16
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	061b      	lsls	r3, r3, #24
 8004c94:	431a      	orrs	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	071b      	lsls	r3, r3, #28
 8004c9a:	4926      	ldr	r1, [pc, #152]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d011      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	019a      	lsls	r2, r3, #6
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	041b      	lsls	r3, r3, #16
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	061b      	lsls	r3, r3, #24
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	071b      	lsls	r3, r3, #28
 8004cca:	491a      	ldr	r1, [pc, #104]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cd2:	4b18      	ldr	r3, [pc, #96]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a17      	ldr	r2, [pc, #92]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cde:	f7fd fcd9 	bl	8002694 <HAL_GetTick>
 8004ce2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ce4:	e008      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ce6:	f7fd fcd5 	bl	8002694 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b64      	cmp	r3, #100	; 0x64
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e0d8      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cf8:	4b0e      	ldr	r3, [pc, #56]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0f0      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	f040 80ce 	bne.w	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d0c:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a08      	ldr	r2, [pc, #32]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d18:	f7fd fcbc 	bl	8002694 <HAL_GetTick>
 8004d1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d1e:	e00b      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d20:	f7fd fcb8 	bl	8002694 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b64      	cmp	r3, #100	; 0x64
 8004d2c:	d904      	bls.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e0bb      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004d32:	bf00      	nop
 8004d34:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d38:	4b5e      	ldr	r3, [pc, #376]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d44:	d0ec      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d009      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d02e      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d12a      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d6e:	4b51      	ldr	r3, [pc, #324]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d74:	0c1b      	lsrs	r3, r3, #16
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d7c:	4b4d      	ldr	r3, [pc, #308]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d82:	0f1b      	lsrs	r3, r3, #28
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	019a      	lsls	r2, r3, #6
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	041b      	lsls	r3, r3, #16
 8004d94:	431a      	orrs	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	061b      	lsls	r3, r3, #24
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	071b      	lsls	r3, r3, #28
 8004da2:	4944      	ldr	r1, [pc, #272]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004daa:	4b42      	ldr	r3, [pc, #264]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004db0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	3b01      	subs	r3, #1
 8004dba:	021b      	lsls	r3, r3, #8
 8004dbc:	493d      	ldr	r1, [pc, #244]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d022      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dd8:	d11d      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004dda:	4b36      	ldr	r3, [pc, #216]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de0:	0e1b      	lsrs	r3, r3, #24
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004de8:	4b32      	ldr	r3, [pc, #200]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dee:	0f1b      	lsrs	r3, r3, #28
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	019a      	lsls	r2, r3, #6
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	041b      	lsls	r3, r3, #16
 8004e02:	431a      	orrs	r2, r3
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	061b      	lsls	r3, r3, #24
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	071b      	lsls	r3, r3, #28
 8004e0e:	4929      	ldr	r1, [pc, #164]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d028      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e22:	4b24      	ldr	r3, [pc, #144]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e28:	0e1b      	lsrs	r3, r3, #24
 8004e2a:	f003 030f 	and.w	r3, r3, #15
 8004e2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e30:	4b20      	ldr	r3, [pc, #128]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e36:	0c1b      	lsrs	r3, r3, #16
 8004e38:	f003 0303 	and.w	r3, r3, #3
 8004e3c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	019a      	lsls	r2, r3, #6
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	041b      	lsls	r3, r3, #16
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	061b      	lsls	r3, r3, #24
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	071b      	lsls	r3, r3, #28
 8004e56:	4917      	ldr	r1, [pc, #92]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e5e:	4b15      	ldr	r3, [pc, #84]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	4911      	ldr	r1, [pc, #68]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e74:	4b0f      	ldr	r3, [pc, #60]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a0e      	ldr	r2, [pc, #56]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e80:	f7fd fc08 	bl	8002694 <HAL_GetTick>
 8004e84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e88:	f7fd fc04 	bl	8002694 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b64      	cmp	r3, #100	; 0x64
 8004e94:	d901      	bls.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e007      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e9a:	4b06      	ldr	r3, [pc, #24]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ea2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ea6:	d1ef      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3720      	adds	r7, #32
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40023800 	.word	0x40023800

08004eb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e049      	b.n	8004f5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d106      	bne.n	8004ee4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7fc fa3c 	bl	800135c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	4610      	mov	r0, r2
 8004ef8:	f000 fdc8 	bl	8005a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d001      	beq.n	8004f80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e04c      	b.n	800501a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a26      	ldr	r2, [pc, #152]	; (8005028 <HAL_TIM_Base_Start+0xc0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d022      	beq.n	8004fd8 <HAL_TIM_Base_Start+0x70>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f9a:	d01d      	beq.n	8004fd8 <HAL_TIM_Base_Start+0x70>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a22      	ldr	r2, [pc, #136]	; (800502c <HAL_TIM_Base_Start+0xc4>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d018      	beq.n	8004fd8 <HAL_TIM_Base_Start+0x70>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a21      	ldr	r2, [pc, #132]	; (8005030 <HAL_TIM_Base_Start+0xc8>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d013      	beq.n	8004fd8 <HAL_TIM_Base_Start+0x70>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a1f      	ldr	r2, [pc, #124]	; (8005034 <HAL_TIM_Base_Start+0xcc>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00e      	beq.n	8004fd8 <HAL_TIM_Base_Start+0x70>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a1e      	ldr	r2, [pc, #120]	; (8005038 <HAL_TIM_Base_Start+0xd0>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d009      	beq.n	8004fd8 <HAL_TIM_Base_Start+0x70>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a1c      	ldr	r2, [pc, #112]	; (800503c <HAL_TIM_Base_Start+0xd4>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d004      	beq.n	8004fd8 <HAL_TIM_Base_Start+0x70>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1b      	ldr	r2, [pc, #108]	; (8005040 <HAL_TIM_Base_Start+0xd8>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d115      	bne.n	8005004 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	4b19      	ldr	r3, [pc, #100]	; (8005044 <HAL_TIM_Base_Start+0xdc>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b06      	cmp	r3, #6
 8004fe8:	d015      	beq.n	8005016 <HAL_TIM_Base_Start+0xae>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff0:	d011      	beq.n	8005016 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f042 0201 	orr.w	r2, r2, #1
 8005000:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005002:	e008      	b.n	8005016 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0201 	orr.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	e000      	b.n	8005018 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005016:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	40010000 	.word	0x40010000
 800502c:	40000400 	.word	0x40000400
 8005030:	40000800 	.word	0x40000800
 8005034:	40000c00 	.word	0x40000c00
 8005038:	40010400 	.word	0x40010400
 800503c:	40014000 	.word	0x40014000
 8005040:	40001800 	.word	0x40001800
 8005044:	00010007 	.word	0x00010007

08005048 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6a1a      	ldr	r2, [r3, #32]
 8005056:	f241 1311 	movw	r3, #4369	; 0x1111
 800505a:	4013      	ands	r3, r2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10f      	bne.n	8005080 <HAL_TIM_Base_Stop+0x38>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6a1a      	ldr	r2, [r3, #32]
 8005066:	f240 4344 	movw	r3, #1092	; 0x444
 800506a:	4013      	ands	r3, r2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d107      	bne.n	8005080 <HAL_TIM_Base_Stop+0x38>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0201 	bic.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
	...

08005098 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d001      	beq.n	80050b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e054      	b.n	800515a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68da      	ldr	r2, [r3, #12]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0201 	orr.w	r2, r2, #1
 80050c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a26      	ldr	r2, [pc, #152]	; (8005168 <HAL_TIM_Base_Start_IT+0xd0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d022      	beq.n	8005118 <HAL_TIM_Base_Start_IT+0x80>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050da:	d01d      	beq.n	8005118 <HAL_TIM_Base_Start_IT+0x80>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a22      	ldr	r2, [pc, #136]	; (800516c <HAL_TIM_Base_Start_IT+0xd4>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d018      	beq.n	8005118 <HAL_TIM_Base_Start_IT+0x80>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a21      	ldr	r2, [pc, #132]	; (8005170 <HAL_TIM_Base_Start_IT+0xd8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d013      	beq.n	8005118 <HAL_TIM_Base_Start_IT+0x80>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a1f      	ldr	r2, [pc, #124]	; (8005174 <HAL_TIM_Base_Start_IT+0xdc>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00e      	beq.n	8005118 <HAL_TIM_Base_Start_IT+0x80>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a1e      	ldr	r2, [pc, #120]	; (8005178 <HAL_TIM_Base_Start_IT+0xe0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d009      	beq.n	8005118 <HAL_TIM_Base_Start_IT+0x80>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a1c      	ldr	r2, [pc, #112]	; (800517c <HAL_TIM_Base_Start_IT+0xe4>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d004      	beq.n	8005118 <HAL_TIM_Base_Start_IT+0x80>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a1b      	ldr	r2, [pc, #108]	; (8005180 <HAL_TIM_Base_Start_IT+0xe8>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d115      	bne.n	8005144 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	4b19      	ldr	r3, [pc, #100]	; (8005184 <HAL_TIM_Base_Start_IT+0xec>)
 8005120:	4013      	ands	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2b06      	cmp	r3, #6
 8005128:	d015      	beq.n	8005156 <HAL_TIM_Base_Start_IT+0xbe>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005130:	d011      	beq.n	8005156 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f042 0201 	orr.w	r2, r2, #1
 8005140:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005142:	e008      	b.n	8005156 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0201 	orr.w	r2, r2, #1
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	e000      	b.n	8005158 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005156:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40010000 	.word	0x40010000
 800516c:	40000400 	.word	0x40000400
 8005170:	40000800 	.word	0x40000800
 8005174:	40000c00 	.word	0x40000c00
 8005178:	40010400 	.word	0x40010400
 800517c:	40014000 	.word	0x40014000
 8005180:	40001800 	.word	0x40001800
 8005184:	00010007 	.word	0x00010007

08005188 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e049      	b.n	800522e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d106      	bne.n	80051b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f841 	bl	8005236 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3304      	adds	r3, #4
 80051c4:	4619      	mov	r1, r3
 80051c6:	4610      	mov	r0, r2
 80051c8:	f000 fc60 	bl	8005a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
	...

0800524c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d109      	bne.n	8005270 <HAL_TIM_PWM_Start+0x24>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b01      	cmp	r3, #1
 8005266:	bf14      	ite	ne
 8005268:	2301      	movne	r3, #1
 800526a:	2300      	moveq	r3, #0
 800526c:	b2db      	uxtb	r3, r3
 800526e:	e03c      	b.n	80052ea <HAL_TIM_PWM_Start+0x9e>
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2b04      	cmp	r3, #4
 8005274:	d109      	bne.n	800528a <HAL_TIM_PWM_Start+0x3e>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b01      	cmp	r3, #1
 8005280:	bf14      	ite	ne
 8005282:	2301      	movne	r3, #1
 8005284:	2300      	moveq	r3, #0
 8005286:	b2db      	uxtb	r3, r3
 8005288:	e02f      	b.n	80052ea <HAL_TIM_PWM_Start+0x9e>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b08      	cmp	r3, #8
 800528e:	d109      	bne.n	80052a4 <HAL_TIM_PWM_Start+0x58>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b01      	cmp	r3, #1
 800529a:	bf14      	ite	ne
 800529c:	2301      	movne	r3, #1
 800529e:	2300      	moveq	r3, #0
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	e022      	b.n	80052ea <HAL_TIM_PWM_Start+0x9e>
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2b0c      	cmp	r3, #12
 80052a8:	d109      	bne.n	80052be <HAL_TIM_PWM_Start+0x72>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	bf14      	ite	ne
 80052b6:	2301      	movne	r3, #1
 80052b8:	2300      	moveq	r3, #0
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	e015      	b.n	80052ea <HAL_TIM_PWM_Start+0x9e>
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b10      	cmp	r3, #16
 80052c2:	d109      	bne.n	80052d8 <HAL_TIM_PWM_Start+0x8c>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	bf14      	ite	ne
 80052d0:	2301      	movne	r3, #1
 80052d2:	2300      	moveq	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	e008      	b.n	80052ea <HAL_TIM_PWM_Start+0x9e>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	bf14      	ite	ne
 80052e4:	2301      	movne	r3, #1
 80052e6:	2300      	moveq	r3, #0
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e092      	b.n	8005418 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d104      	bne.n	8005302 <HAL_TIM_PWM_Start+0xb6>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005300:	e023      	b.n	800534a <HAL_TIM_PWM_Start+0xfe>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b04      	cmp	r3, #4
 8005306:	d104      	bne.n	8005312 <HAL_TIM_PWM_Start+0xc6>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005310:	e01b      	b.n	800534a <HAL_TIM_PWM_Start+0xfe>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b08      	cmp	r3, #8
 8005316:	d104      	bne.n	8005322 <HAL_TIM_PWM_Start+0xd6>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005320:	e013      	b.n	800534a <HAL_TIM_PWM_Start+0xfe>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b0c      	cmp	r3, #12
 8005326:	d104      	bne.n	8005332 <HAL_TIM_PWM_Start+0xe6>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005330:	e00b      	b.n	800534a <HAL_TIM_PWM_Start+0xfe>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b10      	cmp	r3, #16
 8005336:	d104      	bne.n	8005342 <HAL_TIM_PWM_Start+0xf6>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005340:	e003      	b.n	800534a <HAL_TIM_PWM_Start+0xfe>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2202      	movs	r2, #2
 8005346:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2201      	movs	r2, #1
 8005350:	6839      	ldr	r1, [r7, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f000 ff32 	bl	80061bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a30      	ldr	r2, [pc, #192]	; (8005420 <HAL_TIM_PWM_Start+0x1d4>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d004      	beq.n	800536c <HAL_TIM_PWM_Start+0x120>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a2f      	ldr	r2, [pc, #188]	; (8005424 <HAL_TIM_PWM_Start+0x1d8>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d101      	bne.n	8005370 <HAL_TIM_PWM_Start+0x124>
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <HAL_TIM_PWM_Start+0x126>
 8005370:	2300      	movs	r3, #0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d007      	beq.n	8005386 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005384:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a25      	ldr	r2, [pc, #148]	; (8005420 <HAL_TIM_PWM_Start+0x1d4>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d022      	beq.n	80053d6 <HAL_TIM_PWM_Start+0x18a>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005398:	d01d      	beq.n	80053d6 <HAL_TIM_PWM_Start+0x18a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a22      	ldr	r2, [pc, #136]	; (8005428 <HAL_TIM_PWM_Start+0x1dc>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d018      	beq.n	80053d6 <HAL_TIM_PWM_Start+0x18a>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a20      	ldr	r2, [pc, #128]	; (800542c <HAL_TIM_PWM_Start+0x1e0>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d013      	beq.n	80053d6 <HAL_TIM_PWM_Start+0x18a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a1f      	ldr	r2, [pc, #124]	; (8005430 <HAL_TIM_PWM_Start+0x1e4>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d00e      	beq.n	80053d6 <HAL_TIM_PWM_Start+0x18a>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a19      	ldr	r2, [pc, #100]	; (8005424 <HAL_TIM_PWM_Start+0x1d8>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d009      	beq.n	80053d6 <HAL_TIM_PWM_Start+0x18a>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1b      	ldr	r2, [pc, #108]	; (8005434 <HAL_TIM_PWM_Start+0x1e8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d004      	beq.n	80053d6 <HAL_TIM_PWM_Start+0x18a>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a19      	ldr	r2, [pc, #100]	; (8005438 <HAL_TIM_PWM_Start+0x1ec>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d115      	bne.n	8005402 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	4b17      	ldr	r3, [pc, #92]	; (800543c <HAL_TIM_PWM_Start+0x1f0>)
 80053de:	4013      	ands	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2b06      	cmp	r3, #6
 80053e6:	d015      	beq.n	8005414 <HAL_TIM_PWM_Start+0x1c8>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ee:	d011      	beq.n	8005414 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0201 	orr.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005400:	e008      	b.n	8005414 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f042 0201 	orr.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	e000      	b.n	8005416 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005414:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40010000 	.word	0x40010000
 8005424:	40010400 	.word	0x40010400
 8005428:	40000400 	.word	0x40000400
 800542c:	40000800 	.word	0x40000800
 8005430:	40000c00 	.word	0x40000c00
 8005434:	40014000 	.word	0x40014000
 8005438:	40001800 	.word	0x40001800
 800543c:	00010007 	.word	0x00010007

08005440 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b02      	cmp	r3, #2
 8005454:	d122      	bne.n	800549c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b02      	cmp	r3, #2
 8005462:	d11b      	bne.n	800549c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f06f 0202 	mvn.w	r2, #2
 800546c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fae4 	bl	8005a50 <HAL_TIM_IC_CaptureCallback>
 8005488:	e005      	b.n	8005496 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fad6 	bl	8005a3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 fae7 	bl	8005a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f003 0304 	and.w	r3, r3, #4
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d122      	bne.n	80054f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d11b      	bne.n	80054f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f06f 0204 	mvn.w	r2, #4
 80054c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2202      	movs	r2, #2
 80054c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 faba 	bl	8005a50 <HAL_TIM_IC_CaptureCallback>
 80054dc:	e005      	b.n	80054ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 faac 	bl	8005a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fabd 	bl	8005a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f003 0308 	and.w	r3, r3, #8
 80054fa:	2b08      	cmp	r3, #8
 80054fc:	d122      	bne.n	8005544 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f003 0308 	and.w	r3, r3, #8
 8005508:	2b08      	cmp	r3, #8
 800550a:	d11b      	bne.n	8005544 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f06f 0208 	mvn.w	r2, #8
 8005514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2204      	movs	r2, #4
 800551a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fa90 	bl	8005a50 <HAL_TIM_IC_CaptureCallback>
 8005530:	e005      	b.n	800553e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fa82 	bl	8005a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 fa93 	bl	8005a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f003 0310 	and.w	r3, r3, #16
 800554e:	2b10      	cmp	r3, #16
 8005550:	d122      	bne.n	8005598 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f003 0310 	and.w	r3, r3, #16
 800555c:	2b10      	cmp	r3, #16
 800555e:	d11b      	bne.n	8005598 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f06f 0210 	mvn.w	r2, #16
 8005568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2208      	movs	r2, #8
 800556e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fa66 	bl	8005a50 <HAL_TIM_IC_CaptureCallback>
 8005584:	e005      	b.n	8005592 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fa58 	bl	8005a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 fa69 	bl	8005a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d10e      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d107      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0201 	mvn.w	r2, #1
 80055bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7fb fa06 	bl	80009d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ce:	2b80      	cmp	r3, #128	; 0x80
 80055d0:	d10e      	bne.n	80055f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055dc:	2b80      	cmp	r3, #128	; 0x80
 80055de:	d107      	bne.n	80055f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fea4 	bl	8006338 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055fe:	d10e      	bne.n	800561e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560a:	2b80      	cmp	r3, #128	; 0x80
 800560c:	d107      	bne.n	800561e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fe97 	bl	800634c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005628:	2b40      	cmp	r3, #64	; 0x40
 800562a:	d10e      	bne.n	800564a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005636:	2b40      	cmp	r3, #64	; 0x40
 8005638:	d107      	bne.n	800564a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fa17 	bl	8005a78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	f003 0320 	and.w	r3, r3, #32
 8005654:	2b20      	cmp	r3, #32
 8005656:	d10e      	bne.n	8005676 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f003 0320 	and.w	r3, r3, #32
 8005662:	2b20      	cmp	r3, #32
 8005664:	d107      	bne.n	8005676 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f06f 0220 	mvn.w	r2, #32
 800566e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 fe57 	bl	8006324 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005676:	bf00      	nop
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
	...

08005680 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800568c:	2300      	movs	r3, #0
 800568e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005696:	2b01      	cmp	r3, #1
 8005698:	d101      	bne.n	800569e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800569a:	2302      	movs	r3, #2
 800569c:	e0ff      	b.n	800589e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b14      	cmp	r3, #20
 80056aa:	f200 80f0 	bhi.w	800588e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80056ae:	a201      	add	r2, pc, #4	; (adr r2, 80056b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b4:	08005709 	.word	0x08005709
 80056b8:	0800588f 	.word	0x0800588f
 80056bc:	0800588f 	.word	0x0800588f
 80056c0:	0800588f 	.word	0x0800588f
 80056c4:	08005749 	.word	0x08005749
 80056c8:	0800588f 	.word	0x0800588f
 80056cc:	0800588f 	.word	0x0800588f
 80056d0:	0800588f 	.word	0x0800588f
 80056d4:	0800578b 	.word	0x0800578b
 80056d8:	0800588f 	.word	0x0800588f
 80056dc:	0800588f 	.word	0x0800588f
 80056e0:	0800588f 	.word	0x0800588f
 80056e4:	080057cb 	.word	0x080057cb
 80056e8:	0800588f 	.word	0x0800588f
 80056ec:	0800588f 	.word	0x0800588f
 80056f0:	0800588f 	.word	0x0800588f
 80056f4:	0800580d 	.word	0x0800580d
 80056f8:	0800588f 	.word	0x0800588f
 80056fc:	0800588f 	.word	0x0800588f
 8005700:	0800588f 	.word	0x0800588f
 8005704:	0800584d 	.word	0x0800584d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	4618      	mov	r0, r3
 8005710:	f000 fa5c 	bl	8005bcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699a      	ldr	r2, [r3, #24]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0208 	orr.w	r2, r2, #8
 8005722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699a      	ldr	r2, [r3, #24]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 0204 	bic.w	r2, r2, #4
 8005732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6999      	ldr	r1, [r3, #24]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	691a      	ldr	r2, [r3, #16]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	619a      	str	r2, [r3, #24]
      break;
 8005746:	e0a5      	b.n	8005894 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68b9      	ldr	r1, [r7, #8]
 800574e:	4618      	mov	r0, r3
 8005750:	f000 faae 	bl	8005cb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699a      	ldr	r2, [r3, #24]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	699a      	ldr	r2, [r3, #24]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6999      	ldr	r1, [r3, #24]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	021a      	lsls	r2, r3, #8
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	619a      	str	r2, [r3, #24]
      break;
 8005788:	e084      	b.n	8005894 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68b9      	ldr	r1, [r7, #8]
 8005790:	4618      	mov	r0, r3
 8005792:	f000 fb05 	bl	8005da0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	69da      	ldr	r2, [r3, #28]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f042 0208 	orr.w	r2, r2, #8
 80057a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69da      	ldr	r2, [r3, #28]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0204 	bic.w	r2, r2, #4
 80057b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	69d9      	ldr	r1, [r3, #28]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	61da      	str	r2, [r3, #28]
      break;
 80057c8:	e064      	b.n	8005894 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68b9      	ldr	r1, [r7, #8]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 fb5b 	bl	8005e8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69da      	ldr	r2, [r3, #28]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	69da      	ldr	r2, [r3, #28]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	69d9      	ldr	r1, [r3, #28]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	021a      	lsls	r2, r3, #8
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	61da      	str	r2, [r3, #28]
      break;
 800580a:	e043      	b.n	8005894 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68b9      	ldr	r1, [r7, #8]
 8005812:	4618      	mov	r0, r3
 8005814:	f000 fb92 	bl	8005f3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0208 	orr.w	r2, r2, #8
 8005826:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0204 	bic.w	r2, r2, #4
 8005836:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	691a      	ldr	r2, [r3, #16]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800584a:	e023      	b.n	8005894 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68b9      	ldr	r1, [r7, #8]
 8005852:	4618      	mov	r0, r3
 8005854:	f000 fbc4 	bl	8005fe0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005866:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005876:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	021a      	lsls	r2, r3, #8
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800588c:	e002      	b.n	8005894 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	75fb      	strb	r3, [r7, #23]
      break;
 8005892:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800589c:	7dfb      	ldrb	r3, [r7, #23]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3718      	adds	r7, #24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop

080058a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058b2:	2300      	movs	r3, #0
 80058b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d101      	bne.n	80058c4 <HAL_TIM_ConfigClockSource+0x1c>
 80058c0:	2302      	movs	r3, #2
 80058c2:	e0b4      	b.n	8005a2e <HAL_TIM_ConfigClockSource+0x186>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	4b56      	ldr	r3, [pc, #344]	; (8005a38 <HAL_TIM_ConfigClockSource+0x190>)
 80058e0:	4013      	ands	r3, r2
 80058e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058fc:	d03e      	beq.n	800597c <HAL_TIM_ConfigClockSource+0xd4>
 80058fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005902:	f200 8087 	bhi.w	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
 8005906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800590a:	f000 8086 	beq.w	8005a1a <HAL_TIM_ConfigClockSource+0x172>
 800590e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005912:	d87f      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
 8005914:	2b70      	cmp	r3, #112	; 0x70
 8005916:	d01a      	beq.n	800594e <HAL_TIM_ConfigClockSource+0xa6>
 8005918:	2b70      	cmp	r3, #112	; 0x70
 800591a:	d87b      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
 800591c:	2b60      	cmp	r3, #96	; 0x60
 800591e:	d050      	beq.n	80059c2 <HAL_TIM_ConfigClockSource+0x11a>
 8005920:	2b60      	cmp	r3, #96	; 0x60
 8005922:	d877      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
 8005924:	2b50      	cmp	r3, #80	; 0x50
 8005926:	d03c      	beq.n	80059a2 <HAL_TIM_ConfigClockSource+0xfa>
 8005928:	2b50      	cmp	r3, #80	; 0x50
 800592a:	d873      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
 800592c:	2b40      	cmp	r3, #64	; 0x40
 800592e:	d058      	beq.n	80059e2 <HAL_TIM_ConfigClockSource+0x13a>
 8005930:	2b40      	cmp	r3, #64	; 0x40
 8005932:	d86f      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
 8005934:	2b30      	cmp	r3, #48	; 0x30
 8005936:	d064      	beq.n	8005a02 <HAL_TIM_ConfigClockSource+0x15a>
 8005938:	2b30      	cmp	r3, #48	; 0x30
 800593a:	d86b      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
 800593c:	2b20      	cmp	r3, #32
 800593e:	d060      	beq.n	8005a02 <HAL_TIM_ConfigClockSource+0x15a>
 8005940:	2b20      	cmp	r3, #32
 8005942:	d867      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
 8005944:	2b00      	cmp	r3, #0
 8005946:	d05c      	beq.n	8005a02 <HAL_TIM_ConfigClockSource+0x15a>
 8005948:	2b10      	cmp	r3, #16
 800594a:	d05a      	beq.n	8005a02 <HAL_TIM_ConfigClockSource+0x15a>
 800594c:	e062      	b.n	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6818      	ldr	r0, [r3, #0]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	6899      	ldr	r1, [r3, #8]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	f000 fc0d 	bl	800617c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005970:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	609a      	str	r2, [r3, #8]
      break;
 800597a:	e04f      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6818      	ldr	r0, [r3, #0]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	6899      	ldr	r1, [r3, #8]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f000 fbf6 	bl	800617c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800599e:	609a      	str	r2, [r3, #8]
      break;
 80059a0:	e03c      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6818      	ldr	r0, [r3, #0]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	6859      	ldr	r1, [r3, #4]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	461a      	mov	r2, r3
 80059b0:	f000 fb6a 	bl	8006088 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2150      	movs	r1, #80	; 0x50
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 fbc3 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 80059c0:	e02c      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6818      	ldr	r0, [r3, #0]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	6859      	ldr	r1, [r3, #4]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	461a      	mov	r2, r3
 80059d0:	f000 fb89 	bl	80060e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2160      	movs	r1, #96	; 0x60
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 fbb3 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 80059e0:	e01c      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	6859      	ldr	r1, [r3, #4]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	461a      	mov	r2, r3
 80059f0:	f000 fb4a 	bl	8006088 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2140      	movs	r1, #64	; 0x40
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 fba3 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 8005a00:	e00c      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	f000 fb9a 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 8005a12:	e003      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	73fb      	strb	r3, [r7, #15]
      break;
 8005a18:	e000      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	fffeff88 	.word	0xfffeff88

08005a3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a40      	ldr	r2, [pc, #256]	; (8005ba0 <TIM_Base_SetConfig+0x114>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d013      	beq.n	8005acc <TIM_Base_SetConfig+0x40>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aaa:	d00f      	beq.n	8005acc <TIM_Base_SetConfig+0x40>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a3d      	ldr	r2, [pc, #244]	; (8005ba4 <TIM_Base_SetConfig+0x118>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d00b      	beq.n	8005acc <TIM_Base_SetConfig+0x40>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a3c      	ldr	r2, [pc, #240]	; (8005ba8 <TIM_Base_SetConfig+0x11c>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d007      	beq.n	8005acc <TIM_Base_SetConfig+0x40>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a3b      	ldr	r2, [pc, #236]	; (8005bac <TIM_Base_SetConfig+0x120>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d003      	beq.n	8005acc <TIM_Base_SetConfig+0x40>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a3a      	ldr	r2, [pc, #232]	; (8005bb0 <TIM_Base_SetConfig+0x124>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d108      	bne.n	8005ade <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a2f      	ldr	r2, [pc, #188]	; (8005ba0 <TIM_Base_SetConfig+0x114>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d02b      	beq.n	8005b3e <TIM_Base_SetConfig+0xb2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aec:	d027      	beq.n	8005b3e <TIM_Base_SetConfig+0xb2>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a2c      	ldr	r2, [pc, #176]	; (8005ba4 <TIM_Base_SetConfig+0x118>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d023      	beq.n	8005b3e <TIM_Base_SetConfig+0xb2>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a2b      	ldr	r2, [pc, #172]	; (8005ba8 <TIM_Base_SetConfig+0x11c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d01f      	beq.n	8005b3e <TIM_Base_SetConfig+0xb2>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a2a      	ldr	r2, [pc, #168]	; (8005bac <TIM_Base_SetConfig+0x120>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d01b      	beq.n	8005b3e <TIM_Base_SetConfig+0xb2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a29      	ldr	r2, [pc, #164]	; (8005bb0 <TIM_Base_SetConfig+0x124>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d017      	beq.n	8005b3e <TIM_Base_SetConfig+0xb2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a28      	ldr	r2, [pc, #160]	; (8005bb4 <TIM_Base_SetConfig+0x128>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d013      	beq.n	8005b3e <TIM_Base_SetConfig+0xb2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a27      	ldr	r2, [pc, #156]	; (8005bb8 <TIM_Base_SetConfig+0x12c>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d00f      	beq.n	8005b3e <TIM_Base_SetConfig+0xb2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a26      	ldr	r2, [pc, #152]	; (8005bbc <TIM_Base_SetConfig+0x130>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d00b      	beq.n	8005b3e <TIM_Base_SetConfig+0xb2>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a25      	ldr	r2, [pc, #148]	; (8005bc0 <TIM_Base_SetConfig+0x134>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d007      	beq.n	8005b3e <TIM_Base_SetConfig+0xb2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a24      	ldr	r2, [pc, #144]	; (8005bc4 <TIM_Base_SetConfig+0x138>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d003      	beq.n	8005b3e <TIM_Base_SetConfig+0xb2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a23      	ldr	r2, [pc, #140]	; (8005bc8 <TIM_Base_SetConfig+0x13c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d108      	bne.n	8005b50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a0a      	ldr	r2, [pc, #40]	; (8005ba0 <TIM_Base_SetConfig+0x114>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d003      	beq.n	8005b84 <TIM_Base_SetConfig+0xf8>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a0c      	ldr	r2, [pc, #48]	; (8005bb0 <TIM_Base_SetConfig+0x124>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d103      	bne.n	8005b8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	691a      	ldr	r2, [r3, #16]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	615a      	str	r2, [r3, #20]
}
 8005b92:	bf00      	nop
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	40010000 	.word	0x40010000
 8005ba4:	40000400 	.word	0x40000400
 8005ba8:	40000800 	.word	0x40000800
 8005bac:	40000c00 	.word	0x40000c00
 8005bb0:	40010400 	.word	0x40010400
 8005bb4:	40014000 	.word	0x40014000
 8005bb8:	40014400 	.word	0x40014400
 8005bbc:	40014800 	.word	0x40014800
 8005bc0:	40001800 	.word	0x40001800
 8005bc4:	40001c00 	.word	0x40001c00
 8005bc8:	40002000 	.word	0x40002000

08005bcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b087      	sub	sp, #28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	f023 0201 	bic.w	r2, r3, #1
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	4b2b      	ldr	r3, [pc, #172]	; (8005ca4 <TIM_OC1_SetConfig+0xd8>)
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f023 0303 	bic.w	r3, r3, #3
 8005c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f023 0302 	bic.w	r3, r3, #2
 8005c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a21      	ldr	r2, [pc, #132]	; (8005ca8 <TIM_OC1_SetConfig+0xdc>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d003      	beq.n	8005c30 <TIM_OC1_SetConfig+0x64>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a20      	ldr	r2, [pc, #128]	; (8005cac <TIM_OC1_SetConfig+0xe0>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d10c      	bne.n	8005c4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f023 0308 	bic.w	r3, r3, #8
 8005c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f023 0304 	bic.w	r3, r3, #4
 8005c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a16      	ldr	r2, [pc, #88]	; (8005ca8 <TIM_OC1_SetConfig+0xdc>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d003      	beq.n	8005c5a <TIM_OC1_SetConfig+0x8e>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a15      	ldr	r2, [pc, #84]	; (8005cac <TIM_OC1_SetConfig+0xe0>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d111      	bne.n	8005c7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	621a      	str	r2, [r3, #32]
}
 8005c98:	bf00      	nop
 8005c9a:	371c      	adds	r7, #28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	fffeff8f 	.word	0xfffeff8f
 8005ca8:	40010000 	.word	0x40010000
 8005cac:	40010400 	.word	0x40010400

08005cb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	f023 0210 	bic.w	r2, r3, #16
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4b2e      	ldr	r3, [pc, #184]	; (8005d94 <TIM_OC2_SetConfig+0xe4>)
 8005cdc:	4013      	ands	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	021b      	lsls	r3, r3, #8
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f023 0320 	bic.w	r3, r3, #32
 8005cfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	011b      	lsls	r3, r3, #4
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a23      	ldr	r2, [pc, #140]	; (8005d98 <TIM_OC2_SetConfig+0xe8>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d003      	beq.n	8005d18 <TIM_OC2_SetConfig+0x68>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a22      	ldr	r2, [pc, #136]	; (8005d9c <TIM_OC2_SetConfig+0xec>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d10d      	bne.n	8005d34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	011b      	lsls	r3, r3, #4
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a18      	ldr	r2, [pc, #96]	; (8005d98 <TIM_OC2_SetConfig+0xe8>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d003      	beq.n	8005d44 <TIM_OC2_SetConfig+0x94>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a17      	ldr	r2, [pc, #92]	; (8005d9c <TIM_OC2_SetConfig+0xec>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d113      	bne.n	8005d6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	621a      	str	r2, [r3, #32]
}
 8005d86:	bf00      	nop
 8005d88:	371c      	adds	r7, #28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	feff8fff 	.word	0xfeff8fff
 8005d98:	40010000 	.word	0x40010000
 8005d9c:	40010400 	.word	0x40010400

08005da0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	4b2d      	ldr	r3, [pc, #180]	; (8005e80 <TIM_OC3_SetConfig+0xe0>)
 8005dcc:	4013      	ands	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f023 0303 	bic.w	r3, r3, #3
 8005dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	021b      	lsls	r3, r3, #8
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a22      	ldr	r2, [pc, #136]	; (8005e84 <TIM_OC3_SetConfig+0xe4>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d003      	beq.n	8005e06 <TIM_OC3_SetConfig+0x66>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a21      	ldr	r2, [pc, #132]	; (8005e88 <TIM_OC3_SetConfig+0xe8>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d10d      	bne.n	8005e22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	021b      	lsls	r3, r3, #8
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a17      	ldr	r2, [pc, #92]	; (8005e84 <TIM_OC3_SetConfig+0xe4>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d003      	beq.n	8005e32 <TIM_OC3_SetConfig+0x92>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a16      	ldr	r2, [pc, #88]	; (8005e88 <TIM_OC3_SetConfig+0xe8>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d113      	bne.n	8005e5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	011b      	lsls	r3, r3, #4
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	011b      	lsls	r3, r3, #4
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	621a      	str	r2, [r3, #32]
}
 8005e74:	bf00      	nop
 8005e76:	371c      	adds	r7, #28
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	fffeff8f 	.word	0xfffeff8f
 8005e84:	40010000 	.word	0x40010000
 8005e88:	40010400 	.word	0x40010400

08005e8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	4b1e      	ldr	r3, [pc, #120]	; (8005f30 <TIM_OC4_SetConfig+0xa4>)
 8005eb8:	4013      	ands	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	021b      	lsls	r3, r3, #8
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	031b      	lsls	r3, r3, #12
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a13      	ldr	r2, [pc, #76]	; (8005f34 <TIM_OC4_SetConfig+0xa8>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d003      	beq.n	8005ef4 <TIM_OC4_SetConfig+0x68>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a12      	ldr	r2, [pc, #72]	; (8005f38 <TIM_OC4_SetConfig+0xac>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d109      	bne.n	8005f08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005efa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	019b      	lsls	r3, r3, #6
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	621a      	str	r2, [r3, #32]
}
 8005f22:	bf00      	nop
 8005f24:	371c      	adds	r7, #28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	feff8fff 	.word	0xfeff8fff
 8005f34:	40010000 	.word	0x40010000
 8005f38:	40010400 	.word	0x40010400

08005f3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4b1b      	ldr	r3, [pc, #108]	; (8005fd4 <TIM_OC5_SetConfig+0x98>)
 8005f68:	4013      	ands	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	041b      	lsls	r3, r3, #16
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a12      	ldr	r2, [pc, #72]	; (8005fd8 <TIM_OC5_SetConfig+0x9c>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d003      	beq.n	8005f9a <TIM_OC5_SetConfig+0x5e>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a11      	ldr	r2, [pc, #68]	; (8005fdc <TIM_OC5_SetConfig+0xa0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d109      	bne.n	8005fae <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fa0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	021b      	lsls	r3, r3, #8
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	621a      	str	r2, [r3, #32]
}
 8005fc8:	bf00      	nop
 8005fca:	371c      	adds	r7, #28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	fffeff8f 	.word	0xfffeff8f
 8005fd8:	40010000 	.word	0x40010000
 8005fdc:	40010400 	.word	0x40010400

08005fe0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4b1c      	ldr	r3, [pc, #112]	; (800607c <TIM_OC6_SetConfig+0x9c>)
 800600c:	4013      	ands	r3, r2
 800600e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	021b      	lsls	r3, r3, #8
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	4313      	orrs	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006022:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	051b      	lsls	r3, r3, #20
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	4313      	orrs	r3, r2
 800602e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a13      	ldr	r2, [pc, #76]	; (8006080 <TIM_OC6_SetConfig+0xa0>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d003      	beq.n	8006040 <TIM_OC6_SetConfig+0x60>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a12      	ldr	r2, [pc, #72]	; (8006084 <TIM_OC6_SetConfig+0xa4>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d109      	bne.n	8006054 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006046:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	029b      	lsls	r3, r3, #10
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	4313      	orrs	r3, r2
 8006052:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	621a      	str	r2, [r3, #32]
}
 800606e:	bf00      	nop
 8006070:	371c      	adds	r7, #28
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	feff8fff 	.word	0xfeff8fff
 8006080:	40010000 	.word	0x40010000
 8006084:	40010400 	.word	0x40010400

08006088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	f023 0201 	bic.w	r2, r3, #1
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f023 030a 	bic.w	r3, r3, #10
 80060c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	621a      	str	r2, [r3, #32]
}
 80060da:	bf00      	nop
 80060dc:	371c      	adds	r7, #28
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b087      	sub	sp, #28
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	60f8      	str	r0, [r7, #12]
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	f023 0210 	bic.w	r2, r3, #16
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006110:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	031b      	lsls	r3, r3, #12
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	4313      	orrs	r3, r2
 800611a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006122:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	621a      	str	r2, [r3, #32]
}
 800613a:	bf00      	nop
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006146:	b480      	push	{r7}
 8006148:	b085      	sub	sp, #20
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4313      	orrs	r3, r2
 8006164:	f043 0307 	orr.w	r3, r3, #7
 8006168:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	609a      	str	r2, [r3, #8]
}
 8006170:	bf00      	nop
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006196:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	021a      	lsls	r2, r3, #8
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	431a      	orrs	r2, r3
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	609a      	str	r2, [r3, #8]
}
 80061b0:	bf00      	nop
 80061b2:	371c      	adds	r7, #28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f003 031f 	and.w	r3, r3, #31
 80061ce:	2201      	movs	r2, #1
 80061d0:	fa02 f303 	lsl.w	r3, r2, r3
 80061d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6a1a      	ldr	r2, [r3, #32]
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	43db      	mvns	r3, r3
 80061de:	401a      	ands	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6a1a      	ldr	r2, [r3, #32]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f003 031f 	and.w	r3, r3, #31
 80061ee:	6879      	ldr	r1, [r7, #4]
 80061f0:	fa01 f303 	lsl.w	r3, r1, r3
 80061f4:	431a      	orrs	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	621a      	str	r2, [r3, #32]
}
 80061fa:	bf00      	nop
 80061fc:	371c      	adds	r7, #28
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
	...

08006208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006218:	2b01      	cmp	r3, #1
 800621a:	d101      	bne.n	8006220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800621c:	2302      	movs	r3, #2
 800621e:	e06d      	b.n	80062fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a30      	ldr	r2, [pc, #192]	; (8006308 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d004      	beq.n	8006254 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a2f      	ldr	r2, [pc, #188]	; (800630c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d108      	bne.n	8006266 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800625a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	4313      	orrs	r3, r2
 8006276:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a20      	ldr	r2, [pc, #128]	; (8006308 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d022      	beq.n	80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006292:	d01d      	beq.n	80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a1d      	ldr	r2, [pc, #116]	; (8006310 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d018      	beq.n	80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a1c      	ldr	r2, [pc, #112]	; (8006314 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d013      	beq.n	80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a1a      	ldr	r2, [pc, #104]	; (8006318 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d00e      	beq.n	80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a15      	ldr	r2, [pc, #84]	; (800630c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d009      	beq.n	80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a16      	ldr	r2, [pc, #88]	; (800631c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d004      	beq.n	80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a15      	ldr	r2, [pc, #84]	; (8006320 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d10c      	bne.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	40010000 	.word	0x40010000
 800630c:	40010400 	.word	0x40010400
 8006310:	40000400 	.word	0x40000400
 8006314:	40000800 	.word	0x40000800
 8006318:	40000c00 	.word	0x40000c00
 800631c:	40014000 	.word	0x40014000
 8006320:	40001800 	.word	0x40001800

08006324 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e040      	b.n	80063f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006376:	2b00      	cmp	r3, #0
 8006378:	d106      	bne.n	8006388 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7fb f8c4 	bl	8001510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2224      	movs	r2, #36	; 0x24
 800638c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0201 	bic.w	r2, r2, #1
 800639c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fc64 	bl	8006c6c <UART_SetConfig>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d101      	bne.n	80063ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e022      	b.n	80063f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 febc 	bl	8007134 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 0201 	orr.w	r2, r2, #1
 80063ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 ff43 	bl	8007278 <UART_CheckIdleState>
 80063f2:	4603      	mov	r3, r0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b08a      	sub	sp, #40	; 0x28
 8006400:	af02      	add	r7, sp, #8
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	603b      	str	r3, [r7, #0]
 8006408:	4613      	mov	r3, r2
 800640a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006410:	2b20      	cmp	r3, #32
 8006412:	d171      	bne.n	80064f8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d002      	beq.n	8006420 <HAL_UART_Transmit+0x24>
 800641a:	88fb      	ldrh	r3, [r7, #6]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e06a      	b.n	80064fa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2221      	movs	r2, #33	; 0x21
 8006430:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006432:	f7fc f92f 	bl	8002694 <HAL_GetTick>
 8006436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	88fa      	ldrh	r2, [r7, #6]
 800643c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	88fa      	ldrh	r2, [r7, #6]
 8006444:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006450:	d108      	bne.n	8006464 <HAL_UART_Transmit+0x68>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d104      	bne.n	8006464 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800645a:	2300      	movs	r3, #0
 800645c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	61bb      	str	r3, [r7, #24]
 8006462:	e003      	b.n	800646c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006468:	2300      	movs	r3, #0
 800646a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800646c:	e02c      	b.n	80064c8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	2200      	movs	r2, #0
 8006476:	2180      	movs	r1, #128	; 0x80
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f000 ff4a 	bl	8007312 <UART_WaitOnFlagUntilTimeout>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e038      	b.n	80064fa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10b      	bne.n	80064a6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	461a      	mov	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800649c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	3302      	adds	r3, #2
 80064a2:	61bb      	str	r3, [r7, #24]
 80064a4:	e007      	b.n	80064b6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	781a      	ldrb	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	3301      	adds	r3, #1
 80064b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064bc:	b29b      	uxth	r3, r3
 80064be:	3b01      	subs	r3, #1
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1cc      	bne.n	800646e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	2200      	movs	r2, #0
 80064dc:	2140      	movs	r1, #64	; 0x40
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 ff17 	bl	8007312 <UART_WaitOnFlagUntilTimeout>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e005      	b.n	80064fa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2220      	movs	r2, #32
 80064f2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	e000      	b.n	80064fa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80064f8:	2302      	movs	r3, #2
  }
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3720      	adds	r7, #32
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
	...

08006504 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006504:	b480      	push	{r7}
 8006506:	b08b      	sub	sp, #44	; 0x2c
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	4613      	mov	r3, r2
 8006510:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006516:	2b20      	cmp	r3, #32
 8006518:	d147      	bne.n	80065aa <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <HAL_UART_Transmit_IT+0x22>
 8006520:	88fb      	ldrh	r3, [r7, #6]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e040      	b.n	80065ac <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	88fa      	ldrh	r2, [r7, #6]
 8006534:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	88fa      	ldrh	r2, [r7, #6]
 800653c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2221      	movs	r2, #33	; 0x21
 8006552:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800655c:	d107      	bne.n	800656e <HAL_UART_Transmit_IT+0x6a>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d103      	bne.n	800656e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	4a13      	ldr	r2, [pc, #76]	; (80065b8 <HAL_UART_Transmit_IT+0xb4>)
 800656a:	66da      	str	r2, [r3, #108]	; 0x6c
 800656c:	e002      	b.n	8006574 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4a12      	ldr	r2, [pc, #72]	; (80065bc <HAL_UART_Transmit_IT+0xb8>)
 8006572:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	613b      	str	r3, [r7, #16]
   return(result);
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006588:	627b      	str	r3, [r7, #36]	; 0x24
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006592:	623b      	str	r3, [r7, #32]
 8006594:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006596:	69f9      	ldr	r1, [r7, #28]
 8006598:	6a3a      	ldr	r2, [r7, #32]
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	61bb      	str	r3, [r7, #24]
   return(result);
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e6      	bne.n	8006574 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	e000      	b.n	80065ac <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80065aa:	2302      	movs	r3, #2
  }
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	372c      	adds	r7, #44	; 0x2c
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	080077d7 	.word	0x080077d7
 80065bc:	08007721 	.word	0x08007721

080065c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b08a      	sub	sp, #40	; 0x28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	4613      	mov	r3, r2
 80065cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065d4:	2b20      	cmp	r3, #32
 80065d6:	d132      	bne.n	800663e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d002      	beq.n	80065e4 <HAL_UART_Receive_IT+0x24>
 80065de:	88fb      	ldrh	r3, [r7, #6]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d101      	bne.n	80065e8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e02b      	b.n	8006640 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d018      	beq.n	800662e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	e853 3f00 	ldrex	r3, [r3]
 8006608:	613b      	str	r3, [r7, #16]
   return(result);
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006610:	627b      	str	r3, [r7, #36]	; 0x24
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	461a      	mov	r2, r3
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	623b      	str	r3, [r7, #32]
 800661c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661e:	69f9      	ldr	r1, [r7, #28]
 8006620:	6a3a      	ldr	r2, [r7, #32]
 8006622:	e841 2300 	strex	r3, r2, [r1]
 8006626:	61bb      	str	r3, [r7, #24]
   return(result);
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1e6      	bne.n	80065fc <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800662e:	88fb      	ldrh	r3, [r7, #6]
 8006630:	461a      	mov	r2, r3
 8006632:	68b9      	ldr	r1, [r7, #8]
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f000 ff33 	bl	80074a0 <UART_Start_Receive_IT>
 800663a:	4603      	mov	r3, r0
 800663c:	e000      	b.n	8006640 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800663e:	2302      	movs	r3, #2
  }
}
 8006640:	4618      	mov	r0, r3
 8006642:	3728      	adds	r7, #40	; 0x28
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b0ba      	sub	sp, #232	; 0xe8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800666e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006672:	f640 030f 	movw	r3, #2063	; 0x80f
 8006676:	4013      	ands	r3, r2
 8006678:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800667c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006680:	2b00      	cmp	r3, #0
 8006682:	d115      	bne.n	80066b0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006688:	f003 0320 	and.w	r3, r3, #32
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00f      	beq.n	80066b0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006694:	f003 0320 	and.w	r3, r3, #32
 8006698:	2b00      	cmp	r3, #0
 800669a:	d009      	beq.n	80066b0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 82ac 	beq.w	8006bfe <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	4798      	blx	r3
      }
      return;
 80066ae:	e2a6      	b.n	8006bfe <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80066b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 8117 	beq.w	80068e8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80066ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d106      	bne.n	80066d4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80066c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80066ca:	4b85      	ldr	r3, [pc, #532]	; (80068e0 <HAL_UART_IRQHandler+0x298>)
 80066cc:	4013      	ands	r3, r2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 810a 	beq.w	80068e8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d011      	beq.n	8006704 <HAL_UART_IRQHandler+0xbc>
 80066e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00b      	beq.n	8006704 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2201      	movs	r2, #1
 80066f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066fa:	f043 0201 	orr.w	r2, r3, #1
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d011      	beq.n	8006734 <HAL_UART_IRQHandler+0xec>
 8006710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00b      	beq.n	8006734 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2202      	movs	r2, #2
 8006722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800672a:	f043 0204 	orr.w	r2, r3, #4
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006738:	f003 0304 	and.w	r3, r3, #4
 800673c:	2b00      	cmp	r3, #0
 800673e:	d011      	beq.n	8006764 <HAL_UART_IRQHandler+0x11c>
 8006740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00b      	beq.n	8006764 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2204      	movs	r2, #4
 8006752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800675a:	f043 0202 	orr.w	r2, r3, #2
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006768:	f003 0308 	and.w	r3, r3, #8
 800676c:	2b00      	cmp	r3, #0
 800676e:	d017      	beq.n	80067a0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006774:	f003 0320 	and.w	r3, r3, #32
 8006778:	2b00      	cmp	r3, #0
 800677a:	d105      	bne.n	8006788 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800677c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006780:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00b      	beq.n	80067a0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2208      	movs	r2, #8
 800678e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006796:	f043 0208 	orr.w	r2, r3, #8
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d012      	beq.n	80067d2 <HAL_UART_IRQHandler+0x18a>
 80067ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00c      	beq.n	80067d2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067c8:	f043 0220 	orr.w	r2, r3, #32
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 8212 	beq.w	8006c02 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80067de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e2:	f003 0320 	and.w	r3, r3, #32
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00d      	beq.n	8006806 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ee:	f003 0320 	and.w	r3, r3, #32
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d007      	beq.n	8006806 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800680c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681a:	2b40      	cmp	r3, #64	; 0x40
 800681c:	d005      	beq.n	800682a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800681e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006822:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006826:	2b00      	cmp	r3, #0
 8006828:	d04f      	beq.n	80068ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fefe 	bl	800762c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800683a:	2b40      	cmp	r3, #64	; 0x40
 800683c:	d141      	bne.n	80068c2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3308      	adds	r3, #8
 8006844:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006848:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800684c:	e853 3f00 	ldrex	r3, [r3]
 8006850:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006854:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800685c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3308      	adds	r3, #8
 8006866:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800686a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800686e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006876:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800687a:	e841 2300 	strex	r3, r2, [r1]
 800687e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006882:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1d9      	bne.n	800683e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800688e:	2b00      	cmp	r3, #0
 8006890:	d013      	beq.n	80068ba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006896:	4a13      	ldr	r2, [pc, #76]	; (80068e4 <HAL_UART_IRQHandler+0x29c>)
 8006898:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fc f8a9 	bl	80029f6 <HAL_DMA_Abort_IT>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d017      	beq.n	80068da <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80068b4:	4610      	mov	r0, r2
 80068b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b8:	e00f      	b.n	80068da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f9b6 	bl	8006c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c0:	e00b      	b.n	80068da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f9b2 	bl	8006c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c8:	e007      	b.n	80068da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f9ae 	bl	8006c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80068d8:	e193      	b.n	8006c02 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068da:	bf00      	nop
    return;
 80068dc:	e191      	b.n	8006c02 <HAL_UART_IRQHandler+0x5ba>
 80068de:	bf00      	nop
 80068e0:	04000120 	.word	0x04000120
 80068e4:	080076f5 	.word	0x080076f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	f040 814c 	bne.w	8006b8a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80068f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f6:	f003 0310 	and.w	r3, r3, #16
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 8145 	beq.w	8006b8a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006904:	f003 0310 	and.w	r3, r3, #16
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 813e 	beq.w	8006b8a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2210      	movs	r2, #16
 8006914:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006920:	2b40      	cmp	r3, #64	; 0x40
 8006922:	f040 80b6 	bne.w	8006a92 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006932:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 8165 	beq.w	8006c06 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006942:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006946:	429a      	cmp	r2, r3
 8006948:	f080 815d 	bcs.w	8006c06 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006952:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800695a:	69db      	ldr	r3, [r3, #28]
 800695c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006960:	f000 8086 	beq.w	8006a70 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006970:	e853 3f00 	ldrex	r3, [r3]
 8006974:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006978:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800697c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006980:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	461a      	mov	r2, r3
 800698a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800698e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006992:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006996:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800699a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800699e:	e841 2300 	strex	r3, r2, [r1]
 80069a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80069a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1da      	bne.n	8006964 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3308      	adds	r3, #8
 80069b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069b8:	e853 3f00 	ldrex	r3, [r3]
 80069bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80069be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069c0:	f023 0301 	bic.w	r3, r3, #1
 80069c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3308      	adds	r3, #8
 80069ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80069d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80069d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80069da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80069de:	e841 2300 	strex	r3, r2, [r1]
 80069e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80069e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1e1      	bne.n	80069ae <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3308      	adds	r3, #8
 80069f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069f4:	e853 3f00 	ldrex	r3, [r3]
 80069f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80069fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3308      	adds	r3, #8
 8006a0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a16:	e841 2300 	strex	r3, r2, [r1]
 8006a1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1e3      	bne.n	80069ea <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2220      	movs	r2, #32
 8006a26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a38:	e853 3f00 	ldrex	r3, [r3]
 8006a3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a40:	f023 0310 	bic.w	r3, r3, #16
 8006a44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a52:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a54:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a5a:	e841 2300 	strex	r3, r2, [r1]
 8006a5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1e4      	bne.n	8006a30 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fb ff53 	bl	8002916 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2202      	movs	r2, #2
 8006a74:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f8d8 	bl	8006c40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a90:	e0b9      	b.n	8006c06 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 80ab 	beq.w	8006c0a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006ab4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 80a6 	beq.w	8006c0a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac6:	e853 3f00 	ldrex	r3, [r3]
 8006aca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ace:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ad2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	461a      	mov	r2, r3
 8006adc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8006ae2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ae6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ae8:	e841 2300 	strex	r3, r2, [r1]
 8006aec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e4      	bne.n	8006abe <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3308      	adds	r3, #8
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afe:	e853 3f00 	ldrex	r3, [r3]
 8006b02:	623b      	str	r3, [r7, #32]
   return(result);
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	f023 0301 	bic.w	r3, r3, #1
 8006b0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	3308      	adds	r3, #8
 8006b14:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b18:	633a      	str	r2, [r7, #48]	; 0x30
 8006b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e3      	bne.n	8006af4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	e853 3f00 	ldrex	r3, [r3]
 8006b4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f023 0310 	bic.w	r3, r3, #16
 8006b54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b62:	61fb      	str	r3, [r7, #28]
 8006b64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b66:	69b9      	ldr	r1, [r7, #24]
 8006b68:	69fa      	ldr	r2, [r7, #28]
 8006b6a:	e841 2300 	strex	r3, r2, [r1]
 8006b6e:	617b      	str	r3, [r7, #20]
   return(result);
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1e4      	bne.n	8006b40 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2202      	movs	r2, #2
 8006b7a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b80:	4619      	mov	r1, r3
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f85c 	bl	8006c40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b88:	e03f      	b.n	8006c0a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00e      	beq.n	8006bb4 <HAL_UART_IRQHandler+0x56c>
 8006b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d008      	beq.n	8006bb4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006baa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f853 	bl	8006c58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bb2:	e02d      	b.n	8006c10 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00e      	beq.n	8006bde <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d008      	beq.n	8006bde <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d01c      	beq.n	8006c0e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	4798      	blx	r3
    }
    return;
 8006bdc:	e017      	b.n	8006c0e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d012      	beq.n	8006c10 <HAL_UART_IRQHandler+0x5c8>
 8006bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00c      	beq.n	8006c10 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fe4d 	bl	8007896 <UART_EndTransmit_IT>
    return;
 8006bfc:	e008      	b.n	8006c10 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006bfe:	bf00      	nop
 8006c00:	e006      	b.n	8006c10 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006c02:	bf00      	nop
 8006c04:	e004      	b.n	8006c10 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006c06:	bf00      	nop
 8006c08:	e002      	b.n	8006c10 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006c0a:	bf00      	nop
 8006c0c:	e000      	b.n	8006c10 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006c0e:	bf00      	nop
  }

}
 8006c10:	37e8      	adds	r7, #232	; 0xe8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop

08006c18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c74:	2300      	movs	r3, #0
 8006c76:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689a      	ldr	r2, [r3, #8]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	431a      	orrs	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	431a      	orrs	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	69db      	ldr	r3, [r3, #28]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	4ba6      	ldr	r3, [pc, #664]	; (8006f30 <UART_SetConfig+0x2c4>)
 8006c98:	4013      	ands	r3, r2
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	6812      	ldr	r2, [r2, #0]
 8006c9e:	6979      	ldr	r1, [r7, #20]
 8006ca0:	430b      	orrs	r3, r1
 8006ca2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68da      	ldr	r2, [r3, #12]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	697a      	ldr	r2, [r7, #20]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a94      	ldr	r2, [pc, #592]	; (8006f34 <UART_SetConfig+0x2c8>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d120      	bne.n	8006d2a <UART_SetConfig+0xbe>
 8006ce8:	4b93      	ldr	r3, [pc, #588]	; (8006f38 <UART_SetConfig+0x2cc>)
 8006cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cee:	f003 0303 	and.w	r3, r3, #3
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	d816      	bhi.n	8006d24 <UART_SetConfig+0xb8>
 8006cf6:	a201      	add	r2, pc, #4	; (adr r2, 8006cfc <UART_SetConfig+0x90>)
 8006cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfc:	08006d0d 	.word	0x08006d0d
 8006d00:	08006d19 	.word	0x08006d19
 8006d04:	08006d13 	.word	0x08006d13
 8006d08:	08006d1f 	.word	0x08006d1f
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	77fb      	strb	r3, [r7, #31]
 8006d10:	e150      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006d12:	2302      	movs	r3, #2
 8006d14:	77fb      	strb	r3, [r7, #31]
 8006d16:	e14d      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006d18:	2304      	movs	r3, #4
 8006d1a:	77fb      	strb	r3, [r7, #31]
 8006d1c:	e14a      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006d1e:	2308      	movs	r3, #8
 8006d20:	77fb      	strb	r3, [r7, #31]
 8006d22:	e147      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006d24:	2310      	movs	r3, #16
 8006d26:	77fb      	strb	r3, [r7, #31]
 8006d28:	e144      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a83      	ldr	r2, [pc, #524]	; (8006f3c <UART_SetConfig+0x2d0>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d132      	bne.n	8006d9a <UART_SetConfig+0x12e>
 8006d34:	4b80      	ldr	r3, [pc, #512]	; (8006f38 <UART_SetConfig+0x2cc>)
 8006d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d3a:	f003 030c 	and.w	r3, r3, #12
 8006d3e:	2b0c      	cmp	r3, #12
 8006d40:	d828      	bhi.n	8006d94 <UART_SetConfig+0x128>
 8006d42:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <UART_SetConfig+0xdc>)
 8006d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d48:	08006d7d 	.word	0x08006d7d
 8006d4c:	08006d95 	.word	0x08006d95
 8006d50:	08006d95 	.word	0x08006d95
 8006d54:	08006d95 	.word	0x08006d95
 8006d58:	08006d89 	.word	0x08006d89
 8006d5c:	08006d95 	.word	0x08006d95
 8006d60:	08006d95 	.word	0x08006d95
 8006d64:	08006d95 	.word	0x08006d95
 8006d68:	08006d83 	.word	0x08006d83
 8006d6c:	08006d95 	.word	0x08006d95
 8006d70:	08006d95 	.word	0x08006d95
 8006d74:	08006d95 	.word	0x08006d95
 8006d78:	08006d8f 	.word	0x08006d8f
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	77fb      	strb	r3, [r7, #31]
 8006d80:	e118      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006d82:	2302      	movs	r3, #2
 8006d84:	77fb      	strb	r3, [r7, #31]
 8006d86:	e115      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006d88:	2304      	movs	r3, #4
 8006d8a:	77fb      	strb	r3, [r7, #31]
 8006d8c:	e112      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006d8e:	2308      	movs	r3, #8
 8006d90:	77fb      	strb	r3, [r7, #31]
 8006d92:	e10f      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006d94:	2310      	movs	r3, #16
 8006d96:	77fb      	strb	r3, [r7, #31]
 8006d98:	e10c      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a68      	ldr	r2, [pc, #416]	; (8006f40 <UART_SetConfig+0x2d4>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d120      	bne.n	8006de6 <UART_SetConfig+0x17a>
 8006da4:	4b64      	ldr	r3, [pc, #400]	; (8006f38 <UART_SetConfig+0x2cc>)
 8006da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006daa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006dae:	2b30      	cmp	r3, #48	; 0x30
 8006db0:	d013      	beq.n	8006dda <UART_SetConfig+0x16e>
 8006db2:	2b30      	cmp	r3, #48	; 0x30
 8006db4:	d814      	bhi.n	8006de0 <UART_SetConfig+0x174>
 8006db6:	2b20      	cmp	r3, #32
 8006db8:	d009      	beq.n	8006dce <UART_SetConfig+0x162>
 8006dba:	2b20      	cmp	r3, #32
 8006dbc:	d810      	bhi.n	8006de0 <UART_SetConfig+0x174>
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d002      	beq.n	8006dc8 <UART_SetConfig+0x15c>
 8006dc2:	2b10      	cmp	r3, #16
 8006dc4:	d006      	beq.n	8006dd4 <UART_SetConfig+0x168>
 8006dc6:	e00b      	b.n	8006de0 <UART_SetConfig+0x174>
 8006dc8:	2300      	movs	r3, #0
 8006dca:	77fb      	strb	r3, [r7, #31]
 8006dcc:	e0f2      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006dce:	2302      	movs	r3, #2
 8006dd0:	77fb      	strb	r3, [r7, #31]
 8006dd2:	e0ef      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006dd4:	2304      	movs	r3, #4
 8006dd6:	77fb      	strb	r3, [r7, #31]
 8006dd8:	e0ec      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006dda:	2308      	movs	r3, #8
 8006ddc:	77fb      	strb	r3, [r7, #31]
 8006dde:	e0e9      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006de0:	2310      	movs	r3, #16
 8006de2:	77fb      	strb	r3, [r7, #31]
 8006de4:	e0e6      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a56      	ldr	r2, [pc, #344]	; (8006f44 <UART_SetConfig+0x2d8>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d120      	bne.n	8006e32 <UART_SetConfig+0x1c6>
 8006df0:	4b51      	ldr	r3, [pc, #324]	; (8006f38 <UART_SetConfig+0x2cc>)
 8006df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006dfa:	2bc0      	cmp	r3, #192	; 0xc0
 8006dfc:	d013      	beq.n	8006e26 <UART_SetConfig+0x1ba>
 8006dfe:	2bc0      	cmp	r3, #192	; 0xc0
 8006e00:	d814      	bhi.n	8006e2c <UART_SetConfig+0x1c0>
 8006e02:	2b80      	cmp	r3, #128	; 0x80
 8006e04:	d009      	beq.n	8006e1a <UART_SetConfig+0x1ae>
 8006e06:	2b80      	cmp	r3, #128	; 0x80
 8006e08:	d810      	bhi.n	8006e2c <UART_SetConfig+0x1c0>
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d002      	beq.n	8006e14 <UART_SetConfig+0x1a8>
 8006e0e:	2b40      	cmp	r3, #64	; 0x40
 8006e10:	d006      	beq.n	8006e20 <UART_SetConfig+0x1b4>
 8006e12:	e00b      	b.n	8006e2c <UART_SetConfig+0x1c0>
 8006e14:	2300      	movs	r3, #0
 8006e16:	77fb      	strb	r3, [r7, #31]
 8006e18:	e0cc      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	77fb      	strb	r3, [r7, #31]
 8006e1e:	e0c9      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006e20:	2304      	movs	r3, #4
 8006e22:	77fb      	strb	r3, [r7, #31]
 8006e24:	e0c6      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006e26:	2308      	movs	r3, #8
 8006e28:	77fb      	strb	r3, [r7, #31]
 8006e2a:	e0c3      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006e2c:	2310      	movs	r3, #16
 8006e2e:	77fb      	strb	r3, [r7, #31]
 8006e30:	e0c0      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a44      	ldr	r2, [pc, #272]	; (8006f48 <UART_SetConfig+0x2dc>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d125      	bne.n	8006e88 <UART_SetConfig+0x21c>
 8006e3c:	4b3e      	ldr	r3, [pc, #248]	; (8006f38 <UART_SetConfig+0x2cc>)
 8006e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e4a:	d017      	beq.n	8006e7c <UART_SetConfig+0x210>
 8006e4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e50:	d817      	bhi.n	8006e82 <UART_SetConfig+0x216>
 8006e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e56:	d00b      	beq.n	8006e70 <UART_SetConfig+0x204>
 8006e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e5c:	d811      	bhi.n	8006e82 <UART_SetConfig+0x216>
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <UART_SetConfig+0x1fe>
 8006e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e66:	d006      	beq.n	8006e76 <UART_SetConfig+0x20a>
 8006e68:	e00b      	b.n	8006e82 <UART_SetConfig+0x216>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	77fb      	strb	r3, [r7, #31]
 8006e6e:	e0a1      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006e70:	2302      	movs	r3, #2
 8006e72:	77fb      	strb	r3, [r7, #31]
 8006e74:	e09e      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006e76:	2304      	movs	r3, #4
 8006e78:	77fb      	strb	r3, [r7, #31]
 8006e7a:	e09b      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006e7c:	2308      	movs	r3, #8
 8006e7e:	77fb      	strb	r3, [r7, #31]
 8006e80:	e098      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006e82:	2310      	movs	r3, #16
 8006e84:	77fb      	strb	r3, [r7, #31]
 8006e86:	e095      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a2f      	ldr	r2, [pc, #188]	; (8006f4c <UART_SetConfig+0x2e0>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d125      	bne.n	8006ede <UART_SetConfig+0x272>
 8006e92:	4b29      	ldr	r3, [pc, #164]	; (8006f38 <UART_SetConfig+0x2cc>)
 8006e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ea0:	d017      	beq.n	8006ed2 <UART_SetConfig+0x266>
 8006ea2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ea6:	d817      	bhi.n	8006ed8 <UART_SetConfig+0x26c>
 8006ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eac:	d00b      	beq.n	8006ec6 <UART_SetConfig+0x25a>
 8006eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eb2:	d811      	bhi.n	8006ed8 <UART_SetConfig+0x26c>
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d003      	beq.n	8006ec0 <UART_SetConfig+0x254>
 8006eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ebc:	d006      	beq.n	8006ecc <UART_SetConfig+0x260>
 8006ebe:	e00b      	b.n	8006ed8 <UART_SetConfig+0x26c>
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	77fb      	strb	r3, [r7, #31]
 8006ec4:	e076      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	77fb      	strb	r3, [r7, #31]
 8006eca:	e073      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006ecc:	2304      	movs	r3, #4
 8006ece:	77fb      	strb	r3, [r7, #31]
 8006ed0:	e070      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006ed2:	2308      	movs	r3, #8
 8006ed4:	77fb      	strb	r3, [r7, #31]
 8006ed6:	e06d      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006ed8:	2310      	movs	r3, #16
 8006eda:	77fb      	strb	r3, [r7, #31]
 8006edc:	e06a      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a1b      	ldr	r2, [pc, #108]	; (8006f50 <UART_SetConfig+0x2e4>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d138      	bne.n	8006f5a <UART_SetConfig+0x2ee>
 8006ee8:	4b13      	ldr	r3, [pc, #76]	; (8006f38 <UART_SetConfig+0x2cc>)
 8006eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006ef2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ef6:	d017      	beq.n	8006f28 <UART_SetConfig+0x2bc>
 8006ef8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006efc:	d82a      	bhi.n	8006f54 <UART_SetConfig+0x2e8>
 8006efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f02:	d00b      	beq.n	8006f1c <UART_SetConfig+0x2b0>
 8006f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f08:	d824      	bhi.n	8006f54 <UART_SetConfig+0x2e8>
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d003      	beq.n	8006f16 <UART_SetConfig+0x2aa>
 8006f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f12:	d006      	beq.n	8006f22 <UART_SetConfig+0x2b6>
 8006f14:	e01e      	b.n	8006f54 <UART_SetConfig+0x2e8>
 8006f16:	2300      	movs	r3, #0
 8006f18:	77fb      	strb	r3, [r7, #31]
 8006f1a:	e04b      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	77fb      	strb	r3, [r7, #31]
 8006f20:	e048      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006f22:	2304      	movs	r3, #4
 8006f24:	77fb      	strb	r3, [r7, #31]
 8006f26:	e045      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006f28:	2308      	movs	r3, #8
 8006f2a:	77fb      	strb	r3, [r7, #31]
 8006f2c:	e042      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006f2e:	bf00      	nop
 8006f30:	efff69f3 	.word	0xefff69f3
 8006f34:	40011000 	.word	0x40011000
 8006f38:	40023800 	.word	0x40023800
 8006f3c:	40004400 	.word	0x40004400
 8006f40:	40004800 	.word	0x40004800
 8006f44:	40004c00 	.word	0x40004c00
 8006f48:	40005000 	.word	0x40005000
 8006f4c:	40011400 	.word	0x40011400
 8006f50:	40007800 	.word	0x40007800
 8006f54:	2310      	movs	r3, #16
 8006f56:	77fb      	strb	r3, [r7, #31]
 8006f58:	e02c      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a72      	ldr	r2, [pc, #456]	; (8007128 <UART_SetConfig+0x4bc>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d125      	bne.n	8006fb0 <UART_SetConfig+0x344>
 8006f64:	4b71      	ldr	r3, [pc, #452]	; (800712c <UART_SetConfig+0x4c0>)
 8006f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006f6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f72:	d017      	beq.n	8006fa4 <UART_SetConfig+0x338>
 8006f74:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f78:	d817      	bhi.n	8006faa <UART_SetConfig+0x33e>
 8006f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f7e:	d00b      	beq.n	8006f98 <UART_SetConfig+0x32c>
 8006f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f84:	d811      	bhi.n	8006faa <UART_SetConfig+0x33e>
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d003      	beq.n	8006f92 <UART_SetConfig+0x326>
 8006f8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f8e:	d006      	beq.n	8006f9e <UART_SetConfig+0x332>
 8006f90:	e00b      	b.n	8006faa <UART_SetConfig+0x33e>
 8006f92:	2300      	movs	r3, #0
 8006f94:	77fb      	strb	r3, [r7, #31]
 8006f96:	e00d      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	77fb      	strb	r3, [r7, #31]
 8006f9c:	e00a      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006f9e:	2304      	movs	r3, #4
 8006fa0:	77fb      	strb	r3, [r7, #31]
 8006fa2:	e007      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006fa4:	2308      	movs	r3, #8
 8006fa6:	77fb      	strb	r3, [r7, #31]
 8006fa8:	e004      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006faa:	2310      	movs	r3, #16
 8006fac:	77fb      	strb	r3, [r7, #31]
 8006fae:	e001      	b.n	8006fb4 <UART_SetConfig+0x348>
 8006fb0:	2310      	movs	r3, #16
 8006fb2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	69db      	ldr	r3, [r3, #28]
 8006fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fbc:	d15b      	bne.n	8007076 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006fbe:	7ffb      	ldrb	r3, [r7, #31]
 8006fc0:	2b08      	cmp	r3, #8
 8006fc2:	d828      	bhi.n	8007016 <UART_SetConfig+0x3aa>
 8006fc4:	a201      	add	r2, pc, #4	; (adr r2, 8006fcc <UART_SetConfig+0x360>)
 8006fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fca:	bf00      	nop
 8006fcc:	08006ff1 	.word	0x08006ff1
 8006fd0:	08006ff9 	.word	0x08006ff9
 8006fd4:	08007001 	.word	0x08007001
 8006fd8:	08007017 	.word	0x08007017
 8006fdc:	08007007 	.word	0x08007007
 8006fe0:	08007017 	.word	0x08007017
 8006fe4:	08007017 	.word	0x08007017
 8006fe8:	08007017 	.word	0x08007017
 8006fec:	0800700f 	.word	0x0800700f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ff0:	f7fd fb12 	bl	8004618 <HAL_RCC_GetPCLK1Freq>
 8006ff4:	61b8      	str	r0, [r7, #24]
        break;
 8006ff6:	e013      	b.n	8007020 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ff8:	f7fd fb22 	bl	8004640 <HAL_RCC_GetPCLK2Freq>
 8006ffc:	61b8      	str	r0, [r7, #24]
        break;
 8006ffe:	e00f      	b.n	8007020 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007000:	4b4b      	ldr	r3, [pc, #300]	; (8007130 <UART_SetConfig+0x4c4>)
 8007002:	61bb      	str	r3, [r7, #24]
        break;
 8007004:	e00c      	b.n	8007020 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007006:	f7fd f9f5 	bl	80043f4 <HAL_RCC_GetSysClockFreq>
 800700a:	61b8      	str	r0, [r7, #24]
        break;
 800700c:	e008      	b.n	8007020 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800700e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007012:	61bb      	str	r3, [r7, #24]
        break;
 8007014:	e004      	b.n	8007020 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007016:	2300      	movs	r3, #0
 8007018:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	77bb      	strb	r3, [r7, #30]
        break;
 800701e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d074      	beq.n	8007110 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	005a      	lsls	r2, r3, #1
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	085b      	lsrs	r3, r3, #1
 8007030:	441a      	add	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	fbb2 f3f3 	udiv	r3, r2, r3
 800703a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	2b0f      	cmp	r3, #15
 8007040:	d916      	bls.n	8007070 <UART_SetConfig+0x404>
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007048:	d212      	bcs.n	8007070 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	b29b      	uxth	r3, r3
 800704e:	f023 030f 	bic.w	r3, r3, #15
 8007052:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	085b      	lsrs	r3, r3, #1
 8007058:	b29b      	uxth	r3, r3
 800705a:	f003 0307 	and.w	r3, r3, #7
 800705e:	b29a      	uxth	r2, r3
 8007060:	89fb      	ldrh	r3, [r7, #14]
 8007062:	4313      	orrs	r3, r2
 8007064:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	89fa      	ldrh	r2, [r7, #14]
 800706c:	60da      	str	r2, [r3, #12]
 800706e:	e04f      	b.n	8007110 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	77bb      	strb	r3, [r7, #30]
 8007074:	e04c      	b.n	8007110 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007076:	7ffb      	ldrb	r3, [r7, #31]
 8007078:	2b08      	cmp	r3, #8
 800707a:	d828      	bhi.n	80070ce <UART_SetConfig+0x462>
 800707c:	a201      	add	r2, pc, #4	; (adr r2, 8007084 <UART_SetConfig+0x418>)
 800707e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007082:	bf00      	nop
 8007084:	080070a9 	.word	0x080070a9
 8007088:	080070b1 	.word	0x080070b1
 800708c:	080070b9 	.word	0x080070b9
 8007090:	080070cf 	.word	0x080070cf
 8007094:	080070bf 	.word	0x080070bf
 8007098:	080070cf 	.word	0x080070cf
 800709c:	080070cf 	.word	0x080070cf
 80070a0:	080070cf 	.word	0x080070cf
 80070a4:	080070c7 	.word	0x080070c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070a8:	f7fd fab6 	bl	8004618 <HAL_RCC_GetPCLK1Freq>
 80070ac:	61b8      	str	r0, [r7, #24]
        break;
 80070ae:	e013      	b.n	80070d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070b0:	f7fd fac6 	bl	8004640 <HAL_RCC_GetPCLK2Freq>
 80070b4:	61b8      	str	r0, [r7, #24]
        break;
 80070b6:	e00f      	b.n	80070d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070b8:	4b1d      	ldr	r3, [pc, #116]	; (8007130 <UART_SetConfig+0x4c4>)
 80070ba:	61bb      	str	r3, [r7, #24]
        break;
 80070bc:	e00c      	b.n	80070d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070be:	f7fd f999 	bl	80043f4 <HAL_RCC_GetSysClockFreq>
 80070c2:	61b8      	str	r0, [r7, #24]
        break;
 80070c4:	e008      	b.n	80070d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070ca:	61bb      	str	r3, [r7, #24]
        break;
 80070cc:	e004      	b.n	80070d8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	77bb      	strb	r3, [r7, #30]
        break;
 80070d6:	bf00      	nop
    }

    if (pclk != 0U)
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d018      	beq.n	8007110 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	085a      	lsrs	r2, r3, #1
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	441a      	add	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	2b0f      	cmp	r3, #15
 80070f6:	d909      	bls.n	800710c <UART_SetConfig+0x4a0>
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070fe:	d205      	bcs.n	800710c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	b29a      	uxth	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	60da      	str	r2, [r3, #12]
 800710a:	e001      	b.n	8007110 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800711c:	7fbb      	ldrb	r3, [r7, #30]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3720      	adds	r7, #32
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	40007c00 	.word	0x40007c00
 800712c:	40023800 	.word	0x40023800
 8007130:	00f42400 	.word	0x00f42400

08007134 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00a      	beq.n	800715e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	430a      	orrs	r2, r1
 800715c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00a      	beq.n	8007180 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	430a      	orrs	r2, r1
 800717e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007184:	f003 0304 	and.w	r3, r3, #4
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00a      	beq.n	80071a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	430a      	orrs	r2, r1
 80071a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a6:	f003 0308 	and.w	r3, r3, #8
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	430a      	orrs	r2, r1
 80071c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c8:	f003 0310 	and.w	r3, r3, #16
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00a      	beq.n	80071e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ea:	f003 0320 	and.w	r3, r3, #32
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00a      	beq.n	8007208 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	430a      	orrs	r2, r1
 8007206:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007210:	2b00      	cmp	r3, #0
 8007212:	d01a      	beq.n	800724a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007232:	d10a      	bne.n	800724a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	430a      	orrs	r2, r1
 8007248:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	605a      	str	r2, [r3, #4]
  }
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af02      	add	r7, sp, #8
 800727e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007288:	f7fb fa04 	bl	8002694 <HAL_GetTick>
 800728c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0308 	and.w	r3, r3, #8
 8007298:	2b08      	cmp	r3, #8
 800729a:	d10e      	bne.n	80072ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800729c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f831 	bl	8007312 <UART_WaitOnFlagUntilTimeout>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e027      	b.n	800730a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b04      	cmp	r3, #4
 80072c6:	d10e      	bne.n	80072e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f81b 	bl	8007312 <UART_WaitOnFlagUntilTimeout>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e011      	b.n	800730a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2220      	movs	r2, #32
 80072ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2220      	movs	r2, #32
 80072f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b09c      	sub	sp, #112	; 0x70
 8007316:	af00      	add	r7, sp, #0
 8007318:	60f8      	str	r0, [r7, #12]
 800731a:	60b9      	str	r1, [r7, #8]
 800731c:	603b      	str	r3, [r7, #0]
 800731e:	4613      	mov	r3, r2
 8007320:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007322:	e0a7      	b.n	8007474 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800732a:	f000 80a3 	beq.w	8007474 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800732e:	f7fb f9b1 	bl	8002694 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800733a:	429a      	cmp	r2, r3
 800733c:	d302      	bcc.n	8007344 <UART_WaitOnFlagUntilTimeout+0x32>
 800733e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007340:	2b00      	cmp	r3, #0
 8007342:	d13f      	bne.n	80073c4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800734c:	e853 3f00 	ldrex	r3, [r3]
 8007350:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007354:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007358:	667b      	str	r3, [r7, #100]	; 0x64
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007362:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007364:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007366:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007368:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800736a:	e841 2300 	strex	r3, r2, [r1]
 800736e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1e6      	bne.n	8007344 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3308      	adds	r3, #8
 800737c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007380:	e853 3f00 	ldrex	r3, [r3]
 8007384:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007388:	f023 0301 	bic.w	r3, r3, #1
 800738c:	663b      	str	r3, [r7, #96]	; 0x60
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3308      	adds	r3, #8
 8007394:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007396:	64ba      	str	r2, [r7, #72]	; 0x48
 8007398:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800739c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800739e:	e841 2300 	strex	r3, r2, [r1]
 80073a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80073a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1e5      	bne.n	8007376 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2220      	movs	r2, #32
 80073ae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2220      	movs	r2, #32
 80073b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e068      	b.n	8007496 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0304 	and.w	r3, r3, #4
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d050      	beq.n	8007474 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	69db      	ldr	r3, [r3, #28]
 80073d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073e0:	d148      	bne.n	8007474 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073ea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f4:	e853 3f00 	ldrex	r3, [r3]
 80073f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007400:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800740a:	637b      	str	r3, [r7, #52]	; 0x34
 800740c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007410:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007412:	e841 2300 	strex	r3, r2, [r1]
 8007416:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1e6      	bne.n	80073ec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3308      	adds	r3, #8
 8007424:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	e853 3f00 	ldrex	r3, [r3]
 800742c:	613b      	str	r3, [r7, #16]
   return(result);
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	f023 0301 	bic.w	r3, r3, #1
 8007434:	66bb      	str	r3, [r7, #104]	; 0x68
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3308      	adds	r3, #8
 800743c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800743e:	623a      	str	r2, [r7, #32]
 8007440:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007442:	69f9      	ldr	r1, [r7, #28]
 8007444:	6a3a      	ldr	r2, [r7, #32]
 8007446:	e841 2300 	strex	r3, r2, [r1]
 800744a:	61bb      	str	r3, [r7, #24]
   return(result);
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1e5      	bne.n	800741e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2220      	movs	r2, #32
 8007456:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2220      	movs	r2, #32
 800745c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2220      	movs	r2, #32
 8007464:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e010      	b.n	8007496 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	69da      	ldr	r2, [r3, #28]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	4013      	ands	r3, r2
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	429a      	cmp	r2, r3
 8007482:	bf0c      	ite	eq
 8007484:	2301      	moveq	r3, #1
 8007486:	2300      	movne	r3, #0
 8007488:	b2db      	uxtb	r3, r3
 800748a:	461a      	mov	r2, r3
 800748c:	79fb      	ldrb	r3, [r7, #7]
 800748e:	429a      	cmp	r2, r3
 8007490:	f43f af48 	beq.w	8007324 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3770      	adds	r7, #112	; 0x70
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
	...

080074a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b097      	sub	sp, #92	; 0x5c
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	4613      	mov	r3, r2
 80074ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	88fa      	ldrh	r2, [r7, #6]
 80074b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	88fa      	ldrh	r2, [r7, #6]
 80074c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074d2:	d10e      	bne.n	80074f2 <UART_Start_Receive_IT+0x52>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d105      	bne.n	80074e8 <UART_Start_Receive_IT+0x48>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80074e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074e6:	e02d      	b.n	8007544 <UART_Start_Receive_IT+0xa4>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	22ff      	movs	r2, #255	; 0xff
 80074ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074f0:	e028      	b.n	8007544 <UART_Start_Receive_IT+0xa4>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10d      	bne.n	8007516 <UART_Start_Receive_IT+0x76>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d104      	bne.n	800750c <UART_Start_Receive_IT+0x6c>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	22ff      	movs	r2, #255	; 0xff
 8007506:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800750a:	e01b      	b.n	8007544 <UART_Start_Receive_IT+0xa4>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	227f      	movs	r2, #127	; 0x7f
 8007510:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007514:	e016      	b.n	8007544 <UART_Start_Receive_IT+0xa4>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800751e:	d10d      	bne.n	800753c <UART_Start_Receive_IT+0x9c>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d104      	bne.n	8007532 <UART_Start_Receive_IT+0x92>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	227f      	movs	r2, #127	; 0x7f
 800752c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007530:	e008      	b.n	8007544 <UART_Start_Receive_IT+0xa4>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	223f      	movs	r2, #63	; 0x3f
 8007536:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800753a:	e003      	b.n	8007544 <UART_Start_Receive_IT+0xa4>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2222      	movs	r2, #34	; 0x22
 8007550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	3308      	adds	r3, #8
 800755a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800755e:	e853 3f00 	ldrex	r3, [r3]
 8007562:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007566:	f043 0301 	orr.w	r3, r3, #1
 800756a:	657b      	str	r3, [r7, #84]	; 0x54
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	3308      	adds	r3, #8
 8007572:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007574:	64ba      	str	r2, [r7, #72]	; 0x48
 8007576:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007578:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800757a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800757c:	e841 2300 	strex	r3, r2, [r1]
 8007580:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1e5      	bne.n	8007554 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007590:	d107      	bne.n	80075a2 <UART_Start_Receive_IT+0x102>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d103      	bne.n	80075a2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	4a21      	ldr	r2, [pc, #132]	; (8007624 <UART_Start_Receive_IT+0x184>)
 800759e:	669a      	str	r2, [r3, #104]	; 0x68
 80075a0:	e002      	b.n	80075a8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	4a20      	ldr	r2, [pc, #128]	; (8007628 <UART_Start_Receive_IT+0x188>)
 80075a6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d019      	beq.n	80075e4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b8:	e853 3f00 	ldrex	r3, [r3]
 80075bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80075c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	461a      	mov	r2, r3
 80075cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ce:	637b      	str	r3, [r7, #52]	; 0x34
 80075d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075d6:	e841 2300 	strex	r3, r2, [r1]
 80075da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80075dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1e6      	bne.n	80075b0 <UART_Start_Receive_IT+0x110>
 80075e2:	e018      	b.n	8007616 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	e853 3f00 	ldrex	r3, [r3]
 80075f0:	613b      	str	r3, [r7, #16]
   return(result);
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	f043 0320 	orr.w	r3, r3, #32
 80075f8:	653b      	str	r3, [r7, #80]	; 0x50
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	461a      	mov	r2, r3
 8007600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007602:	623b      	str	r3, [r7, #32]
 8007604:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007606:	69f9      	ldr	r1, [r7, #28]
 8007608:	6a3a      	ldr	r2, [r7, #32]
 800760a:	e841 2300 	strex	r3, r2, [r1]
 800760e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1e6      	bne.n	80075e4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	375c      	adds	r7, #92	; 0x5c
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr
 8007624:	08007a51 	.word	0x08007a51
 8007628:	080078eb 	.word	0x080078eb

0800762c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800762c:	b480      	push	{r7}
 800762e:	b095      	sub	sp, #84	; 0x54
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800763c:	e853 3f00 	ldrex	r3, [r3]
 8007640:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007644:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007648:	64fb      	str	r3, [r7, #76]	; 0x4c
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	461a      	mov	r2, r3
 8007650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007652:	643b      	str	r3, [r7, #64]	; 0x40
 8007654:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007656:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007658:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800765a:	e841 2300 	strex	r3, r2, [r1]
 800765e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1e6      	bne.n	8007634 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3308      	adds	r3, #8
 800766c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	e853 3f00 	ldrex	r3, [r3]
 8007674:	61fb      	str	r3, [r7, #28]
   return(result);
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	f023 0301 	bic.w	r3, r3, #1
 800767c:	64bb      	str	r3, [r7, #72]	; 0x48
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3308      	adds	r3, #8
 8007684:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007686:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007688:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800768c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800768e:	e841 2300 	strex	r3, r2, [r1]
 8007692:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1e5      	bne.n	8007666 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d118      	bne.n	80076d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	e853 3f00 	ldrex	r3, [r3]
 80076ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	f023 0310 	bic.w	r3, r3, #16
 80076b6:	647b      	str	r3, [r7, #68]	; 0x44
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	461a      	mov	r2, r3
 80076be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076c0:	61bb      	str	r3, [r7, #24]
 80076c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c4:	6979      	ldr	r1, [r7, #20]
 80076c6:	69ba      	ldr	r2, [r7, #24]
 80076c8:	e841 2300 	strex	r3, r2, [r1]
 80076cc:	613b      	str	r3, [r7, #16]
   return(result);
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1e6      	bne.n	80076a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2220      	movs	r2, #32
 80076d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80076e8:	bf00      	nop
 80076ea:	3754      	adds	r7, #84	; 0x54
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007700:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f7ff fa8a 	bl	8006c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007718:	bf00      	nop
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007720:	b480      	push	{r7}
 8007722:	b08f      	sub	sp, #60	; 0x3c
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800772c:	2b21      	cmp	r3, #33	; 0x21
 800772e:	d14c      	bne.n	80077ca <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007736:	b29b      	uxth	r3, r3
 8007738:	2b00      	cmp	r3, #0
 800773a:	d132      	bne.n	80077a2 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007742:	6a3b      	ldr	r3, [r7, #32]
 8007744:	e853 3f00 	ldrex	r3, [r3]
 8007748:	61fb      	str	r3, [r7, #28]
   return(result);
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007750:	637b      	str	r3, [r7, #52]	; 0x34
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	461a      	mov	r2, r3
 8007758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800775a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800775c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007762:	e841 2300 	strex	r3, r2, [r1]
 8007766:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1e6      	bne.n	800773c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	e853 3f00 	ldrex	r3, [r3]
 800777a:	60bb      	str	r3, [r7, #8]
   return(result);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007782:	633b      	str	r3, [r7, #48]	; 0x30
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	461a      	mov	r2, r3
 800778a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778c:	61bb      	str	r3, [r7, #24]
 800778e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007790:	6979      	ldr	r1, [r7, #20]
 8007792:	69ba      	ldr	r2, [r7, #24]
 8007794:	e841 2300 	strex	r3, r2, [r1]
 8007798:	613b      	str	r3, [r7, #16]
   return(result);
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1e6      	bne.n	800776e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80077a0:	e013      	b.n	80077ca <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077a6:	781a      	ldrb	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077b2:	1c5a      	adds	r2, r3, #1
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80077be:	b29b      	uxth	r3, r3
 80077c0:	3b01      	subs	r3, #1
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80077ca:	bf00      	nop
 80077cc:	373c      	adds	r7, #60	; 0x3c
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b091      	sub	sp, #68	; 0x44
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077e2:	2b21      	cmp	r3, #33	; 0x21
 80077e4:	d151      	bne.n	800788a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d132      	bne.n	8007858 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	e853 3f00 	ldrex	r3, [r3]
 80077fe:	623b      	str	r3, [r7, #32]
   return(result);
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007806:	63bb      	str	r3, [r7, #56]	; 0x38
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	461a      	mov	r2, r3
 800780e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007810:	633b      	str	r3, [r7, #48]	; 0x30
 8007812:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007814:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007818:	e841 2300 	strex	r3, r2, [r1]
 800781c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800781e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1e6      	bne.n	80077f2 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	e853 3f00 	ldrex	r3, [r3]
 8007830:	60fb      	str	r3, [r7, #12]
   return(result);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007838:	637b      	str	r3, [r7, #52]	; 0x34
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	461a      	mov	r2, r3
 8007840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007842:	61fb      	str	r3, [r7, #28]
 8007844:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007846:	69b9      	ldr	r1, [r7, #24]
 8007848:	69fa      	ldr	r2, [r7, #28]
 800784a:	e841 2300 	strex	r3, r2, [r1]
 800784e:	617b      	str	r3, [r7, #20]
   return(result);
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1e6      	bne.n	8007824 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007856:	e018      	b.n	800788a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800785c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800785e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007860:	881b      	ldrh	r3, [r3, #0]
 8007862:	461a      	mov	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800786c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007872:	1c9a      	adds	r2, r3, #2
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800787e:	b29b      	uxth	r3, r3
 8007880:	3b01      	subs	r3, #1
 8007882:	b29a      	uxth	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800788a:	bf00      	nop
 800788c:	3744      	adds	r7, #68	; 0x44
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b088      	sub	sp, #32
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	e853 3f00 	ldrex	r3, [r3]
 80078aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078b2:	61fb      	str	r3, [r7, #28]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	461a      	mov	r2, r3
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	61bb      	str	r3, [r7, #24]
 80078be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c0:	6979      	ldr	r1, [r7, #20]
 80078c2:	69ba      	ldr	r2, [r7, #24]
 80078c4:	e841 2300 	strex	r3, r2, [r1]
 80078c8:	613b      	str	r3, [r7, #16]
   return(result);
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1e6      	bne.n	800789e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2220      	movs	r2, #32
 80078d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7ff f99b 	bl	8006c18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078e2:	bf00      	nop
 80078e4:	3720      	adds	r7, #32
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b096      	sub	sp, #88	; 0x58
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007902:	2b22      	cmp	r3, #34	; 0x22
 8007904:	f040 8098 	bne.w	8007a38 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007912:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007916:	b2d9      	uxtb	r1, r3
 8007918:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800791c:	b2da      	uxtb	r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007922:	400a      	ands	r2, r1
 8007924:	b2d2      	uxtb	r2, r2
 8007926:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800792c:	1c5a      	adds	r2, r3, #1
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007938:	b29b      	uxth	r3, r3
 800793a:	3b01      	subs	r3, #1
 800793c:	b29a      	uxth	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800794a:	b29b      	uxth	r3, r3
 800794c:	2b00      	cmp	r3, #0
 800794e:	d17b      	bne.n	8007a48 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007958:	e853 3f00 	ldrex	r3, [r3]
 800795c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800795e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007960:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007964:	653b      	str	r3, [r7, #80]	; 0x50
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	461a      	mov	r2, r3
 800796c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800796e:	647b      	str	r3, [r7, #68]	; 0x44
 8007970:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007972:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007974:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007976:	e841 2300 	strex	r3, r2, [r1]
 800797a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800797c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1e6      	bne.n	8007950 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	3308      	adds	r3, #8
 8007988:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798c:	e853 3f00 	ldrex	r3, [r3]
 8007990:	623b      	str	r3, [r7, #32]
   return(result);
 8007992:	6a3b      	ldr	r3, [r7, #32]
 8007994:	f023 0301 	bic.w	r3, r3, #1
 8007998:	64fb      	str	r3, [r7, #76]	; 0x4c
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	3308      	adds	r3, #8
 80079a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079a2:	633a      	str	r2, [r7, #48]	; 0x30
 80079a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079aa:	e841 2300 	strex	r3, r2, [r1]
 80079ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1e5      	bne.n	8007982 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2220      	movs	r2, #32
 80079ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d12e      	bne.n	8007a30 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	e853 3f00 	ldrex	r3, [r3]
 80079e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f023 0310 	bic.w	r3, r3, #16
 80079ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	461a      	mov	r2, r3
 80079f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079f6:	61fb      	str	r3, [r7, #28]
 80079f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fa:	69b9      	ldr	r1, [r7, #24]
 80079fc:	69fa      	ldr	r2, [r7, #28]
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	617b      	str	r3, [r7, #20]
   return(result);
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1e6      	bne.n	80079d8 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	69db      	ldr	r3, [r3, #28]
 8007a10:	f003 0310 	and.w	r3, r3, #16
 8007a14:	2b10      	cmp	r3, #16
 8007a16:	d103      	bne.n	8007a20 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2210      	movs	r2, #16
 8007a1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a26:	4619      	mov	r1, r3
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7ff f909 	bl	8006c40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a2e:	e00b      	b.n	8007a48 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7f9 f875 	bl	8000b20 <HAL_UART_RxCpltCallback>
}
 8007a36:	e007      	b.n	8007a48 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	699a      	ldr	r2, [r3, #24]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f042 0208 	orr.w	r2, r2, #8
 8007a46:	619a      	str	r2, [r3, #24]
}
 8007a48:	bf00      	nop
 8007a4a:	3758      	adds	r7, #88	; 0x58
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b096      	sub	sp, #88	; 0x58
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a5e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a68:	2b22      	cmp	r3, #34	; 0x22
 8007a6a:	f040 8098 	bne.w	8007b9e <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a74:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a7c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a7e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007a82:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007a86:	4013      	ands	r3, r2
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a8c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a92:	1c9a      	adds	r2, r3, #2
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d17b      	bne.n	8007bae <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007abe:	e853 3f00 	ldrex	r3, [r3]
 8007ac2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ad4:	643b      	str	r3, [r7, #64]	; 0x40
 8007ad6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ada:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007adc:	e841 2300 	strex	r3, r2, [r1]
 8007ae0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1e6      	bne.n	8007ab6 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3308      	adds	r3, #8
 8007aee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af0:	6a3b      	ldr	r3, [r7, #32]
 8007af2:	e853 3f00 	ldrex	r3, [r3]
 8007af6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	f023 0301 	bic.w	r3, r3, #1
 8007afe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3308      	adds	r3, #8
 8007b06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b10:	e841 2300 	strex	r3, r2, [r1]
 8007b14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1e5      	bne.n	8007ae8 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2220      	movs	r2, #32
 8007b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d12e      	bne.n	8007b96 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	e853 3f00 	ldrex	r3, [r3]
 8007b4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	f023 0310 	bic.w	r3, r3, #16
 8007b52:	647b      	str	r3, [r7, #68]	; 0x44
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b5c:	61bb      	str	r3, [r7, #24]
 8007b5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b60:	6979      	ldr	r1, [r7, #20]
 8007b62:	69ba      	ldr	r2, [r7, #24]
 8007b64:	e841 2300 	strex	r3, r2, [r1]
 8007b68:	613b      	str	r3, [r7, #16]
   return(result);
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1e6      	bne.n	8007b3e <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	f003 0310 	and.w	r3, r3, #16
 8007b7a:	2b10      	cmp	r3, #16
 8007b7c:	d103      	bne.n	8007b86 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2210      	movs	r2, #16
 8007b84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7ff f856 	bl	8006c40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b94:	e00b      	b.n	8007bae <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f7f8 ffc2 	bl	8000b20 <HAL_UART_RxCpltCallback>
}
 8007b9c:	e007      	b.n	8007bae <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	699a      	ldr	r2, [r3, #24]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f042 0208 	orr.w	r2, r2, #8
 8007bac:	619a      	str	r2, [r3, #24]
}
 8007bae:	bf00      	nop
 8007bb0:	3758      	adds	r7, #88	; 0x58
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
	...

08007bb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bb8:	b084      	sub	sp, #16
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b084      	sub	sp, #16
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	f107 001c 	add.w	r0, r7, #28
 8007bc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d120      	bne.n	8007c12 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68da      	ldr	r2, [r3, #12]
 8007be0:	4b20      	ldr	r3, [pc, #128]	; (8007c64 <USB_CoreInit+0xac>)
 8007be2:	4013      	ands	r3, r2
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d105      	bne.n	8007c06 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fa96 	bl	8008138 <USB_CoreReset>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	73fb      	strb	r3, [r7, #15]
 8007c10:	e010      	b.n	8007c34 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fa8a 	bl	8008138 <USB_CoreReset>
 8007c24:	4603      	mov	r3, r0
 8007c26:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d10b      	bne.n	8007c52 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f043 0206 	orr.w	r2, r3, #6
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f043 0220 	orr.w	r2, r3, #32
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c5e:	b004      	add	sp, #16
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	ffbdffbf 	.word	0xffbdffbf

08007c68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f023 0201 	bic.w	r2, r3, #1
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	370c      	adds	r7, #12
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b084      	sub	sp, #16
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	460b      	mov	r3, r1
 8007c94:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007c96:	2300      	movs	r3, #0
 8007c98:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ca6:	78fb      	ldrb	r3, [r7, #3]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d115      	bne.n	8007cd8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007cb8:	2001      	movs	r0, #1
 8007cba:	f7fa fcf7 	bl	80026ac <HAL_Delay>
      ms++;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fa29 	bl	800811c <USB_GetMode>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d01e      	beq.n	8007d0e <USB_SetCurrentMode+0x84>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2b31      	cmp	r3, #49	; 0x31
 8007cd4:	d9f0      	bls.n	8007cb8 <USB_SetCurrentMode+0x2e>
 8007cd6:	e01a      	b.n	8007d0e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007cd8:	78fb      	ldrb	r3, [r7, #3]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d115      	bne.n	8007d0a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007cea:	2001      	movs	r0, #1
 8007cec:	f7fa fcde 	bl	80026ac <HAL_Delay>
      ms++;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fa10 	bl	800811c <USB_GetMode>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d005      	beq.n	8007d0e <USB_SetCurrentMode+0x84>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2b31      	cmp	r3, #49	; 0x31
 8007d06:	d9f0      	bls.n	8007cea <USB_SetCurrentMode+0x60>
 8007d08:	e001      	b.n	8007d0e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e005      	b.n	8007d1a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2b32      	cmp	r3, #50	; 0x32
 8007d12:	d101      	bne.n	8007d18 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e000      	b.n	8007d1a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
	...

08007d24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d24:	b084      	sub	sp, #16
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b086      	sub	sp, #24
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007d3e:	2300      	movs	r3, #0
 8007d40:	613b      	str	r3, [r7, #16]
 8007d42:	e009      	b.n	8007d58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	3340      	adds	r3, #64	; 0x40
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	2200      	movs	r2, #0
 8007d50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	3301      	adds	r3, #1
 8007d56:	613b      	str	r3, [r7, #16]
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	2b0e      	cmp	r3, #14
 8007d5c:	d9f2      	bls.n	8007d44 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d11c      	bne.n	8007d9e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d72:	f043 0302 	orr.w	r3, r3, #2
 8007d76:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	601a      	str	r2, [r3, #0]
 8007d9c:	e005      	b.n	8007daa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007db0:	461a      	mov	r2, r3
 8007db2:	2300      	movs	r3, #0
 8007db4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	680b      	ldr	r3, [r1, #0]
 8007dc8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d10c      	bne.n	8007dea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d104      	bne.n	8007de0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f965 	bl	80080a8 <USB_SetDevSpeed>
 8007dde:	e008      	b.n	8007df2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007de0:	2101      	movs	r1, #1
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f960 	bl	80080a8 <USB_SetDevSpeed>
 8007de8:	e003      	b.n	8007df2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007dea:	2103      	movs	r1, #3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f95b 	bl	80080a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007df2:	2110      	movs	r1, #16
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f8f3 	bl	8007fe0 <USB_FlushTxFifo>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d001      	beq.n	8007e04 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f91f 	bl	8008048 <USB_FlushRxFifo>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d001      	beq.n	8007e14 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e26:	461a      	mov	r2, r3
 8007e28:	2300      	movs	r3, #0
 8007e2a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e32:	461a      	mov	r2, r3
 8007e34:	2300      	movs	r3, #0
 8007e36:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e38:	2300      	movs	r3, #0
 8007e3a:	613b      	str	r3, [r7, #16]
 8007e3c:	e043      	b.n	8007ec6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	015a      	lsls	r2, r3, #5
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	4413      	add	r3, r2
 8007e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e54:	d118      	bne.n	8007e88 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d10a      	bne.n	8007e72 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	015a      	lsls	r2, r3, #5
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	4413      	add	r3, r2
 8007e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e68:	461a      	mov	r2, r3
 8007e6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e6e:	6013      	str	r3, [r2, #0]
 8007e70:	e013      	b.n	8007e9a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	015a      	lsls	r2, r3, #5
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	4413      	add	r3, r2
 8007e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e7e:	461a      	mov	r2, r3
 8007e80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007e84:	6013      	str	r3, [r2, #0]
 8007e86:	e008      	b.n	8007e9a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	015a      	lsls	r2, r3, #5
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	4413      	add	r3, r2
 8007e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e94:	461a      	mov	r2, r3
 8007e96:	2300      	movs	r3, #0
 8007e98:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	015a      	lsls	r2, r3, #5
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	015a      	lsls	r2, r3, #5
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb8:	461a      	mov	r2, r3
 8007eba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ebe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	613b      	str	r3, [r7, #16]
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec8:	693a      	ldr	r2, [r7, #16]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d3b7      	bcc.n	8007e3e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ece:	2300      	movs	r3, #0
 8007ed0:	613b      	str	r3, [r7, #16]
 8007ed2:	e043      	b.n	8007f5c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	015a      	lsls	r2, r3, #5
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	4413      	add	r3, r2
 8007edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ee6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007eea:	d118      	bne.n	8007f1e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10a      	bne.n	8007f08 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	015a      	lsls	r2, r3, #5
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	4413      	add	r3, r2
 8007efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007efe:	461a      	mov	r2, r3
 8007f00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f04:	6013      	str	r3, [r2, #0]
 8007f06:	e013      	b.n	8007f30 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	015a      	lsls	r2, r3, #5
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	4413      	add	r3, r2
 8007f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f14:	461a      	mov	r2, r3
 8007f16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f1a:	6013      	str	r3, [r2, #0]
 8007f1c:	e008      	b.n	8007f30 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	015a      	lsls	r2, r3, #5
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	2300      	movs	r3, #0
 8007f40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	015a      	lsls	r2, r3, #5
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	4413      	add	r3, r2
 8007f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f4e:	461a      	mov	r2, r3
 8007f50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	613b      	str	r3, [r7, #16]
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d3b7      	bcc.n	8007ed4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f76:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007f84:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d105      	bne.n	8007f98 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	f043 0210 	orr.w	r2, r3, #16
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	699a      	ldr	r2, [r3, #24]
 8007f9c:	4b0e      	ldr	r3, [pc, #56]	; (8007fd8 <USB_DevInit+0x2b4>)
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d005      	beq.n	8007fb6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	f043 0208 	orr.w	r2, r3, #8
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d105      	bne.n	8007fc8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	699a      	ldr	r2, [r3, #24]
 8007fc0:	4b06      	ldr	r3, [pc, #24]	; (8007fdc <USB_DevInit+0x2b8>)
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3718      	adds	r7, #24
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fd4:	b004      	add	sp, #16
 8007fd6:	4770      	bx	lr
 8007fd8:	803c3800 	.word	0x803c3800
 8007fdc:	40000004 	.word	0x40000004

08007fe0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007fea:	2300      	movs	r3, #0
 8007fec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	4a13      	ldr	r2, [pc, #76]	; (8008044 <USB_FlushTxFifo+0x64>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d901      	bls.n	8008000 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e01b      	b.n	8008038 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	2b00      	cmp	r3, #0
 8008006:	daf2      	bge.n	8007fee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008008:	2300      	movs	r3, #0
 800800a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	019b      	lsls	r3, r3, #6
 8008010:	f043 0220 	orr.w	r2, r3, #32
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	3301      	adds	r3, #1
 800801c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	4a08      	ldr	r2, [pc, #32]	; (8008044 <USB_FlushTxFifo+0x64>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d901      	bls.n	800802a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008026:	2303      	movs	r3, #3
 8008028:	e006      	b.n	8008038 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	f003 0320 	and.w	r3, r3, #32
 8008032:	2b20      	cmp	r3, #32
 8008034:	d0f0      	beq.n	8008018 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3714      	adds	r7, #20
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr
 8008044:	00030d40 	.word	0x00030d40

08008048 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008050:	2300      	movs	r3, #0
 8008052:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	3301      	adds	r3, #1
 8008058:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	4a11      	ldr	r2, [pc, #68]	; (80080a4 <USB_FlushRxFifo+0x5c>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d901      	bls.n	8008066 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e018      	b.n	8008098 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	2b00      	cmp	r3, #0
 800806c:	daf2      	bge.n	8008054 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800806e:	2300      	movs	r3, #0
 8008070:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2210      	movs	r2, #16
 8008076:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	3301      	adds	r3, #1
 800807c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	4a08      	ldr	r2, [pc, #32]	; (80080a4 <USB_FlushRxFifo+0x5c>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d901      	bls.n	800808a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e006      	b.n	8008098 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	f003 0310 	and.w	r3, r3, #16
 8008092:	2b10      	cmp	r3, #16
 8008094:	d0f0      	beq.n	8008078 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3714      	adds	r7, #20
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	00030d40 	.word	0x00030d40

080080a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	460b      	mov	r3, r1
 80080b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	78fb      	ldrb	r3, [r7, #3]
 80080c2:	68f9      	ldr	r1, [r7, #12]
 80080c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080c8:	4313      	orrs	r3, r2
 80080ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3714      	adds	r7, #20
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80080da:	b480      	push	{r7}
 80080dc:	b085      	sub	sp, #20
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80080f4:	f023 0303 	bic.w	r3, r3, #3
 80080f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008108:	f043 0302 	orr.w	r3, r3, #2
 800810c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3714      	adds	r7, #20
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	695b      	ldr	r3, [r3, #20]
 8008128:	f003 0301 	and.w	r3, r3, #1
}
 800812c:	4618      	mov	r0, r3
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008140:	2300      	movs	r3, #0
 8008142:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	3301      	adds	r3, #1
 8008148:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	4a13      	ldr	r2, [pc, #76]	; (800819c <USB_CoreReset+0x64>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d901      	bls.n	8008156 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e01b      	b.n	800818e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	2b00      	cmp	r3, #0
 800815c:	daf2      	bge.n	8008144 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800815e:	2300      	movs	r3, #0
 8008160:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	f043 0201 	orr.w	r2, r3, #1
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	3301      	adds	r3, #1
 8008172:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	4a09      	ldr	r2, [pc, #36]	; (800819c <USB_CoreReset+0x64>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d901      	bls.n	8008180 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800817c:	2303      	movs	r3, #3
 800817e:	e006      	b.n	800818e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	f003 0301 	and.w	r3, r3, #1
 8008188:	2b01      	cmp	r3, #1
 800818a:	d0f0      	beq.n	800816e <USB_CoreReset+0x36>

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	00030d40 	.word	0x00030d40

080081a0 <atoi>:
 80081a0:	220a      	movs	r2, #10
 80081a2:	2100      	movs	r1, #0
 80081a4:	f000 bd60 	b.w	8008c68 <strtol>

080081a8 <__errno>:
 80081a8:	4b01      	ldr	r3, [pc, #4]	; (80081b0 <__errno+0x8>)
 80081aa:	6818      	ldr	r0, [r3, #0]
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	200004c8 	.word	0x200004c8

080081b4 <__libc_init_array>:
 80081b4:	b570      	push	{r4, r5, r6, lr}
 80081b6:	4d0d      	ldr	r5, [pc, #52]	; (80081ec <__libc_init_array+0x38>)
 80081b8:	4c0d      	ldr	r4, [pc, #52]	; (80081f0 <__libc_init_array+0x3c>)
 80081ba:	1b64      	subs	r4, r4, r5
 80081bc:	10a4      	asrs	r4, r4, #2
 80081be:	2600      	movs	r6, #0
 80081c0:	42a6      	cmp	r6, r4
 80081c2:	d109      	bne.n	80081d8 <__libc_init_array+0x24>
 80081c4:	4d0b      	ldr	r5, [pc, #44]	; (80081f4 <__libc_init_array+0x40>)
 80081c6:	4c0c      	ldr	r4, [pc, #48]	; (80081f8 <__libc_init_array+0x44>)
 80081c8:	f002 ff32 	bl	800b030 <_init>
 80081cc:	1b64      	subs	r4, r4, r5
 80081ce:	10a4      	asrs	r4, r4, #2
 80081d0:	2600      	movs	r6, #0
 80081d2:	42a6      	cmp	r6, r4
 80081d4:	d105      	bne.n	80081e2 <__libc_init_array+0x2e>
 80081d6:	bd70      	pop	{r4, r5, r6, pc}
 80081d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081dc:	4798      	blx	r3
 80081de:	3601      	adds	r6, #1
 80081e0:	e7ee      	b.n	80081c0 <__libc_init_array+0xc>
 80081e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081e6:	4798      	blx	r3
 80081e8:	3601      	adds	r6, #1
 80081ea:	e7f2      	b.n	80081d2 <__libc_init_array+0x1e>
 80081ec:	0800b5a4 	.word	0x0800b5a4
 80081f0:	0800b5a4 	.word	0x0800b5a4
 80081f4:	0800b5a4 	.word	0x0800b5a4
 80081f8:	0800b5a8 	.word	0x0800b5a8

080081fc <memset>:
 80081fc:	4402      	add	r2, r0
 80081fe:	4603      	mov	r3, r0
 8008200:	4293      	cmp	r3, r2
 8008202:	d100      	bne.n	8008206 <memset+0xa>
 8008204:	4770      	bx	lr
 8008206:	f803 1b01 	strb.w	r1, [r3], #1
 800820a:	e7f9      	b.n	8008200 <memset+0x4>

0800820c <__cvt>:
 800820c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800820e:	ed2d 8b02 	vpush	{d8}
 8008212:	eeb0 8b40 	vmov.f64	d8, d0
 8008216:	b085      	sub	sp, #20
 8008218:	4617      	mov	r7, r2
 800821a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800821c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800821e:	ee18 2a90 	vmov	r2, s17
 8008222:	f025 0520 	bic.w	r5, r5, #32
 8008226:	2a00      	cmp	r2, #0
 8008228:	bfb6      	itet	lt
 800822a:	222d      	movlt	r2, #45	; 0x2d
 800822c:	2200      	movge	r2, #0
 800822e:	eeb1 8b40 	vneglt.f64	d8, d0
 8008232:	2d46      	cmp	r5, #70	; 0x46
 8008234:	460c      	mov	r4, r1
 8008236:	701a      	strb	r2, [r3, #0]
 8008238:	d004      	beq.n	8008244 <__cvt+0x38>
 800823a:	2d45      	cmp	r5, #69	; 0x45
 800823c:	d100      	bne.n	8008240 <__cvt+0x34>
 800823e:	3401      	adds	r4, #1
 8008240:	2102      	movs	r1, #2
 8008242:	e000      	b.n	8008246 <__cvt+0x3a>
 8008244:	2103      	movs	r1, #3
 8008246:	ab03      	add	r3, sp, #12
 8008248:	9301      	str	r3, [sp, #4]
 800824a:	ab02      	add	r3, sp, #8
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	4622      	mov	r2, r4
 8008250:	4633      	mov	r3, r6
 8008252:	eeb0 0b48 	vmov.f64	d0, d8
 8008256:	f000 fd9f 	bl	8008d98 <_dtoa_r>
 800825a:	2d47      	cmp	r5, #71	; 0x47
 800825c:	d101      	bne.n	8008262 <__cvt+0x56>
 800825e:	07fb      	lsls	r3, r7, #31
 8008260:	d51a      	bpl.n	8008298 <__cvt+0x8c>
 8008262:	2d46      	cmp	r5, #70	; 0x46
 8008264:	eb00 0204 	add.w	r2, r0, r4
 8008268:	d10c      	bne.n	8008284 <__cvt+0x78>
 800826a:	7803      	ldrb	r3, [r0, #0]
 800826c:	2b30      	cmp	r3, #48	; 0x30
 800826e:	d107      	bne.n	8008280 <__cvt+0x74>
 8008270:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008278:	bf1c      	itt	ne
 800827a:	f1c4 0401 	rsbne	r4, r4, #1
 800827e:	6034      	strne	r4, [r6, #0]
 8008280:	6833      	ldr	r3, [r6, #0]
 8008282:	441a      	add	r2, r3
 8008284:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800828c:	bf08      	it	eq
 800828e:	9203      	streq	r2, [sp, #12]
 8008290:	2130      	movs	r1, #48	; 0x30
 8008292:	9b03      	ldr	r3, [sp, #12]
 8008294:	4293      	cmp	r3, r2
 8008296:	d307      	bcc.n	80082a8 <__cvt+0x9c>
 8008298:	9b03      	ldr	r3, [sp, #12]
 800829a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800829c:	1a1b      	subs	r3, r3, r0
 800829e:	6013      	str	r3, [r2, #0]
 80082a0:	b005      	add	sp, #20
 80082a2:	ecbd 8b02 	vpop	{d8}
 80082a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082a8:	1c5c      	adds	r4, r3, #1
 80082aa:	9403      	str	r4, [sp, #12]
 80082ac:	7019      	strb	r1, [r3, #0]
 80082ae:	e7f0      	b.n	8008292 <__cvt+0x86>

080082b0 <__exponent>:
 80082b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082b2:	4603      	mov	r3, r0
 80082b4:	2900      	cmp	r1, #0
 80082b6:	bfb8      	it	lt
 80082b8:	4249      	neglt	r1, r1
 80082ba:	f803 2b02 	strb.w	r2, [r3], #2
 80082be:	bfb4      	ite	lt
 80082c0:	222d      	movlt	r2, #45	; 0x2d
 80082c2:	222b      	movge	r2, #43	; 0x2b
 80082c4:	2909      	cmp	r1, #9
 80082c6:	7042      	strb	r2, [r0, #1]
 80082c8:	dd2a      	ble.n	8008320 <__exponent+0x70>
 80082ca:	f10d 0407 	add.w	r4, sp, #7
 80082ce:	46a4      	mov	ip, r4
 80082d0:	270a      	movs	r7, #10
 80082d2:	46a6      	mov	lr, r4
 80082d4:	460a      	mov	r2, r1
 80082d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80082da:	fb07 1516 	mls	r5, r7, r6, r1
 80082de:	3530      	adds	r5, #48	; 0x30
 80082e0:	2a63      	cmp	r2, #99	; 0x63
 80082e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80082e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80082ea:	4631      	mov	r1, r6
 80082ec:	dcf1      	bgt.n	80082d2 <__exponent+0x22>
 80082ee:	3130      	adds	r1, #48	; 0x30
 80082f0:	f1ae 0502 	sub.w	r5, lr, #2
 80082f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80082f8:	1c44      	adds	r4, r0, #1
 80082fa:	4629      	mov	r1, r5
 80082fc:	4561      	cmp	r1, ip
 80082fe:	d30a      	bcc.n	8008316 <__exponent+0x66>
 8008300:	f10d 0209 	add.w	r2, sp, #9
 8008304:	eba2 020e 	sub.w	r2, r2, lr
 8008308:	4565      	cmp	r5, ip
 800830a:	bf88      	it	hi
 800830c:	2200      	movhi	r2, #0
 800830e:	4413      	add	r3, r2
 8008310:	1a18      	subs	r0, r3, r0
 8008312:	b003      	add	sp, #12
 8008314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008316:	f811 2b01 	ldrb.w	r2, [r1], #1
 800831a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800831e:	e7ed      	b.n	80082fc <__exponent+0x4c>
 8008320:	2330      	movs	r3, #48	; 0x30
 8008322:	3130      	adds	r1, #48	; 0x30
 8008324:	7083      	strb	r3, [r0, #2]
 8008326:	70c1      	strb	r1, [r0, #3]
 8008328:	1d03      	adds	r3, r0, #4
 800832a:	e7f1      	b.n	8008310 <__exponent+0x60>
 800832c:	0000      	movs	r0, r0
	...

08008330 <_printf_float>:
 8008330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008334:	b08b      	sub	sp, #44	; 0x2c
 8008336:	460c      	mov	r4, r1
 8008338:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800833c:	4616      	mov	r6, r2
 800833e:	461f      	mov	r7, r3
 8008340:	4605      	mov	r5, r0
 8008342:	f001 fa97 	bl	8009874 <_localeconv_r>
 8008346:	f8d0 b000 	ldr.w	fp, [r0]
 800834a:	4658      	mov	r0, fp
 800834c:	f7f7 ff78 	bl	8000240 <strlen>
 8008350:	2300      	movs	r3, #0
 8008352:	9308      	str	r3, [sp, #32]
 8008354:	f8d8 3000 	ldr.w	r3, [r8]
 8008358:	f894 9018 	ldrb.w	r9, [r4, #24]
 800835c:	6822      	ldr	r2, [r4, #0]
 800835e:	3307      	adds	r3, #7
 8008360:	f023 0307 	bic.w	r3, r3, #7
 8008364:	f103 0108 	add.w	r1, r3, #8
 8008368:	f8c8 1000 	str.w	r1, [r8]
 800836c:	4682      	mov	sl, r0
 800836e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008372:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8008376:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80085d8 <_printf_float+0x2a8>
 800837a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800837e:	eeb0 6bc0 	vabs.f64	d6, d0
 8008382:	eeb4 6b47 	vcmp.f64	d6, d7
 8008386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800838a:	dd24      	ble.n	80083d6 <_printf_float+0xa6>
 800838c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008394:	d502      	bpl.n	800839c <_printf_float+0x6c>
 8008396:	232d      	movs	r3, #45	; 0x2d
 8008398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800839c:	4b90      	ldr	r3, [pc, #576]	; (80085e0 <_printf_float+0x2b0>)
 800839e:	4891      	ldr	r0, [pc, #580]	; (80085e4 <_printf_float+0x2b4>)
 80083a0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80083a4:	bf94      	ite	ls
 80083a6:	4698      	movls	r8, r3
 80083a8:	4680      	movhi	r8, r0
 80083aa:	2303      	movs	r3, #3
 80083ac:	6123      	str	r3, [r4, #16]
 80083ae:	f022 0204 	bic.w	r2, r2, #4
 80083b2:	2300      	movs	r3, #0
 80083b4:	6022      	str	r2, [r4, #0]
 80083b6:	9304      	str	r3, [sp, #16]
 80083b8:	9700      	str	r7, [sp, #0]
 80083ba:	4633      	mov	r3, r6
 80083bc:	aa09      	add	r2, sp, #36	; 0x24
 80083be:	4621      	mov	r1, r4
 80083c0:	4628      	mov	r0, r5
 80083c2:	f000 f9d3 	bl	800876c <_printf_common>
 80083c6:	3001      	adds	r0, #1
 80083c8:	f040 808a 	bne.w	80084e0 <_printf_float+0x1b0>
 80083cc:	f04f 30ff 	mov.w	r0, #4294967295
 80083d0:	b00b      	add	sp, #44	; 0x2c
 80083d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d6:	eeb4 0b40 	vcmp.f64	d0, d0
 80083da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083de:	d709      	bvc.n	80083f4 <_printf_float+0xc4>
 80083e0:	ee10 3a90 	vmov	r3, s1
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	bfbc      	itt	lt
 80083e8:	232d      	movlt	r3, #45	; 0x2d
 80083ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80083ee:	487e      	ldr	r0, [pc, #504]	; (80085e8 <_printf_float+0x2b8>)
 80083f0:	4b7e      	ldr	r3, [pc, #504]	; (80085ec <_printf_float+0x2bc>)
 80083f2:	e7d5      	b.n	80083a0 <_printf_float+0x70>
 80083f4:	6863      	ldr	r3, [r4, #4]
 80083f6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80083fa:	9104      	str	r1, [sp, #16]
 80083fc:	1c59      	adds	r1, r3, #1
 80083fe:	d13c      	bne.n	800847a <_printf_float+0x14a>
 8008400:	2306      	movs	r3, #6
 8008402:	6063      	str	r3, [r4, #4]
 8008404:	2300      	movs	r3, #0
 8008406:	9303      	str	r3, [sp, #12]
 8008408:	ab08      	add	r3, sp, #32
 800840a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800840e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008412:	ab07      	add	r3, sp, #28
 8008414:	6861      	ldr	r1, [r4, #4]
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	6022      	str	r2, [r4, #0]
 800841a:	f10d 031b 	add.w	r3, sp, #27
 800841e:	4628      	mov	r0, r5
 8008420:	f7ff fef4 	bl	800820c <__cvt>
 8008424:	9b04      	ldr	r3, [sp, #16]
 8008426:	9907      	ldr	r1, [sp, #28]
 8008428:	2b47      	cmp	r3, #71	; 0x47
 800842a:	4680      	mov	r8, r0
 800842c:	d108      	bne.n	8008440 <_printf_float+0x110>
 800842e:	1cc8      	adds	r0, r1, #3
 8008430:	db02      	blt.n	8008438 <_printf_float+0x108>
 8008432:	6863      	ldr	r3, [r4, #4]
 8008434:	4299      	cmp	r1, r3
 8008436:	dd41      	ble.n	80084bc <_printf_float+0x18c>
 8008438:	f1a9 0902 	sub.w	r9, r9, #2
 800843c:	fa5f f989 	uxtb.w	r9, r9
 8008440:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008444:	d820      	bhi.n	8008488 <_printf_float+0x158>
 8008446:	3901      	subs	r1, #1
 8008448:	464a      	mov	r2, r9
 800844a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800844e:	9107      	str	r1, [sp, #28]
 8008450:	f7ff ff2e 	bl	80082b0 <__exponent>
 8008454:	9a08      	ldr	r2, [sp, #32]
 8008456:	9004      	str	r0, [sp, #16]
 8008458:	1813      	adds	r3, r2, r0
 800845a:	2a01      	cmp	r2, #1
 800845c:	6123      	str	r3, [r4, #16]
 800845e:	dc02      	bgt.n	8008466 <_printf_float+0x136>
 8008460:	6822      	ldr	r2, [r4, #0]
 8008462:	07d2      	lsls	r2, r2, #31
 8008464:	d501      	bpl.n	800846a <_printf_float+0x13a>
 8008466:	3301      	adds	r3, #1
 8008468:	6123      	str	r3, [r4, #16]
 800846a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d0a2      	beq.n	80083b8 <_printf_float+0x88>
 8008472:	232d      	movs	r3, #45	; 0x2d
 8008474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008478:	e79e      	b.n	80083b8 <_printf_float+0x88>
 800847a:	9904      	ldr	r1, [sp, #16]
 800847c:	2947      	cmp	r1, #71	; 0x47
 800847e:	d1c1      	bne.n	8008404 <_printf_float+0xd4>
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1bf      	bne.n	8008404 <_printf_float+0xd4>
 8008484:	2301      	movs	r3, #1
 8008486:	e7bc      	b.n	8008402 <_printf_float+0xd2>
 8008488:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800848c:	d118      	bne.n	80084c0 <_printf_float+0x190>
 800848e:	2900      	cmp	r1, #0
 8008490:	6863      	ldr	r3, [r4, #4]
 8008492:	dd0b      	ble.n	80084ac <_printf_float+0x17c>
 8008494:	6121      	str	r1, [r4, #16]
 8008496:	b913      	cbnz	r3, 800849e <_printf_float+0x16e>
 8008498:	6822      	ldr	r2, [r4, #0]
 800849a:	07d0      	lsls	r0, r2, #31
 800849c:	d502      	bpl.n	80084a4 <_printf_float+0x174>
 800849e:	3301      	adds	r3, #1
 80084a0:	440b      	add	r3, r1
 80084a2:	6123      	str	r3, [r4, #16]
 80084a4:	2300      	movs	r3, #0
 80084a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80084a8:	9304      	str	r3, [sp, #16]
 80084aa:	e7de      	b.n	800846a <_printf_float+0x13a>
 80084ac:	b913      	cbnz	r3, 80084b4 <_printf_float+0x184>
 80084ae:	6822      	ldr	r2, [r4, #0]
 80084b0:	07d2      	lsls	r2, r2, #31
 80084b2:	d501      	bpl.n	80084b8 <_printf_float+0x188>
 80084b4:	3302      	adds	r3, #2
 80084b6:	e7f4      	b.n	80084a2 <_printf_float+0x172>
 80084b8:	2301      	movs	r3, #1
 80084ba:	e7f2      	b.n	80084a2 <_printf_float+0x172>
 80084bc:	f04f 0967 	mov.w	r9, #103	; 0x67
 80084c0:	9b08      	ldr	r3, [sp, #32]
 80084c2:	4299      	cmp	r1, r3
 80084c4:	db05      	blt.n	80084d2 <_printf_float+0x1a2>
 80084c6:	6823      	ldr	r3, [r4, #0]
 80084c8:	6121      	str	r1, [r4, #16]
 80084ca:	07d8      	lsls	r0, r3, #31
 80084cc:	d5ea      	bpl.n	80084a4 <_printf_float+0x174>
 80084ce:	1c4b      	adds	r3, r1, #1
 80084d0:	e7e7      	b.n	80084a2 <_printf_float+0x172>
 80084d2:	2900      	cmp	r1, #0
 80084d4:	bfd4      	ite	le
 80084d6:	f1c1 0202 	rsble	r2, r1, #2
 80084da:	2201      	movgt	r2, #1
 80084dc:	4413      	add	r3, r2
 80084de:	e7e0      	b.n	80084a2 <_printf_float+0x172>
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	055a      	lsls	r2, r3, #21
 80084e4:	d407      	bmi.n	80084f6 <_printf_float+0x1c6>
 80084e6:	6923      	ldr	r3, [r4, #16]
 80084e8:	4642      	mov	r2, r8
 80084ea:	4631      	mov	r1, r6
 80084ec:	4628      	mov	r0, r5
 80084ee:	47b8      	blx	r7
 80084f0:	3001      	adds	r0, #1
 80084f2:	d12a      	bne.n	800854a <_printf_float+0x21a>
 80084f4:	e76a      	b.n	80083cc <_printf_float+0x9c>
 80084f6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80084fa:	f240 80e2 	bls.w	80086c2 <_printf_float+0x392>
 80084fe:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008502:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800850a:	d133      	bne.n	8008574 <_printf_float+0x244>
 800850c:	4a38      	ldr	r2, [pc, #224]	; (80085f0 <_printf_float+0x2c0>)
 800850e:	2301      	movs	r3, #1
 8008510:	4631      	mov	r1, r6
 8008512:	4628      	mov	r0, r5
 8008514:	47b8      	blx	r7
 8008516:	3001      	adds	r0, #1
 8008518:	f43f af58 	beq.w	80083cc <_printf_float+0x9c>
 800851c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008520:	429a      	cmp	r2, r3
 8008522:	db02      	blt.n	800852a <_printf_float+0x1fa>
 8008524:	6823      	ldr	r3, [r4, #0]
 8008526:	07d8      	lsls	r0, r3, #31
 8008528:	d50f      	bpl.n	800854a <_printf_float+0x21a>
 800852a:	4653      	mov	r3, sl
 800852c:	465a      	mov	r2, fp
 800852e:	4631      	mov	r1, r6
 8008530:	4628      	mov	r0, r5
 8008532:	47b8      	blx	r7
 8008534:	3001      	adds	r0, #1
 8008536:	f43f af49 	beq.w	80083cc <_printf_float+0x9c>
 800853a:	f04f 0800 	mov.w	r8, #0
 800853e:	f104 091a 	add.w	r9, r4, #26
 8008542:	9b08      	ldr	r3, [sp, #32]
 8008544:	3b01      	subs	r3, #1
 8008546:	4543      	cmp	r3, r8
 8008548:	dc09      	bgt.n	800855e <_printf_float+0x22e>
 800854a:	6823      	ldr	r3, [r4, #0]
 800854c:	079b      	lsls	r3, r3, #30
 800854e:	f100 8108 	bmi.w	8008762 <_printf_float+0x432>
 8008552:	68e0      	ldr	r0, [r4, #12]
 8008554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008556:	4298      	cmp	r0, r3
 8008558:	bfb8      	it	lt
 800855a:	4618      	movlt	r0, r3
 800855c:	e738      	b.n	80083d0 <_printf_float+0xa0>
 800855e:	2301      	movs	r3, #1
 8008560:	464a      	mov	r2, r9
 8008562:	4631      	mov	r1, r6
 8008564:	4628      	mov	r0, r5
 8008566:	47b8      	blx	r7
 8008568:	3001      	adds	r0, #1
 800856a:	f43f af2f 	beq.w	80083cc <_printf_float+0x9c>
 800856e:	f108 0801 	add.w	r8, r8, #1
 8008572:	e7e6      	b.n	8008542 <_printf_float+0x212>
 8008574:	9b07      	ldr	r3, [sp, #28]
 8008576:	2b00      	cmp	r3, #0
 8008578:	dc3c      	bgt.n	80085f4 <_printf_float+0x2c4>
 800857a:	4a1d      	ldr	r2, [pc, #116]	; (80085f0 <_printf_float+0x2c0>)
 800857c:	2301      	movs	r3, #1
 800857e:	4631      	mov	r1, r6
 8008580:	4628      	mov	r0, r5
 8008582:	47b8      	blx	r7
 8008584:	3001      	adds	r0, #1
 8008586:	f43f af21 	beq.w	80083cc <_printf_float+0x9c>
 800858a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800858e:	4313      	orrs	r3, r2
 8008590:	d102      	bne.n	8008598 <_printf_float+0x268>
 8008592:	6823      	ldr	r3, [r4, #0]
 8008594:	07d9      	lsls	r1, r3, #31
 8008596:	d5d8      	bpl.n	800854a <_printf_float+0x21a>
 8008598:	4653      	mov	r3, sl
 800859a:	465a      	mov	r2, fp
 800859c:	4631      	mov	r1, r6
 800859e:	4628      	mov	r0, r5
 80085a0:	47b8      	blx	r7
 80085a2:	3001      	adds	r0, #1
 80085a4:	f43f af12 	beq.w	80083cc <_printf_float+0x9c>
 80085a8:	f04f 0900 	mov.w	r9, #0
 80085ac:	f104 0a1a 	add.w	sl, r4, #26
 80085b0:	9b07      	ldr	r3, [sp, #28]
 80085b2:	425b      	negs	r3, r3
 80085b4:	454b      	cmp	r3, r9
 80085b6:	dc01      	bgt.n	80085bc <_printf_float+0x28c>
 80085b8:	9b08      	ldr	r3, [sp, #32]
 80085ba:	e795      	b.n	80084e8 <_printf_float+0x1b8>
 80085bc:	2301      	movs	r3, #1
 80085be:	4652      	mov	r2, sl
 80085c0:	4631      	mov	r1, r6
 80085c2:	4628      	mov	r0, r5
 80085c4:	47b8      	blx	r7
 80085c6:	3001      	adds	r0, #1
 80085c8:	f43f af00 	beq.w	80083cc <_printf_float+0x9c>
 80085cc:	f109 0901 	add.w	r9, r9, #1
 80085d0:	e7ee      	b.n	80085b0 <_printf_float+0x280>
 80085d2:	bf00      	nop
 80085d4:	f3af 8000 	nop.w
 80085d8:	ffffffff 	.word	0xffffffff
 80085dc:	7fefffff 	.word	0x7fefffff
 80085e0:	0800b1c0 	.word	0x0800b1c0
 80085e4:	0800b1c4 	.word	0x0800b1c4
 80085e8:	0800b1cc 	.word	0x0800b1cc
 80085ec:	0800b1c8 	.word	0x0800b1c8
 80085f0:	0800b1d0 	.word	0x0800b1d0
 80085f4:	9a08      	ldr	r2, [sp, #32]
 80085f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085f8:	429a      	cmp	r2, r3
 80085fa:	bfa8      	it	ge
 80085fc:	461a      	movge	r2, r3
 80085fe:	2a00      	cmp	r2, #0
 8008600:	4691      	mov	r9, r2
 8008602:	dc38      	bgt.n	8008676 <_printf_float+0x346>
 8008604:	2300      	movs	r3, #0
 8008606:	9305      	str	r3, [sp, #20]
 8008608:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800860c:	f104 021a 	add.w	r2, r4, #26
 8008610:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008612:	9905      	ldr	r1, [sp, #20]
 8008614:	9304      	str	r3, [sp, #16]
 8008616:	eba3 0309 	sub.w	r3, r3, r9
 800861a:	428b      	cmp	r3, r1
 800861c:	dc33      	bgt.n	8008686 <_printf_float+0x356>
 800861e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008622:	429a      	cmp	r2, r3
 8008624:	db3c      	blt.n	80086a0 <_printf_float+0x370>
 8008626:	6823      	ldr	r3, [r4, #0]
 8008628:	07da      	lsls	r2, r3, #31
 800862a:	d439      	bmi.n	80086a0 <_printf_float+0x370>
 800862c:	9b08      	ldr	r3, [sp, #32]
 800862e:	9a04      	ldr	r2, [sp, #16]
 8008630:	9907      	ldr	r1, [sp, #28]
 8008632:	1a9a      	subs	r2, r3, r2
 8008634:	eba3 0901 	sub.w	r9, r3, r1
 8008638:	4591      	cmp	r9, r2
 800863a:	bfa8      	it	ge
 800863c:	4691      	movge	r9, r2
 800863e:	f1b9 0f00 	cmp.w	r9, #0
 8008642:	dc35      	bgt.n	80086b0 <_printf_float+0x380>
 8008644:	f04f 0800 	mov.w	r8, #0
 8008648:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800864c:	f104 0a1a 	add.w	sl, r4, #26
 8008650:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008654:	1a9b      	subs	r3, r3, r2
 8008656:	eba3 0309 	sub.w	r3, r3, r9
 800865a:	4543      	cmp	r3, r8
 800865c:	f77f af75 	ble.w	800854a <_printf_float+0x21a>
 8008660:	2301      	movs	r3, #1
 8008662:	4652      	mov	r2, sl
 8008664:	4631      	mov	r1, r6
 8008666:	4628      	mov	r0, r5
 8008668:	47b8      	blx	r7
 800866a:	3001      	adds	r0, #1
 800866c:	f43f aeae 	beq.w	80083cc <_printf_float+0x9c>
 8008670:	f108 0801 	add.w	r8, r8, #1
 8008674:	e7ec      	b.n	8008650 <_printf_float+0x320>
 8008676:	4613      	mov	r3, r2
 8008678:	4631      	mov	r1, r6
 800867a:	4642      	mov	r2, r8
 800867c:	4628      	mov	r0, r5
 800867e:	47b8      	blx	r7
 8008680:	3001      	adds	r0, #1
 8008682:	d1bf      	bne.n	8008604 <_printf_float+0x2d4>
 8008684:	e6a2      	b.n	80083cc <_printf_float+0x9c>
 8008686:	2301      	movs	r3, #1
 8008688:	4631      	mov	r1, r6
 800868a:	4628      	mov	r0, r5
 800868c:	9204      	str	r2, [sp, #16]
 800868e:	47b8      	blx	r7
 8008690:	3001      	adds	r0, #1
 8008692:	f43f ae9b 	beq.w	80083cc <_printf_float+0x9c>
 8008696:	9b05      	ldr	r3, [sp, #20]
 8008698:	9a04      	ldr	r2, [sp, #16]
 800869a:	3301      	adds	r3, #1
 800869c:	9305      	str	r3, [sp, #20]
 800869e:	e7b7      	b.n	8008610 <_printf_float+0x2e0>
 80086a0:	4653      	mov	r3, sl
 80086a2:	465a      	mov	r2, fp
 80086a4:	4631      	mov	r1, r6
 80086a6:	4628      	mov	r0, r5
 80086a8:	47b8      	blx	r7
 80086aa:	3001      	adds	r0, #1
 80086ac:	d1be      	bne.n	800862c <_printf_float+0x2fc>
 80086ae:	e68d      	b.n	80083cc <_printf_float+0x9c>
 80086b0:	9a04      	ldr	r2, [sp, #16]
 80086b2:	464b      	mov	r3, r9
 80086b4:	4442      	add	r2, r8
 80086b6:	4631      	mov	r1, r6
 80086b8:	4628      	mov	r0, r5
 80086ba:	47b8      	blx	r7
 80086bc:	3001      	adds	r0, #1
 80086be:	d1c1      	bne.n	8008644 <_printf_float+0x314>
 80086c0:	e684      	b.n	80083cc <_printf_float+0x9c>
 80086c2:	9a08      	ldr	r2, [sp, #32]
 80086c4:	2a01      	cmp	r2, #1
 80086c6:	dc01      	bgt.n	80086cc <_printf_float+0x39c>
 80086c8:	07db      	lsls	r3, r3, #31
 80086ca:	d537      	bpl.n	800873c <_printf_float+0x40c>
 80086cc:	2301      	movs	r3, #1
 80086ce:	4642      	mov	r2, r8
 80086d0:	4631      	mov	r1, r6
 80086d2:	4628      	mov	r0, r5
 80086d4:	47b8      	blx	r7
 80086d6:	3001      	adds	r0, #1
 80086d8:	f43f ae78 	beq.w	80083cc <_printf_float+0x9c>
 80086dc:	4653      	mov	r3, sl
 80086de:	465a      	mov	r2, fp
 80086e0:	4631      	mov	r1, r6
 80086e2:	4628      	mov	r0, r5
 80086e4:	47b8      	blx	r7
 80086e6:	3001      	adds	r0, #1
 80086e8:	f43f ae70 	beq.w	80083cc <_printf_float+0x9c>
 80086ec:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80086f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80086f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086f8:	d01b      	beq.n	8008732 <_printf_float+0x402>
 80086fa:	9b08      	ldr	r3, [sp, #32]
 80086fc:	f108 0201 	add.w	r2, r8, #1
 8008700:	3b01      	subs	r3, #1
 8008702:	4631      	mov	r1, r6
 8008704:	4628      	mov	r0, r5
 8008706:	47b8      	blx	r7
 8008708:	3001      	adds	r0, #1
 800870a:	d10e      	bne.n	800872a <_printf_float+0x3fa>
 800870c:	e65e      	b.n	80083cc <_printf_float+0x9c>
 800870e:	2301      	movs	r3, #1
 8008710:	464a      	mov	r2, r9
 8008712:	4631      	mov	r1, r6
 8008714:	4628      	mov	r0, r5
 8008716:	47b8      	blx	r7
 8008718:	3001      	adds	r0, #1
 800871a:	f43f ae57 	beq.w	80083cc <_printf_float+0x9c>
 800871e:	f108 0801 	add.w	r8, r8, #1
 8008722:	9b08      	ldr	r3, [sp, #32]
 8008724:	3b01      	subs	r3, #1
 8008726:	4543      	cmp	r3, r8
 8008728:	dcf1      	bgt.n	800870e <_printf_float+0x3de>
 800872a:	9b04      	ldr	r3, [sp, #16]
 800872c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008730:	e6db      	b.n	80084ea <_printf_float+0x1ba>
 8008732:	f04f 0800 	mov.w	r8, #0
 8008736:	f104 091a 	add.w	r9, r4, #26
 800873a:	e7f2      	b.n	8008722 <_printf_float+0x3f2>
 800873c:	2301      	movs	r3, #1
 800873e:	4642      	mov	r2, r8
 8008740:	e7df      	b.n	8008702 <_printf_float+0x3d2>
 8008742:	2301      	movs	r3, #1
 8008744:	464a      	mov	r2, r9
 8008746:	4631      	mov	r1, r6
 8008748:	4628      	mov	r0, r5
 800874a:	47b8      	blx	r7
 800874c:	3001      	adds	r0, #1
 800874e:	f43f ae3d 	beq.w	80083cc <_printf_float+0x9c>
 8008752:	f108 0801 	add.w	r8, r8, #1
 8008756:	68e3      	ldr	r3, [r4, #12]
 8008758:	9909      	ldr	r1, [sp, #36]	; 0x24
 800875a:	1a5b      	subs	r3, r3, r1
 800875c:	4543      	cmp	r3, r8
 800875e:	dcf0      	bgt.n	8008742 <_printf_float+0x412>
 8008760:	e6f7      	b.n	8008552 <_printf_float+0x222>
 8008762:	f04f 0800 	mov.w	r8, #0
 8008766:	f104 0919 	add.w	r9, r4, #25
 800876a:	e7f4      	b.n	8008756 <_printf_float+0x426>

0800876c <_printf_common>:
 800876c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008770:	4616      	mov	r6, r2
 8008772:	4699      	mov	r9, r3
 8008774:	688a      	ldr	r2, [r1, #8]
 8008776:	690b      	ldr	r3, [r1, #16]
 8008778:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800877c:	4293      	cmp	r3, r2
 800877e:	bfb8      	it	lt
 8008780:	4613      	movlt	r3, r2
 8008782:	6033      	str	r3, [r6, #0]
 8008784:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008788:	4607      	mov	r7, r0
 800878a:	460c      	mov	r4, r1
 800878c:	b10a      	cbz	r2, 8008792 <_printf_common+0x26>
 800878e:	3301      	adds	r3, #1
 8008790:	6033      	str	r3, [r6, #0]
 8008792:	6823      	ldr	r3, [r4, #0]
 8008794:	0699      	lsls	r1, r3, #26
 8008796:	bf42      	ittt	mi
 8008798:	6833      	ldrmi	r3, [r6, #0]
 800879a:	3302      	addmi	r3, #2
 800879c:	6033      	strmi	r3, [r6, #0]
 800879e:	6825      	ldr	r5, [r4, #0]
 80087a0:	f015 0506 	ands.w	r5, r5, #6
 80087a4:	d106      	bne.n	80087b4 <_printf_common+0x48>
 80087a6:	f104 0a19 	add.w	sl, r4, #25
 80087aa:	68e3      	ldr	r3, [r4, #12]
 80087ac:	6832      	ldr	r2, [r6, #0]
 80087ae:	1a9b      	subs	r3, r3, r2
 80087b0:	42ab      	cmp	r3, r5
 80087b2:	dc26      	bgt.n	8008802 <_printf_common+0x96>
 80087b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087b8:	1e13      	subs	r3, r2, #0
 80087ba:	6822      	ldr	r2, [r4, #0]
 80087bc:	bf18      	it	ne
 80087be:	2301      	movne	r3, #1
 80087c0:	0692      	lsls	r2, r2, #26
 80087c2:	d42b      	bmi.n	800881c <_printf_common+0xb0>
 80087c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087c8:	4649      	mov	r1, r9
 80087ca:	4638      	mov	r0, r7
 80087cc:	47c0      	blx	r8
 80087ce:	3001      	adds	r0, #1
 80087d0:	d01e      	beq.n	8008810 <_printf_common+0xa4>
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	68e5      	ldr	r5, [r4, #12]
 80087d6:	6832      	ldr	r2, [r6, #0]
 80087d8:	f003 0306 	and.w	r3, r3, #6
 80087dc:	2b04      	cmp	r3, #4
 80087de:	bf08      	it	eq
 80087e0:	1aad      	subeq	r5, r5, r2
 80087e2:	68a3      	ldr	r3, [r4, #8]
 80087e4:	6922      	ldr	r2, [r4, #16]
 80087e6:	bf0c      	ite	eq
 80087e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087ec:	2500      	movne	r5, #0
 80087ee:	4293      	cmp	r3, r2
 80087f0:	bfc4      	itt	gt
 80087f2:	1a9b      	subgt	r3, r3, r2
 80087f4:	18ed      	addgt	r5, r5, r3
 80087f6:	2600      	movs	r6, #0
 80087f8:	341a      	adds	r4, #26
 80087fa:	42b5      	cmp	r5, r6
 80087fc:	d11a      	bne.n	8008834 <_printf_common+0xc8>
 80087fe:	2000      	movs	r0, #0
 8008800:	e008      	b.n	8008814 <_printf_common+0xa8>
 8008802:	2301      	movs	r3, #1
 8008804:	4652      	mov	r2, sl
 8008806:	4649      	mov	r1, r9
 8008808:	4638      	mov	r0, r7
 800880a:	47c0      	blx	r8
 800880c:	3001      	adds	r0, #1
 800880e:	d103      	bne.n	8008818 <_printf_common+0xac>
 8008810:	f04f 30ff 	mov.w	r0, #4294967295
 8008814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008818:	3501      	adds	r5, #1
 800881a:	e7c6      	b.n	80087aa <_printf_common+0x3e>
 800881c:	18e1      	adds	r1, r4, r3
 800881e:	1c5a      	adds	r2, r3, #1
 8008820:	2030      	movs	r0, #48	; 0x30
 8008822:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008826:	4422      	add	r2, r4
 8008828:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800882c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008830:	3302      	adds	r3, #2
 8008832:	e7c7      	b.n	80087c4 <_printf_common+0x58>
 8008834:	2301      	movs	r3, #1
 8008836:	4622      	mov	r2, r4
 8008838:	4649      	mov	r1, r9
 800883a:	4638      	mov	r0, r7
 800883c:	47c0      	blx	r8
 800883e:	3001      	adds	r0, #1
 8008840:	d0e6      	beq.n	8008810 <_printf_common+0xa4>
 8008842:	3601      	adds	r6, #1
 8008844:	e7d9      	b.n	80087fa <_printf_common+0x8e>
	...

08008848 <_printf_i>:
 8008848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800884c:	7e0f      	ldrb	r7, [r1, #24]
 800884e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008850:	2f78      	cmp	r7, #120	; 0x78
 8008852:	4691      	mov	r9, r2
 8008854:	4680      	mov	r8, r0
 8008856:	460c      	mov	r4, r1
 8008858:	469a      	mov	sl, r3
 800885a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800885e:	d807      	bhi.n	8008870 <_printf_i+0x28>
 8008860:	2f62      	cmp	r7, #98	; 0x62
 8008862:	d80a      	bhi.n	800887a <_printf_i+0x32>
 8008864:	2f00      	cmp	r7, #0
 8008866:	f000 80d8 	beq.w	8008a1a <_printf_i+0x1d2>
 800886a:	2f58      	cmp	r7, #88	; 0x58
 800886c:	f000 80a3 	beq.w	80089b6 <_printf_i+0x16e>
 8008870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008874:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008878:	e03a      	b.n	80088f0 <_printf_i+0xa8>
 800887a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800887e:	2b15      	cmp	r3, #21
 8008880:	d8f6      	bhi.n	8008870 <_printf_i+0x28>
 8008882:	a101      	add	r1, pc, #4	; (adr r1, 8008888 <_printf_i+0x40>)
 8008884:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008888:	080088e1 	.word	0x080088e1
 800888c:	080088f5 	.word	0x080088f5
 8008890:	08008871 	.word	0x08008871
 8008894:	08008871 	.word	0x08008871
 8008898:	08008871 	.word	0x08008871
 800889c:	08008871 	.word	0x08008871
 80088a0:	080088f5 	.word	0x080088f5
 80088a4:	08008871 	.word	0x08008871
 80088a8:	08008871 	.word	0x08008871
 80088ac:	08008871 	.word	0x08008871
 80088b0:	08008871 	.word	0x08008871
 80088b4:	08008a01 	.word	0x08008a01
 80088b8:	08008925 	.word	0x08008925
 80088bc:	080089e3 	.word	0x080089e3
 80088c0:	08008871 	.word	0x08008871
 80088c4:	08008871 	.word	0x08008871
 80088c8:	08008a23 	.word	0x08008a23
 80088cc:	08008871 	.word	0x08008871
 80088d0:	08008925 	.word	0x08008925
 80088d4:	08008871 	.word	0x08008871
 80088d8:	08008871 	.word	0x08008871
 80088dc:	080089eb 	.word	0x080089eb
 80088e0:	682b      	ldr	r3, [r5, #0]
 80088e2:	1d1a      	adds	r2, r3, #4
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	602a      	str	r2, [r5, #0]
 80088e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088f0:	2301      	movs	r3, #1
 80088f2:	e0a3      	b.n	8008a3c <_printf_i+0x1f4>
 80088f4:	6820      	ldr	r0, [r4, #0]
 80088f6:	6829      	ldr	r1, [r5, #0]
 80088f8:	0606      	lsls	r6, r0, #24
 80088fa:	f101 0304 	add.w	r3, r1, #4
 80088fe:	d50a      	bpl.n	8008916 <_printf_i+0xce>
 8008900:	680e      	ldr	r6, [r1, #0]
 8008902:	602b      	str	r3, [r5, #0]
 8008904:	2e00      	cmp	r6, #0
 8008906:	da03      	bge.n	8008910 <_printf_i+0xc8>
 8008908:	232d      	movs	r3, #45	; 0x2d
 800890a:	4276      	negs	r6, r6
 800890c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008910:	485e      	ldr	r0, [pc, #376]	; (8008a8c <_printf_i+0x244>)
 8008912:	230a      	movs	r3, #10
 8008914:	e019      	b.n	800894a <_printf_i+0x102>
 8008916:	680e      	ldr	r6, [r1, #0]
 8008918:	602b      	str	r3, [r5, #0]
 800891a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800891e:	bf18      	it	ne
 8008920:	b236      	sxthne	r6, r6
 8008922:	e7ef      	b.n	8008904 <_printf_i+0xbc>
 8008924:	682b      	ldr	r3, [r5, #0]
 8008926:	6820      	ldr	r0, [r4, #0]
 8008928:	1d19      	adds	r1, r3, #4
 800892a:	6029      	str	r1, [r5, #0]
 800892c:	0601      	lsls	r1, r0, #24
 800892e:	d501      	bpl.n	8008934 <_printf_i+0xec>
 8008930:	681e      	ldr	r6, [r3, #0]
 8008932:	e002      	b.n	800893a <_printf_i+0xf2>
 8008934:	0646      	lsls	r6, r0, #25
 8008936:	d5fb      	bpl.n	8008930 <_printf_i+0xe8>
 8008938:	881e      	ldrh	r6, [r3, #0]
 800893a:	4854      	ldr	r0, [pc, #336]	; (8008a8c <_printf_i+0x244>)
 800893c:	2f6f      	cmp	r7, #111	; 0x6f
 800893e:	bf0c      	ite	eq
 8008940:	2308      	moveq	r3, #8
 8008942:	230a      	movne	r3, #10
 8008944:	2100      	movs	r1, #0
 8008946:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800894a:	6865      	ldr	r5, [r4, #4]
 800894c:	60a5      	str	r5, [r4, #8]
 800894e:	2d00      	cmp	r5, #0
 8008950:	bfa2      	ittt	ge
 8008952:	6821      	ldrge	r1, [r4, #0]
 8008954:	f021 0104 	bicge.w	r1, r1, #4
 8008958:	6021      	strge	r1, [r4, #0]
 800895a:	b90e      	cbnz	r6, 8008960 <_printf_i+0x118>
 800895c:	2d00      	cmp	r5, #0
 800895e:	d04d      	beq.n	80089fc <_printf_i+0x1b4>
 8008960:	4615      	mov	r5, r2
 8008962:	fbb6 f1f3 	udiv	r1, r6, r3
 8008966:	fb03 6711 	mls	r7, r3, r1, r6
 800896a:	5dc7      	ldrb	r7, [r0, r7]
 800896c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008970:	4637      	mov	r7, r6
 8008972:	42bb      	cmp	r3, r7
 8008974:	460e      	mov	r6, r1
 8008976:	d9f4      	bls.n	8008962 <_printf_i+0x11a>
 8008978:	2b08      	cmp	r3, #8
 800897a:	d10b      	bne.n	8008994 <_printf_i+0x14c>
 800897c:	6823      	ldr	r3, [r4, #0]
 800897e:	07de      	lsls	r6, r3, #31
 8008980:	d508      	bpl.n	8008994 <_printf_i+0x14c>
 8008982:	6923      	ldr	r3, [r4, #16]
 8008984:	6861      	ldr	r1, [r4, #4]
 8008986:	4299      	cmp	r1, r3
 8008988:	bfde      	ittt	le
 800898a:	2330      	movle	r3, #48	; 0x30
 800898c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008990:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008994:	1b52      	subs	r2, r2, r5
 8008996:	6122      	str	r2, [r4, #16]
 8008998:	f8cd a000 	str.w	sl, [sp]
 800899c:	464b      	mov	r3, r9
 800899e:	aa03      	add	r2, sp, #12
 80089a0:	4621      	mov	r1, r4
 80089a2:	4640      	mov	r0, r8
 80089a4:	f7ff fee2 	bl	800876c <_printf_common>
 80089a8:	3001      	adds	r0, #1
 80089aa:	d14c      	bne.n	8008a46 <_printf_i+0x1fe>
 80089ac:	f04f 30ff 	mov.w	r0, #4294967295
 80089b0:	b004      	add	sp, #16
 80089b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b6:	4835      	ldr	r0, [pc, #212]	; (8008a8c <_printf_i+0x244>)
 80089b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80089bc:	6829      	ldr	r1, [r5, #0]
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80089c4:	6029      	str	r1, [r5, #0]
 80089c6:	061d      	lsls	r5, r3, #24
 80089c8:	d514      	bpl.n	80089f4 <_printf_i+0x1ac>
 80089ca:	07df      	lsls	r7, r3, #31
 80089cc:	bf44      	itt	mi
 80089ce:	f043 0320 	orrmi.w	r3, r3, #32
 80089d2:	6023      	strmi	r3, [r4, #0]
 80089d4:	b91e      	cbnz	r6, 80089de <_printf_i+0x196>
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	f023 0320 	bic.w	r3, r3, #32
 80089dc:	6023      	str	r3, [r4, #0]
 80089de:	2310      	movs	r3, #16
 80089e0:	e7b0      	b.n	8008944 <_printf_i+0xfc>
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	f043 0320 	orr.w	r3, r3, #32
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	2378      	movs	r3, #120	; 0x78
 80089ec:	4828      	ldr	r0, [pc, #160]	; (8008a90 <_printf_i+0x248>)
 80089ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089f2:	e7e3      	b.n	80089bc <_printf_i+0x174>
 80089f4:	0659      	lsls	r1, r3, #25
 80089f6:	bf48      	it	mi
 80089f8:	b2b6      	uxthmi	r6, r6
 80089fa:	e7e6      	b.n	80089ca <_printf_i+0x182>
 80089fc:	4615      	mov	r5, r2
 80089fe:	e7bb      	b.n	8008978 <_printf_i+0x130>
 8008a00:	682b      	ldr	r3, [r5, #0]
 8008a02:	6826      	ldr	r6, [r4, #0]
 8008a04:	6961      	ldr	r1, [r4, #20]
 8008a06:	1d18      	adds	r0, r3, #4
 8008a08:	6028      	str	r0, [r5, #0]
 8008a0a:	0635      	lsls	r5, r6, #24
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	d501      	bpl.n	8008a14 <_printf_i+0x1cc>
 8008a10:	6019      	str	r1, [r3, #0]
 8008a12:	e002      	b.n	8008a1a <_printf_i+0x1d2>
 8008a14:	0670      	lsls	r0, r6, #25
 8008a16:	d5fb      	bpl.n	8008a10 <_printf_i+0x1c8>
 8008a18:	8019      	strh	r1, [r3, #0]
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	6123      	str	r3, [r4, #16]
 8008a1e:	4615      	mov	r5, r2
 8008a20:	e7ba      	b.n	8008998 <_printf_i+0x150>
 8008a22:	682b      	ldr	r3, [r5, #0]
 8008a24:	1d1a      	adds	r2, r3, #4
 8008a26:	602a      	str	r2, [r5, #0]
 8008a28:	681d      	ldr	r5, [r3, #0]
 8008a2a:	6862      	ldr	r2, [r4, #4]
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	4628      	mov	r0, r5
 8008a30:	f7f7 fc0e 	bl	8000250 <memchr>
 8008a34:	b108      	cbz	r0, 8008a3a <_printf_i+0x1f2>
 8008a36:	1b40      	subs	r0, r0, r5
 8008a38:	6060      	str	r0, [r4, #4]
 8008a3a:	6863      	ldr	r3, [r4, #4]
 8008a3c:	6123      	str	r3, [r4, #16]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a44:	e7a8      	b.n	8008998 <_printf_i+0x150>
 8008a46:	6923      	ldr	r3, [r4, #16]
 8008a48:	462a      	mov	r2, r5
 8008a4a:	4649      	mov	r1, r9
 8008a4c:	4640      	mov	r0, r8
 8008a4e:	47d0      	blx	sl
 8008a50:	3001      	adds	r0, #1
 8008a52:	d0ab      	beq.n	80089ac <_printf_i+0x164>
 8008a54:	6823      	ldr	r3, [r4, #0]
 8008a56:	079b      	lsls	r3, r3, #30
 8008a58:	d413      	bmi.n	8008a82 <_printf_i+0x23a>
 8008a5a:	68e0      	ldr	r0, [r4, #12]
 8008a5c:	9b03      	ldr	r3, [sp, #12]
 8008a5e:	4298      	cmp	r0, r3
 8008a60:	bfb8      	it	lt
 8008a62:	4618      	movlt	r0, r3
 8008a64:	e7a4      	b.n	80089b0 <_printf_i+0x168>
 8008a66:	2301      	movs	r3, #1
 8008a68:	4632      	mov	r2, r6
 8008a6a:	4649      	mov	r1, r9
 8008a6c:	4640      	mov	r0, r8
 8008a6e:	47d0      	blx	sl
 8008a70:	3001      	adds	r0, #1
 8008a72:	d09b      	beq.n	80089ac <_printf_i+0x164>
 8008a74:	3501      	adds	r5, #1
 8008a76:	68e3      	ldr	r3, [r4, #12]
 8008a78:	9903      	ldr	r1, [sp, #12]
 8008a7a:	1a5b      	subs	r3, r3, r1
 8008a7c:	42ab      	cmp	r3, r5
 8008a7e:	dcf2      	bgt.n	8008a66 <_printf_i+0x21e>
 8008a80:	e7eb      	b.n	8008a5a <_printf_i+0x212>
 8008a82:	2500      	movs	r5, #0
 8008a84:	f104 0619 	add.w	r6, r4, #25
 8008a88:	e7f5      	b.n	8008a76 <_printf_i+0x22e>
 8008a8a:	bf00      	nop
 8008a8c:	0800b1d2 	.word	0x0800b1d2
 8008a90:	0800b1e3 	.word	0x0800b1e3

08008a94 <sniprintf>:
 8008a94:	b40c      	push	{r2, r3}
 8008a96:	b530      	push	{r4, r5, lr}
 8008a98:	4b17      	ldr	r3, [pc, #92]	; (8008af8 <sniprintf+0x64>)
 8008a9a:	1e0c      	subs	r4, r1, #0
 8008a9c:	681d      	ldr	r5, [r3, #0]
 8008a9e:	b09d      	sub	sp, #116	; 0x74
 8008aa0:	da08      	bge.n	8008ab4 <sniprintf+0x20>
 8008aa2:	238b      	movs	r3, #139	; 0x8b
 8008aa4:	602b      	str	r3, [r5, #0]
 8008aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8008aaa:	b01d      	add	sp, #116	; 0x74
 8008aac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ab0:	b002      	add	sp, #8
 8008ab2:	4770      	bx	lr
 8008ab4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008ab8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008abc:	bf14      	ite	ne
 8008abe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008ac2:	4623      	moveq	r3, r4
 8008ac4:	9304      	str	r3, [sp, #16]
 8008ac6:	9307      	str	r3, [sp, #28]
 8008ac8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008acc:	9002      	str	r0, [sp, #8]
 8008ace:	9006      	str	r0, [sp, #24]
 8008ad0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008ad4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008ad6:	ab21      	add	r3, sp, #132	; 0x84
 8008ad8:	a902      	add	r1, sp, #8
 8008ada:	4628      	mov	r0, r5
 8008adc:	9301      	str	r3, [sp, #4]
 8008ade:	f001 fbb9 	bl	800a254 <_svfiprintf_r>
 8008ae2:	1c43      	adds	r3, r0, #1
 8008ae4:	bfbc      	itt	lt
 8008ae6:	238b      	movlt	r3, #139	; 0x8b
 8008ae8:	602b      	strlt	r3, [r5, #0]
 8008aea:	2c00      	cmp	r4, #0
 8008aec:	d0dd      	beq.n	8008aaa <sniprintf+0x16>
 8008aee:	9b02      	ldr	r3, [sp, #8]
 8008af0:	2200      	movs	r2, #0
 8008af2:	701a      	strb	r2, [r3, #0]
 8008af4:	e7d9      	b.n	8008aaa <sniprintf+0x16>
 8008af6:	bf00      	nop
 8008af8:	200004c8 	.word	0x200004c8

08008afc <siprintf>:
 8008afc:	b40e      	push	{r1, r2, r3}
 8008afe:	b500      	push	{lr}
 8008b00:	b09c      	sub	sp, #112	; 0x70
 8008b02:	ab1d      	add	r3, sp, #116	; 0x74
 8008b04:	9002      	str	r0, [sp, #8]
 8008b06:	9006      	str	r0, [sp, #24]
 8008b08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b0c:	4809      	ldr	r0, [pc, #36]	; (8008b34 <siprintf+0x38>)
 8008b0e:	9107      	str	r1, [sp, #28]
 8008b10:	9104      	str	r1, [sp, #16]
 8008b12:	4909      	ldr	r1, [pc, #36]	; (8008b38 <siprintf+0x3c>)
 8008b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b18:	9105      	str	r1, [sp, #20]
 8008b1a:	6800      	ldr	r0, [r0, #0]
 8008b1c:	9301      	str	r3, [sp, #4]
 8008b1e:	a902      	add	r1, sp, #8
 8008b20:	f001 fb98 	bl	800a254 <_svfiprintf_r>
 8008b24:	9b02      	ldr	r3, [sp, #8]
 8008b26:	2200      	movs	r2, #0
 8008b28:	701a      	strb	r2, [r3, #0]
 8008b2a:	b01c      	add	sp, #112	; 0x70
 8008b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b30:	b003      	add	sp, #12
 8008b32:	4770      	bx	lr
 8008b34:	200004c8 	.word	0x200004c8
 8008b38:	ffff0208 	.word	0xffff0208

08008b3c <strncmp>:
 8008b3c:	b510      	push	{r4, lr}
 8008b3e:	b17a      	cbz	r2, 8008b60 <strncmp+0x24>
 8008b40:	4603      	mov	r3, r0
 8008b42:	3901      	subs	r1, #1
 8008b44:	1884      	adds	r4, r0, r2
 8008b46:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008b4a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008b4e:	4290      	cmp	r0, r2
 8008b50:	d101      	bne.n	8008b56 <strncmp+0x1a>
 8008b52:	42a3      	cmp	r3, r4
 8008b54:	d101      	bne.n	8008b5a <strncmp+0x1e>
 8008b56:	1a80      	subs	r0, r0, r2
 8008b58:	bd10      	pop	{r4, pc}
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	d1f3      	bne.n	8008b46 <strncmp+0xa>
 8008b5e:	e7fa      	b.n	8008b56 <strncmp+0x1a>
 8008b60:	4610      	mov	r0, r2
 8008b62:	e7f9      	b.n	8008b58 <strncmp+0x1c>

08008b64 <_strtol_l.constprop.0>:
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b6a:	d001      	beq.n	8008b70 <_strtol_l.constprop.0+0xc>
 8008b6c:	2b24      	cmp	r3, #36	; 0x24
 8008b6e:	d906      	bls.n	8008b7e <_strtol_l.constprop.0+0x1a>
 8008b70:	f7ff fb1a 	bl	80081a8 <__errno>
 8008b74:	2316      	movs	r3, #22
 8008b76:	6003      	str	r3, [r0, #0]
 8008b78:	2000      	movs	r0, #0
 8008b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b7e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008c64 <_strtol_l.constprop.0+0x100>
 8008b82:	460d      	mov	r5, r1
 8008b84:	462e      	mov	r6, r5
 8008b86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b8a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008b8e:	f017 0708 	ands.w	r7, r7, #8
 8008b92:	d1f7      	bne.n	8008b84 <_strtol_l.constprop.0+0x20>
 8008b94:	2c2d      	cmp	r4, #45	; 0x2d
 8008b96:	d132      	bne.n	8008bfe <_strtol_l.constprop.0+0x9a>
 8008b98:	782c      	ldrb	r4, [r5, #0]
 8008b9a:	2701      	movs	r7, #1
 8008b9c:	1cb5      	adds	r5, r6, #2
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d05b      	beq.n	8008c5a <_strtol_l.constprop.0+0xf6>
 8008ba2:	2b10      	cmp	r3, #16
 8008ba4:	d109      	bne.n	8008bba <_strtol_l.constprop.0+0x56>
 8008ba6:	2c30      	cmp	r4, #48	; 0x30
 8008ba8:	d107      	bne.n	8008bba <_strtol_l.constprop.0+0x56>
 8008baa:	782c      	ldrb	r4, [r5, #0]
 8008bac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008bb0:	2c58      	cmp	r4, #88	; 0x58
 8008bb2:	d14d      	bne.n	8008c50 <_strtol_l.constprop.0+0xec>
 8008bb4:	786c      	ldrb	r4, [r5, #1]
 8008bb6:	2310      	movs	r3, #16
 8008bb8:	3502      	adds	r5, #2
 8008bba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008bbe:	f108 38ff 	add.w	r8, r8, #4294967295
 8008bc2:	f04f 0c00 	mov.w	ip, #0
 8008bc6:	fbb8 f9f3 	udiv	r9, r8, r3
 8008bca:	4666      	mov	r6, ip
 8008bcc:	fb03 8a19 	mls	sl, r3, r9, r8
 8008bd0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008bd4:	f1be 0f09 	cmp.w	lr, #9
 8008bd8:	d816      	bhi.n	8008c08 <_strtol_l.constprop.0+0xa4>
 8008bda:	4674      	mov	r4, lr
 8008bdc:	42a3      	cmp	r3, r4
 8008bde:	dd24      	ble.n	8008c2a <_strtol_l.constprop.0+0xc6>
 8008be0:	f1bc 0f00 	cmp.w	ip, #0
 8008be4:	db1e      	blt.n	8008c24 <_strtol_l.constprop.0+0xc0>
 8008be6:	45b1      	cmp	r9, r6
 8008be8:	d31c      	bcc.n	8008c24 <_strtol_l.constprop.0+0xc0>
 8008bea:	d101      	bne.n	8008bf0 <_strtol_l.constprop.0+0x8c>
 8008bec:	45a2      	cmp	sl, r4
 8008bee:	db19      	blt.n	8008c24 <_strtol_l.constprop.0+0xc0>
 8008bf0:	fb06 4603 	mla	r6, r6, r3, r4
 8008bf4:	f04f 0c01 	mov.w	ip, #1
 8008bf8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bfc:	e7e8      	b.n	8008bd0 <_strtol_l.constprop.0+0x6c>
 8008bfe:	2c2b      	cmp	r4, #43	; 0x2b
 8008c00:	bf04      	itt	eq
 8008c02:	782c      	ldrbeq	r4, [r5, #0]
 8008c04:	1cb5      	addeq	r5, r6, #2
 8008c06:	e7ca      	b.n	8008b9e <_strtol_l.constprop.0+0x3a>
 8008c08:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008c0c:	f1be 0f19 	cmp.w	lr, #25
 8008c10:	d801      	bhi.n	8008c16 <_strtol_l.constprop.0+0xb2>
 8008c12:	3c37      	subs	r4, #55	; 0x37
 8008c14:	e7e2      	b.n	8008bdc <_strtol_l.constprop.0+0x78>
 8008c16:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008c1a:	f1be 0f19 	cmp.w	lr, #25
 8008c1e:	d804      	bhi.n	8008c2a <_strtol_l.constprop.0+0xc6>
 8008c20:	3c57      	subs	r4, #87	; 0x57
 8008c22:	e7db      	b.n	8008bdc <_strtol_l.constprop.0+0x78>
 8008c24:	f04f 3cff 	mov.w	ip, #4294967295
 8008c28:	e7e6      	b.n	8008bf8 <_strtol_l.constprop.0+0x94>
 8008c2a:	f1bc 0f00 	cmp.w	ip, #0
 8008c2e:	da05      	bge.n	8008c3c <_strtol_l.constprop.0+0xd8>
 8008c30:	2322      	movs	r3, #34	; 0x22
 8008c32:	6003      	str	r3, [r0, #0]
 8008c34:	4646      	mov	r6, r8
 8008c36:	b942      	cbnz	r2, 8008c4a <_strtol_l.constprop.0+0xe6>
 8008c38:	4630      	mov	r0, r6
 8008c3a:	e79e      	b.n	8008b7a <_strtol_l.constprop.0+0x16>
 8008c3c:	b107      	cbz	r7, 8008c40 <_strtol_l.constprop.0+0xdc>
 8008c3e:	4276      	negs	r6, r6
 8008c40:	2a00      	cmp	r2, #0
 8008c42:	d0f9      	beq.n	8008c38 <_strtol_l.constprop.0+0xd4>
 8008c44:	f1bc 0f00 	cmp.w	ip, #0
 8008c48:	d000      	beq.n	8008c4c <_strtol_l.constprop.0+0xe8>
 8008c4a:	1e69      	subs	r1, r5, #1
 8008c4c:	6011      	str	r1, [r2, #0]
 8008c4e:	e7f3      	b.n	8008c38 <_strtol_l.constprop.0+0xd4>
 8008c50:	2430      	movs	r4, #48	; 0x30
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1b1      	bne.n	8008bba <_strtol_l.constprop.0+0x56>
 8008c56:	2308      	movs	r3, #8
 8008c58:	e7af      	b.n	8008bba <_strtol_l.constprop.0+0x56>
 8008c5a:	2c30      	cmp	r4, #48	; 0x30
 8008c5c:	d0a5      	beq.n	8008baa <_strtol_l.constprop.0+0x46>
 8008c5e:	230a      	movs	r3, #10
 8008c60:	e7ab      	b.n	8008bba <_strtol_l.constprop.0+0x56>
 8008c62:	bf00      	nop
 8008c64:	0800b1f5 	.word	0x0800b1f5

08008c68 <strtol>:
 8008c68:	4613      	mov	r3, r2
 8008c6a:	460a      	mov	r2, r1
 8008c6c:	4601      	mov	r1, r0
 8008c6e:	4802      	ldr	r0, [pc, #8]	; (8008c78 <strtol+0x10>)
 8008c70:	6800      	ldr	r0, [r0, #0]
 8008c72:	f7ff bf77 	b.w	8008b64 <_strtol_l.constprop.0>
 8008c76:	bf00      	nop
 8008c78:	200004c8 	.word	0x200004c8

08008c7c <quorem>:
 8008c7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c80:	6903      	ldr	r3, [r0, #16]
 8008c82:	690c      	ldr	r4, [r1, #16]
 8008c84:	42a3      	cmp	r3, r4
 8008c86:	4607      	mov	r7, r0
 8008c88:	f2c0 8081 	blt.w	8008d8e <quorem+0x112>
 8008c8c:	3c01      	subs	r4, #1
 8008c8e:	f101 0814 	add.w	r8, r1, #20
 8008c92:	f100 0514 	add.w	r5, r0, #20
 8008c96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c9a:	9301      	str	r3, [sp, #4]
 8008c9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ca0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008cac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008cb0:	fbb2 f6f3 	udiv	r6, r2, r3
 8008cb4:	d331      	bcc.n	8008d1a <quorem+0x9e>
 8008cb6:	f04f 0e00 	mov.w	lr, #0
 8008cba:	4640      	mov	r0, r8
 8008cbc:	46ac      	mov	ip, r5
 8008cbe:	46f2      	mov	sl, lr
 8008cc0:	f850 2b04 	ldr.w	r2, [r0], #4
 8008cc4:	b293      	uxth	r3, r2
 8008cc6:	fb06 e303 	mla	r3, r6, r3, lr
 8008cca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	ebaa 0303 	sub.w	r3, sl, r3
 8008cd4:	f8dc a000 	ldr.w	sl, [ip]
 8008cd8:	0c12      	lsrs	r2, r2, #16
 8008cda:	fa13 f38a 	uxtah	r3, r3, sl
 8008cde:	fb06 e202 	mla	r2, r6, r2, lr
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	9b00      	ldr	r3, [sp, #0]
 8008ce6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008cea:	b292      	uxth	r2, r2
 8008cec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008cf0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008cf4:	f8bd 3000 	ldrh.w	r3, [sp]
 8008cf8:	4581      	cmp	r9, r0
 8008cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cfe:	f84c 3b04 	str.w	r3, [ip], #4
 8008d02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d06:	d2db      	bcs.n	8008cc0 <quorem+0x44>
 8008d08:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d0c:	b92b      	cbnz	r3, 8008d1a <quorem+0x9e>
 8008d0e:	9b01      	ldr	r3, [sp, #4]
 8008d10:	3b04      	subs	r3, #4
 8008d12:	429d      	cmp	r5, r3
 8008d14:	461a      	mov	r2, r3
 8008d16:	d32e      	bcc.n	8008d76 <quorem+0xfa>
 8008d18:	613c      	str	r4, [r7, #16]
 8008d1a:	4638      	mov	r0, r7
 8008d1c:	f001 f846 	bl	8009dac <__mcmp>
 8008d20:	2800      	cmp	r0, #0
 8008d22:	db24      	blt.n	8008d6e <quorem+0xf2>
 8008d24:	3601      	adds	r6, #1
 8008d26:	4628      	mov	r0, r5
 8008d28:	f04f 0c00 	mov.w	ip, #0
 8008d2c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d30:	f8d0 e000 	ldr.w	lr, [r0]
 8008d34:	b293      	uxth	r3, r2
 8008d36:	ebac 0303 	sub.w	r3, ip, r3
 8008d3a:	0c12      	lsrs	r2, r2, #16
 8008d3c:	fa13 f38e 	uxtah	r3, r3, lr
 8008d40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008d44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d4e:	45c1      	cmp	r9, r8
 8008d50:	f840 3b04 	str.w	r3, [r0], #4
 8008d54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008d58:	d2e8      	bcs.n	8008d2c <quorem+0xb0>
 8008d5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d62:	b922      	cbnz	r2, 8008d6e <quorem+0xf2>
 8008d64:	3b04      	subs	r3, #4
 8008d66:	429d      	cmp	r5, r3
 8008d68:	461a      	mov	r2, r3
 8008d6a:	d30a      	bcc.n	8008d82 <quorem+0x106>
 8008d6c:	613c      	str	r4, [r7, #16]
 8008d6e:	4630      	mov	r0, r6
 8008d70:	b003      	add	sp, #12
 8008d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d76:	6812      	ldr	r2, [r2, #0]
 8008d78:	3b04      	subs	r3, #4
 8008d7a:	2a00      	cmp	r2, #0
 8008d7c:	d1cc      	bne.n	8008d18 <quorem+0x9c>
 8008d7e:	3c01      	subs	r4, #1
 8008d80:	e7c7      	b.n	8008d12 <quorem+0x96>
 8008d82:	6812      	ldr	r2, [r2, #0]
 8008d84:	3b04      	subs	r3, #4
 8008d86:	2a00      	cmp	r2, #0
 8008d88:	d1f0      	bne.n	8008d6c <quorem+0xf0>
 8008d8a:	3c01      	subs	r4, #1
 8008d8c:	e7eb      	b.n	8008d66 <quorem+0xea>
 8008d8e:	2000      	movs	r0, #0
 8008d90:	e7ee      	b.n	8008d70 <quorem+0xf4>
 8008d92:	0000      	movs	r0, r0
 8008d94:	0000      	movs	r0, r0
	...

08008d98 <_dtoa_r>:
 8008d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d9c:	ed2d 8b02 	vpush	{d8}
 8008da0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008da2:	b091      	sub	sp, #68	; 0x44
 8008da4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008da8:	ec59 8b10 	vmov	r8, r9, d0
 8008dac:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008dae:	9106      	str	r1, [sp, #24]
 8008db0:	4606      	mov	r6, r0
 8008db2:	9208      	str	r2, [sp, #32]
 8008db4:	930c      	str	r3, [sp, #48]	; 0x30
 8008db6:	b975      	cbnz	r5, 8008dd6 <_dtoa_r+0x3e>
 8008db8:	2010      	movs	r0, #16
 8008dba:	f000 fd5f 	bl	800987c <malloc>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	6270      	str	r0, [r6, #36]	; 0x24
 8008dc2:	b920      	cbnz	r0, 8008dce <_dtoa_r+0x36>
 8008dc4:	4baa      	ldr	r3, [pc, #680]	; (8009070 <_dtoa_r+0x2d8>)
 8008dc6:	21ea      	movs	r1, #234	; 0xea
 8008dc8:	48aa      	ldr	r0, [pc, #680]	; (8009074 <_dtoa_r+0x2dc>)
 8008dca:	f001 fb53 	bl	800a474 <__assert_func>
 8008dce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008dd2:	6005      	str	r5, [r0, #0]
 8008dd4:	60c5      	str	r5, [r0, #12]
 8008dd6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008dd8:	6819      	ldr	r1, [r3, #0]
 8008dda:	b151      	cbz	r1, 8008df2 <_dtoa_r+0x5a>
 8008ddc:	685a      	ldr	r2, [r3, #4]
 8008dde:	604a      	str	r2, [r1, #4]
 8008de0:	2301      	movs	r3, #1
 8008de2:	4093      	lsls	r3, r2
 8008de4:	608b      	str	r3, [r1, #8]
 8008de6:	4630      	mov	r0, r6
 8008de8:	f000 fd9e 	bl	8009928 <_Bfree>
 8008dec:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008dee:	2200      	movs	r2, #0
 8008df0:	601a      	str	r2, [r3, #0]
 8008df2:	f1b9 0300 	subs.w	r3, r9, #0
 8008df6:	bfbb      	ittet	lt
 8008df8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008dfc:	9303      	strlt	r3, [sp, #12]
 8008dfe:	2300      	movge	r3, #0
 8008e00:	2201      	movlt	r2, #1
 8008e02:	bfac      	ite	ge
 8008e04:	6023      	strge	r3, [r4, #0]
 8008e06:	6022      	strlt	r2, [r4, #0]
 8008e08:	4b9b      	ldr	r3, [pc, #620]	; (8009078 <_dtoa_r+0x2e0>)
 8008e0a:	9c03      	ldr	r4, [sp, #12]
 8008e0c:	43a3      	bics	r3, r4
 8008e0e:	d11c      	bne.n	8008e4a <_dtoa_r+0xb2>
 8008e10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e12:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e16:	6013      	str	r3, [r2, #0]
 8008e18:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008e1c:	ea53 0308 	orrs.w	r3, r3, r8
 8008e20:	f000 84fd 	beq.w	800981e <_dtoa_r+0xa86>
 8008e24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e26:	b963      	cbnz	r3, 8008e42 <_dtoa_r+0xaa>
 8008e28:	4b94      	ldr	r3, [pc, #592]	; (800907c <_dtoa_r+0x2e4>)
 8008e2a:	e01f      	b.n	8008e6c <_dtoa_r+0xd4>
 8008e2c:	4b94      	ldr	r3, [pc, #592]	; (8009080 <_dtoa_r+0x2e8>)
 8008e2e:	9301      	str	r3, [sp, #4]
 8008e30:	3308      	adds	r3, #8
 8008e32:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008e34:	6013      	str	r3, [r2, #0]
 8008e36:	9801      	ldr	r0, [sp, #4]
 8008e38:	b011      	add	sp, #68	; 0x44
 8008e3a:	ecbd 8b02 	vpop	{d8}
 8008e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e42:	4b8e      	ldr	r3, [pc, #568]	; (800907c <_dtoa_r+0x2e4>)
 8008e44:	9301      	str	r3, [sp, #4]
 8008e46:	3303      	adds	r3, #3
 8008e48:	e7f3      	b.n	8008e32 <_dtoa_r+0x9a>
 8008e4a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008e4e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e56:	d10b      	bne.n	8008e70 <_dtoa_r+0xd8>
 8008e58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	6013      	str	r3, [r2, #0]
 8008e5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 84d9 	beq.w	8009818 <_dtoa_r+0xa80>
 8008e66:	4887      	ldr	r0, [pc, #540]	; (8009084 <_dtoa_r+0x2ec>)
 8008e68:	6018      	str	r0, [r3, #0]
 8008e6a:	1e43      	subs	r3, r0, #1
 8008e6c:	9301      	str	r3, [sp, #4]
 8008e6e:	e7e2      	b.n	8008e36 <_dtoa_r+0x9e>
 8008e70:	a90f      	add	r1, sp, #60	; 0x3c
 8008e72:	aa0e      	add	r2, sp, #56	; 0x38
 8008e74:	4630      	mov	r0, r6
 8008e76:	eeb0 0b48 	vmov.f64	d0, d8
 8008e7a:	f001 f83d 	bl	8009ef8 <__d2b>
 8008e7e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8008e82:	4605      	mov	r5, r0
 8008e84:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008e86:	2900      	cmp	r1, #0
 8008e88:	d046      	beq.n	8008f18 <_dtoa_r+0x180>
 8008e8a:	ee18 4a90 	vmov	r4, s17
 8008e8e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008e92:	ec53 2b18 	vmov	r2, r3, d8
 8008e96:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8008e9a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008e9e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008ea2:	2400      	movs	r4, #0
 8008ea4:	ec43 2b16 	vmov	d6, r2, r3
 8008ea8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8008eac:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009058 <_dtoa_r+0x2c0>
 8008eb0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008eb4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8009060 <_dtoa_r+0x2c8>
 8008eb8:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008ebc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009068 <_dtoa_r+0x2d0>
 8008ec0:	ee07 1a90 	vmov	s15, r1
 8008ec4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008ec8:	eeb0 7b46 	vmov.f64	d7, d6
 8008ecc:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008ed0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008ed4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008edc:	ee16 ba90 	vmov	fp, s13
 8008ee0:	940a      	str	r4, [sp, #40]	; 0x28
 8008ee2:	d508      	bpl.n	8008ef6 <_dtoa_r+0x15e>
 8008ee4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008ee8:	eeb4 6b47 	vcmp.f64	d6, d7
 8008eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ef0:	bf18      	it	ne
 8008ef2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008ef6:	f1bb 0f16 	cmp.w	fp, #22
 8008efa:	d82f      	bhi.n	8008f5c <_dtoa_r+0x1c4>
 8008efc:	4b62      	ldr	r3, [pc, #392]	; (8009088 <_dtoa_r+0x2f0>)
 8008efe:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008f02:	ed93 7b00 	vldr	d7, [r3]
 8008f06:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f0e:	d501      	bpl.n	8008f14 <_dtoa_r+0x17c>
 8008f10:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008f14:	2300      	movs	r3, #0
 8008f16:	e022      	b.n	8008f5e <_dtoa_r+0x1c6>
 8008f18:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008f1a:	4401      	add	r1, r0
 8008f1c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8008f20:	2b20      	cmp	r3, #32
 8008f22:	bfc1      	itttt	gt
 8008f24:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008f28:	fa04 f303 	lslgt.w	r3, r4, r3
 8008f2c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008f30:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008f34:	bfd6      	itet	le
 8008f36:	f1c3 0320 	rsble	r3, r3, #32
 8008f3a:	ea43 0808 	orrgt.w	r8, r3, r8
 8008f3e:	fa08 f803 	lslle.w	r8, r8, r3
 8008f42:	ee07 8a90 	vmov	s15, r8
 8008f46:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008f4a:	3901      	subs	r1, #1
 8008f4c:	ee17 4a90 	vmov	r4, s15
 8008f50:	ec53 2b17 	vmov	r2, r3, d7
 8008f54:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008f58:	2401      	movs	r4, #1
 8008f5a:	e7a3      	b.n	8008ea4 <_dtoa_r+0x10c>
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f60:	1a43      	subs	r3, r0, r1
 8008f62:	1e5a      	subs	r2, r3, #1
 8008f64:	bf45      	ittet	mi
 8008f66:	f1c3 0301 	rsbmi	r3, r3, #1
 8008f6a:	9304      	strmi	r3, [sp, #16]
 8008f6c:	2300      	movpl	r3, #0
 8008f6e:	2300      	movmi	r3, #0
 8008f70:	9205      	str	r2, [sp, #20]
 8008f72:	bf54      	ite	pl
 8008f74:	9304      	strpl	r3, [sp, #16]
 8008f76:	9305      	strmi	r3, [sp, #20]
 8008f78:	f1bb 0f00 	cmp.w	fp, #0
 8008f7c:	db18      	blt.n	8008fb0 <_dtoa_r+0x218>
 8008f7e:	9b05      	ldr	r3, [sp, #20]
 8008f80:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8008f84:	445b      	add	r3, fp
 8008f86:	9305      	str	r3, [sp, #20]
 8008f88:	2300      	movs	r3, #0
 8008f8a:	9a06      	ldr	r2, [sp, #24]
 8008f8c:	2a09      	cmp	r2, #9
 8008f8e:	d849      	bhi.n	8009024 <_dtoa_r+0x28c>
 8008f90:	2a05      	cmp	r2, #5
 8008f92:	bfc4      	itt	gt
 8008f94:	3a04      	subgt	r2, #4
 8008f96:	9206      	strgt	r2, [sp, #24]
 8008f98:	9a06      	ldr	r2, [sp, #24]
 8008f9a:	f1a2 0202 	sub.w	r2, r2, #2
 8008f9e:	bfcc      	ite	gt
 8008fa0:	2400      	movgt	r4, #0
 8008fa2:	2401      	movle	r4, #1
 8008fa4:	2a03      	cmp	r2, #3
 8008fa6:	d848      	bhi.n	800903a <_dtoa_r+0x2a2>
 8008fa8:	e8df f002 	tbb	[pc, r2]
 8008fac:	3a2c2e0b 	.word	0x3a2c2e0b
 8008fb0:	9b04      	ldr	r3, [sp, #16]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	eba3 030b 	sub.w	r3, r3, fp
 8008fb8:	9304      	str	r3, [sp, #16]
 8008fba:	9209      	str	r2, [sp, #36]	; 0x24
 8008fbc:	f1cb 0300 	rsb	r3, fp, #0
 8008fc0:	e7e3      	b.n	8008f8a <_dtoa_r+0x1f2>
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	9207      	str	r2, [sp, #28]
 8008fc6:	9a08      	ldr	r2, [sp, #32]
 8008fc8:	2a00      	cmp	r2, #0
 8008fca:	dc39      	bgt.n	8009040 <_dtoa_r+0x2a8>
 8008fcc:	f04f 0a01 	mov.w	sl, #1
 8008fd0:	46d1      	mov	r9, sl
 8008fd2:	4652      	mov	r2, sl
 8008fd4:	f8cd a020 	str.w	sl, [sp, #32]
 8008fd8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8008fda:	2100      	movs	r1, #0
 8008fdc:	6079      	str	r1, [r7, #4]
 8008fde:	2004      	movs	r0, #4
 8008fe0:	f100 0c14 	add.w	ip, r0, #20
 8008fe4:	4594      	cmp	ip, r2
 8008fe6:	6879      	ldr	r1, [r7, #4]
 8008fe8:	d92f      	bls.n	800904a <_dtoa_r+0x2b2>
 8008fea:	4630      	mov	r0, r6
 8008fec:	930d      	str	r3, [sp, #52]	; 0x34
 8008fee:	f000 fc5b 	bl	80098a8 <_Balloc>
 8008ff2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ff4:	9001      	str	r0, [sp, #4]
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	d149      	bne.n	8009090 <_dtoa_r+0x2f8>
 8008ffc:	4b23      	ldr	r3, [pc, #140]	; (800908c <_dtoa_r+0x2f4>)
 8008ffe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009002:	e6e1      	b.n	8008dc8 <_dtoa_r+0x30>
 8009004:	2201      	movs	r2, #1
 8009006:	e7dd      	b.n	8008fc4 <_dtoa_r+0x22c>
 8009008:	2200      	movs	r2, #0
 800900a:	9207      	str	r2, [sp, #28]
 800900c:	9a08      	ldr	r2, [sp, #32]
 800900e:	eb0b 0a02 	add.w	sl, fp, r2
 8009012:	f10a 0901 	add.w	r9, sl, #1
 8009016:	464a      	mov	r2, r9
 8009018:	2a01      	cmp	r2, #1
 800901a:	bfb8      	it	lt
 800901c:	2201      	movlt	r2, #1
 800901e:	e7db      	b.n	8008fd8 <_dtoa_r+0x240>
 8009020:	2201      	movs	r2, #1
 8009022:	e7f2      	b.n	800900a <_dtoa_r+0x272>
 8009024:	2401      	movs	r4, #1
 8009026:	2200      	movs	r2, #0
 8009028:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800902c:	f04f 3aff 	mov.w	sl, #4294967295
 8009030:	2100      	movs	r1, #0
 8009032:	46d1      	mov	r9, sl
 8009034:	2212      	movs	r2, #18
 8009036:	9108      	str	r1, [sp, #32]
 8009038:	e7ce      	b.n	8008fd8 <_dtoa_r+0x240>
 800903a:	2201      	movs	r2, #1
 800903c:	9207      	str	r2, [sp, #28]
 800903e:	e7f5      	b.n	800902c <_dtoa_r+0x294>
 8009040:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009044:	46d1      	mov	r9, sl
 8009046:	4652      	mov	r2, sl
 8009048:	e7c6      	b.n	8008fd8 <_dtoa_r+0x240>
 800904a:	3101      	adds	r1, #1
 800904c:	6079      	str	r1, [r7, #4]
 800904e:	0040      	lsls	r0, r0, #1
 8009050:	e7c6      	b.n	8008fe0 <_dtoa_r+0x248>
 8009052:	bf00      	nop
 8009054:	f3af 8000 	nop.w
 8009058:	636f4361 	.word	0x636f4361
 800905c:	3fd287a7 	.word	0x3fd287a7
 8009060:	8b60c8b3 	.word	0x8b60c8b3
 8009064:	3fc68a28 	.word	0x3fc68a28
 8009068:	509f79fb 	.word	0x509f79fb
 800906c:	3fd34413 	.word	0x3fd34413
 8009070:	0800b302 	.word	0x0800b302
 8009074:	0800b319 	.word	0x0800b319
 8009078:	7ff00000 	.word	0x7ff00000
 800907c:	0800b2fe 	.word	0x0800b2fe
 8009080:	0800b2f5 	.word	0x0800b2f5
 8009084:	0800b1d1 	.word	0x0800b1d1
 8009088:	0800b410 	.word	0x0800b410
 800908c:	0800b374 	.word	0x0800b374
 8009090:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009092:	9901      	ldr	r1, [sp, #4]
 8009094:	6011      	str	r1, [r2, #0]
 8009096:	f1b9 0f0e 	cmp.w	r9, #14
 800909a:	d86c      	bhi.n	8009176 <_dtoa_r+0x3de>
 800909c:	2c00      	cmp	r4, #0
 800909e:	d06a      	beq.n	8009176 <_dtoa_r+0x3de>
 80090a0:	f1bb 0f00 	cmp.w	fp, #0
 80090a4:	f340 80a0 	ble.w	80091e8 <_dtoa_r+0x450>
 80090a8:	49c1      	ldr	r1, [pc, #772]	; (80093b0 <_dtoa_r+0x618>)
 80090aa:	f00b 020f 	and.w	r2, fp, #15
 80090ae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80090b2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80090b6:	ed92 7b00 	vldr	d7, [r2]
 80090ba:	ea4f 112b 	mov.w	r1, fp, asr #4
 80090be:	f000 8087 	beq.w	80091d0 <_dtoa_r+0x438>
 80090c2:	4abc      	ldr	r2, [pc, #752]	; (80093b4 <_dtoa_r+0x61c>)
 80090c4:	ed92 6b08 	vldr	d6, [r2, #32]
 80090c8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80090cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80090d0:	f001 010f 	and.w	r1, r1, #15
 80090d4:	2203      	movs	r2, #3
 80090d6:	48b7      	ldr	r0, [pc, #732]	; (80093b4 <_dtoa_r+0x61c>)
 80090d8:	2900      	cmp	r1, #0
 80090da:	d17b      	bne.n	80091d4 <_dtoa_r+0x43c>
 80090dc:	ed9d 6b02 	vldr	d6, [sp, #8]
 80090e0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80090e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80090e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090ea:	2900      	cmp	r1, #0
 80090ec:	f000 80a2 	beq.w	8009234 <_dtoa_r+0x49c>
 80090f0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80090f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80090f8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80090fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009100:	f140 8098 	bpl.w	8009234 <_dtoa_r+0x49c>
 8009104:	f1b9 0f00 	cmp.w	r9, #0
 8009108:	f000 8094 	beq.w	8009234 <_dtoa_r+0x49c>
 800910c:	f1ba 0f00 	cmp.w	sl, #0
 8009110:	dd2f      	ble.n	8009172 <_dtoa_r+0x3da>
 8009112:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009116:	ee27 7b06 	vmul.f64	d7, d7, d6
 800911a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800911e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009122:	3201      	adds	r2, #1
 8009124:	4650      	mov	r0, sl
 8009126:	ed9d 6b02 	vldr	d6, [sp, #8]
 800912a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800912e:	ee07 2a90 	vmov	s15, r2
 8009132:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009136:	eea7 5b06 	vfma.f64	d5, d7, d6
 800913a:	ee15 4a90 	vmov	r4, s11
 800913e:	ec52 1b15 	vmov	r1, r2, d5
 8009142:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009146:	2800      	cmp	r0, #0
 8009148:	d177      	bne.n	800923a <_dtoa_r+0x4a2>
 800914a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800914e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009152:	ec42 1b17 	vmov	d7, r1, r2
 8009156:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800915a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800915e:	f300 8263 	bgt.w	8009628 <_dtoa_r+0x890>
 8009162:	eeb1 7b47 	vneg.f64	d7, d7
 8009166:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800916a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800916e:	f100 8258 	bmi.w	8009622 <_dtoa_r+0x88a>
 8009172:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009176:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009178:	2a00      	cmp	r2, #0
 800917a:	f2c0 811d 	blt.w	80093b8 <_dtoa_r+0x620>
 800917e:	f1bb 0f0e 	cmp.w	fp, #14
 8009182:	f300 8119 	bgt.w	80093b8 <_dtoa_r+0x620>
 8009186:	4b8a      	ldr	r3, [pc, #552]	; (80093b0 <_dtoa_r+0x618>)
 8009188:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800918c:	ed93 6b00 	vldr	d6, [r3]
 8009190:	9b08      	ldr	r3, [sp, #32]
 8009192:	2b00      	cmp	r3, #0
 8009194:	f280 80b7 	bge.w	8009306 <_dtoa_r+0x56e>
 8009198:	f1b9 0f00 	cmp.w	r9, #0
 800919c:	f300 80b3 	bgt.w	8009306 <_dtoa_r+0x56e>
 80091a0:	f040 823f 	bne.w	8009622 <_dtoa_r+0x88a>
 80091a4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80091a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80091ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80091b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80091b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091b8:	464c      	mov	r4, r9
 80091ba:	464f      	mov	r7, r9
 80091bc:	f280 8215 	bge.w	80095ea <_dtoa_r+0x852>
 80091c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80091c4:	2331      	movs	r3, #49	; 0x31
 80091c6:	f808 3b01 	strb.w	r3, [r8], #1
 80091ca:	f10b 0b01 	add.w	fp, fp, #1
 80091ce:	e211      	b.n	80095f4 <_dtoa_r+0x85c>
 80091d0:	2202      	movs	r2, #2
 80091d2:	e780      	b.n	80090d6 <_dtoa_r+0x33e>
 80091d4:	07cc      	lsls	r4, r1, #31
 80091d6:	d504      	bpl.n	80091e2 <_dtoa_r+0x44a>
 80091d8:	ed90 6b00 	vldr	d6, [r0]
 80091dc:	3201      	adds	r2, #1
 80091de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80091e2:	1049      	asrs	r1, r1, #1
 80091e4:	3008      	adds	r0, #8
 80091e6:	e777      	b.n	80090d8 <_dtoa_r+0x340>
 80091e8:	d022      	beq.n	8009230 <_dtoa_r+0x498>
 80091ea:	f1cb 0100 	rsb	r1, fp, #0
 80091ee:	4a70      	ldr	r2, [pc, #448]	; (80093b0 <_dtoa_r+0x618>)
 80091f0:	f001 000f 	and.w	r0, r1, #15
 80091f4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80091f8:	ed92 7b00 	vldr	d7, [r2]
 80091fc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009200:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009204:	486b      	ldr	r0, [pc, #428]	; (80093b4 <_dtoa_r+0x61c>)
 8009206:	1109      	asrs	r1, r1, #4
 8009208:	2400      	movs	r4, #0
 800920a:	2202      	movs	r2, #2
 800920c:	b929      	cbnz	r1, 800921a <_dtoa_r+0x482>
 800920e:	2c00      	cmp	r4, #0
 8009210:	f43f af6a 	beq.w	80090e8 <_dtoa_r+0x350>
 8009214:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009218:	e766      	b.n	80090e8 <_dtoa_r+0x350>
 800921a:	07cf      	lsls	r7, r1, #31
 800921c:	d505      	bpl.n	800922a <_dtoa_r+0x492>
 800921e:	ed90 6b00 	vldr	d6, [r0]
 8009222:	3201      	adds	r2, #1
 8009224:	2401      	movs	r4, #1
 8009226:	ee27 7b06 	vmul.f64	d7, d7, d6
 800922a:	1049      	asrs	r1, r1, #1
 800922c:	3008      	adds	r0, #8
 800922e:	e7ed      	b.n	800920c <_dtoa_r+0x474>
 8009230:	2202      	movs	r2, #2
 8009232:	e759      	b.n	80090e8 <_dtoa_r+0x350>
 8009234:	465f      	mov	r7, fp
 8009236:	4648      	mov	r0, r9
 8009238:	e775      	b.n	8009126 <_dtoa_r+0x38e>
 800923a:	ec42 1b17 	vmov	d7, r1, r2
 800923e:	4a5c      	ldr	r2, [pc, #368]	; (80093b0 <_dtoa_r+0x618>)
 8009240:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009244:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009248:	9a01      	ldr	r2, [sp, #4]
 800924a:	1814      	adds	r4, r2, r0
 800924c:	9a07      	ldr	r2, [sp, #28]
 800924e:	b352      	cbz	r2, 80092a6 <_dtoa_r+0x50e>
 8009250:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009254:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009258:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800925c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009260:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009264:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009268:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800926c:	ee14 2a90 	vmov	r2, s9
 8009270:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009274:	3230      	adds	r2, #48	; 0x30
 8009276:	ee36 6b45 	vsub.f64	d6, d6, d5
 800927a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800927e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009282:	f808 2b01 	strb.w	r2, [r8], #1
 8009286:	d439      	bmi.n	80092fc <_dtoa_r+0x564>
 8009288:	ee32 5b46 	vsub.f64	d5, d2, d6
 800928c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009294:	d472      	bmi.n	800937c <_dtoa_r+0x5e4>
 8009296:	45a0      	cmp	r8, r4
 8009298:	f43f af6b 	beq.w	8009172 <_dtoa_r+0x3da>
 800929c:	ee27 7b03 	vmul.f64	d7, d7, d3
 80092a0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80092a4:	e7e0      	b.n	8009268 <_dtoa_r+0x4d0>
 80092a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80092aa:	ee27 7b04 	vmul.f64	d7, d7, d4
 80092ae:	4621      	mov	r1, r4
 80092b0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80092b4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80092b8:	ee14 2a90 	vmov	r2, s9
 80092bc:	3230      	adds	r2, #48	; 0x30
 80092be:	f808 2b01 	strb.w	r2, [r8], #1
 80092c2:	45a0      	cmp	r8, r4
 80092c4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80092c8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80092cc:	d118      	bne.n	8009300 <_dtoa_r+0x568>
 80092ce:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80092d2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80092d6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80092da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092de:	dc4d      	bgt.n	800937c <_dtoa_r+0x5e4>
 80092e0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80092e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80092e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ec:	f57f af41 	bpl.w	8009172 <_dtoa_r+0x3da>
 80092f0:	4688      	mov	r8, r1
 80092f2:	3901      	subs	r1, #1
 80092f4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80092f8:	2b30      	cmp	r3, #48	; 0x30
 80092fa:	d0f9      	beq.n	80092f0 <_dtoa_r+0x558>
 80092fc:	46bb      	mov	fp, r7
 80092fe:	e02a      	b.n	8009356 <_dtoa_r+0x5be>
 8009300:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009304:	e7d6      	b.n	80092b4 <_dtoa_r+0x51c>
 8009306:	ed9d 7b02 	vldr	d7, [sp, #8]
 800930a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800930e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009312:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009316:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800931a:	ee15 3a10 	vmov	r3, s10
 800931e:	3330      	adds	r3, #48	; 0x30
 8009320:	f808 3b01 	strb.w	r3, [r8], #1
 8009324:	9b01      	ldr	r3, [sp, #4]
 8009326:	eba8 0303 	sub.w	r3, r8, r3
 800932a:	4599      	cmp	r9, r3
 800932c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009330:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009334:	d133      	bne.n	800939e <_dtoa_r+0x606>
 8009336:	ee37 7b07 	vadd.f64	d7, d7, d7
 800933a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800933e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009342:	dc1a      	bgt.n	800937a <_dtoa_r+0x5e2>
 8009344:	eeb4 7b46 	vcmp.f64	d7, d6
 8009348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800934c:	d103      	bne.n	8009356 <_dtoa_r+0x5be>
 800934e:	ee15 3a10 	vmov	r3, s10
 8009352:	07d9      	lsls	r1, r3, #31
 8009354:	d411      	bmi.n	800937a <_dtoa_r+0x5e2>
 8009356:	4629      	mov	r1, r5
 8009358:	4630      	mov	r0, r6
 800935a:	f000 fae5 	bl	8009928 <_Bfree>
 800935e:	2300      	movs	r3, #0
 8009360:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009362:	f888 3000 	strb.w	r3, [r8]
 8009366:	f10b 0301 	add.w	r3, fp, #1
 800936a:	6013      	str	r3, [r2, #0]
 800936c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800936e:	2b00      	cmp	r3, #0
 8009370:	f43f ad61 	beq.w	8008e36 <_dtoa_r+0x9e>
 8009374:	f8c3 8000 	str.w	r8, [r3]
 8009378:	e55d      	b.n	8008e36 <_dtoa_r+0x9e>
 800937a:	465f      	mov	r7, fp
 800937c:	4643      	mov	r3, r8
 800937e:	4698      	mov	r8, r3
 8009380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009384:	2a39      	cmp	r2, #57	; 0x39
 8009386:	d106      	bne.n	8009396 <_dtoa_r+0x5fe>
 8009388:	9a01      	ldr	r2, [sp, #4]
 800938a:	429a      	cmp	r2, r3
 800938c:	d1f7      	bne.n	800937e <_dtoa_r+0x5e6>
 800938e:	9901      	ldr	r1, [sp, #4]
 8009390:	2230      	movs	r2, #48	; 0x30
 8009392:	3701      	adds	r7, #1
 8009394:	700a      	strb	r2, [r1, #0]
 8009396:	781a      	ldrb	r2, [r3, #0]
 8009398:	3201      	adds	r2, #1
 800939a:	701a      	strb	r2, [r3, #0]
 800939c:	e7ae      	b.n	80092fc <_dtoa_r+0x564>
 800939e:	ee27 7b04 	vmul.f64	d7, d7, d4
 80093a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80093a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093aa:	d1b2      	bne.n	8009312 <_dtoa_r+0x57a>
 80093ac:	e7d3      	b.n	8009356 <_dtoa_r+0x5be>
 80093ae:	bf00      	nop
 80093b0:	0800b410 	.word	0x0800b410
 80093b4:	0800b3e8 	.word	0x0800b3e8
 80093b8:	9907      	ldr	r1, [sp, #28]
 80093ba:	2900      	cmp	r1, #0
 80093bc:	f000 80d0 	beq.w	8009560 <_dtoa_r+0x7c8>
 80093c0:	9906      	ldr	r1, [sp, #24]
 80093c2:	2901      	cmp	r1, #1
 80093c4:	f300 80b4 	bgt.w	8009530 <_dtoa_r+0x798>
 80093c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80093ca:	2900      	cmp	r1, #0
 80093cc:	f000 80ac 	beq.w	8009528 <_dtoa_r+0x790>
 80093d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80093d4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80093d8:	461c      	mov	r4, r3
 80093da:	930a      	str	r3, [sp, #40]	; 0x28
 80093dc:	9b04      	ldr	r3, [sp, #16]
 80093de:	4413      	add	r3, r2
 80093e0:	9304      	str	r3, [sp, #16]
 80093e2:	9b05      	ldr	r3, [sp, #20]
 80093e4:	2101      	movs	r1, #1
 80093e6:	4413      	add	r3, r2
 80093e8:	4630      	mov	r0, r6
 80093ea:	9305      	str	r3, [sp, #20]
 80093ec:	f000 fb54 	bl	8009a98 <__i2b>
 80093f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093f2:	4607      	mov	r7, r0
 80093f4:	f1b8 0f00 	cmp.w	r8, #0
 80093f8:	dd0d      	ble.n	8009416 <_dtoa_r+0x67e>
 80093fa:	9a05      	ldr	r2, [sp, #20]
 80093fc:	2a00      	cmp	r2, #0
 80093fe:	dd0a      	ble.n	8009416 <_dtoa_r+0x67e>
 8009400:	4542      	cmp	r2, r8
 8009402:	9904      	ldr	r1, [sp, #16]
 8009404:	bfa8      	it	ge
 8009406:	4642      	movge	r2, r8
 8009408:	1a89      	subs	r1, r1, r2
 800940a:	9104      	str	r1, [sp, #16]
 800940c:	9905      	ldr	r1, [sp, #20]
 800940e:	eba8 0802 	sub.w	r8, r8, r2
 8009412:	1a8a      	subs	r2, r1, r2
 8009414:	9205      	str	r2, [sp, #20]
 8009416:	b303      	cbz	r3, 800945a <_dtoa_r+0x6c2>
 8009418:	9a07      	ldr	r2, [sp, #28]
 800941a:	2a00      	cmp	r2, #0
 800941c:	f000 80a5 	beq.w	800956a <_dtoa_r+0x7d2>
 8009420:	2c00      	cmp	r4, #0
 8009422:	dd13      	ble.n	800944c <_dtoa_r+0x6b4>
 8009424:	4639      	mov	r1, r7
 8009426:	4622      	mov	r2, r4
 8009428:	4630      	mov	r0, r6
 800942a:	930d      	str	r3, [sp, #52]	; 0x34
 800942c:	f000 fbf4 	bl	8009c18 <__pow5mult>
 8009430:	462a      	mov	r2, r5
 8009432:	4601      	mov	r1, r0
 8009434:	4607      	mov	r7, r0
 8009436:	4630      	mov	r0, r6
 8009438:	f000 fb44 	bl	8009ac4 <__multiply>
 800943c:	4629      	mov	r1, r5
 800943e:	900a      	str	r0, [sp, #40]	; 0x28
 8009440:	4630      	mov	r0, r6
 8009442:	f000 fa71 	bl	8009928 <_Bfree>
 8009446:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009448:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800944a:	4615      	mov	r5, r2
 800944c:	1b1a      	subs	r2, r3, r4
 800944e:	d004      	beq.n	800945a <_dtoa_r+0x6c2>
 8009450:	4629      	mov	r1, r5
 8009452:	4630      	mov	r0, r6
 8009454:	f000 fbe0 	bl	8009c18 <__pow5mult>
 8009458:	4605      	mov	r5, r0
 800945a:	2101      	movs	r1, #1
 800945c:	4630      	mov	r0, r6
 800945e:	f000 fb1b 	bl	8009a98 <__i2b>
 8009462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009464:	2b00      	cmp	r3, #0
 8009466:	4604      	mov	r4, r0
 8009468:	f340 8081 	ble.w	800956e <_dtoa_r+0x7d6>
 800946c:	461a      	mov	r2, r3
 800946e:	4601      	mov	r1, r0
 8009470:	4630      	mov	r0, r6
 8009472:	f000 fbd1 	bl	8009c18 <__pow5mult>
 8009476:	9b06      	ldr	r3, [sp, #24]
 8009478:	2b01      	cmp	r3, #1
 800947a:	4604      	mov	r4, r0
 800947c:	dd7a      	ble.n	8009574 <_dtoa_r+0x7dc>
 800947e:	2300      	movs	r3, #0
 8009480:	930a      	str	r3, [sp, #40]	; 0x28
 8009482:	6922      	ldr	r2, [r4, #16]
 8009484:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009488:	6910      	ldr	r0, [r2, #16]
 800948a:	f000 fab5 	bl	80099f8 <__hi0bits>
 800948e:	f1c0 0020 	rsb	r0, r0, #32
 8009492:	9b05      	ldr	r3, [sp, #20]
 8009494:	4418      	add	r0, r3
 8009496:	f010 001f 	ands.w	r0, r0, #31
 800949a:	f000 808c 	beq.w	80095b6 <_dtoa_r+0x81e>
 800949e:	f1c0 0220 	rsb	r2, r0, #32
 80094a2:	2a04      	cmp	r2, #4
 80094a4:	f340 8085 	ble.w	80095b2 <_dtoa_r+0x81a>
 80094a8:	f1c0 001c 	rsb	r0, r0, #28
 80094ac:	9b04      	ldr	r3, [sp, #16]
 80094ae:	4403      	add	r3, r0
 80094b0:	9304      	str	r3, [sp, #16]
 80094b2:	9b05      	ldr	r3, [sp, #20]
 80094b4:	4403      	add	r3, r0
 80094b6:	4480      	add	r8, r0
 80094b8:	9305      	str	r3, [sp, #20]
 80094ba:	9b04      	ldr	r3, [sp, #16]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	dd05      	ble.n	80094cc <_dtoa_r+0x734>
 80094c0:	4629      	mov	r1, r5
 80094c2:	461a      	mov	r2, r3
 80094c4:	4630      	mov	r0, r6
 80094c6:	f000 fc01 	bl	8009ccc <__lshift>
 80094ca:	4605      	mov	r5, r0
 80094cc:	9b05      	ldr	r3, [sp, #20]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	dd05      	ble.n	80094de <_dtoa_r+0x746>
 80094d2:	4621      	mov	r1, r4
 80094d4:	461a      	mov	r2, r3
 80094d6:	4630      	mov	r0, r6
 80094d8:	f000 fbf8 	bl	8009ccc <__lshift>
 80094dc:	4604      	mov	r4, r0
 80094de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d06a      	beq.n	80095ba <_dtoa_r+0x822>
 80094e4:	4621      	mov	r1, r4
 80094e6:	4628      	mov	r0, r5
 80094e8:	f000 fc60 	bl	8009dac <__mcmp>
 80094ec:	2800      	cmp	r0, #0
 80094ee:	da64      	bge.n	80095ba <_dtoa_r+0x822>
 80094f0:	2300      	movs	r3, #0
 80094f2:	4629      	mov	r1, r5
 80094f4:	220a      	movs	r2, #10
 80094f6:	4630      	mov	r0, r6
 80094f8:	f000 fa38 	bl	800996c <__multadd>
 80094fc:	9b07      	ldr	r3, [sp, #28]
 80094fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009502:	4605      	mov	r5, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	f000 8191 	beq.w	800982c <_dtoa_r+0xa94>
 800950a:	4639      	mov	r1, r7
 800950c:	2300      	movs	r3, #0
 800950e:	220a      	movs	r2, #10
 8009510:	4630      	mov	r0, r6
 8009512:	f000 fa2b 	bl	800996c <__multadd>
 8009516:	f1ba 0f00 	cmp.w	sl, #0
 800951a:	4607      	mov	r7, r0
 800951c:	f300 808d 	bgt.w	800963a <_dtoa_r+0x8a2>
 8009520:	9b06      	ldr	r3, [sp, #24]
 8009522:	2b02      	cmp	r3, #2
 8009524:	dc50      	bgt.n	80095c8 <_dtoa_r+0x830>
 8009526:	e088      	b.n	800963a <_dtoa_r+0x8a2>
 8009528:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800952a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800952e:	e751      	b.n	80093d4 <_dtoa_r+0x63c>
 8009530:	f109 34ff 	add.w	r4, r9, #4294967295
 8009534:	42a3      	cmp	r3, r4
 8009536:	bfbf      	itttt	lt
 8009538:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800953a:	1ae3      	sublt	r3, r4, r3
 800953c:	18d2      	addlt	r2, r2, r3
 800953e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009540:	bfb6      	itet	lt
 8009542:	4623      	movlt	r3, r4
 8009544:	1b1c      	subge	r4, r3, r4
 8009546:	2400      	movlt	r4, #0
 8009548:	f1b9 0f00 	cmp.w	r9, #0
 800954c:	bfb5      	itete	lt
 800954e:	9a04      	ldrlt	r2, [sp, #16]
 8009550:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009554:	eba2 0809 	sublt.w	r8, r2, r9
 8009558:	464a      	movge	r2, r9
 800955a:	bfb8      	it	lt
 800955c:	2200      	movlt	r2, #0
 800955e:	e73c      	b.n	80093da <_dtoa_r+0x642>
 8009560:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009564:	9f07      	ldr	r7, [sp, #28]
 8009566:	461c      	mov	r4, r3
 8009568:	e744      	b.n	80093f4 <_dtoa_r+0x65c>
 800956a:	461a      	mov	r2, r3
 800956c:	e770      	b.n	8009450 <_dtoa_r+0x6b8>
 800956e:	9b06      	ldr	r3, [sp, #24]
 8009570:	2b01      	cmp	r3, #1
 8009572:	dc18      	bgt.n	80095a6 <_dtoa_r+0x80e>
 8009574:	9b02      	ldr	r3, [sp, #8]
 8009576:	b9b3      	cbnz	r3, 80095a6 <_dtoa_r+0x80e>
 8009578:	9b03      	ldr	r3, [sp, #12]
 800957a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800957e:	b9a2      	cbnz	r2, 80095aa <_dtoa_r+0x812>
 8009580:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009584:	0d12      	lsrs	r2, r2, #20
 8009586:	0512      	lsls	r2, r2, #20
 8009588:	b18a      	cbz	r2, 80095ae <_dtoa_r+0x816>
 800958a:	9b04      	ldr	r3, [sp, #16]
 800958c:	3301      	adds	r3, #1
 800958e:	9304      	str	r3, [sp, #16]
 8009590:	9b05      	ldr	r3, [sp, #20]
 8009592:	3301      	adds	r3, #1
 8009594:	9305      	str	r3, [sp, #20]
 8009596:	2301      	movs	r3, #1
 8009598:	930a      	str	r3, [sp, #40]	; 0x28
 800959a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800959c:	2b00      	cmp	r3, #0
 800959e:	f47f af70 	bne.w	8009482 <_dtoa_r+0x6ea>
 80095a2:	2001      	movs	r0, #1
 80095a4:	e775      	b.n	8009492 <_dtoa_r+0x6fa>
 80095a6:	2300      	movs	r3, #0
 80095a8:	e7f6      	b.n	8009598 <_dtoa_r+0x800>
 80095aa:	9b02      	ldr	r3, [sp, #8]
 80095ac:	e7f4      	b.n	8009598 <_dtoa_r+0x800>
 80095ae:	920a      	str	r2, [sp, #40]	; 0x28
 80095b0:	e7f3      	b.n	800959a <_dtoa_r+0x802>
 80095b2:	d082      	beq.n	80094ba <_dtoa_r+0x722>
 80095b4:	4610      	mov	r0, r2
 80095b6:	301c      	adds	r0, #28
 80095b8:	e778      	b.n	80094ac <_dtoa_r+0x714>
 80095ba:	f1b9 0f00 	cmp.w	r9, #0
 80095be:	dc37      	bgt.n	8009630 <_dtoa_r+0x898>
 80095c0:	9b06      	ldr	r3, [sp, #24]
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	dd34      	ble.n	8009630 <_dtoa_r+0x898>
 80095c6:	46ca      	mov	sl, r9
 80095c8:	f1ba 0f00 	cmp.w	sl, #0
 80095cc:	d10d      	bne.n	80095ea <_dtoa_r+0x852>
 80095ce:	4621      	mov	r1, r4
 80095d0:	4653      	mov	r3, sl
 80095d2:	2205      	movs	r2, #5
 80095d4:	4630      	mov	r0, r6
 80095d6:	f000 f9c9 	bl	800996c <__multadd>
 80095da:	4601      	mov	r1, r0
 80095dc:	4604      	mov	r4, r0
 80095de:	4628      	mov	r0, r5
 80095e0:	f000 fbe4 	bl	8009dac <__mcmp>
 80095e4:	2800      	cmp	r0, #0
 80095e6:	f73f adeb 	bgt.w	80091c0 <_dtoa_r+0x428>
 80095ea:	9b08      	ldr	r3, [sp, #32]
 80095ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80095f0:	ea6f 0b03 	mvn.w	fp, r3
 80095f4:	f04f 0900 	mov.w	r9, #0
 80095f8:	4621      	mov	r1, r4
 80095fa:	4630      	mov	r0, r6
 80095fc:	f000 f994 	bl	8009928 <_Bfree>
 8009600:	2f00      	cmp	r7, #0
 8009602:	f43f aea8 	beq.w	8009356 <_dtoa_r+0x5be>
 8009606:	f1b9 0f00 	cmp.w	r9, #0
 800960a:	d005      	beq.n	8009618 <_dtoa_r+0x880>
 800960c:	45b9      	cmp	r9, r7
 800960e:	d003      	beq.n	8009618 <_dtoa_r+0x880>
 8009610:	4649      	mov	r1, r9
 8009612:	4630      	mov	r0, r6
 8009614:	f000 f988 	bl	8009928 <_Bfree>
 8009618:	4639      	mov	r1, r7
 800961a:	4630      	mov	r0, r6
 800961c:	f000 f984 	bl	8009928 <_Bfree>
 8009620:	e699      	b.n	8009356 <_dtoa_r+0x5be>
 8009622:	2400      	movs	r4, #0
 8009624:	4627      	mov	r7, r4
 8009626:	e7e0      	b.n	80095ea <_dtoa_r+0x852>
 8009628:	46bb      	mov	fp, r7
 800962a:	4604      	mov	r4, r0
 800962c:	4607      	mov	r7, r0
 800962e:	e5c7      	b.n	80091c0 <_dtoa_r+0x428>
 8009630:	9b07      	ldr	r3, [sp, #28]
 8009632:	46ca      	mov	sl, r9
 8009634:	2b00      	cmp	r3, #0
 8009636:	f000 8100 	beq.w	800983a <_dtoa_r+0xaa2>
 800963a:	f1b8 0f00 	cmp.w	r8, #0
 800963e:	dd05      	ble.n	800964c <_dtoa_r+0x8b4>
 8009640:	4639      	mov	r1, r7
 8009642:	4642      	mov	r2, r8
 8009644:	4630      	mov	r0, r6
 8009646:	f000 fb41 	bl	8009ccc <__lshift>
 800964a:	4607      	mov	r7, r0
 800964c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800964e:	2b00      	cmp	r3, #0
 8009650:	d05d      	beq.n	800970e <_dtoa_r+0x976>
 8009652:	6879      	ldr	r1, [r7, #4]
 8009654:	4630      	mov	r0, r6
 8009656:	f000 f927 	bl	80098a8 <_Balloc>
 800965a:	4680      	mov	r8, r0
 800965c:	b928      	cbnz	r0, 800966a <_dtoa_r+0x8d2>
 800965e:	4b82      	ldr	r3, [pc, #520]	; (8009868 <_dtoa_r+0xad0>)
 8009660:	4602      	mov	r2, r0
 8009662:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009666:	f7ff bbaf 	b.w	8008dc8 <_dtoa_r+0x30>
 800966a:	693a      	ldr	r2, [r7, #16]
 800966c:	3202      	adds	r2, #2
 800966e:	0092      	lsls	r2, r2, #2
 8009670:	f107 010c 	add.w	r1, r7, #12
 8009674:	300c      	adds	r0, #12
 8009676:	f000 f909 	bl	800988c <memcpy>
 800967a:	2201      	movs	r2, #1
 800967c:	4641      	mov	r1, r8
 800967e:	4630      	mov	r0, r6
 8009680:	f000 fb24 	bl	8009ccc <__lshift>
 8009684:	9b01      	ldr	r3, [sp, #4]
 8009686:	3301      	adds	r3, #1
 8009688:	9304      	str	r3, [sp, #16]
 800968a:	9b01      	ldr	r3, [sp, #4]
 800968c:	4453      	add	r3, sl
 800968e:	9308      	str	r3, [sp, #32]
 8009690:	9b02      	ldr	r3, [sp, #8]
 8009692:	f003 0301 	and.w	r3, r3, #1
 8009696:	46b9      	mov	r9, r7
 8009698:	9307      	str	r3, [sp, #28]
 800969a:	4607      	mov	r7, r0
 800969c:	9b04      	ldr	r3, [sp, #16]
 800969e:	4621      	mov	r1, r4
 80096a0:	3b01      	subs	r3, #1
 80096a2:	4628      	mov	r0, r5
 80096a4:	9302      	str	r3, [sp, #8]
 80096a6:	f7ff fae9 	bl	8008c7c <quorem>
 80096aa:	4603      	mov	r3, r0
 80096ac:	3330      	adds	r3, #48	; 0x30
 80096ae:	9005      	str	r0, [sp, #20]
 80096b0:	4649      	mov	r1, r9
 80096b2:	4628      	mov	r0, r5
 80096b4:	9309      	str	r3, [sp, #36]	; 0x24
 80096b6:	f000 fb79 	bl	8009dac <__mcmp>
 80096ba:	463a      	mov	r2, r7
 80096bc:	4682      	mov	sl, r0
 80096be:	4621      	mov	r1, r4
 80096c0:	4630      	mov	r0, r6
 80096c2:	f000 fb8f 	bl	8009de4 <__mdiff>
 80096c6:	68c2      	ldr	r2, [r0, #12]
 80096c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096ca:	4680      	mov	r8, r0
 80096cc:	bb0a      	cbnz	r2, 8009712 <_dtoa_r+0x97a>
 80096ce:	4601      	mov	r1, r0
 80096d0:	4628      	mov	r0, r5
 80096d2:	f000 fb6b 	bl	8009dac <__mcmp>
 80096d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d8:	4602      	mov	r2, r0
 80096da:	4641      	mov	r1, r8
 80096dc:	4630      	mov	r0, r6
 80096de:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80096e2:	f000 f921 	bl	8009928 <_Bfree>
 80096e6:	9b06      	ldr	r3, [sp, #24]
 80096e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096ea:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80096ee:	ea43 0102 	orr.w	r1, r3, r2
 80096f2:	9b07      	ldr	r3, [sp, #28]
 80096f4:	430b      	orrs	r3, r1
 80096f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096f8:	d10d      	bne.n	8009716 <_dtoa_r+0x97e>
 80096fa:	2b39      	cmp	r3, #57	; 0x39
 80096fc:	d029      	beq.n	8009752 <_dtoa_r+0x9ba>
 80096fe:	f1ba 0f00 	cmp.w	sl, #0
 8009702:	dd01      	ble.n	8009708 <_dtoa_r+0x970>
 8009704:	9b05      	ldr	r3, [sp, #20]
 8009706:	3331      	adds	r3, #49	; 0x31
 8009708:	9a02      	ldr	r2, [sp, #8]
 800970a:	7013      	strb	r3, [r2, #0]
 800970c:	e774      	b.n	80095f8 <_dtoa_r+0x860>
 800970e:	4638      	mov	r0, r7
 8009710:	e7b8      	b.n	8009684 <_dtoa_r+0x8ec>
 8009712:	2201      	movs	r2, #1
 8009714:	e7e1      	b.n	80096da <_dtoa_r+0x942>
 8009716:	f1ba 0f00 	cmp.w	sl, #0
 800971a:	db06      	blt.n	800972a <_dtoa_r+0x992>
 800971c:	9906      	ldr	r1, [sp, #24]
 800971e:	ea41 0a0a 	orr.w	sl, r1, sl
 8009722:	9907      	ldr	r1, [sp, #28]
 8009724:	ea5a 0101 	orrs.w	r1, sl, r1
 8009728:	d120      	bne.n	800976c <_dtoa_r+0x9d4>
 800972a:	2a00      	cmp	r2, #0
 800972c:	ddec      	ble.n	8009708 <_dtoa_r+0x970>
 800972e:	4629      	mov	r1, r5
 8009730:	2201      	movs	r2, #1
 8009732:	4630      	mov	r0, r6
 8009734:	9304      	str	r3, [sp, #16]
 8009736:	f000 fac9 	bl	8009ccc <__lshift>
 800973a:	4621      	mov	r1, r4
 800973c:	4605      	mov	r5, r0
 800973e:	f000 fb35 	bl	8009dac <__mcmp>
 8009742:	2800      	cmp	r0, #0
 8009744:	9b04      	ldr	r3, [sp, #16]
 8009746:	dc02      	bgt.n	800974e <_dtoa_r+0x9b6>
 8009748:	d1de      	bne.n	8009708 <_dtoa_r+0x970>
 800974a:	07da      	lsls	r2, r3, #31
 800974c:	d5dc      	bpl.n	8009708 <_dtoa_r+0x970>
 800974e:	2b39      	cmp	r3, #57	; 0x39
 8009750:	d1d8      	bne.n	8009704 <_dtoa_r+0x96c>
 8009752:	9a02      	ldr	r2, [sp, #8]
 8009754:	2339      	movs	r3, #57	; 0x39
 8009756:	7013      	strb	r3, [r2, #0]
 8009758:	4643      	mov	r3, r8
 800975a:	4698      	mov	r8, r3
 800975c:	3b01      	subs	r3, #1
 800975e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009762:	2a39      	cmp	r2, #57	; 0x39
 8009764:	d051      	beq.n	800980a <_dtoa_r+0xa72>
 8009766:	3201      	adds	r2, #1
 8009768:	701a      	strb	r2, [r3, #0]
 800976a:	e745      	b.n	80095f8 <_dtoa_r+0x860>
 800976c:	2a00      	cmp	r2, #0
 800976e:	dd03      	ble.n	8009778 <_dtoa_r+0x9e0>
 8009770:	2b39      	cmp	r3, #57	; 0x39
 8009772:	d0ee      	beq.n	8009752 <_dtoa_r+0x9ba>
 8009774:	3301      	adds	r3, #1
 8009776:	e7c7      	b.n	8009708 <_dtoa_r+0x970>
 8009778:	9a04      	ldr	r2, [sp, #16]
 800977a:	9908      	ldr	r1, [sp, #32]
 800977c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009780:	428a      	cmp	r2, r1
 8009782:	d02b      	beq.n	80097dc <_dtoa_r+0xa44>
 8009784:	4629      	mov	r1, r5
 8009786:	2300      	movs	r3, #0
 8009788:	220a      	movs	r2, #10
 800978a:	4630      	mov	r0, r6
 800978c:	f000 f8ee 	bl	800996c <__multadd>
 8009790:	45b9      	cmp	r9, r7
 8009792:	4605      	mov	r5, r0
 8009794:	f04f 0300 	mov.w	r3, #0
 8009798:	f04f 020a 	mov.w	r2, #10
 800979c:	4649      	mov	r1, r9
 800979e:	4630      	mov	r0, r6
 80097a0:	d107      	bne.n	80097b2 <_dtoa_r+0xa1a>
 80097a2:	f000 f8e3 	bl	800996c <__multadd>
 80097a6:	4681      	mov	r9, r0
 80097a8:	4607      	mov	r7, r0
 80097aa:	9b04      	ldr	r3, [sp, #16]
 80097ac:	3301      	adds	r3, #1
 80097ae:	9304      	str	r3, [sp, #16]
 80097b0:	e774      	b.n	800969c <_dtoa_r+0x904>
 80097b2:	f000 f8db 	bl	800996c <__multadd>
 80097b6:	4639      	mov	r1, r7
 80097b8:	4681      	mov	r9, r0
 80097ba:	2300      	movs	r3, #0
 80097bc:	220a      	movs	r2, #10
 80097be:	4630      	mov	r0, r6
 80097c0:	f000 f8d4 	bl	800996c <__multadd>
 80097c4:	4607      	mov	r7, r0
 80097c6:	e7f0      	b.n	80097aa <_dtoa_r+0xa12>
 80097c8:	f1ba 0f00 	cmp.w	sl, #0
 80097cc:	9a01      	ldr	r2, [sp, #4]
 80097ce:	bfcc      	ite	gt
 80097d0:	46d0      	movgt	r8, sl
 80097d2:	f04f 0801 	movle.w	r8, #1
 80097d6:	4490      	add	r8, r2
 80097d8:	f04f 0900 	mov.w	r9, #0
 80097dc:	4629      	mov	r1, r5
 80097de:	2201      	movs	r2, #1
 80097e0:	4630      	mov	r0, r6
 80097e2:	9302      	str	r3, [sp, #8]
 80097e4:	f000 fa72 	bl	8009ccc <__lshift>
 80097e8:	4621      	mov	r1, r4
 80097ea:	4605      	mov	r5, r0
 80097ec:	f000 fade 	bl	8009dac <__mcmp>
 80097f0:	2800      	cmp	r0, #0
 80097f2:	dcb1      	bgt.n	8009758 <_dtoa_r+0x9c0>
 80097f4:	d102      	bne.n	80097fc <_dtoa_r+0xa64>
 80097f6:	9b02      	ldr	r3, [sp, #8]
 80097f8:	07db      	lsls	r3, r3, #31
 80097fa:	d4ad      	bmi.n	8009758 <_dtoa_r+0x9c0>
 80097fc:	4643      	mov	r3, r8
 80097fe:	4698      	mov	r8, r3
 8009800:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009804:	2a30      	cmp	r2, #48	; 0x30
 8009806:	d0fa      	beq.n	80097fe <_dtoa_r+0xa66>
 8009808:	e6f6      	b.n	80095f8 <_dtoa_r+0x860>
 800980a:	9a01      	ldr	r2, [sp, #4]
 800980c:	429a      	cmp	r2, r3
 800980e:	d1a4      	bne.n	800975a <_dtoa_r+0x9c2>
 8009810:	f10b 0b01 	add.w	fp, fp, #1
 8009814:	2331      	movs	r3, #49	; 0x31
 8009816:	e778      	b.n	800970a <_dtoa_r+0x972>
 8009818:	4b14      	ldr	r3, [pc, #80]	; (800986c <_dtoa_r+0xad4>)
 800981a:	f7ff bb27 	b.w	8008e6c <_dtoa_r+0xd4>
 800981e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009820:	2b00      	cmp	r3, #0
 8009822:	f47f ab03 	bne.w	8008e2c <_dtoa_r+0x94>
 8009826:	4b12      	ldr	r3, [pc, #72]	; (8009870 <_dtoa_r+0xad8>)
 8009828:	f7ff bb20 	b.w	8008e6c <_dtoa_r+0xd4>
 800982c:	f1ba 0f00 	cmp.w	sl, #0
 8009830:	dc03      	bgt.n	800983a <_dtoa_r+0xaa2>
 8009832:	9b06      	ldr	r3, [sp, #24]
 8009834:	2b02      	cmp	r3, #2
 8009836:	f73f aec7 	bgt.w	80095c8 <_dtoa_r+0x830>
 800983a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800983e:	4621      	mov	r1, r4
 8009840:	4628      	mov	r0, r5
 8009842:	f7ff fa1b 	bl	8008c7c <quorem>
 8009846:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800984a:	f808 3b01 	strb.w	r3, [r8], #1
 800984e:	9a01      	ldr	r2, [sp, #4]
 8009850:	eba8 0202 	sub.w	r2, r8, r2
 8009854:	4592      	cmp	sl, r2
 8009856:	ddb7      	ble.n	80097c8 <_dtoa_r+0xa30>
 8009858:	4629      	mov	r1, r5
 800985a:	2300      	movs	r3, #0
 800985c:	220a      	movs	r2, #10
 800985e:	4630      	mov	r0, r6
 8009860:	f000 f884 	bl	800996c <__multadd>
 8009864:	4605      	mov	r5, r0
 8009866:	e7ea      	b.n	800983e <_dtoa_r+0xaa6>
 8009868:	0800b374 	.word	0x0800b374
 800986c:	0800b1d0 	.word	0x0800b1d0
 8009870:	0800b2f5 	.word	0x0800b2f5

08009874 <_localeconv_r>:
 8009874:	4800      	ldr	r0, [pc, #0]	; (8009878 <_localeconv_r+0x4>)
 8009876:	4770      	bx	lr
 8009878:	2000061c 	.word	0x2000061c

0800987c <malloc>:
 800987c:	4b02      	ldr	r3, [pc, #8]	; (8009888 <malloc+0xc>)
 800987e:	4601      	mov	r1, r0
 8009880:	6818      	ldr	r0, [r3, #0]
 8009882:	f000 bc17 	b.w	800a0b4 <_malloc_r>
 8009886:	bf00      	nop
 8009888:	200004c8 	.word	0x200004c8

0800988c <memcpy>:
 800988c:	440a      	add	r2, r1
 800988e:	4291      	cmp	r1, r2
 8009890:	f100 33ff 	add.w	r3, r0, #4294967295
 8009894:	d100      	bne.n	8009898 <memcpy+0xc>
 8009896:	4770      	bx	lr
 8009898:	b510      	push	{r4, lr}
 800989a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800989e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098a2:	4291      	cmp	r1, r2
 80098a4:	d1f9      	bne.n	800989a <memcpy+0xe>
 80098a6:	bd10      	pop	{r4, pc}

080098a8 <_Balloc>:
 80098a8:	b570      	push	{r4, r5, r6, lr}
 80098aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80098ac:	4604      	mov	r4, r0
 80098ae:	460d      	mov	r5, r1
 80098b0:	b976      	cbnz	r6, 80098d0 <_Balloc+0x28>
 80098b2:	2010      	movs	r0, #16
 80098b4:	f7ff ffe2 	bl	800987c <malloc>
 80098b8:	4602      	mov	r2, r0
 80098ba:	6260      	str	r0, [r4, #36]	; 0x24
 80098bc:	b920      	cbnz	r0, 80098c8 <_Balloc+0x20>
 80098be:	4b18      	ldr	r3, [pc, #96]	; (8009920 <_Balloc+0x78>)
 80098c0:	4818      	ldr	r0, [pc, #96]	; (8009924 <_Balloc+0x7c>)
 80098c2:	2166      	movs	r1, #102	; 0x66
 80098c4:	f000 fdd6 	bl	800a474 <__assert_func>
 80098c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098cc:	6006      	str	r6, [r0, #0]
 80098ce:	60c6      	str	r6, [r0, #12]
 80098d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80098d2:	68f3      	ldr	r3, [r6, #12]
 80098d4:	b183      	cbz	r3, 80098f8 <_Balloc+0x50>
 80098d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80098de:	b9b8      	cbnz	r0, 8009910 <_Balloc+0x68>
 80098e0:	2101      	movs	r1, #1
 80098e2:	fa01 f605 	lsl.w	r6, r1, r5
 80098e6:	1d72      	adds	r2, r6, #5
 80098e8:	0092      	lsls	r2, r2, #2
 80098ea:	4620      	mov	r0, r4
 80098ec:	f000 fb60 	bl	8009fb0 <_calloc_r>
 80098f0:	b160      	cbz	r0, 800990c <_Balloc+0x64>
 80098f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80098f6:	e00e      	b.n	8009916 <_Balloc+0x6e>
 80098f8:	2221      	movs	r2, #33	; 0x21
 80098fa:	2104      	movs	r1, #4
 80098fc:	4620      	mov	r0, r4
 80098fe:	f000 fb57 	bl	8009fb0 <_calloc_r>
 8009902:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009904:	60f0      	str	r0, [r6, #12]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d1e4      	bne.n	80098d6 <_Balloc+0x2e>
 800990c:	2000      	movs	r0, #0
 800990e:	bd70      	pop	{r4, r5, r6, pc}
 8009910:	6802      	ldr	r2, [r0, #0]
 8009912:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009916:	2300      	movs	r3, #0
 8009918:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800991c:	e7f7      	b.n	800990e <_Balloc+0x66>
 800991e:	bf00      	nop
 8009920:	0800b302 	.word	0x0800b302
 8009924:	0800b385 	.word	0x0800b385

08009928 <_Bfree>:
 8009928:	b570      	push	{r4, r5, r6, lr}
 800992a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800992c:	4605      	mov	r5, r0
 800992e:	460c      	mov	r4, r1
 8009930:	b976      	cbnz	r6, 8009950 <_Bfree+0x28>
 8009932:	2010      	movs	r0, #16
 8009934:	f7ff ffa2 	bl	800987c <malloc>
 8009938:	4602      	mov	r2, r0
 800993a:	6268      	str	r0, [r5, #36]	; 0x24
 800993c:	b920      	cbnz	r0, 8009948 <_Bfree+0x20>
 800993e:	4b09      	ldr	r3, [pc, #36]	; (8009964 <_Bfree+0x3c>)
 8009940:	4809      	ldr	r0, [pc, #36]	; (8009968 <_Bfree+0x40>)
 8009942:	218a      	movs	r1, #138	; 0x8a
 8009944:	f000 fd96 	bl	800a474 <__assert_func>
 8009948:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800994c:	6006      	str	r6, [r0, #0]
 800994e:	60c6      	str	r6, [r0, #12]
 8009950:	b13c      	cbz	r4, 8009962 <_Bfree+0x3a>
 8009952:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009954:	6862      	ldr	r2, [r4, #4]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800995c:	6021      	str	r1, [r4, #0]
 800995e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009962:	bd70      	pop	{r4, r5, r6, pc}
 8009964:	0800b302 	.word	0x0800b302
 8009968:	0800b385 	.word	0x0800b385

0800996c <__multadd>:
 800996c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009970:	690d      	ldr	r5, [r1, #16]
 8009972:	4607      	mov	r7, r0
 8009974:	460c      	mov	r4, r1
 8009976:	461e      	mov	r6, r3
 8009978:	f101 0c14 	add.w	ip, r1, #20
 800997c:	2000      	movs	r0, #0
 800997e:	f8dc 3000 	ldr.w	r3, [ip]
 8009982:	b299      	uxth	r1, r3
 8009984:	fb02 6101 	mla	r1, r2, r1, r6
 8009988:	0c1e      	lsrs	r6, r3, #16
 800998a:	0c0b      	lsrs	r3, r1, #16
 800998c:	fb02 3306 	mla	r3, r2, r6, r3
 8009990:	b289      	uxth	r1, r1
 8009992:	3001      	adds	r0, #1
 8009994:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009998:	4285      	cmp	r5, r0
 800999a:	f84c 1b04 	str.w	r1, [ip], #4
 800999e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80099a2:	dcec      	bgt.n	800997e <__multadd+0x12>
 80099a4:	b30e      	cbz	r6, 80099ea <__multadd+0x7e>
 80099a6:	68a3      	ldr	r3, [r4, #8]
 80099a8:	42ab      	cmp	r3, r5
 80099aa:	dc19      	bgt.n	80099e0 <__multadd+0x74>
 80099ac:	6861      	ldr	r1, [r4, #4]
 80099ae:	4638      	mov	r0, r7
 80099b0:	3101      	adds	r1, #1
 80099b2:	f7ff ff79 	bl	80098a8 <_Balloc>
 80099b6:	4680      	mov	r8, r0
 80099b8:	b928      	cbnz	r0, 80099c6 <__multadd+0x5a>
 80099ba:	4602      	mov	r2, r0
 80099bc:	4b0c      	ldr	r3, [pc, #48]	; (80099f0 <__multadd+0x84>)
 80099be:	480d      	ldr	r0, [pc, #52]	; (80099f4 <__multadd+0x88>)
 80099c0:	21b5      	movs	r1, #181	; 0xb5
 80099c2:	f000 fd57 	bl	800a474 <__assert_func>
 80099c6:	6922      	ldr	r2, [r4, #16]
 80099c8:	3202      	adds	r2, #2
 80099ca:	f104 010c 	add.w	r1, r4, #12
 80099ce:	0092      	lsls	r2, r2, #2
 80099d0:	300c      	adds	r0, #12
 80099d2:	f7ff ff5b 	bl	800988c <memcpy>
 80099d6:	4621      	mov	r1, r4
 80099d8:	4638      	mov	r0, r7
 80099da:	f7ff ffa5 	bl	8009928 <_Bfree>
 80099de:	4644      	mov	r4, r8
 80099e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80099e4:	3501      	adds	r5, #1
 80099e6:	615e      	str	r6, [r3, #20]
 80099e8:	6125      	str	r5, [r4, #16]
 80099ea:	4620      	mov	r0, r4
 80099ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f0:	0800b374 	.word	0x0800b374
 80099f4:	0800b385 	.word	0x0800b385

080099f8 <__hi0bits>:
 80099f8:	0c03      	lsrs	r3, r0, #16
 80099fa:	041b      	lsls	r3, r3, #16
 80099fc:	b9d3      	cbnz	r3, 8009a34 <__hi0bits+0x3c>
 80099fe:	0400      	lsls	r0, r0, #16
 8009a00:	2310      	movs	r3, #16
 8009a02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009a06:	bf04      	itt	eq
 8009a08:	0200      	lsleq	r0, r0, #8
 8009a0a:	3308      	addeq	r3, #8
 8009a0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009a10:	bf04      	itt	eq
 8009a12:	0100      	lsleq	r0, r0, #4
 8009a14:	3304      	addeq	r3, #4
 8009a16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009a1a:	bf04      	itt	eq
 8009a1c:	0080      	lsleq	r0, r0, #2
 8009a1e:	3302      	addeq	r3, #2
 8009a20:	2800      	cmp	r0, #0
 8009a22:	db05      	blt.n	8009a30 <__hi0bits+0x38>
 8009a24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009a28:	f103 0301 	add.w	r3, r3, #1
 8009a2c:	bf08      	it	eq
 8009a2e:	2320      	moveq	r3, #32
 8009a30:	4618      	mov	r0, r3
 8009a32:	4770      	bx	lr
 8009a34:	2300      	movs	r3, #0
 8009a36:	e7e4      	b.n	8009a02 <__hi0bits+0xa>

08009a38 <__lo0bits>:
 8009a38:	6803      	ldr	r3, [r0, #0]
 8009a3a:	f013 0207 	ands.w	r2, r3, #7
 8009a3e:	4601      	mov	r1, r0
 8009a40:	d00b      	beq.n	8009a5a <__lo0bits+0x22>
 8009a42:	07da      	lsls	r2, r3, #31
 8009a44:	d423      	bmi.n	8009a8e <__lo0bits+0x56>
 8009a46:	0798      	lsls	r0, r3, #30
 8009a48:	bf49      	itett	mi
 8009a4a:	085b      	lsrmi	r3, r3, #1
 8009a4c:	089b      	lsrpl	r3, r3, #2
 8009a4e:	2001      	movmi	r0, #1
 8009a50:	600b      	strmi	r3, [r1, #0]
 8009a52:	bf5c      	itt	pl
 8009a54:	600b      	strpl	r3, [r1, #0]
 8009a56:	2002      	movpl	r0, #2
 8009a58:	4770      	bx	lr
 8009a5a:	b298      	uxth	r0, r3
 8009a5c:	b9a8      	cbnz	r0, 8009a8a <__lo0bits+0x52>
 8009a5e:	0c1b      	lsrs	r3, r3, #16
 8009a60:	2010      	movs	r0, #16
 8009a62:	b2da      	uxtb	r2, r3
 8009a64:	b90a      	cbnz	r2, 8009a6a <__lo0bits+0x32>
 8009a66:	3008      	adds	r0, #8
 8009a68:	0a1b      	lsrs	r3, r3, #8
 8009a6a:	071a      	lsls	r2, r3, #28
 8009a6c:	bf04      	itt	eq
 8009a6e:	091b      	lsreq	r3, r3, #4
 8009a70:	3004      	addeq	r0, #4
 8009a72:	079a      	lsls	r2, r3, #30
 8009a74:	bf04      	itt	eq
 8009a76:	089b      	lsreq	r3, r3, #2
 8009a78:	3002      	addeq	r0, #2
 8009a7a:	07da      	lsls	r2, r3, #31
 8009a7c:	d403      	bmi.n	8009a86 <__lo0bits+0x4e>
 8009a7e:	085b      	lsrs	r3, r3, #1
 8009a80:	f100 0001 	add.w	r0, r0, #1
 8009a84:	d005      	beq.n	8009a92 <__lo0bits+0x5a>
 8009a86:	600b      	str	r3, [r1, #0]
 8009a88:	4770      	bx	lr
 8009a8a:	4610      	mov	r0, r2
 8009a8c:	e7e9      	b.n	8009a62 <__lo0bits+0x2a>
 8009a8e:	2000      	movs	r0, #0
 8009a90:	4770      	bx	lr
 8009a92:	2020      	movs	r0, #32
 8009a94:	4770      	bx	lr
	...

08009a98 <__i2b>:
 8009a98:	b510      	push	{r4, lr}
 8009a9a:	460c      	mov	r4, r1
 8009a9c:	2101      	movs	r1, #1
 8009a9e:	f7ff ff03 	bl	80098a8 <_Balloc>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	b928      	cbnz	r0, 8009ab2 <__i2b+0x1a>
 8009aa6:	4b05      	ldr	r3, [pc, #20]	; (8009abc <__i2b+0x24>)
 8009aa8:	4805      	ldr	r0, [pc, #20]	; (8009ac0 <__i2b+0x28>)
 8009aaa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009aae:	f000 fce1 	bl	800a474 <__assert_func>
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	6144      	str	r4, [r0, #20]
 8009ab6:	6103      	str	r3, [r0, #16]
 8009ab8:	bd10      	pop	{r4, pc}
 8009aba:	bf00      	nop
 8009abc:	0800b374 	.word	0x0800b374
 8009ac0:	0800b385 	.word	0x0800b385

08009ac4 <__multiply>:
 8009ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac8:	4691      	mov	r9, r2
 8009aca:	690a      	ldr	r2, [r1, #16]
 8009acc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	bfb8      	it	lt
 8009ad4:	460b      	movlt	r3, r1
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	bfbc      	itt	lt
 8009ada:	464c      	movlt	r4, r9
 8009adc:	4699      	movlt	r9, r3
 8009ade:	6927      	ldr	r7, [r4, #16]
 8009ae0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ae4:	68a3      	ldr	r3, [r4, #8]
 8009ae6:	6861      	ldr	r1, [r4, #4]
 8009ae8:	eb07 060a 	add.w	r6, r7, sl
 8009aec:	42b3      	cmp	r3, r6
 8009aee:	b085      	sub	sp, #20
 8009af0:	bfb8      	it	lt
 8009af2:	3101      	addlt	r1, #1
 8009af4:	f7ff fed8 	bl	80098a8 <_Balloc>
 8009af8:	b930      	cbnz	r0, 8009b08 <__multiply+0x44>
 8009afa:	4602      	mov	r2, r0
 8009afc:	4b44      	ldr	r3, [pc, #272]	; (8009c10 <__multiply+0x14c>)
 8009afe:	4845      	ldr	r0, [pc, #276]	; (8009c14 <__multiply+0x150>)
 8009b00:	f240 115d 	movw	r1, #349	; 0x15d
 8009b04:	f000 fcb6 	bl	800a474 <__assert_func>
 8009b08:	f100 0514 	add.w	r5, r0, #20
 8009b0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b10:	462b      	mov	r3, r5
 8009b12:	2200      	movs	r2, #0
 8009b14:	4543      	cmp	r3, r8
 8009b16:	d321      	bcc.n	8009b5c <__multiply+0x98>
 8009b18:	f104 0314 	add.w	r3, r4, #20
 8009b1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009b20:	f109 0314 	add.w	r3, r9, #20
 8009b24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009b28:	9202      	str	r2, [sp, #8]
 8009b2a:	1b3a      	subs	r2, r7, r4
 8009b2c:	3a15      	subs	r2, #21
 8009b2e:	f022 0203 	bic.w	r2, r2, #3
 8009b32:	3204      	adds	r2, #4
 8009b34:	f104 0115 	add.w	r1, r4, #21
 8009b38:	428f      	cmp	r7, r1
 8009b3a:	bf38      	it	cc
 8009b3c:	2204      	movcc	r2, #4
 8009b3e:	9201      	str	r2, [sp, #4]
 8009b40:	9a02      	ldr	r2, [sp, #8]
 8009b42:	9303      	str	r3, [sp, #12]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d80c      	bhi.n	8009b62 <__multiply+0x9e>
 8009b48:	2e00      	cmp	r6, #0
 8009b4a:	dd03      	ble.n	8009b54 <__multiply+0x90>
 8009b4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d05a      	beq.n	8009c0a <__multiply+0x146>
 8009b54:	6106      	str	r6, [r0, #16]
 8009b56:	b005      	add	sp, #20
 8009b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b5c:	f843 2b04 	str.w	r2, [r3], #4
 8009b60:	e7d8      	b.n	8009b14 <__multiply+0x50>
 8009b62:	f8b3 a000 	ldrh.w	sl, [r3]
 8009b66:	f1ba 0f00 	cmp.w	sl, #0
 8009b6a:	d024      	beq.n	8009bb6 <__multiply+0xf2>
 8009b6c:	f104 0e14 	add.w	lr, r4, #20
 8009b70:	46a9      	mov	r9, r5
 8009b72:	f04f 0c00 	mov.w	ip, #0
 8009b76:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009b7a:	f8d9 1000 	ldr.w	r1, [r9]
 8009b7e:	fa1f fb82 	uxth.w	fp, r2
 8009b82:	b289      	uxth	r1, r1
 8009b84:	fb0a 110b 	mla	r1, sl, fp, r1
 8009b88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009b8c:	f8d9 2000 	ldr.w	r2, [r9]
 8009b90:	4461      	add	r1, ip
 8009b92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b96:	fb0a c20b 	mla	r2, sl, fp, ip
 8009b9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009b9e:	b289      	uxth	r1, r1
 8009ba0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ba4:	4577      	cmp	r7, lr
 8009ba6:	f849 1b04 	str.w	r1, [r9], #4
 8009baa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009bae:	d8e2      	bhi.n	8009b76 <__multiply+0xb2>
 8009bb0:	9a01      	ldr	r2, [sp, #4]
 8009bb2:	f845 c002 	str.w	ip, [r5, r2]
 8009bb6:	9a03      	ldr	r2, [sp, #12]
 8009bb8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009bbc:	3304      	adds	r3, #4
 8009bbe:	f1b9 0f00 	cmp.w	r9, #0
 8009bc2:	d020      	beq.n	8009c06 <__multiply+0x142>
 8009bc4:	6829      	ldr	r1, [r5, #0]
 8009bc6:	f104 0c14 	add.w	ip, r4, #20
 8009bca:	46ae      	mov	lr, r5
 8009bcc:	f04f 0a00 	mov.w	sl, #0
 8009bd0:	f8bc b000 	ldrh.w	fp, [ip]
 8009bd4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009bd8:	fb09 220b 	mla	r2, r9, fp, r2
 8009bdc:	4492      	add	sl, r2
 8009bde:	b289      	uxth	r1, r1
 8009be0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009be4:	f84e 1b04 	str.w	r1, [lr], #4
 8009be8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009bec:	f8be 1000 	ldrh.w	r1, [lr]
 8009bf0:	0c12      	lsrs	r2, r2, #16
 8009bf2:	fb09 1102 	mla	r1, r9, r2, r1
 8009bf6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009bfa:	4567      	cmp	r7, ip
 8009bfc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c00:	d8e6      	bhi.n	8009bd0 <__multiply+0x10c>
 8009c02:	9a01      	ldr	r2, [sp, #4]
 8009c04:	50a9      	str	r1, [r5, r2]
 8009c06:	3504      	adds	r5, #4
 8009c08:	e79a      	b.n	8009b40 <__multiply+0x7c>
 8009c0a:	3e01      	subs	r6, #1
 8009c0c:	e79c      	b.n	8009b48 <__multiply+0x84>
 8009c0e:	bf00      	nop
 8009c10:	0800b374 	.word	0x0800b374
 8009c14:	0800b385 	.word	0x0800b385

08009c18 <__pow5mult>:
 8009c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c1c:	4615      	mov	r5, r2
 8009c1e:	f012 0203 	ands.w	r2, r2, #3
 8009c22:	4606      	mov	r6, r0
 8009c24:	460f      	mov	r7, r1
 8009c26:	d007      	beq.n	8009c38 <__pow5mult+0x20>
 8009c28:	4c25      	ldr	r4, [pc, #148]	; (8009cc0 <__pow5mult+0xa8>)
 8009c2a:	3a01      	subs	r2, #1
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c32:	f7ff fe9b 	bl	800996c <__multadd>
 8009c36:	4607      	mov	r7, r0
 8009c38:	10ad      	asrs	r5, r5, #2
 8009c3a:	d03d      	beq.n	8009cb8 <__pow5mult+0xa0>
 8009c3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009c3e:	b97c      	cbnz	r4, 8009c60 <__pow5mult+0x48>
 8009c40:	2010      	movs	r0, #16
 8009c42:	f7ff fe1b 	bl	800987c <malloc>
 8009c46:	4602      	mov	r2, r0
 8009c48:	6270      	str	r0, [r6, #36]	; 0x24
 8009c4a:	b928      	cbnz	r0, 8009c58 <__pow5mult+0x40>
 8009c4c:	4b1d      	ldr	r3, [pc, #116]	; (8009cc4 <__pow5mult+0xac>)
 8009c4e:	481e      	ldr	r0, [pc, #120]	; (8009cc8 <__pow5mult+0xb0>)
 8009c50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009c54:	f000 fc0e 	bl	800a474 <__assert_func>
 8009c58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c5c:	6004      	str	r4, [r0, #0]
 8009c5e:	60c4      	str	r4, [r0, #12]
 8009c60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009c64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c68:	b94c      	cbnz	r4, 8009c7e <__pow5mult+0x66>
 8009c6a:	f240 2171 	movw	r1, #625	; 0x271
 8009c6e:	4630      	mov	r0, r6
 8009c70:	f7ff ff12 	bl	8009a98 <__i2b>
 8009c74:	2300      	movs	r3, #0
 8009c76:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c7a:	4604      	mov	r4, r0
 8009c7c:	6003      	str	r3, [r0, #0]
 8009c7e:	f04f 0900 	mov.w	r9, #0
 8009c82:	07eb      	lsls	r3, r5, #31
 8009c84:	d50a      	bpl.n	8009c9c <__pow5mult+0x84>
 8009c86:	4639      	mov	r1, r7
 8009c88:	4622      	mov	r2, r4
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	f7ff ff1a 	bl	8009ac4 <__multiply>
 8009c90:	4639      	mov	r1, r7
 8009c92:	4680      	mov	r8, r0
 8009c94:	4630      	mov	r0, r6
 8009c96:	f7ff fe47 	bl	8009928 <_Bfree>
 8009c9a:	4647      	mov	r7, r8
 8009c9c:	106d      	asrs	r5, r5, #1
 8009c9e:	d00b      	beq.n	8009cb8 <__pow5mult+0xa0>
 8009ca0:	6820      	ldr	r0, [r4, #0]
 8009ca2:	b938      	cbnz	r0, 8009cb4 <__pow5mult+0x9c>
 8009ca4:	4622      	mov	r2, r4
 8009ca6:	4621      	mov	r1, r4
 8009ca8:	4630      	mov	r0, r6
 8009caa:	f7ff ff0b 	bl	8009ac4 <__multiply>
 8009cae:	6020      	str	r0, [r4, #0]
 8009cb0:	f8c0 9000 	str.w	r9, [r0]
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	e7e4      	b.n	8009c82 <__pow5mult+0x6a>
 8009cb8:	4638      	mov	r0, r7
 8009cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cbe:	bf00      	nop
 8009cc0:	0800b4d8 	.word	0x0800b4d8
 8009cc4:	0800b302 	.word	0x0800b302
 8009cc8:	0800b385 	.word	0x0800b385

08009ccc <__lshift>:
 8009ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cd0:	460c      	mov	r4, r1
 8009cd2:	6849      	ldr	r1, [r1, #4]
 8009cd4:	6923      	ldr	r3, [r4, #16]
 8009cd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009cda:	68a3      	ldr	r3, [r4, #8]
 8009cdc:	4607      	mov	r7, r0
 8009cde:	4691      	mov	r9, r2
 8009ce0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ce4:	f108 0601 	add.w	r6, r8, #1
 8009ce8:	42b3      	cmp	r3, r6
 8009cea:	db0b      	blt.n	8009d04 <__lshift+0x38>
 8009cec:	4638      	mov	r0, r7
 8009cee:	f7ff fddb 	bl	80098a8 <_Balloc>
 8009cf2:	4605      	mov	r5, r0
 8009cf4:	b948      	cbnz	r0, 8009d0a <__lshift+0x3e>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	4b2a      	ldr	r3, [pc, #168]	; (8009da4 <__lshift+0xd8>)
 8009cfa:	482b      	ldr	r0, [pc, #172]	; (8009da8 <__lshift+0xdc>)
 8009cfc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009d00:	f000 fbb8 	bl	800a474 <__assert_func>
 8009d04:	3101      	adds	r1, #1
 8009d06:	005b      	lsls	r3, r3, #1
 8009d08:	e7ee      	b.n	8009ce8 <__lshift+0x1c>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f100 0114 	add.w	r1, r0, #20
 8009d10:	f100 0210 	add.w	r2, r0, #16
 8009d14:	4618      	mov	r0, r3
 8009d16:	4553      	cmp	r3, sl
 8009d18:	db37      	blt.n	8009d8a <__lshift+0xbe>
 8009d1a:	6920      	ldr	r0, [r4, #16]
 8009d1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d20:	f104 0314 	add.w	r3, r4, #20
 8009d24:	f019 091f 	ands.w	r9, r9, #31
 8009d28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009d30:	d02f      	beq.n	8009d92 <__lshift+0xc6>
 8009d32:	f1c9 0e20 	rsb	lr, r9, #32
 8009d36:	468a      	mov	sl, r1
 8009d38:	f04f 0c00 	mov.w	ip, #0
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	fa02 f209 	lsl.w	r2, r2, r9
 8009d42:	ea42 020c 	orr.w	r2, r2, ip
 8009d46:	f84a 2b04 	str.w	r2, [sl], #4
 8009d4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d4e:	4298      	cmp	r0, r3
 8009d50:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009d54:	d8f2      	bhi.n	8009d3c <__lshift+0x70>
 8009d56:	1b03      	subs	r3, r0, r4
 8009d58:	3b15      	subs	r3, #21
 8009d5a:	f023 0303 	bic.w	r3, r3, #3
 8009d5e:	3304      	adds	r3, #4
 8009d60:	f104 0215 	add.w	r2, r4, #21
 8009d64:	4290      	cmp	r0, r2
 8009d66:	bf38      	it	cc
 8009d68:	2304      	movcc	r3, #4
 8009d6a:	f841 c003 	str.w	ip, [r1, r3]
 8009d6e:	f1bc 0f00 	cmp.w	ip, #0
 8009d72:	d001      	beq.n	8009d78 <__lshift+0xac>
 8009d74:	f108 0602 	add.w	r6, r8, #2
 8009d78:	3e01      	subs	r6, #1
 8009d7a:	4638      	mov	r0, r7
 8009d7c:	612e      	str	r6, [r5, #16]
 8009d7e:	4621      	mov	r1, r4
 8009d80:	f7ff fdd2 	bl	8009928 <_Bfree>
 8009d84:	4628      	mov	r0, r5
 8009d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d8e:	3301      	adds	r3, #1
 8009d90:	e7c1      	b.n	8009d16 <__lshift+0x4a>
 8009d92:	3904      	subs	r1, #4
 8009d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d98:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d9c:	4298      	cmp	r0, r3
 8009d9e:	d8f9      	bhi.n	8009d94 <__lshift+0xc8>
 8009da0:	e7ea      	b.n	8009d78 <__lshift+0xac>
 8009da2:	bf00      	nop
 8009da4:	0800b374 	.word	0x0800b374
 8009da8:	0800b385 	.word	0x0800b385

08009dac <__mcmp>:
 8009dac:	b530      	push	{r4, r5, lr}
 8009dae:	6902      	ldr	r2, [r0, #16]
 8009db0:	690c      	ldr	r4, [r1, #16]
 8009db2:	1b12      	subs	r2, r2, r4
 8009db4:	d10e      	bne.n	8009dd4 <__mcmp+0x28>
 8009db6:	f100 0314 	add.w	r3, r0, #20
 8009dba:	3114      	adds	r1, #20
 8009dbc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009dc0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009dc4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009dc8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009dcc:	42a5      	cmp	r5, r4
 8009dce:	d003      	beq.n	8009dd8 <__mcmp+0x2c>
 8009dd0:	d305      	bcc.n	8009dde <__mcmp+0x32>
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	4610      	mov	r0, r2
 8009dd6:	bd30      	pop	{r4, r5, pc}
 8009dd8:	4283      	cmp	r3, r0
 8009dda:	d3f3      	bcc.n	8009dc4 <__mcmp+0x18>
 8009ddc:	e7fa      	b.n	8009dd4 <__mcmp+0x28>
 8009dde:	f04f 32ff 	mov.w	r2, #4294967295
 8009de2:	e7f7      	b.n	8009dd4 <__mcmp+0x28>

08009de4 <__mdiff>:
 8009de4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de8:	460c      	mov	r4, r1
 8009dea:	4606      	mov	r6, r0
 8009dec:	4611      	mov	r1, r2
 8009dee:	4620      	mov	r0, r4
 8009df0:	4690      	mov	r8, r2
 8009df2:	f7ff ffdb 	bl	8009dac <__mcmp>
 8009df6:	1e05      	subs	r5, r0, #0
 8009df8:	d110      	bne.n	8009e1c <__mdiff+0x38>
 8009dfa:	4629      	mov	r1, r5
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	f7ff fd53 	bl	80098a8 <_Balloc>
 8009e02:	b930      	cbnz	r0, 8009e12 <__mdiff+0x2e>
 8009e04:	4b3a      	ldr	r3, [pc, #232]	; (8009ef0 <__mdiff+0x10c>)
 8009e06:	4602      	mov	r2, r0
 8009e08:	f240 2132 	movw	r1, #562	; 0x232
 8009e0c:	4839      	ldr	r0, [pc, #228]	; (8009ef4 <__mdiff+0x110>)
 8009e0e:	f000 fb31 	bl	800a474 <__assert_func>
 8009e12:	2301      	movs	r3, #1
 8009e14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e1c:	bfa4      	itt	ge
 8009e1e:	4643      	movge	r3, r8
 8009e20:	46a0      	movge	r8, r4
 8009e22:	4630      	mov	r0, r6
 8009e24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009e28:	bfa6      	itte	ge
 8009e2a:	461c      	movge	r4, r3
 8009e2c:	2500      	movge	r5, #0
 8009e2e:	2501      	movlt	r5, #1
 8009e30:	f7ff fd3a 	bl	80098a8 <_Balloc>
 8009e34:	b920      	cbnz	r0, 8009e40 <__mdiff+0x5c>
 8009e36:	4b2e      	ldr	r3, [pc, #184]	; (8009ef0 <__mdiff+0x10c>)
 8009e38:	4602      	mov	r2, r0
 8009e3a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009e3e:	e7e5      	b.n	8009e0c <__mdiff+0x28>
 8009e40:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009e44:	6926      	ldr	r6, [r4, #16]
 8009e46:	60c5      	str	r5, [r0, #12]
 8009e48:	f104 0914 	add.w	r9, r4, #20
 8009e4c:	f108 0514 	add.w	r5, r8, #20
 8009e50:	f100 0e14 	add.w	lr, r0, #20
 8009e54:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009e58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009e5c:	f108 0210 	add.w	r2, r8, #16
 8009e60:	46f2      	mov	sl, lr
 8009e62:	2100      	movs	r1, #0
 8009e64:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009e6c:	fa1f f883 	uxth.w	r8, r3
 8009e70:	fa11 f18b 	uxtah	r1, r1, fp
 8009e74:	0c1b      	lsrs	r3, r3, #16
 8009e76:	eba1 0808 	sub.w	r8, r1, r8
 8009e7a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009e7e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009e82:	fa1f f888 	uxth.w	r8, r8
 8009e86:	1419      	asrs	r1, r3, #16
 8009e88:	454e      	cmp	r6, r9
 8009e8a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009e8e:	f84a 3b04 	str.w	r3, [sl], #4
 8009e92:	d8e7      	bhi.n	8009e64 <__mdiff+0x80>
 8009e94:	1b33      	subs	r3, r6, r4
 8009e96:	3b15      	subs	r3, #21
 8009e98:	f023 0303 	bic.w	r3, r3, #3
 8009e9c:	3304      	adds	r3, #4
 8009e9e:	3415      	adds	r4, #21
 8009ea0:	42a6      	cmp	r6, r4
 8009ea2:	bf38      	it	cc
 8009ea4:	2304      	movcc	r3, #4
 8009ea6:	441d      	add	r5, r3
 8009ea8:	4473      	add	r3, lr
 8009eaa:	469e      	mov	lr, r3
 8009eac:	462e      	mov	r6, r5
 8009eae:	4566      	cmp	r6, ip
 8009eb0:	d30e      	bcc.n	8009ed0 <__mdiff+0xec>
 8009eb2:	f10c 0203 	add.w	r2, ip, #3
 8009eb6:	1b52      	subs	r2, r2, r5
 8009eb8:	f022 0203 	bic.w	r2, r2, #3
 8009ebc:	3d03      	subs	r5, #3
 8009ebe:	45ac      	cmp	ip, r5
 8009ec0:	bf38      	it	cc
 8009ec2:	2200      	movcc	r2, #0
 8009ec4:	441a      	add	r2, r3
 8009ec6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009eca:	b17b      	cbz	r3, 8009eec <__mdiff+0x108>
 8009ecc:	6107      	str	r7, [r0, #16]
 8009ece:	e7a3      	b.n	8009e18 <__mdiff+0x34>
 8009ed0:	f856 8b04 	ldr.w	r8, [r6], #4
 8009ed4:	fa11 f288 	uxtah	r2, r1, r8
 8009ed8:	1414      	asrs	r4, r2, #16
 8009eda:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009ede:	b292      	uxth	r2, r2
 8009ee0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009ee4:	f84e 2b04 	str.w	r2, [lr], #4
 8009ee8:	1421      	asrs	r1, r4, #16
 8009eea:	e7e0      	b.n	8009eae <__mdiff+0xca>
 8009eec:	3f01      	subs	r7, #1
 8009eee:	e7ea      	b.n	8009ec6 <__mdiff+0xe2>
 8009ef0:	0800b374 	.word	0x0800b374
 8009ef4:	0800b385 	.word	0x0800b385

08009ef8 <__d2b>:
 8009ef8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009efc:	4689      	mov	r9, r1
 8009efe:	2101      	movs	r1, #1
 8009f00:	ec57 6b10 	vmov	r6, r7, d0
 8009f04:	4690      	mov	r8, r2
 8009f06:	f7ff fccf 	bl	80098a8 <_Balloc>
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	b930      	cbnz	r0, 8009f1c <__d2b+0x24>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	4b25      	ldr	r3, [pc, #148]	; (8009fa8 <__d2b+0xb0>)
 8009f12:	4826      	ldr	r0, [pc, #152]	; (8009fac <__d2b+0xb4>)
 8009f14:	f240 310a 	movw	r1, #778	; 0x30a
 8009f18:	f000 faac 	bl	800a474 <__assert_func>
 8009f1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009f20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009f24:	bb35      	cbnz	r5, 8009f74 <__d2b+0x7c>
 8009f26:	2e00      	cmp	r6, #0
 8009f28:	9301      	str	r3, [sp, #4]
 8009f2a:	d028      	beq.n	8009f7e <__d2b+0x86>
 8009f2c:	4668      	mov	r0, sp
 8009f2e:	9600      	str	r6, [sp, #0]
 8009f30:	f7ff fd82 	bl	8009a38 <__lo0bits>
 8009f34:	9900      	ldr	r1, [sp, #0]
 8009f36:	b300      	cbz	r0, 8009f7a <__d2b+0x82>
 8009f38:	9a01      	ldr	r2, [sp, #4]
 8009f3a:	f1c0 0320 	rsb	r3, r0, #32
 8009f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f42:	430b      	orrs	r3, r1
 8009f44:	40c2      	lsrs	r2, r0
 8009f46:	6163      	str	r3, [r4, #20]
 8009f48:	9201      	str	r2, [sp, #4]
 8009f4a:	9b01      	ldr	r3, [sp, #4]
 8009f4c:	61a3      	str	r3, [r4, #24]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	bf14      	ite	ne
 8009f52:	2202      	movne	r2, #2
 8009f54:	2201      	moveq	r2, #1
 8009f56:	6122      	str	r2, [r4, #16]
 8009f58:	b1d5      	cbz	r5, 8009f90 <__d2b+0x98>
 8009f5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009f5e:	4405      	add	r5, r0
 8009f60:	f8c9 5000 	str.w	r5, [r9]
 8009f64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f68:	f8c8 0000 	str.w	r0, [r8]
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	b003      	add	sp, #12
 8009f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f78:	e7d5      	b.n	8009f26 <__d2b+0x2e>
 8009f7a:	6161      	str	r1, [r4, #20]
 8009f7c:	e7e5      	b.n	8009f4a <__d2b+0x52>
 8009f7e:	a801      	add	r0, sp, #4
 8009f80:	f7ff fd5a 	bl	8009a38 <__lo0bits>
 8009f84:	9b01      	ldr	r3, [sp, #4]
 8009f86:	6163      	str	r3, [r4, #20]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	6122      	str	r2, [r4, #16]
 8009f8c:	3020      	adds	r0, #32
 8009f8e:	e7e3      	b.n	8009f58 <__d2b+0x60>
 8009f90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f98:	f8c9 0000 	str.w	r0, [r9]
 8009f9c:	6918      	ldr	r0, [r3, #16]
 8009f9e:	f7ff fd2b 	bl	80099f8 <__hi0bits>
 8009fa2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009fa6:	e7df      	b.n	8009f68 <__d2b+0x70>
 8009fa8:	0800b374 	.word	0x0800b374
 8009fac:	0800b385 	.word	0x0800b385

08009fb0 <_calloc_r>:
 8009fb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fb2:	fba1 2402 	umull	r2, r4, r1, r2
 8009fb6:	b94c      	cbnz	r4, 8009fcc <_calloc_r+0x1c>
 8009fb8:	4611      	mov	r1, r2
 8009fba:	9201      	str	r2, [sp, #4]
 8009fbc:	f000 f87a 	bl	800a0b4 <_malloc_r>
 8009fc0:	9a01      	ldr	r2, [sp, #4]
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	b930      	cbnz	r0, 8009fd4 <_calloc_r+0x24>
 8009fc6:	4628      	mov	r0, r5
 8009fc8:	b003      	add	sp, #12
 8009fca:	bd30      	pop	{r4, r5, pc}
 8009fcc:	220c      	movs	r2, #12
 8009fce:	6002      	str	r2, [r0, #0]
 8009fd0:	2500      	movs	r5, #0
 8009fd2:	e7f8      	b.n	8009fc6 <_calloc_r+0x16>
 8009fd4:	4621      	mov	r1, r4
 8009fd6:	f7fe f911 	bl	80081fc <memset>
 8009fda:	e7f4      	b.n	8009fc6 <_calloc_r+0x16>

08009fdc <_free_r>:
 8009fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fde:	2900      	cmp	r1, #0
 8009fe0:	d044      	beq.n	800a06c <_free_r+0x90>
 8009fe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fe6:	9001      	str	r0, [sp, #4]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f1a1 0404 	sub.w	r4, r1, #4
 8009fee:	bfb8      	it	lt
 8009ff0:	18e4      	addlt	r4, r4, r3
 8009ff2:	f000 fa9b 	bl	800a52c <__malloc_lock>
 8009ff6:	4a1e      	ldr	r2, [pc, #120]	; (800a070 <_free_r+0x94>)
 8009ff8:	9801      	ldr	r0, [sp, #4]
 8009ffa:	6813      	ldr	r3, [r2, #0]
 8009ffc:	b933      	cbnz	r3, 800a00c <_free_r+0x30>
 8009ffe:	6063      	str	r3, [r4, #4]
 800a000:	6014      	str	r4, [r2, #0]
 800a002:	b003      	add	sp, #12
 800a004:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a008:	f000 ba96 	b.w	800a538 <__malloc_unlock>
 800a00c:	42a3      	cmp	r3, r4
 800a00e:	d908      	bls.n	800a022 <_free_r+0x46>
 800a010:	6825      	ldr	r5, [r4, #0]
 800a012:	1961      	adds	r1, r4, r5
 800a014:	428b      	cmp	r3, r1
 800a016:	bf01      	itttt	eq
 800a018:	6819      	ldreq	r1, [r3, #0]
 800a01a:	685b      	ldreq	r3, [r3, #4]
 800a01c:	1949      	addeq	r1, r1, r5
 800a01e:	6021      	streq	r1, [r4, #0]
 800a020:	e7ed      	b.n	8009ffe <_free_r+0x22>
 800a022:	461a      	mov	r2, r3
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	b10b      	cbz	r3, 800a02c <_free_r+0x50>
 800a028:	42a3      	cmp	r3, r4
 800a02a:	d9fa      	bls.n	800a022 <_free_r+0x46>
 800a02c:	6811      	ldr	r1, [r2, #0]
 800a02e:	1855      	adds	r5, r2, r1
 800a030:	42a5      	cmp	r5, r4
 800a032:	d10b      	bne.n	800a04c <_free_r+0x70>
 800a034:	6824      	ldr	r4, [r4, #0]
 800a036:	4421      	add	r1, r4
 800a038:	1854      	adds	r4, r2, r1
 800a03a:	42a3      	cmp	r3, r4
 800a03c:	6011      	str	r1, [r2, #0]
 800a03e:	d1e0      	bne.n	800a002 <_free_r+0x26>
 800a040:	681c      	ldr	r4, [r3, #0]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	6053      	str	r3, [r2, #4]
 800a046:	4421      	add	r1, r4
 800a048:	6011      	str	r1, [r2, #0]
 800a04a:	e7da      	b.n	800a002 <_free_r+0x26>
 800a04c:	d902      	bls.n	800a054 <_free_r+0x78>
 800a04e:	230c      	movs	r3, #12
 800a050:	6003      	str	r3, [r0, #0]
 800a052:	e7d6      	b.n	800a002 <_free_r+0x26>
 800a054:	6825      	ldr	r5, [r4, #0]
 800a056:	1961      	adds	r1, r4, r5
 800a058:	428b      	cmp	r3, r1
 800a05a:	bf04      	itt	eq
 800a05c:	6819      	ldreq	r1, [r3, #0]
 800a05e:	685b      	ldreq	r3, [r3, #4]
 800a060:	6063      	str	r3, [r4, #4]
 800a062:	bf04      	itt	eq
 800a064:	1949      	addeq	r1, r1, r5
 800a066:	6021      	streq	r1, [r4, #0]
 800a068:	6054      	str	r4, [r2, #4]
 800a06a:	e7ca      	b.n	800a002 <_free_r+0x26>
 800a06c:	b003      	add	sp, #12
 800a06e:	bd30      	pop	{r4, r5, pc}
 800a070:	20000e9c 	.word	0x20000e9c

0800a074 <sbrk_aligned>:
 800a074:	b570      	push	{r4, r5, r6, lr}
 800a076:	4e0e      	ldr	r6, [pc, #56]	; (800a0b0 <sbrk_aligned+0x3c>)
 800a078:	460c      	mov	r4, r1
 800a07a:	6831      	ldr	r1, [r6, #0]
 800a07c:	4605      	mov	r5, r0
 800a07e:	b911      	cbnz	r1, 800a086 <sbrk_aligned+0x12>
 800a080:	f000 f9e8 	bl	800a454 <_sbrk_r>
 800a084:	6030      	str	r0, [r6, #0]
 800a086:	4621      	mov	r1, r4
 800a088:	4628      	mov	r0, r5
 800a08a:	f000 f9e3 	bl	800a454 <_sbrk_r>
 800a08e:	1c43      	adds	r3, r0, #1
 800a090:	d00a      	beq.n	800a0a8 <sbrk_aligned+0x34>
 800a092:	1cc4      	adds	r4, r0, #3
 800a094:	f024 0403 	bic.w	r4, r4, #3
 800a098:	42a0      	cmp	r0, r4
 800a09a:	d007      	beq.n	800a0ac <sbrk_aligned+0x38>
 800a09c:	1a21      	subs	r1, r4, r0
 800a09e:	4628      	mov	r0, r5
 800a0a0:	f000 f9d8 	bl	800a454 <_sbrk_r>
 800a0a4:	3001      	adds	r0, #1
 800a0a6:	d101      	bne.n	800a0ac <sbrk_aligned+0x38>
 800a0a8:	f04f 34ff 	mov.w	r4, #4294967295
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	bd70      	pop	{r4, r5, r6, pc}
 800a0b0:	20000ea0 	.word	0x20000ea0

0800a0b4 <_malloc_r>:
 800a0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b8:	1ccd      	adds	r5, r1, #3
 800a0ba:	f025 0503 	bic.w	r5, r5, #3
 800a0be:	3508      	adds	r5, #8
 800a0c0:	2d0c      	cmp	r5, #12
 800a0c2:	bf38      	it	cc
 800a0c4:	250c      	movcc	r5, #12
 800a0c6:	2d00      	cmp	r5, #0
 800a0c8:	4607      	mov	r7, r0
 800a0ca:	db01      	blt.n	800a0d0 <_malloc_r+0x1c>
 800a0cc:	42a9      	cmp	r1, r5
 800a0ce:	d905      	bls.n	800a0dc <_malloc_r+0x28>
 800a0d0:	230c      	movs	r3, #12
 800a0d2:	603b      	str	r3, [r7, #0]
 800a0d4:	2600      	movs	r6, #0
 800a0d6:	4630      	mov	r0, r6
 800a0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0dc:	4e2e      	ldr	r6, [pc, #184]	; (800a198 <_malloc_r+0xe4>)
 800a0de:	f000 fa25 	bl	800a52c <__malloc_lock>
 800a0e2:	6833      	ldr	r3, [r6, #0]
 800a0e4:	461c      	mov	r4, r3
 800a0e6:	bb34      	cbnz	r4, 800a136 <_malloc_r+0x82>
 800a0e8:	4629      	mov	r1, r5
 800a0ea:	4638      	mov	r0, r7
 800a0ec:	f7ff ffc2 	bl	800a074 <sbrk_aligned>
 800a0f0:	1c43      	adds	r3, r0, #1
 800a0f2:	4604      	mov	r4, r0
 800a0f4:	d14d      	bne.n	800a192 <_malloc_r+0xde>
 800a0f6:	6834      	ldr	r4, [r6, #0]
 800a0f8:	4626      	mov	r6, r4
 800a0fa:	2e00      	cmp	r6, #0
 800a0fc:	d140      	bne.n	800a180 <_malloc_r+0xcc>
 800a0fe:	6823      	ldr	r3, [r4, #0]
 800a100:	4631      	mov	r1, r6
 800a102:	4638      	mov	r0, r7
 800a104:	eb04 0803 	add.w	r8, r4, r3
 800a108:	f000 f9a4 	bl	800a454 <_sbrk_r>
 800a10c:	4580      	cmp	r8, r0
 800a10e:	d13a      	bne.n	800a186 <_malloc_r+0xd2>
 800a110:	6821      	ldr	r1, [r4, #0]
 800a112:	3503      	adds	r5, #3
 800a114:	1a6d      	subs	r5, r5, r1
 800a116:	f025 0503 	bic.w	r5, r5, #3
 800a11a:	3508      	adds	r5, #8
 800a11c:	2d0c      	cmp	r5, #12
 800a11e:	bf38      	it	cc
 800a120:	250c      	movcc	r5, #12
 800a122:	4629      	mov	r1, r5
 800a124:	4638      	mov	r0, r7
 800a126:	f7ff ffa5 	bl	800a074 <sbrk_aligned>
 800a12a:	3001      	adds	r0, #1
 800a12c:	d02b      	beq.n	800a186 <_malloc_r+0xd2>
 800a12e:	6823      	ldr	r3, [r4, #0]
 800a130:	442b      	add	r3, r5
 800a132:	6023      	str	r3, [r4, #0]
 800a134:	e00e      	b.n	800a154 <_malloc_r+0xa0>
 800a136:	6822      	ldr	r2, [r4, #0]
 800a138:	1b52      	subs	r2, r2, r5
 800a13a:	d41e      	bmi.n	800a17a <_malloc_r+0xc6>
 800a13c:	2a0b      	cmp	r2, #11
 800a13e:	d916      	bls.n	800a16e <_malloc_r+0xba>
 800a140:	1961      	adds	r1, r4, r5
 800a142:	42a3      	cmp	r3, r4
 800a144:	6025      	str	r5, [r4, #0]
 800a146:	bf18      	it	ne
 800a148:	6059      	strne	r1, [r3, #4]
 800a14a:	6863      	ldr	r3, [r4, #4]
 800a14c:	bf08      	it	eq
 800a14e:	6031      	streq	r1, [r6, #0]
 800a150:	5162      	str	r2, [r4, r5]
 800a152:	604b      	str	r3, [r1, #4]
 800a154:	4638      	mov	r0, r7
 800a156:	f104 060b 	add.w	r6, r4, #11
 800a15a:	f000 f9ed 	bl	800a538 <__malloc_unlock>
 800a15e:	f026 0607 	bic.w	r6, r6, #7
 800a162:	1d23      	adds	r3, r4, #4
 800a164:	1af2      	subs	r2, r6, r3
 800a166:	d0b6      	beq.n	800a0d6 <_malloc_r+0x22>
 800a168:	1b9b      	subs	r3, r3, r6
 800a16a:	50a3      	str	r3, [r4, r2]
 800a16c:	e7b3      	b.n	800a0d6 <_malloc_r+0x22>
 800a16e:	6862      	ldr	r2, [r4, #4]
 800a170:	42a3      	cmp	r3, r4
 800a172:	bf0c      	ite	eq
 800a174:	6032      	streq	r2, [r6, #0]
 800a176:	605a      	strne	r2, [r3, #4]
 800a178:	e7ec      	b.n	800a154 <_malloc_r+0xa0>
 800a17a:	4623      	mov	r3, r4
 800a17c:	6864      	ldr	r4, [r4, #4]
 800a17e:	e7b2      	b.n	800a0e6 <_malloc_r+0x32>
 800a180:	4634      	mov	r4, r6
 800a182:	6876      	ldr	r6, [r6, #4]
 800a184:	e7b9      	b.n	800a0fa <_malloc_r+0x46>
 800a186:	230c      	movs	r3, #12
 800a188:	603b      	str	r3, [r7, #0]
 800a18a:	4638      	mov	r0, r7
 800a18c:	f000 f9d4 	bl	800a538 <__malloc_unlock>
 800a190:	e7a1      	b.n	800a0d6 <_malloc_r+0x22>
 800a192:	6025      	str	r5, [r4, #0]
 800a194:	e7de      	b.n	800a154 <_malloc_r+0xa0>
 800a196:	bf00      	nop
 800a198:	20000e9c 	.word	0x20000e9c

0800a19c <__ssputs_r>:
 800a19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1a0:	688e      	ldr	r6, [r1, #8]
 800a1a2:	429e      	cmp	r6, r3
 800a1a4:	4682      	mov	sl, r0
 800a1a6:	460c      	mov	r4, r1
 800a1a8:	4690      	mov	r8, r2
 800a1aa:	461f      	mov	r7, r3
 800a1ac:	d838      	bhi.n	800a220 <__ssputs_r+0x84>
 800a1ae:	898a      	ldrh	r2, [r1, #12]
 800a1b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a1b4:	d032      	beq.n	800a21c <__ssputs_r+0x80>
 800a1b6:	6825      	ldr	r5, [r4, #0]
 800a1b8:	6909      	ldr	r1, [r1, #16]
 800a1ba:	eba5 0901 	sub.w	r9, r5, r1
 800a1be:	6965      	ldr	r5, [r4, #20]
 800a1c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	444b      	add	r3, r9
 800a1cc:	106d      	asrs	r5, r5, #1
 800a1ce:	429d      	cmp	r5, r3
 800a1d0:	bf38      	it	cc
 800a1d2:	461d      	movcc	r5, r3
 800a1d4:	0553      	lsls	r3, r2, #21
 800a1d6:	d531      	bpl.n	800a23c <__ssputs_r+0xa0>
 800a1d8:	4629      	mov	r1, r5
 800a1da:	f7ff ff6b 	bl	800a0b4 <_malloc_r>
 800a1de:	4606      	mov	r6, r0
 800a1e0:	b950      	cbnz	r0, 800a1f8 <__ssputs_r+0x5c>
 800a1e2:	230c      	movs	r3, #12
 800a1e4:	f8ca 3000 	str.w	r3, [sl]
 800a1e8:	89a3      	ldrh	r3, [r4, #12]
 800a1ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1ee:	81a3      	strh	r3, [r4, #12]
 800a1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1f8:	6921      	ldr	r1, [r4, #16]
 800a1fa:	464a      	mov	r2, r9
 800a1fc:	f7ff fb46 	bl	800988c <memcpy>
 800a200:	89a3      	ldrh	r3, [r4, #12]
 800a202:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a20a:	81a3      	strh	r3, [r4, #12]
 800a20c:	6126      	str	r6, [r4, #16]
 800a20e:	6165      	str	r5, [r4, #20]
 800a210:	444e      	add	r6, r9
 800a212:	eba5 0509 	sub.w	r5, r5, r9
 800a216:	6026      	str	r6, [r4, #0]
 800a218:	60a5      	str	r5, [r4, #8]
 800a21a:	463e      	mov	r6, r7
 800a21c:	42be      	cmp	r6, r7
 800a21e:	d900      	bls.n	800a222 <__ssputs_r+0x86>
 800a220:	463e      	mov	r6, r7
 800a222:	6820      	ldr	r0, [r4, #0]
 800a224:	4632      	mov	r2, r6
 800a226:	4641      	mov	r1, r8
 800a228:	f000 f966 	bl	800a4f8 <memmove>
 800a22c:	68a3      	ldr	r3, [r4, #8]
 800a22e:	1b9b      	subs	r3, r3, r6
 800a230:	60a3      	str	r3, [r4, #8]
 800a232:	6823      	ldr	r3, [r4, #0]
 800a234:	4433      	add	r3, r6
 800a236:	6023      	str	r3, [r4, #0]
 800a238:	2000      	movs	r0, #0
 800a23a:	e7db      	b.n	800a1f4 <__ssputs_r+0x58>
 800a23c:	462a      	mov	r2, r5
 800a23e:	f000 f981 	bl	800a544 <_realloc_r>
 800a242:	4606      	mov	r6, r0
 800a244:	2800      	cmp	r0, #0
 800a246:	d1e1      	bne.n	800a20c <__ssputs_r+0x70>
 800a248:	6921      	ldr	r1, [r4, #16]
 800a24a:	4650      	mov	r0, sl
 800a24c:	f7ff fec6 	bl	8009fdc <_free_r>
 800a250:	e7c7      	b.n	800a1e2 <__ssputs_r+0x46>
	...

0800a254 <_svfiprintf_r>:
 800a254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a258:	4698      	mov	r8, r3
 800a25a:	898b      	ldrh	r3, [r1, #12]
 800a25c:	061b      	lsls	r3, r3, #24
 800a25e:	b09d      	sub	sp, #116	; 0x74
 800a260:	4607      	mov	r7, r0
 800a262:	460d      	mov	r5, r1
 800a264:	4614      	mov	r4, r2
 800a266:	d50e      	bpl.n	800a286 <_svfiprintf_r+0x32>
 800a268:	690b      	ldr	r3, [r1, #16]
 800a26a:	b963      	cbnz	r3, 800a286 <_svfiprintf_r+0x32>
 800a26c:	2140      	movs	r1, #64	; 0x40
 800a26e:	f7ff ff21 	bl	800a0b4 <_malloc_r>
 800a272:	6028      	str	r0, [r5, #0]
 800a274:	6128      	str	r0, [r5, #16]
 800a276:	b920      	cbnz	r0, 800a282 <_svfiprintf_r+0x2e>
 800a278:	230c      	movs	r3, #12
 800a27a:	603b      	str	r3, [r7, #0]
 800a27c:	f04f 30ff 	mov.w	r0, #4294967295
 800a280:	e0d1      	b.n	800a426 <_svfiprintf_r+0x1d2>
 800a282:	2340      	movs	r3, #64	; 0x40
 800a284:	616b      	str	r3, [r5, #20]
 800a286:	2300      	movs	r3, #0
 800a288:	9309      	str	r3, [sp, #36]	; 0x24
 800a28a:	2320      	movs	r3, #32
 800a28c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a290:	f8cd 800c 	str.w	r8, [sp, #12]
 800a294:	2330      	movs	r3, #48	; 0x30
 800a296:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a440 <_svfiprintf_r+0x1ec>
 800a29a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a29e:	f04f 0901 	mov.w	r9, #1
 800a2a2:	4623      	mov	r3, r4
 800a2a4:	469a      	mov	sl, r3
 800a2a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2aa:	b10a      	cbz	r2, 800a2b0 <_svfiprintf_r+0x5c>
 800a2ac:	2a25      	cmp	r2, #37	; 0x25
 800a2ae:	d1f9      	bne.n	800a2a4 <_svfiprintf_r+0x50>
 800a2b0:	ebba 0b04 	subs.w	fp, sl, r4
 800a2b4:	d00b      	beq.n	800a2ce <_svfiprintf_r+0x7a>
 800a2b6:	465b      	mov	r3, fp
 800a2b8:	4622      	mov	r2, r4
 800a2ba:	4629      	mov	r1, r5
 800a2bc:	4638      	mov	r0, r7
 800a2be:	f7ff ff6d 	bl	800a19c <__ssputs_r>
 800a2c2:	3001      	adds	r0, #1
 800a2c4:	f000 80aa 	beq.w	800a41c <_svfiprintf_r+0x1c8>
 800a2c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2ca:	445a      	add	r2, fp
 800a2cc:	9209      	str	r2, [sp, #36]	; 0x24
 800a2ce:	f89a 3000 	ldrb.w	r3, [sl]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	f000 80a2 	beq.w	800a41c <_svfiprintf_r+0x1c8>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	f04f 32ff 	mov.w	r2, #4294967295
 800a2de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2e2:	f10a 0a01 	add.w	sl, sl, #1
 800a2e6:	9304      	str	r3, [sp, #16]
 800a2e8:	9307      	str	r3, [sp, #28]
 800a2ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2ee:	931a      	str	r3, [sp, #104]	; 0x68
 800a2f0:	4654      	mov	r4, sl
 800a2f2:	2205      	movs	r2, #5
 800a2f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2f8:	4851      	ldr	r0, [pc, #324]	; (800a440 <_svfiprintf_r+0x1ec>)
 800a2fa:	f7f5 ffa9 	bl	8000250 <memchr>
 800a2fe:	9a04      	ldr	r2, [sp, #16]
 800a300:	b9d8      	cbnz	r0, 800a33a <_svfiprintf_r+0xe6>
 800a302:	06d0      	lsls	r0, r2, #27
 800a304:	bf44      	itt	mi
 800a306:	2320      	movmi	r3, #32
 800a308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a30c:	0711      	lsls	r1, r2, #28
 800a30e:	bf44      	itt	mi
 800a310:	232b      	movmi	r3, #43	; 0x2b
 800a312:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a316:	f89a 3000 	ldrb.w	r3, [sl]
 800a31a:	2b2a      	cmp	r3, #42	; 0x2a
 800a31c:	d015      	beq.n	800a34a <_svfiprintf_r+0xf6>
 800a31e:	9a07      	ldr	r2, [sp, #28]
 800a320:	4654      	mov	r4, sl
 800a322:	2000      	movs	r0, #0
 800a324:	f04f 0c0a 	mov.w	ip, #10
 800a328:	4621      	mov	r1, r4
 800a32a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a32e:	3b30      	subs	r3, #48	; 0x30
 800a330:	2b09      	cmp	r3, #9
 800a332:	d94e      	bls.n	800a3d2 <_svfiprintf_r+0x17e>
 800a334:	b1b0      	cbz	r0, 800a364 <_svfiprintf_r+0x110>
 800a336:	9207      	str	r2, [sp, #28]
 800a338:	e014      	b.n	800a364 <_svfiprintf_r+0x110>
 800a33a:	eba0 0308 	sub.w	r3, r0, r8
 800a33e:	fa09 f303 	lsl.w	r3, r9, r3
 800a342:	4313      	orrs	r3, r2
 800a344:	9304      	str	r3, [sp, #16]
 800a346:	46a2      	mov	sl, r4
 800a348:	e7d2      	b.n	800a2f0 <_svfiprintf_r+0x9c>
 800a34a:	9b03      	ldr	r3, [sp, #12]
 800a34c:	1d19      	adds	r1, r3, #4
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	9103      	str	r1, [sp, #12]
 800a352:	2b00      	cmp	r3, #0
 800a354:	bfbb      	ittet	lt
 800a356:	425b      	neglt	r3, r3
 800a358:	f042 0202 	orrlt.w	r2, r2, #2
 800a35c:	9307      	strge	r3, [sp, #28]
 800a35e:	9307      	strlt	r3, [sp, #28]
 800a360:	bfb8      	it	lt
 800a362:	9204      	strlt	r2, [sp, #16]
 800a364:	7823      	ldrb	r3, [r4, #0]
 800a366:	2b2e      	cmp	r3, #46	; 0x2e
 800a368:	d10c      	bne.n	800a384 <_svfiprintf_r+0x130>
 800a36a:	7863      	ldrb	r3, [r4, #1]
 800a36c:	2b2a      	cmp	r3, #42	; 0x2a
 800a36e:	d135      	bne.n	800a3dc <_svfiprintf_r+0x188>
 800a370:	9b03      	ldr	r3, [sp, #12]
 800a372:	1d1a      	adds	r2, r3, #4
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	9203      	str	r2, [sp, #12]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	bfb8      	it	lt
 800a37c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a380:	3402      	adds	r4, #2
 800a382:	9305      	str	r3, [sp, #20]
 800a384:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a450 <_svfiprintf_r+0x1fc>
 800a388:	7821      	ldrb	r1, [r4, #0]
 800a38a:	2203      	movs	r2, #3
 800a38c:	4650      	mov	r0, sl
 800a38e:	f7f5 ff5f 	bl	8000250 <memchr>
 800a392:	b140      	cbz	r0, 800a3a6 <_svfiprintf_r+0x152>
 800a394:	2340      	movs	r3, #64	; 0x40
 800a396:	eba0 000a 	sub.w	r0, r0, sl
 800a39a:	fa03 f000 	lsl.w	r0, r3, r0
 800a39e:	9b04      	ldr	r3, [sp, #16]
 800a3a0:	4303      	orrs	r3, r0
 800a3a2:	3401      	adds	r4, #1
 800a3a4:	9304      	str	r3, [sp, #16]
 800a3a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3aa:	4826      	ldr	r0, [pc, #152]	; (800a444 <_svfiprintf_r+0x1f0>)
 800a3ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3b0:	2206      	movs	r2, #6
 800a3b2:	f7f5 ff4d 	bl	8000250 <memchr>
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	d038      	beq.n	800a42c <_svfiprintf_r+0x1d8>
 800a3ba:	4b23      	ldr	r3, [pc, #140]	; (800a448 <_svfiprintf_r+0x1f4>)
 800a3bc:	bb1b      	cbnz	r3, 800a406 <_svfiprintf_r+0x1b2>
 800a3be:	9b03      	ldr	r3, [sp, #12]
 800a3c0:	3307      	adds	r3, #7
 800a3c2:	f023 0307 	bic.w	r3, r3, #7
 800a3c6:	3308      	adds	r3, #8
 800a3c8:	9303      	str	r3, [sp, #12]
 800a3ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3cc:	4433      	add	r3, r6
 800a3ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a3d0:	e767      	b.n	800a2a2 <_svfiprintf_r+0x4e>
 800a3d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3d6:	460c      	mov	r4, r1
 800a3d8:	2001      	movs	r0, #1
 800a3da:	e7a5      	b.n	800a328 <_svfiprintf_r+0xd4>
 800a3dc:	2300      	movs	r3, #0
 800a3de:	3401      	adds	r4, #1
 800a3e0:	9305      	str	r3, [sp, #20]
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	f04f 0c0a 	mov.w	ip, #10
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3ee:	3a30      	subs	r2, #48	; 0x30
 800a3f0:	2a09      	cmp	r2, #9
 800a3f2:	d903      	bls.n	800a3fc <_svfiprintf_r+0x1a8>
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d0c5      	beq.n	800a384 <_svfiprintf_r+0x130>
 800a3f8:	9105      	str	r1, [sp, #20]
 800a3fa:	e7c3      	b.n	800a384 <_svfiprintf_r+0x130>
 800a3fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a400:	4604      	mov	r4, r0
 800a402:	2301      	movs	r3, #1
 800a404:	e7f0      	b.n	800a3e8 <_svfiprintf_r+0x194>
 800a406:	ab03      	add	r3, sp, #12
 800a408:	9300      	str	r3, [sp, #0]
 800a40a:	462a      	mov	r2, r5
 800a40c:	4b0f      	ldr	r3, [pc, #60]	; (800a44c <_svfiprintf_r+0x1f8>)
 800a40e:	a904      	add	r1, sp, #16
 800a410:	4638      	mov	r0, r7
 800a412:	f7fd ff8d 	bl	8008330 <_printf_float>
 800a416:	1c42      	adds	r2, r0, #1
 800a418:	4606      	mov	r6, r0
 800a41a:	d1d6      	bne.n	800a3ca <_svfiprintf_r+0x176>
 800a41c:	89ab      	ldrh	r3, [r5, #12]
 800a41e:	065b      	lsls	r3, r3, #25
 800a420:	f53f af2c 	bmi.w	800a27c <_svfiprintf_r+0x28>
 800a424:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a426:	b01d      	add	sp, #116	; 0x74
 800a428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a42c:	ab03      	add	r3, sp, #12
 800a42e:	9300      	str	r3, [sp, #0]
 800a430:	462a      	mov	r2, r5
 800a432:	4b06      	ldr	r3, [pc, #24]	; (800a44c <_svfiprintf_r+0x1f8>)
 800a434:	a904      	add	r1, sp, #16
 800a436:	4638      	mov	r0, r7
 800a438:	f7fe fa06 	bl	8008848 <_printf_i>
 800a43c:	e7eb      	b.n	800a416 <_svfiprintf_r+0x1c2>
 800a43e:	bf00      	nop
 800a440:	0800b4e4 	.word	0x0800b4e4
 800a444:	0800b4ee 	.word	0x0800b4ee
 800a448:	08008331 	.word	0x08008331
 800a44c:	0800a19d 	.word	0x0800a19d
 800a450:	0800b4ea 	.word	0x0800b4ea

0800a454 <_sbrk_r>:
 800a454:	b538      	push	{r3, r4, r5, lr}
 800a456:	4d06      	ldr	r5, [pc, #24]	; (800a470 <_sbrk_r+0x1c>)
 800a458:	2300      	movs	r3, #0
 800a45a:	4604      	mov	r4, r0
 800a45c:	4608      	mov	r0, r1
 800a45e:	602b      	str	r3, [r5, #0]
 800a460:	f7f6 fe12 	bl	8001088 <_sbrk>
 800a464:	1c43      	adds	r3, r0, #1
 800a466:	d102      	bne.n	800a46e <_sbrk_r+0x1a>
 800a468:	682b      	ldr	r3, [r5, #0]
 800a46a:	b103      	cbz	r3, 800a46e <_sbrk_r+0x1a>
 800a46c:	6023      	str	r3, [r4, #0]
 800a46e:	bd38      	pop	{r3, r4, r5, pc}
 800a470:	20000ea4 	.word	0x20000ea4

0800a474 <__assert_func>:
 800a474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a476:	4614      	mov	r4, r2
 800a478:	461a      	mov	r2, r3
 800a47a:	4b09      	ldr	r3, [pc, #36]	; (800a4a0 <__assert_func+0x2c>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4605      	mov	r5, r0
 800a480:	68d8      	ldr	r0, [r3, #12]
 800a482:	b14c      	cbz	r4, 800a498 <__assert_func+0x24>
 800a484:	4b07      	ldr	r3, [pc, #28]	; (800a4a4 <__assert_func+0x30>)
 800a486:	9100      	str	r1, [sp, #0]
 800a488:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a48c:	4906      	ldr	r1, [pc, #24]	; (800a4a8 <__assert_func+0x34>)
 800a48e:	462b      	mov	r3, r5
 800a490:	f000 f80e 	bl	800a4b0 <fiprintf>
 800a494:	f000 faac 	bl	800a9f0 <abort>
 800a498:	4b04      	ldr	r3, [pc, #16]	; (800a4ac <__assert_func+0x38>)
 800a49a:	461c      	mov	r4, r3
 800a49c:	e7f3      	b.n	800a486 <__assert_func+0x12>
 800a49e:	bf00      	nop
 800a4a0:	200004c8 	.word	0x200004c8
 800a4a4:	0800b4f5 	.word	0x0800b4f5
 800a4a8:	0800b502 	.word	0x0800b502
 800a4ac:	0800b530 	.word	0x0800b530

0800a4b0 <fiprintf>:
 800a4b0:	b40e      	push	{r1, r2, r3}
 800a4b2:	b503      	push	{r0, r1, lr}
 800a4b4:	4601      	mov	r1, r0
 800a4b6:	ab03      	add	r3, sp, #12
 800a4b8:	4805      	ldr	r0, [pc, #20]	; (800a4d0 <fiprintf+0x20>)
 800a4ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4be:	6800      	ldr	r0, [r0, #0]
 800a4c0:	9301      	str	r3, [sp, #4]
 800a4c2:	f000 f897 	bl	800a5f4 <_vfiprintf_r>
 800a4c6:	b002      	add	sp, #8
 800a4c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4cc:	b003      	add	sp, #12
 800a4ce:	4770      	bx	lr
 800a4d0:	200004c8 	.word	0x200004c8

0800a4d4 <__ascii_mbtowc>:
 800a4d4:	b082      	sub	sp, #8
 800a4d6:	b901      	cbnz	r1, 800a4da <__ascii_mbtowc+0x6>
 800a4d8:	a901      	add	r1, sp, #4
 800a4da:	b142      	cbz	r2, 800a4ee <__ascii_mbtowc+0x1a>
 800a4dc:	b14b      	cbz	r3, 800a4f2 <__ascii_mbtowc+0x1e>
 800a4de:	7813      	ldrb	r3, [r2, #0]
 800a4e0:	600b      	str	r3, [r1, #0]
 800a4e2:	7812      	ldrb	r2, [r2, #0]
 800a4e4:	1e10      	subs	r0, r2, #0
 800a4e6:	bf18      	it	ne
 800a4e8:	2001      	movne	r0, #1
 800a4ea:	b002      	add	sp, #8
 800a4ec:	4770      	bx	lr
 800a4ee:	4610      	mov	r0, r2
 800a4f0:	e7fb      	b.n	800a4ea <__ascii_mbtowc+0x16>
 800a4f2:	f06f 0001 	mvn.w	r0, #1
 800a4f6:	e7f8      	b.n	800a4ea <__ascii_mbtowc+0x16>

0800a4f8 <memmove>:
 800a4f8:	4288      	cmp	r0, r1
 800a4fa:	b510      	push	{r4, lr}
 800a4fc:	eb01 0402 	add.w	r4, r1, r2
 800a500:	d902      	bls.n	800a508 <memmove+0x10>
 800a502:	4284      	cmp	r4, r0
 800a504:	4623      	mov	r3, r4
 800a506:	d807      	bhi.n	800a518 <memmove+0x20>
 800a508:	1e43      	subs	r3, r0, #1
 800a50a:	42a1      	cmp	r1, r4
 800a50c:	d008      	beq.n	800a520 <memmove+0x28>
 800a50e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a512:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a516:	e7f8      	b.n	800a50a <memmove+0x12>
 800a518:	4402      	add	r2, r0
 800a51a:	4601      	mov	r1, r0
 800a51c:	428a      	cmp	r2, r1
 800a51e:	d100      	bne.n	800a522 <memmove+0x2a>
 800a520:	bd10      	pop	{r4, pc}
 800a522:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a526:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a52a:	e7f7      	b.n	800a51c <memmove+0x24>

0800a52c <__malloc_lock>:
 800a52c:	4801      	ldr	r0, [pc, #4]	; (800a534 <__malloc_lock+0x8>)
 800a52e:	f000 bc1f 	b.w	800ad70 <__retarget_lock_acquire_recursive>
 800a532:	bf00      	nop
 800a534:	20000ea8 	.word	0x20000ea8

0800a538 <__malloc_unlock>:
 800a538:	4801      	ldr	r0, [pc, #4]	; (800a540 <__malloc_unlock+0x8>)
 800a53a:	f000 bc1a 	b.w	800ad72 <__retarget_lock_release_recursive>
 800a53e:	bf00      	nop
 800a540:	20000ea8 	.word	0x20000ea8

0800a544 <_realloc_r>:
 800a544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a548:	4680      	mov	r8, r0
 800a54a:	4614      	mov	r4, r2
 800a54c:	460e      	mov	r6, r1
 800a54e:	b921      	cbnz	r1, 800a55a <_realloc_r+0x16>
 800a550:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a554:	4611      	mov	r1, r2
 800a556:	f7ff bdad 	b.w	800a0b4 <_malloc_r>
 800a55a:	b92a      	cbnz	r2, 800a568 <_realloc_r+0x24>
 800a55c:	f7ff fd3e 	bl	8009fdc <_free_r>
 800a560:	4625      	mov	r5, r4
 800a562:	4628      	mov	r0, r5
 800a564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a568:	f000 fc6a 	bl	800ae40 <_malloc_usable_size_r>
 800a56c:	4284      	cmp	r4, r0
 800a56e:	4607      	mov	r7, r0
 800a570:	d802      	bhi.n	800a578 <_realloc_r+0x34>
 800a572:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a576:	d812      	bhi.n	800a59e <_realloc_r+0x5a>
 800a578:	4621      	mov	r1, r4
 800a57a:	4640      	mov	r0, r8
 800a57c:	f7ff fd9a 	bl	800a0b4 <_malloc_r>
 800a580:	4605      	mov	r5, r0
 800a582:	2800      	cmp	r0, #0
 800a584:	d0ed      	beq.n	800a562 <_realloc_r+0x1e>
 800a586:	42bc      	cmp	r4, r7
 800a588:	4622      	mov	r2, r4
 800a58a:	4631      	mov	r1, r6
 800a58c:	bf28      	it	cs
 800a58e:	463a      	movcs	r2, r7
 800a590:	f7ff f97c 	bl	800988c <memcpy>
 800a594:	4631      	mov	r1, r6
 800a596:	4640      	mov	r0, r8
 800a598:	f7ff fd20 	bl	8009fdc <_free_r>
 800a59c:	e7e1      	b.n	800a562 <_realloc_r+0x1e>
 800a59e:	4635      	mov	r5, r6
 800a5a0:	e7df      	b.n	800a562 <_realloc_r+0x1e>

0800a5a2 <__sfputc_r>:
 800a5a2:	6893      	ldr	r3, [r2, #8]
 800a5a4:	3b01      	subs	r3, #1
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	b410      	push	{r4}
 800a5aa:	6093      	str	r3, [r2, #8]
 800a5ac:	da08      	bge.n	800a5c0 <__sfputc_r+0x1e>
 800a5ae:	6994      	ldr	r4, [r2, #24]
 800a5b0:	42a3      	cmp	r3, r4
 800a5b2:	db01      	blt.n	800a5b8 <__sfputc_r+0x16>
 800a5b4:	290a      	cmp	r1, #10
 800a5b6:	d103      	bne.n	800a5c0 <__sfputc_r+0x1e>
 800a5b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5bc:	f000 b94a 	b.w	800a854 <__swbuf_r>
 800a5c0:	6813      	ldr	r3, [r2, #0]
 800a5c2:	1c58      	adds	r0, r3, #1
 800a5c4:	6010      	str	r0, [r2, #0]
 800a5c6:	7019      	strb	r1, [r3, #0]
 800a5c8:	4608      	mov	r0, r1
 800a5ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <__sfputs_r>:
 800a5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d2:	4606      	mov	r6, r0
 800a5d4:	460f      	mov	r7, r1
 800a5d6:	4614      	mov	r4, r2
 800a5d8:	18d5      	adds	r5, r2, r3
 800a5da:	42ac      	cmp	r4, r5
 800a5dc:	d101      	bne.n	800a5e2 <__sfputs_r+0x12>
 800a5de:	2000      	movs	r0, #0
 800a5e0:	e007      	b.n	800a5f2 <__sfputs_r+0x22>
 800a5e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5e6:	463a      	mov	r2, r7
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	f7ff ffda 	bl	800a5a2 <__sfputc_r>
 800a5ee:	1c43      	adds	r3, r0, #1
 800a5f0:	d1f3      	bne.n	800a5da <__sfputs_r+0xa>
 800a5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a5f4 <_vfiprintf_r>:
 800a5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f8:	460d      	mov	r5, r1
 800a5fa:	b09d      	sub	sp, #116	; 0x74
 800a5fc:	4614      	mov	r4, r2
 800a5fe:	4698      	mov	r8, r3
 800a600:	4606      	mov	r6, r0
 800a602:	b118      	cbz	r0, 800a60c <_vfiprintf_r+0x18>
 800a604:	6983      	ldr	r3, [r0, #24]
 800a606:	b90b      	cbnz	r3, 800a60c <_vfiprintf_r+0x18>
 800a608:	f000 fb14 	bl	800ac34 <__sinit>
 800a60c:	4b89      	ldr	r3, [pc, #548]	; (800a834 <_vfiprintf_r+0x240>)
 800a60e:	429d      	cmp	r5, r3
 800a610:	d11b      	bne.n	800a64a <_vfiprintf_r+0x56>
 800a612:	6875      	ldr	r5, [r6, #4]
 800a614:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a616:	07d9      	lsls	r1, r3, #31
 800a618:	d405      	bmi.n	800a626 <_vfiprintf_r+0x32>
 800a61a:	89ab      	ldrh	r3, [r5, #12]
 800a61c:	059a      	lsls	r2, r3, #22
 800a61e:	d402      	bmi.n	800a626 <_vfiprintf_r+0x32>
 800a620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a622:	f000 fba5 	bl	800ad70 <__retarget_lock_acquire_recursive>
 800a626:	89ab      	ldrh	r3, [r5, #12]
 800a628:	071b      	lsls	r3, r3, #28
 800a62a:	d501      	bpl.n	800a630 <_vfiprintf_r+0x3c>
 800a62c:	692b      	ldr	r3, [r5, #16]
 800a62e:	b9eb      	cbnz	r3, 800a66c <_vfiprintf_r+0x78>
 800a630:	4629      	mov	r1, r5
 800a632:	4630      	mov	r0, r6
 800a634:	f000 f96e 	bl	800a914 <__swsetup_r>
 800a638:	b1c0      	cbz	r0, 800a66c <_vfiprintf_r+0x78>
 800a63a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a63c:	07dc      	lsls	r4, r3, #31
 800a63e:	d50e      	bpl.n	800a65e <_vfiprintf_r+0x6a>
 800a640:	f04f 30ff 	mov.w	r0, #4294967295
 800a644:	b01d      	add	sp, #116	; 0x74
 800a646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a64a:	4b7b      	ldr	r3, [pc, #492]	; (800a838 <_vfiprintf_r+0x244>)
 800a64c:	429d      	cmp	r5, r3
 800a64e:	d101      	bne.n	800a654 <_vfiprintf_r+0x60>
 800a650:	68b5      	ldr	r5, [r6, #8]
 800a652:	e7df      	b.n	800a614 <_vfiprintf_r+0x20>
 800a654:	4b79      	ldr	r3, [pc, #484]	; (800a83c <_vfiprintf_r+0x248>)
 800a656:	429d      	cmp	r5, r3
 800a658:	bf08      	it	eq
 800a65a:	68f5      	ldreq	r5, [r6, #12]
 800a65c:	e7da      	b.n	800a614 <_vfiprintf_r+0x20>
 800a65e:	89ab      	ldrh	r3, [r5, #12]
 800a660:	0598      	lsls	r0, r3, #22
 800a662:	d4ed      	bmi.n	800a640 <_vfiprintf_r+0x4c>
 800a664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a666:	f000 fb84 	bl	800ad72 <__retarget_lock_release_recursive>
 800a66a:	e7e9      	b.n	800a640 <_vfiprintf_r+0x4c>
 800a66c:	2300      	movs	r3, #0
 800a66e:	9309      	str	r3, [sp, #36]	; 0x24
 800a670:	2320      	movs	r3, #32
 800a672:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a676:	f8cd 800c 	str.w	r8, [sp, #12]
 800a67a:	2330      	movs	r3, #48	; 0x30
 800a67c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a840 <_vfiprintf_r+0x24c>
 800a680:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a684:	f04f 0901 	mov.w	r9, #1
 800a688:	4623      	mov	r3, r4
 800a68a:	469a      	mov	sl, r3
 800a68c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a690:	b10a      	cbz	r2, 800a696 <_vfiprintf_r+0xa2>
 800a692:	2a25      	cmp	r2, #37	; 0x25
 800a694:	d1f9      	bne.n	800a68a <_vfiprintf_r+0x96>
 800a696:	ebba 0b04 	subs.w	fp, sl, r4
 800a69a:	d00b      	beq.n	800a6b4 <_vfiprintf_r+0xc0>
 800a69c:	465b      	mov	r3, fp
 800a69e:	4622      	mov	r2, r4
 800a6a0:	4629      	mov	r1, r5
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	f7ff ff94 	bl	800a5d0 <__sfputs_r>
 800a6a8:	3001      	adds	r0, #1
 800a6aa:	f000 80aa 	beq.w	800a802 <_vfiprintf_r+0x20e>
 800a6ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6b0:	445a      	add	r2, fp
 800a6b2:	9209      	str	r2, [sp, #36]	; 0x24
 800a6b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	f000 80a2 	beq.w	800a802 <_vfiprintf_r+0x20e>
 800a6be:	2300      	movs	r3, #0
 800a6c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6c8:	f10a 0a01 	add.w	sl, sl, #1
 800a6cc:	9304      	str	r3, [sp, #16]
 800a6ce:	9307      	str	r3, [sp, #28]
 800a6d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6d4:	931a      	str	r3, [sp, #104]	; 0x68
 800a6d6:	4654      	mov	r4, sl
 800a6d8:	2205      	movs	r2, #5
 800a6da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6de:	4858      	ldr	r0, [pc, #352]	; (800a840 <_vfiprintf_r+0x24c>)
 800a6e0:	f7f5 fdb6 	bl	8000250 <memchr>
 800a6e4:	9a04      	ldr	r2, [sp, #16]
 800a6e6:	b9d8      	cbnz	r0, 800a720 <_vfiprintf_r+0x12c>
 800a6e8:	06d1      	lsls	r1, r2, #27
 800a6ea:	bf44      	itt	mi
 800a6ec:	2320      	movmi	r3, #32
 800a6ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6f2:	0713      	lsls	r3, r2, #28
 800a6f4:	bf44      	itt	mi
 800a6f6:	232b      	movmi	r3, #43	; 0x2b
 800a6f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6fc:	f89a 3000 	ldrb.w	r3, [sl]
 800a700:	2b2a      	cmp	r3, #42	; 0x2a
 800a702:	d015      	beq.n	800a730 <_vfiprintf_r+0x13c>
 800a704:	9a07      	ldr	r2, [sp, #28]
 800a706:	4654      	mov	r4, sl
 800a708:	2000      	movs	r0, #0
 800a70a:	f04f 0c0a 	mov.w	ip, #10
 800a70e:	4621      	mov	r1, r4
 800a710:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a714:	3b30      	subs	r3, #48	; 0x30
 800a716:	2b09      	cmp	r3, #9
 800a718:	d94e      	bls.n	800a7b8 <_vfiprintf_r+0x1c4>
 800a71a:	b1b0      	cbz	r0, 800a74a <_vfiprintf_r+0x156>
 800a71c:	9207      	str	r2, [sp, #28]
 800a71e:	e014      	b.n	800a74a <_vfiprintf_r+0x156>
 800a720:	eba0 0308 	sub.w	r3, r0, r8
 800a724:	fa09 f303 	lsl.w	r3, r9, r3
 800a728:	4313      	orrs	r3, r2
 800a72a:	9304      	str	r3, [sp, #16]
 800a72c:	46a2      	mov	sl, r4
 800a72e:	e7d2      	b.n	800a6d6 <_vfiprintf_r+0xe2>
 800a730:	9b03      	ldr	r3, [sp, #12]
 800a732:	1d19      	adds	r1, r3, #4
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	9103      	str	r1, [sp, #12]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	bfbb      	ittet	lt
 800a73c:	425b      	neglt	r3, r3
 800a73e:	f042 0202 	orrlt.w	r2, r2, #2
 800a742:	9307      	strge	r3, [sp, #28]
 800a744:	9307      	strlt	r3, [sp, #28]
 800a746:	bfb8      	it	lt
 800a748:	9204      	strlt	r2, [sp, #16]
 800a74a:	7823      	ldrb	r3, [r4, #0]
 800a74c:	2b2e      	cmp	r3, #46	; 0x2e
 800a74e:	d10c      	bne.n	800a76a <_vfiprintf_r+0x176>
 800a750:	7863      	ldrb	r3, [r4, #1]
 800a752:	2b2a      	cmp	r3, #42	; 0x2a
 800a754:	d135      	bne.n	800a7c2 <_vfiprintf_r+0x1ce>
 800a756:	9b03      	ldr	r3, [sp, #12]
 800a758:	1d1a      	adds	r2, r3, #4
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	9203      	str	r2, [sp, #12]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	bfb8      	it	lt
 800a762:	f04f 33ff 	movlt.w	r3, #4294967295
 800a766:	3402      	adds	r4, #2
 800a768:	9305      	str	r3, [sp, #20]
 800a76a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a850 <_vfiprintf_r+0x25c>
 800a76e:	7821      	ldrb	r1, [r4, #0]
 800a770:	2203      	movs	r2, #3
 800a772:	4650      	mov	r0, sl
 800a774:	f7f5 fd6c 	bl	8000250 <memchr>
 800a778:	b140      	cbz	r0, 800a78c <_vfiprintf_r+0x198>
 800a77a:	2340      	movs	r3, #64	; 0x40
 800a77c:	eba0 000a 	sub.w	r0, r0, sl
 800a780:	fa03 f000 	lsl.w	r0, r3, r0
 800a784:	9b04      	ldr	r3, [sp, #16]
 800a786:	4303      	orrs	r3, r0
 800a788:	3401      	adds	r4, #1
 800a78a:	9304      	str	r3, [sp, #16]
 800a78c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a790:	482c      	ldr	r0, [pc, #176]	; (800a844 <_vfiprintf_r+0x250>)
 800a792:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a796:	2206      	movs	r2, #6
 800a798:	f7f5 fd5a 	bl	8000250 <memchr>
 800a79c:	2800      	cmp	r0, #0
 800a79e:	d03f      	beq.n	800a820 <_vfiprintf_r+0x22c>
 800a7a0:	4b29      	ldr	r3, [pc, #164]	; (800a848 <_vfiprintf_r+0x254>)
 800a7a2:	bb1b      	cbnz	r3, 800a7ec <_vfiprintf_r+0x1f8>
 800a7a4:	9b03      	ldr	r3, [sp, #12]
 800a7a6:	3307      	adds	r3, #7
 800a7a8:	f023 0307 	bic.w	r3, r3, #7
 800a7ac:	3308      	adds	r3, #8
 800a7ae:	9303      	str	r3, [sp, #12]
 800a7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7b2:	443b      	add	r3, r7
 800a7b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7b6:	e767      	b.n	800a688 <_vfiprintf_r+0x94>
 800a7b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7bc:	460c      	mov	r4, r1
 800a7be:	2001      	movs	r0, #1
 800a7c0:	e7a5      	b.n	800a70e <_vfiprintf_r+0x11a>
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	3401      	adds	r4, #1
 800a7c6:	9305      	str	r3, [sp, #20]
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	f04f 0c0a 	mov.w	ip, #10
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7d4:	3a30      	subs	r2, #48	; 0x30
 800a7d6:	2a09      	cmp	r2, #9
 800a7d8:	d903      	bls.n	800a7e2 <_vfiprintf_r+0x1ee>
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d0c5      	beq.n	800a76a <_vfiprintf_r+0x176>
 800a7de:	9105      	str	r1, [sp, #20]
 800a7e0:	e7c3      	b.n	800a76a <_vfiprintf_r+0x176>
 800a7e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7e6:	4604      	mov	r4, r0
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e7f0      	b.n	800a7ce <_vfiprintf_r+0x1da>
 800a7ec:	ab03      	add	r3, sp, #12
 800a7ee:	9300      	str	r3, [sp, #0]
 800a7f0:	462a      	mov	r2, r5
 800a7f2:	4b16      	ldr	r3, [pc, #88]	; (800a84c <_vfiprintf_r+0x258>)
 800a7f4:	a904      	add	r1, sp, #16
 800a7f6:	4630      	mov	r0, r6
 800a7f8:	f7fd fd9a 	bl	8008330 <_printf_float>
 800a7fc:	4607      	mov	r7, r0
 800a7fe:	1c78      	adds	r0, r7, #1
 800a800:	d1d6      	bne.n	800a7b0 <_vfiprintf_r+0x1bc>
 800a802:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a804:	07d9      	lsls	r1, r3, #31
 800a806:	d405      	bmi.n	800a814 <_vfiprintf_r+0x220>
 800a808:	89ab      	ldrh	r3, [r5, #12]
 800a80a:	059a      	lsls	r2, r3, #22
 800a80c:	d402      	bmi.n	800a814 <_vfiprintf_r+0x220>
 800a80e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a810:	f000 faaf 	bl	800ad72 <__retarget_lock_release_recursive>
 800a814:	89ab      	ldrh	r3, [r5, #12]
 800a816:	065b      	lsls	r3, r3, #25
 800a818:	f53f af12 	bmi.w	800a640 <_vfiprintf_r+0x4c>
 800a81c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a81e:	e711      	b.n	800a644 <_vfiprintf_r+0x50>
 800a820:	ab03      	add	r3, sp, #12
 800a822:	9300      	str	r3, [sp, #0]
 800a824:	462a      	mov	r2, r5
 800a826:	4b09      	ldr	r3, [pc, #36]	; (800a84c <_vfiprintf_r+0x258>)
 800a828:	a904      	add	r1, sp, #16
 800a82a:	4630      	mov	r0, r6
 800a82c:	f7fe f80c 	bl	8008848 <_printf_i>
 800a830:	e7e4      	b.n	800a7fc <_vfiprintf_r+0x208>
 800a832:	bf00      	nop
 800a834:	0800b55c 	.word	0x0800b55c
 800a838:	0800b57c 	.word	0x0800b57c
 800a83c:	0800b53c 	.word	0x0800b53c
 800a840:	0800b4e4 	.word	0x0800b4e4
 800a844:	0800b4ee 	.word	0x0800b4ee
 800a848:	08008331 	.word	0x08008331
 800a84c:	0800a5d1 	.word	0x0800a5d1
 800a850:	0800b4ea 	.word	0x0800b4ea

0800a854 <__swbuf_r>:
 800a854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a856:	460e      	mov	r6, r1
 800a858:	4614      	mov	r4, r2
 800a85a:	4605      	mov	r5, r0
 800a85c:	b118      	cbz	r0, 800a866 <__swbuf_r+0x12>
 800a85e:	6983      	ldr	r3, [r0, #24]
 800a860:	b90b      	cbnz	r3, 800a866 <__swbuf_r+0x12>
 800a862:	f000 f9e7 	bl	800ac34 <__sinit>
 800a866:	4b21      	ldr	r3, [pc, #132]	; (800a8ec <__swbuf_r+0x98>)
 800a868:	429c      	cmp	r4, r3
 800a86a:	d12b      	bne.n	800a8c4 <__swbuf_r+0x70>
 800a86c:	686c      	ldr	r4, [r5, #4]
 800a86e:	69a3      	ldr	r3, [r4, #24]
 800a870:	60a3      	str	r3, [r4, #8]
 800a872:	89a3      	ldrh	r3, [r4, #12]
 800a874:	071a      	lsls	r2, r3, #28
 800a876:	d52f      	bpl.n	800a8d8 <__swbuf_r+0x84>
 800a878:	6923      	ldr	r3, [r4, #16]
 800a87a:	b36b      	cbz	r3, 800a8d8 <__swbuf_r+0x84>
 800a87c:	6923      	ldr	r3, [r4, #16]
 800a87e:	6820      	ldr	r0, [r4, #0]
 800a880:	1ac0      	subs	r0, r0, r3
 800a882:	6963      	ldr	r3, [r4, #20]
 800a884:	b2f6      	uxtb	r6, r6
 800a886:	4283      	cmp	r3, r0
 800a888:	4637      	mov	r7, r6
 800a88a:	dc04      	bgt.n	800a896 <__swbuf_r+0x42>
 800a88c:	4621      	mov	r1, r4
 800a88e:	4628      	mov	r0, r5
 800a890:	f000 f93c 	bl	800ab0c <_fflush_r>
 800a894:	bb30      	cbnz	r0, 800a8e4 <__swbuf_r+0x90>
 800a896:	68a3      	ldr	r3, [r4, #8]
 800a898:	3b01      	subs	r3, #1
 800a89a:	60a3      	str	r3, [r4, #8]
 800a89c:	6823      	ldr	r3, [r4, #0]
 800a89e:	1c5a      	adds	r2, r3, #1
 800a8a0:	6022      	str	r2, [r4, #0]
 800a8a2:	701e      	strb	r6, [r3, #0]
 800a8a4:	6963      	ldr	r3, [r4, #20]
 800a8a6:	3001      	adds	r0, #1
 800a8a8:	4283      	cmp	r3, r0
 800a8aa:	d004      	beq.n	800a8b6 <__swbuf_r+0x62>
 800a8ac:	89a3      	ldrh	r3, [r4, #12]
 800a8ae:	07db      	lsls	r3, r3, #31
 800a8b0:	d506      	bpl.n	800a8c0 <__swbuf_r+0x6c>
 800a8b2:	2e0a      	cmp	r6, #10
 800a8b4:	d104      	bne.n	800a8c0 <__swbuf_r+0x6c>
 800a8b6:	4621      	mov	r1, r4
 800a8b8:	4628      	mov	r0, r5
 800a8ba:	f000 f927 	bl	800ab0c <_fflush_r>
 800a8be:	b988      	cbnz	r0, 800a8e4 <__swbuf_r+0x90>
 800a8c0:	4638      	mov	r0, r7
 800a8c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8c4:	4b0a      	ldr	r3, [pc, #40]	; (800a8f0 <__swbuf_r+0x9c>)
 800a8c6:	429c      	cmp	r4, r3
 800a8c8:	d101      	bne.n	800a8ce <__swbuf_r+0x7a>
 800a8ca:	68ac      	ldr	r4, [r5, #8]
 800a8cc:	e7cf      	b.n	800a86e <__swbuf_r+0x1a>
 800a8ce:	4b09      	ldr	r3, [pc, #36]	; (800a8f4 <__swbuf_r+0xa0>)
 800a8d0:	429c      	cmp	r4, r3
 800a8d2:	bf08      	it	eq
 800a8d4:	68ec      	ldreq	r4, [r5, #12]
 800a8d6:	e7ca      	b.n	800a86e <__swbuf_r+0x1a>
 800a8d8:	4621      	mov	r1, r4
 800a8da:	4628      	mov	r0, r5
 800a8dc:	f000 f81a 	bl	800a914 <__swsetup_r>
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	d0cb      	beq.n	800a87c <__swbuf_r+0x28>
 800a8e4:	f04f 37ff 	mov.w	r7, #4294967295
 800a8e8:	e7ea      	b.n	800a8c0 <__swbuf_r+0x6c>
 800a8ea:	bf00      	nop
 800a8ec:	0800b55c 	.word	0x0800b55c
 800a8f0:	0800b57c 	.word	0x0800b57c
 800a8f4:	0800b53c 	.word	0x0800b53c

0800a8f8 <__ascii_wctomb>:
 800a8f8:	b149      	cbz	r1, 800a90e <__ascii_wctomb+0x16>
 800a8fa:	2aff      	cmp	r2, #255	; 0xff
 800a8fc:	bf85      	ittet	hi
 800a8fe:	238a      	movhi	r3, #138	; 0x8a
 800a900:	6003      	strhi	r3, [r0, #0]
 800a902:	700a      	strbls	r2, [r1, #0]
 800a904:	f04f 30ff 	movhi.w	r0, #4294967295
 800a908:	bf98      	it	ls
 800a90a:	2001      	movls	r0, #1
 800a90c:	4770      	bx	lr
 800a90e:	4608      	mov	r0, r1
 800a910:	4770      	bx	lr
	...

0800a914 <__swsetup_r>:
 800a914:	4b32      	ldr	r3, [pc, #200]	; (800a9e0 <__swsetup_r+0xcc>)
 800a916:	b570      	push	{r4, r5, r6, lr}
 800a918:	681d      	ldr	r5, [r3, #0]
 800a91a:	4606      	mov	r6, r0
 800a91c:	460c      	mov	r4, r1
 800a91e:	b125      	cbz	r5, 800a92a <__swsetup_r+0x16>
 800a920:	69ab      	ldr	r3, [r5, #24]
 800a922:	b913      	cbnz	r3, 800a92a <__swsetup_r+0x16>
 800a924:	4628      	mov	r0, r5
 800a926:	f000 f985 	bl	800ac34 <__sinit>
 800a92a:	4b2e      	ldr	r3, [pc, #184]	; (800a9e4 <__swsetup_r+0xd0>)
 800a92c:	429c      	cmp	r4, r3
 800a92e:	d10f      	bne.n	800a950 <__swsetup_r+0x3c>
 800a930:	686c      	ldr	r4, [r5, #4]
 800a932:	89a3      	ldrh	r3, [r4, #12]
 800a934:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a938:	0719      	lsls	r1, r3, #28
 800a93a:	d42c      	bmi.n	800a996 <__swsetup_r+0x82>
 800a93c:	06dd      	lsls	r5, r3, #27
 800a93e:	d411      	bmi.n	800a964 <__swsetup_r+0x50>
 800a940:	2309      	movs	r3, #9
 800a942:	6033      	str	r3, [r6, #0]
 800a944:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a948:	81a3      	strh	r3, [r4, #12]
 800a94a:	f04f 30ff 	mov.w	r0, #4294967295
 800a94e:	e03e      	b.n	800a9ce <__swsetup_r+0xba>
 800a950:	4b25      	ldr	r3, [pc, #148]	; (800a9e8 <__swsetup_r+0xd4>)
 800a952:	429c      	cmp	r4, r3
 800a954:	d101      	bne.n	800a95a <__swsetup_r+0x46>
 800a956:	68ac      	ldr	r4, [r5, #8]
 800a958:	e7eb      	b.n	800a932 <__swsetup_r+0x1e>
 800a95a:	4b24      	ldr	r3, [pc, #144]	; (800a9ec <__swsetup_r+0xd8>)
 800a95c:	429c      	cmp	r4, r3
 800a95e:	bf08      	it	eq
 800a960:	68ec      	ldreq	r4, [r5, #12]
 800a962:	e7e6      	b.n	800a932 <__swsetup_r+0x1e>
 800a964:	0758      	lsls	r0, r3, #29
 800a966:	d512      	bpl.n	800a98e <__swsetup_r+0x7a>
 800a968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a96a:	b141      	cbz	r1, 800a97e <__swsetup_r+0x6a>
 800a96c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a970:	4299      	cmp	r1, r3
 800a972:	d002      	beq.n	800a97a <__swsetup_r+0x66>
 800a974:	4630      	mov	r0, r6
 800a976:	f7ff fb31 	bl	8009fdc <_free_r>
 800a97a:	2300      	movs	r3, #0
 800a97c:	6363      	str	r3, [r4, #52]	; 0x34
 800a97e:	89a3      	ldrh	r3, [r4, #12]
 800a980:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a984:	81a3      	strh	r3, [r4, #12]
 800a986:	2300      	movs	r3, #0
 800a988:	6063      	str	r3, [r4, #4]
 800a98a:	6923      	ldr	r3, [r4, #16]
 800a98c:	6023      	str	r3, [r4, #0]
 800a98e:	89a3      	ldrh	r3, [r4, #12]
 800a990:	f043 0308 	orr.w	r3, r3, #8
 800a994:	81a3      	strh	r3, [r4, #12]
 800a996:	6923      	ldr	r3, [r4, #16]
 800a998:	b94b      	cbnz	r3, 800a9ae <__swsetup_r+0x9a>
 800a99a:	89a3      	ldrh	r3, [r4, #12]
 800a99c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a9a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9a4:	d003      	beq.n	800a9ae <__swsetup_r+0x9a>
 800a9a6:	4621      	mov	r1, r4
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	f000 fa09 	bl	800adc0 <__smakebuf_r>
 800a9ae:	89a0      	ldrh	r0, [r4, #12]
 800a9b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9b4:	f010 0301 	ands.w	r3, r0, #1
 800a9b8:	d00a      	beq.n	800a9d0 <__swsetup_r+0xbc>
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	60a3      	str	r3, [r4, #8]
 800a9be:	6963      	ldr	r3, [r4, #20]
 800a9c0:	425b      	negs	r3, r3
 800a9c2:	61a3      	str	r3, [r4, #24]
 800a9c4:	6923      	ldr	r3, [r4, #16]
 800a9c6:	b943      	cbnz	r3, 800a9da <__swsetup_r+0xc6>
 800a9c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a9cc:	d1ba      	bne.n	800a944 <__swsetup_r+0x30>
 800a9ce:	bd70      	pop	{r4, r5, r6, pc}
 800a9d0:	0781      	lsls	r1, r0, #30
 800a9d2:	bf58      	it	pl
 800a9d4:	6963      	ldrpl	r3, [r4, #20]
 800a9d6:	60a3      	str	r3, [r4, #8]
 800a9d8:	e7f4      	b.n	800a9c4 <__swsetup_r+0xb0>
 800a9da:	2000      	movs	r0, #0
 800a9dc:	e7f7      	b.n	800a9ce <__swsetup_r+0xba>
 800a9de:	bf00      	nop
 800a9e0:	200004c8 	.word	0x200004c8
 800a9e4:	0800b55c 	.word	0x0800b55c
 800a9e8:	0800b57c 	.word	0x0800b57c
 800a9ec:	0800b53c 	.word	0x0800b53c

0800a9f0 <abort>:
 800a9f0:	b508      	push	{r3, lr}
 800a9f2:	2006      	movs	r0, #6
 800a9f4:	f000 fa54 	bl	800aea0 <raise>
 800a9f8:	2001      	movs	r0, #1
 800a9fa:	f7f6 facd 	bl	8000f98 <_exit>
	...

0800aa00 <__sflush_r>:
 800aa00:	898a      	ldrh	r2, [r1, #12]
 800aa02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa06:	4605      	mov	r5, r0
 800aa08:	0710      	lsls	r0, r2, #28
 800aa0a:	460c      	mov	r4, r1
 800aa0c:	d458      	bmi.n	800aac0 <__sflush_r+0xc0>
 800aa0e:	684b      	ldr	r3, [r1, #4]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	dc05      	bgt.n	800aa20 <__sflush_r+0x20>
 800aa14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	dc02      	bgt.n	800aa20 <__sflush_r+0x20>
 800aa1a:	2000      	movs	r0, #0
 800aa1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa22:	2e00      	cmp	r6, #0
 800aa24:	d0f9      	beq.n	800aa1a <__sflush_r+0x1a>
 800aa26:	2300      	movs	r3, #0
 800aa28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa2c:	682f      	ldr	r7, [r5, #0]
 800aa2e:	602b      	str	r3, [r5, #0]
 800aa30:	d032      	beq.n	800aa98 <__sflush_r+0x98>
 800aa32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa34:	89a3      	ldrh	r3, [r4, #12]
 800aa36:	075a      	lsls	r2, r3, #29
 800aa38:	d505      	bpl.n	800aa46 <__sflush_r+0x46>
 800aa3a:	6863      	ldr	r3, [r4, #4]
 800aa3c:	1ac0      	subs	r0, r0, r3
 800aa3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa40:	b10b      	cbz	r3, 800aa46 <__sflush_r+0x46>
 800aa42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa44:	1ac0      	subs	r0, r0, r3
 800aa46:	2300      	movs	r3, #0
 800aa48:	4602      	mov	r2, r0
 800aa4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa4c:	6a21      	ldr	r1, [r4, #32]
 800aa4e:	4628      	mov	r0, r5
 800aa50:	47b0      	blx	r6
 800aa52:	1c43      	adds	r3, r0, #1
 800aa54:	89a3      	ldrh	r3, [r4, #12]
 800aa56:	d106      	bne.n	800aa66 <__sflush_r+0x66>
 800aa58:	6829      	ldr	r1, [r5, #0]
 800aa5a:	291d      	cmp	r1, #29
 800aa5c:	d82c      	bhi.n	800aab8 <__sflush_r+0xb8>
 800aa5e:	4a2a      	ldr	r2, [pc, #168]	; (800ab08 <__sflush_r+0x108>)
 800aa60:	40ca      	lsrs	r2, r1
 800aa62:	07d6      	lsls	r6, r2, #31
 800aa64:	d528      	bpl.n	800aab8 <__sflush_r+0xb8>
 800aa66:	2200      	movs	r2, #0
 800aa68:	6062      	str	r2, [r4, #4]
 800aa6a:	04d9      	lsls	r1, r3, #19
 800aa6c:	6922      	ldr	r2, [r4, #16]
 800aa6e:	6022      	str	r2, [r4, #0]
 800aa70:	d504      	bpl.n	800aa7c <__sflush_r+0x7c>
 800aa72:	1c42      	adds	r2, r0, #1
 800aa74:	d101      	bne.n	800aa7a <__sflush_r+0x7a>
 800aa76:	682b      	ldr	r3, [r5, #0]
 800aa78:	b903      	cbnz	r3, 800aa7c <__sflush_r+0x7c>
 800aa7a:	6560      	str	r0, [r4, #84]	; 0x54
 800aa7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa7e:	602f      	str	r7, [r5, #0]
 800aa80:	2900      	cmp	r1, #0
 800aa82:	d0ca      	beq.n	800aa1a <__sflush_r+0x1a>
 800aa84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa88:	4299      	cmp	r1, r3
 800aa8a:	d002      	beq.n	800aa92 <__sflush_r+0x92>
 800aa8c:	4628      	mov	r0, r5
 800aa8e:	f7ff faa5 	bl	8009fdc <_free_r>
 800aa92:	2000      	movs	r0, #0
 800aa94:	6360      	str	r0, [r4, #52]	; 0x34
 800aa96:	e7c1      	b.n	800aa1c <__sflush_r+0x1c>
 800aa98:	6a21      	ldr	r1, [r4, #32]
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	4628      	mov	r0, r5
 800aa9e:	47b0      	blx	r6
 800aaa0:	1c41      	adds	r1, r0, #1
 800aaa2:	d1c7      	bne.n	800aa34 <__sflush_r+0x34>
 800aaa4:	682b      	ldr	r3, [r5, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d0c4      	beq.n	800aa34 <__sflush_r+0x34>
 800aaaa:	2b1d      	cmp	r3, #29
 800aaac:	d001      	beq.n	800aab2 <__sflush_r+0xb2>
 800aaae:	2b16      	cmp	r3, #22
 800aab0:	d101      	bne.n	800aab6 <__sflush_r+0xb6>
 800aab2:	602f      	str	r7, [r5, #0]
 800aab4:	e7b1      	b.n	800aa1a <__sflush_r+0x1a>
 800aab6:	89a3      	ldrh	r3, [r4, #12]
 800aab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aabc:	81a3      	strh	r3, [r4, #12]
 800aabe:	e7ad      	b.n	800aa1c <__sflush_r+0x1c>
 800aac0:	690f      	ldr	r7, [r1, #16]
 800aac2:	2f00      	cmp	r7, #0
 800aac4:	d0a9      	beq.n	800aa1a <__sflush_r+0x1a>
 800aac6:	0793      	lsls	r3, r2, #30
 800aac8:	680e      	ldr	r6, [r1, #0]
 800aaca:	bf08      	it	eq
 800aacc:	694b      	ldreq	r3, [r1, #20]
 800aace:	600f      	str	r7, [r1, #0]
 800aad0:	bf18      	it	ne
 800aad2:	2300      	movne	r3, #0
 800aad4:	eba6 0807 	sub.w	r8, r6, r7
 800aad8:	608b      	str	r3, [r1, #8]
 800aada:	f1b8 0f00 	cmp.w	r8, #0
 800aade:	dd9c      	ble.n	800aa1a <__sflush_r+0x1a>
 800aae0:	6a21      	ldr	r1, [r4, #32]
 800aae2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aae4:	4643      	mov	r3, r8
 800aae6:	463a      	mov	r2, r7
 800aae8:	4628      	mov	r0, r5
 800aaea:	47b0      	blx	r6
 800aaec:	2800      	cmp	r0, #0
 800aaee:	dc06      	bgt.n	800aafe <__sflush_r+0xfe>
 800aaf0:	89a3      	ldrh	r3, [r4, #12]
 800aaf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaf6:	81a3      	strh	r3, [r4, #12]
 800aaf8:	f04f 30ff 	mov.w	r0, #4294967295
 800aafc:	e78e      	b.n	800aa1c <__sflush_r+0x1c>
 800aafe:	4407      	add	r7, r0
 800ab00:	eba8 0800 	sub.w	r8, r8, r0
 800ab04:	e7e9      	b.n	800aada <__sflush_r+0xda>
 800ab06:	bf00      	nop
 800ab08:	20400001 	.word	0x20400001

0800ab0c <_fflush_r>:
 800ab0c:	b538      	push	{r3, r4, r5, lr}
 800ab0e:	690b      	ldr	r3, [r1, #16]
 800ab10:	4605      	mov	r5, r0
 800ab12:	460c      	mov	r4, r1
 800ab14:	b913      	cbnz	r3, 800ab1c <_fflush_r+0x10>
 800ab16:	2500      	movs	r5, #0
 800ab18:	4628      	mov	r0, r5
 800ab1a:	bd38      	pop	{r3, r4, r5, pc}
 800ab1c:	b118      	cbz	r0, 800ab26 <_fflush_r+0x1a>
 800ab1e:	6983      	ldr	r3, [r0, #24]
 800ab20:	b90b      	cbnz	r3, 800ab26 <_fflush_r+0x1a>
 800ab22:	f000 f887 	bl	800ac34 <__sinit>
 800ab26:	4b14      	ldr	r3, [pc, #80]	; (800ab78 <_fflush_r+0x6c>)
 800ab28:	429c      	cmp	r4, r3
 800ab2a:	d11b      	bne.n	800ab64 <_fflush_r+0x58>
 800ab2c:	686c      	ldr	r4, [r5, #4]
 800ab2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d0ef      	beq.n	800ab16 <_fflush_r+0xa>
 800ab36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab38:	07d0      	lsls	r0, r2, #31
 800ab3a:	d404      	bmi.n	800ab46 <_fflush_r+0x3a>
 800ab3c:	0599      	lsls	r1, r3, #22
 800ab3e:	d402      	bmi.n	800ab46 <_fflush_r+0x3a>
 800ab40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab42:	f000 f915 	bl	800ad70 <__retarget_lock_acquire_recursive>
 800ab46:	4628      	mov	r0, r5
 800ab48:	4621      	mov	r1, r4
 800ab4a:	f7ff ff59 	bl	800aa00 <__sflush_r>
 800ab4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab50:	07da      	lsls	r2, r3, #31
 800ab52:	4605      	mov	r5, r0
 800ab54:	d4e0      	bmi.n	800ab18 <_fflush_r+0xc>
 800ab56:	89a3      	ldrh	r3, [r4, #12]
 800ab58:	059b      	lsls	r3, r3, #22
 800ab5a:	d4dd      	bmi.n	800ab18 <_fflush_r+0xc>
 800ab5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab5e:	f000 f908 	bl	800ad72 <__retarget_lock_release_recursive>
 800ab62:	e7d9      	b.n	800ab18 <_fflush_r+0xc>
 800ab64:	4b05      	ldr	r3, [pc, #20]	; (800ab7c <_fflush_r+0x70>)
 800ab66:	429c      	cmp	r4, r3
 800ab68:	d101      	bne.n	800ab6e <_fflush_r+0x62>
 800ab6a:	68ac      	ldr	r4, [r5, #8]
 800ab6c:	e7df      	b.n	800ab2e <_fflush_r+0x22>
 800ab6e:	4b04      	ldr	r3, [pc, #16]	; (800ab80 <_fflush_r+0x74>)
 800ab70:	429c      	cmp	r4, r3
 800ab72:	bf08      	it	eq
 800ab74:	68ec      	ldreq	r4, [r5, #12]
 800ab76:	e7da      	b.n	800ab2e <_fflush_r+0x22>
 800ab78:	0800b55c 	.word	0x0800b55c
 800ab7c:	0800b57c 	.word	0x0800b57c
 800ab80:	0800b53c 	.word	0x0800b53c

0800ab84 <std>:
 800ab84:	2300      	movs	r3, #0
 800ab86:	b510      	push	{r4, lr}
 800ab88:	4604      	mov	r4, r0
 800ab8a:	e9c0 3300 	strd	r3, r3, [r0]
 800ab8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab92:	6083      	str	r3, [r0, #8]
 800ab94:	8181      	strh	r1, [r0, #12]
 800ab96:	6643      	str	r3, [r0, #100]	; 0x64
 800ab98:	81c2      	strh	r2, [r0, #14]
 800ab9a:	6183      	str	r3, [r0, #24]
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	2208      	movs	r2, #8
 800aba0:	305c      	adds	r0, #92	; 0x5c
 800aba2:	f7fd fb2b 	bl	80081fc <memset>
 800aba6:	4b05      	ldr	r3, [pc, #20]	; (800abbc <std+0x38>)
 800aba8:	6263      	str	r3, [r4, #36]	; 0x24
 800abaa:	4b05      	ldr	r3, [pc, #20]	; (800abc0 <std+0x3c>)
 800abac:	62a3      	str	r3, [r4, #40]	; 0x28
 800abae:	4b05      	ldr	r3, [pc, #20]	; (800abc4 <std+0x40>)
 800abb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800abb2:	4b05      	ldr	r3, [pc, #20]	; (800abc8 <std+0x44>)
 800abb4:	6224      	str	r4, [r4, #32]
 800abb6:	6323      	str	r3, [r4, #48]	; 0x30
 800abb8:	bd10      	pop	{r4, pc}
 800abba:	bf00      	nop
 800abbc:	0800aed9 	.word	0x0800aed9
 800abc0:	0800aefb 	.word	0x0800aefb
 800abc4:	0800af33 	.word	0x0800af33
 800abc8:	0800af57 	.word	0x0800af57

0800abcc <_cleanup_r>:
 800abcc:	4901      	ldr	r1, [pc, #4]	; (800abd4 <_cleanup_r+0x8>)
 800abce:	f000 b8af 	b.w	800ad30 <_fwalk_reent>
 800abd2:	bf00      	nop
 800abd4:	0800ab0d 	.word	0x0800ab0d

0800abd8 <__sfmoreglue>:
 800abd8:	b570      	push	{r4, r5, r6, lr}
 800abda:	2268      	movs	r2, #104	; 0x68
 800abdc:	1e4d      	subs	r5, r1, #1
 800abde:	4355      	muls	r5, r2
 800abe0:	460e      	mov	r6, r1
 800abe2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800abe6:	f7ff fa65 	bl	800a0b4 <_malloc_r>
 800abea:	4604      	mov	r4, r0
 800abec:	b140      	cbz	r0, 800ac00 <__sfmoreglue+0x28>
 800abee:	2100      	movs	r1, #0
 800abf0:	e9c0 1600 	strd	r1, r6, [r0]
 800abf4:	300c      	adds	r0, #12
 800abf6:	60a0      	str	r0, [r4, #8]
 800abf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800abfc:	f7fd fafe 	bl	80081fc <memset>
 800ac00:	4620      	mov	r0, r4
 800ac02:	bd70      	pop	{r4, r5, r6, pc}

0800ac04 <__sfp_lock_acquire>:
 800ac04:	4801      	ldr	r0, [pc, #4]	; (800ac0c <__sfp_lock_acquire+0x8>)
 800ac06:	f000 b8b3 	b.w	800ad70 <__retarget_lock_acquire_recursive>
 800ac0a:	bf00      	nop
 800ac0c:	20000ea9 	.word	0x20000ea9

0800ac10 <__sfp_lock_release>:
 800ac10:	4801      	ldr	r0, [pc, #4]	; (800ac18 <__sfp_lock_release+0x8>)
 800ac12:	f000 b8ae 	b.w	800ad72 <__retarget_lock_release_recursive>
 800ac16:	bf00      	nop
 800ac18:	20000ea9 	.word	0x20000ea9

0800ac1c <__sinit_lock_acquire>:
 800ac1c:	4801      	ldr	r0, [pc, #4]	; (800ac24 <__sinit_lock_acquire+0x8>)
 800ac1e:	f000 b8a7 	b.w	800ad70 <__retarget_lock_acquire_recursive>
 800ac22:	bf00      	nop
 800ac24:	20000eaa 	.word	0x20000eaa

0800ac28 <__sinit_lock_release>:
 800ac28:	4801      	ldr	r0, [pc, #4]	; (800ac30 <__sinit_lock_release+0x8>)
 800ac2a:	f000 b8a2 	b.w	800ad72 <__retarget_lock_release_recursive>
 800ac2e:	bf00      	nop
 800ac30:	20000eaa 	.word	0x20000eaa

0800ac34 <__sinit>:
 800ac34:	b510      	push	{r4, lr}
 800ac36:	4604      	mov	r4, r0
 800ac38:	f7ff fff0 	bl	800ac1c <__sinit_lock_acquire>
 800ac3c:	69a3      	ldr	r3, [r4, #24]
 800ac3e:	b11b      	cbz	r3, 800ac48 <__sinit+0x14>
 800ac40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac44:	f7ff bff0 	b.w	800ac28 <__sinit_lock_release>
 800ac48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac4c:	6523      	str	r3, [r4, #80]	; 0x50
 800ac4e:	4b13      	ldr	r3, [pc, #76]	; (800ac9c <__sinit+0x68>)
 800ac50:	4a13      	ldr	r2, [pc, #76]	; (800aca0 <__sinit+0x6c>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac56:	42a3      	cmp	r3, r4
 800ac58:	bf04      	itt	eq
 800ac5a:	2301      	moveq	r3, #1
 800ac5c:	61a3      	streq	r3, [r4, #24]
 800ac5e:	4620      	mov	r0, r4
 800ac60:	f000 f820 	bl	800aca4 <__sfp>
 800ac64:	6060      	str	r0, [r4, #4]
 800ac66:	4620      	mov	r0, r4
 800ac68:	f000 f81c 	bl	800aca4 <__sfp>
 800ac6c:	60a0      	str	r0, [r4, #8]
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f000 f818 	bl	800aca4 <__sfp>
 800ac74:	2200      	movs	r2, #0
 800ac76:	60e0      	str	r0, [r4, #12]
 800ac78:	2104      	movs	r1, #4
 800ac7a:	6860      	ldr	r0, [r4, #4]
 800ac7c:	f7ff ff82 	bl	800ab84 <std>
 800ac80:	68a0      	ldr	r0, [r4, #8]
 800ac82:	2201      	movs	r2, #1
 800ac84:	2109      	movs	r1, #9
 800ac86:	f7ff ff7d 	bl	800ab84 <std>
 800ac8a:	68e0      	ldr	r0, [r4, #12]
 800ac8c:	2202      	movs	r2, #2
 800ac8e:	2112      	movs	r1, #18
 800ac90:	f7ff ff78 	bl	800ab84 <std>
 800ac94:	2301      	movs	r3, #1
 800ac96:	61a3      	str	r3, [r4, #24]
 800ac98:	e7d2      	b.n	800ac40 <__sinit+0xc>
 800ac9a:	bf00      	nop
 800ac9c:	0800b1bc 	.word	0x0800b1bc
 800aca0:	0800abcd 	.word	0x0800abcd

0800aca4 <__sfp>:
 800aca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aca6:	4607      	mov	r7, r0
 800aca8:	f7ff ffac 	bl	800ac04 <__sfp_lock_acquire>
 800acac:	4b1e      	ldr	r3, [pc, #120]	; (800ad28 <__sfp+0x84>)
 800acae:	681e      	ldr	r6, [r3, #0]
 800acb0:	69b3      	ldr	r3, [r6, #24]
 800acb2:	b913      	cbnz	r3, 800acba <__sfp+0x16>
 800acb4:	4630      	mov	r0, r6
 800acb6:	f7ff ffbd 	bl	800ac34 <__sinit>
 800acba:	3648      	adds	r6, #72	; 0x48
 800acbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800acc0:	3b01      	subs	r3, #1
 800acc2:	d503      	bpl.n	800accc <__sfp+0x28>
 800acc4:	6833      	ldr	r3, [r6, #0]
 800acc6:	b30b      	cbz	r3, 800ad0c <__sfp+0x68>
 800acc8:	6836      	ldr	r6, [r6, #0]
 800acca:	e7f7      	b.n	800acbc <__sfp+0x18>
 800accc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800acd0:	b9d5      	cbnz	r5, 800ad08 <__sfp+0x64>
 800acd2:	4b16      	ldr	r3, [pc, #88]	; (800ad2c <__sfp+0x88>)
 800acd4:	60e3      	str	r3, [r4, #12]
 800acd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800acda:	6665      	str	r5, [r4, #100]	; 0x64
 800acdc:	f000 f847 	bl	800ad6e <__retarget_lock_init_recursive>
 800ace0:	f7ff ff96 	bl	800ac10 <__sfp_lock_release>
 800ace4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ace8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800acec:	6025      	str	r5, [r4, #0]
 800acee:	61a5      	str	r5, [r4, #24]
 800acf0:	2208      	movs	r2, #8
 800acf2:	4629      	mov	r1, r5
 800acf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800acf8:	f7fd fa80 	bl	80081fc <memset>
 800acfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad04:	4620      	mov	r0, r4
 800ad06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad08:	3468      	adds	r4, #104	; 0x68
 800ad0a:	e7d9      	b.n	800acc0 <__sfp+0x1c>
 800ad0c:	2104      	movs	r1, #4
 800ad0e:	4638      	mov	r0, r7
 800ad10:	f7ff ff62 	bl	800abd8 <__sfmoreglue>
 800ad14:	4604      	mov	r4, r0
 800ad16:	6030      	str	r0, [r6, #0]
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	d1d5      	bne.n	800acc8 <__sfp+0x24>
 800ad1c:	f7ff ff78 	bl	800ac10 <__sfp_lock_release>
 800ad20:	230c      	movs	r3, #12
 800ad22:	603b      	str	r3, [r7, #0]
 800ad24:	e7ee      	b.n	800ad04 <__sfp+0x60>
 800ad26:	bf00      	nop
 800ad28:	0800b1bc 	.word	0x0800b1bc
 800ad2c:	ffff0001 	.word	0xffff0001

0800ad30 <_fwalk_reent>:
 800ad30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad34:	4606      	mov	r6, r0
 800ad36:	4688      	mov	r8, r1
 800ad38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad3c:	2700      	movs	r7, #0
 800ad3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad42:	f1b9 0901 	subs.w	r9, r9, #1
 800ad46:	d505      	bpl.n	800ad54 <_fwalk_reent+0x24>
 800ad48:	6824      	ldr	r4, [r4, #0]
 800ad4a:	2c00      	cmp	r4, #0
 800ad4c:	d1f7      	bne.n	800ad3e <_fwalk_reent+0xe>
 800ad4e:	4638      	mov	r0, r7
 800ad50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad54:	89ab      	ldrh	r3, [r5, #12]
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d907      	bls.n	800ad6a <_fwalk_reent+0x3a>
 800ad5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	d003      	beq.n	800ad6a <_fwalk_reent+0x3a>
 800ad62:	4629      	mov	r1, r5
 800ad64:	4630      	mov	r0, r6
 800ad66:	47c0      	blx	r8
 800ad68:	4307      	orrs	r7, r0
 800ad6a:	3568      	adds	r5, #104	; 0x68
 800ad6c:	e7e9      	b.n	800ad42 <_fwalk_reent+0x12>

0800ad6e <__retarget_lock_init_recursive>:
 800ad6e:	4770      	bx	lr

0800ad70 <__retarget_lock_acquire_recursive>:
 800ad70:	4770      	bx	lr

0800ad72 <__retarget_lock_release_recursive>:
 800ad72:	4770      	bx	lr

0800ad74 <__swhatbuf_r>:
 800ad74:	b570      	push	{r4, r5, r6, lr}
 800ad76:	460e      	mov	r6, r1
 800ad78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad7c:	2900      	cmp	r1, #0
 800ad7e:	b096      	sub	sp, #88	; 0x58
 800ad80:	4614      	mov	r4, r2
 800ad82:	461d      	mov	r5, r3
 800ad84:	da08      	bge.n	800ad98 <__swhatbuf_r+0x24>
 800ad86:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	602a      	str	r2, [r5, #0]
 800ad8e:	061a      	lsls	r2, r3, #24
 800ad90:	d410      	bmi.n	800adb4 <__swhatbuf_r+0x40>
 800ad92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad96:	e00e      	b.n	800adb6 <__swhatbuf_r+0x42>
 800ad98:	466a      	mov	r2, sp
 800ad9a:	f000 f903 	bl	800afa4 <_fstat_r>
 800ad9e:	2800      	cmp	r0, #0
 800ada0:	dbf1      	blt.n	800ad86 <__swhatbuf_r+0x12>
 800ada2:	9a01      	ldr	r2, [sp, #4]
 800ada4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ada8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800adac:	425a      	negs	r2, r3
 800adae:	415a      	adcs	r2, r3
 800adb0:	602a      	str	r2, [r5, #0]
 800adb2:	e7ee      	b.n	800ad92 <__swhatbuf_r+0x1e>
 800adb4:	2340      	movs	r3, #64	; 0x40
 800adb6:	2000      	movs	r0, #0
 800adb8:	6023      	str	r3, [r4, #0]
 800adba:	b016      	add	sp, #88	; 0x58
 800adbc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800adc0 <__smakebuf_r>:
 800adc0:	898b      	ldrh	r3, [r1, #12]
 800adc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800adc4:	079d      	lsls	r5, r3, #30
 800adc6:	4606      	mov	r6, r0
 800adc8:	460c      	mov	r4, r1
 800adca:	d507      	bpl.n	800addc <__smakebuf_r+0x1c>
 800adcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800add0:	6023      	str	r3, [r4, #0]
 800add2:	6123      	str	r3, [r4, #16]
 800add4:	2301      	movs	r3, #1
 800add6:	6163      	str	r3, [r4, #20]
 800add8:	b002      	add	sp, #8
 800adda:	bd70      	pop	{r4, r5, r6, pc}
 800addc:	ab01      	add	r3, sp, #4
 800adde:	466a      	mov	r2, sp
 800ade0:	f7ff ffc8 	bl	800ad74 <__swhatbuf_r>
 800ade4:	9900      	ldr	r1, [sp, #0]
 800ade6:	4605      	mov	r5, r0
 800ade8:	4630      	mov	r0, r6
 800adea:	f7ff f963 	bl	800a0b4 <_malloc_r>
 800adee:	b948      	cbnz	r0, 800ae04 <__smakebuf_r+0x44>
 800adf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adf4:	059a      	lsls	r2, r3, #22
 800adf6:	d4ef      	bmi.n	800add8 <__smakebuf_r+0x18>
 800adf8:	f023 0303 	bic.w	r3, r3, #3
 800adfc:	f043 0302 	orr.w	r3, r3, #2
 800ae00:	81a3      	strh	r3, [r4, #12]
 800ae02:	e7e3      	b.n	800adcc <__smakebuf_r+0xc>
 800ae04:	4b0d      	ldr	r3, [pc, #52]	; (800ae3c <__smakebuf_r+0x7c>)
 800ae06:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae08:	89a3      	ldrh	r3, [r4, #12]
 800ae0a:	6020      	str	r0, [r4, #0]
 800ae0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae10:	81a3      	strh	r3, [r4, #12]
 800ae12:	9b00      	ldr	r3, [sp, #0]
 800ae14:	6163      	str	r3, [r4, #20]
 800ae16:	9b01      	ldr	r3, [sp, #4]
 800ae18:	6120      	str	r0, [r4, #16]
 800ae1a:	b15b      	cbz	r3, 800ae34 <__smakebuf_r+0x74>
 800ae1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae20:	4630      	mov	r0, r6
 800ae22:	f000 f8d1 	bl	800afc8 <_isatty_r>
 800ae26:	b128      	cbz	r0, 800ae34 <__smakebuf_r+0x74>
 800ae28:	89a3      	ldrh	r3, [r4, #12]
 800ae2a:	f023 0303 	bic.w	r3, r3, #3
 800ae2e:	f043 0301 	orr.w	r3, r3, #1
 800ae32:	81a3      	strh	r3, [r4, #12]
 800ae34:	89a0      	ldrh	r0, [r4, #12]
 800ae36:	4305      	orrs	r5, r0
 800ae38:	81a5      	strh	r5, [r4, #12]
 800ae3a:	e7cd      	b.n	800add8 <__smakebuf_r+0x18>
 800ae3c:	0800abcd 	.word	0x0800abcd

0800ae40 <_malloc_usable_size_r>:
 800ae40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae44:	1f18      	subs	r0, r3, #4
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	bfbc      	itt	lt
 800ae4a:	580b      	ldrlt	r3, [r1, r0]
 800ae4c:	18c0      	addlt	r0, r0, r3
 800ae4e:	4770      	bx	lr

0800ae50 <_raise_r>:
 800ae50:	291f      	cmp	r1, #31
 800ae52:	b538      	push	{r3, r4, r5, lr}
 800ae54:	4604      	mov	r4, r0
 800ae56:	460d      	mov	r5, r1
 800ae58:	d904      	bls.n	800ae64 <_raise_r+0x14>
 800ae5a:	2316      	movs	r3, #22
 800ae5c:	6003      	str	r3, [r0, #0]
 800ae5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae62:	bd38      	pop	{r3, r4, r5, pc}
 800ae64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ae66:	b112      	cbz	r2, 800ae6e <_raise_r+0x1e>
 800ae68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae6c:	b94b      	cbnz	r3, 800ae82 <_raise_r+0x32>
 800ae6e:	4620      	mov	r0, r4
 800ae70:	f000 f830 	bl	800aed4 <_getpid_r>
 800ae74:	462a      	mov	r2, r5
 800ae76:	4601      	mov	r1, r0
 800ae78:	4620      	mov	r0, r4
 800ae7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae7e:	f000 b817 	b.w	800aeb0 <_kill_r>
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d00a      	beq.n	800ae9c <_raise_r+0x4c>
 800ae86:	1c59      	adds	r1, r3, #1
 800ae88:	d103      	bne.n	800ae92 <_raise_r+0x42>
 800ae8a:	2316      	movs	r3, #22
 800ae8c:	6003      	str	r3, [r0, #0]
 800ae8e:	2001      	movs	r0, #1
 800ae90:	e7e7      	b.n	800ae62 <_raise_r+0x12>
 800ae92:	2400      	movs	r4, #0
 800ae94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae98:	4628      	mov	r0, r5
 800ae9a:	4798      	blx	r3
 800ae9c:	2000      	movs	r0, #0
 800ae9e:	e7e0      	b.n	800ae62 <_raise_r+0x12>

0800aea0 <raise>:
 800aea0:	4b02      	ldr	r3, [pc, #8]	; (800aeac <raise+0xc>)
 800aea2:	4601      	mov	r1, r0
 800aea4:	6818      	ldr	r0, [r3, #0]
 800aea6:	f7ff bfd3 	b.w	800ae50 <_raise_r>
 800aeaa:	bf00      	nop
 800aeac:	200004c8 	.word	0x200004c8

0800aeb0 <_kill_r>:
 800aeb0:	b538      	push	{r3, r4, r5, lr}
 800aeb2:	4d07      	ldr	r5, [pc, #28]	; (800aed0 <_kill_r+0x20>)
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	4608      	mov	r0, r1
 800aeba:	4611      	mov	r1, r2
 800aebc:	602b      	str	r3, [r5, #0]
 800aebe:	f7f6 f85b 	bl	8000f78 <_kill>
 800aec2:	1c43      	adds	r3, r0, #1
 800aec4:	d102      	bne.n	800aecc <_kill_r+0x1c>
 800aec6:	682b      	ldr	r3, [r5, #0]
 800aec8:	b103      	cbz	r3, 800aecc <_kill_r+0x1c>
 800aeca:	6023      	str	r3, [r4, #0]
 800aecc:	bd38      	pop	{r3, r4, r5, pc}
 800aece:	bf00      	nop
 800aed0:	20000ea4 	.word	0x20000ea4

0800aed4 <_getpid_r>:
 800aed4:	f7f6 b848 	b.w	8000f68 <_getpid>

0800aed8 <__sread>:
 800aed8:	b510      	push	{r4, lr}
 800aeda:	460c      	mov	r4, r1
 800aedc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aee0:	f000 f894 	bl	800b00c <_read_r>
 800aee4:	2800      	cmp	r0, #0
 800aee6:	bfab      	itete	ge
 800aee8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aeea:	89a3      	ldrhlt	r3, [r4, #12]
 800aeec:	181b      	addge	r3, r3, r0
 800aeee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aef2:	bfac      	ite	ge
 800aef4:	6563      	strge	r3, [r4, #84]	; 0x54
 800aef6:	81a3      	strhlt	r3, [r4, #12]
 800aef8:	bd10      	pop	{r4, pc}

0800aefa <__swrite>:
 800aefa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aefe:	461f      	mov	r7, r3
 800af00:	898b      	ldrh	r3, [r1, #12]
 800af02:	05db      	lsls	r3, r3, #23
 800af04:	4605      	mov	r5, r0
 800af06:	460c      	mov	r4, r1
 800af08:	4616      	mov	r6, r2
 800af0a:	d505      	bpl.n	800af18 <__swrite+0x1e>
 800af0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af10:	2302      	movs	r3, #2
 800af12:	2200      	movs	r2, #0
 800af14:	f000 f868 	bl	800afe8 <_lseek_r>
 800af18:	89a3      	ldrh	r3, [r4, #12]
 800af1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af22:	81a3      	strh	r3, [r4, #12]
 800af24:	4632      	mov	r2, r6
 800af26:	463b      	mov	r3, r7
 800af28:	4628      	mov	r0, r5
 800af2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af2e:	f000 b817 	b.w	800af60 <_write_r>

0800af32 <__sseek>:
 800af32:	b510      	push	{r4, lr}
 800af34:	460c      	mov	r4, r1
 800af36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af3a:	f000 f855 	bl	800afe8 <_lseek_r>
 800af3e:	1c43      	adds	r3, r0, #1
 800af40:	89a3      	ldrh	r3, [r4, #12]
 800af42:	bf15      	itete	ne
 800af44:	6560      	strne	r0, [r4, #84]	; 0x54
 800af46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af4e:	81a3      	strheq	r3, [r4, #12]
 800af50:	bf18      	it	ne
 800af52:	81a3      	strhne	r3, [r4, #12]
 800af54:	bd10      	pop	{r4, pc}

0800af56 <__sclose>:
 800af56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af5a:	f000 b813 	b.w	800af84 <_close_r>
	...

0800af60 <_write_r>:
 800af60:	b538      	push	{r3, r4, r5, lr}
 800af62:	4d07      	ldr	r5, [pc, #28]	; (800af80 <_write_r+0x20>)
 800af64:	4604      	mov	r4, r0
 800af66:	4608      	mov	r0, r1
 800af68:	4611      	mov	r1, r2
 800af6a:	2200      	movs	r2, #0
 800af6c:	602a      	str	r2, [r5, #0]
 800af6e:	461a      	mov	r2, r3
 800af70:	f7f6 f839 	bl	8000fe6 <_write>
 800af74:	1c43      	adds	r3, r0, #1
 800af76:	d102      	bne.n	800af7e <_write_r+0x1e>
 800af78:	682b      	ldr	r3, [r5, #0]
 800af7a:	b103      	cbz	r3, 800af7e <_write_r+0x1e>
 800af7c:	6023      	str	r3, [r4, #0]
 800af7e:	bd38      	pop	{r3, r4, r5, pc}
 800af80:	20000ea4 	.word	0x20000ea4

0800af84 <_close_r>:
 800af84:	b538      	push	{r3, r4, r5, lr}
 800af86:	4d06      	ldr	r5, [pc, #24]	; (800afa0 <_close_r+0x1c>)
 800af88:	2300      	movs	r3, #0
 800af8a:	4604      	mov	r4, r0
 800af8c:	4608      	mov	r0, r1
 800af8e:	602b      	str	r3, [r5, #0]
 800af90:	f7f6 f845 	bl	800101e <_close>
 800af94:	1c43      	adds	r3, r0, #1
 800af96:	d102      	bne.n	800af9e <_close_r+0x1a>
 800af98:	682b      	ldr	r3, [r5, #0]
 800af9a:	b103      	cbz	r3, 800af9e <_close_r+0x1a>
 800af9c:	6023      	str	r3, [r4, #0]
 800af9e:	bd38      	pop	{r3, r4, r5, pc}
 800afa0:	20000ea4 	.word	0x20000ea4

0800afa4 <_fstat_r>:
 800afa4:	b538      	push	{r3, r4, r5, lr}
 800afa6:	4d07      	ldr	r5, [pc, #28]	; (800afc4 <_fstat_r+0x20>)
 800afa8:	2300      	movs	r3, #0
 800afaa:	4604      	mov	r4, r0
 800afac:	4608      	mov	r0, r1
 800afae:	4611      	mov	r1, r2
 800afb0:	602b      	str	r3, [r5, #0]
 800afb2:	f7f6 f840 	bl	8001036 <_fstat>
 800afb6:	1c43      	adds	r3, r0, #1
 800afb8:	d102      	bne.n	800afc0 <_fstat_r+0x1c>
 800afba:	682b      	ldr	r3, [r5, #0]
 800afbc:	b103      	cbz	r3, 800afc0 <_fstat_r+0x1c>
 800afbe:	6023      	str	r3, [r4, #0]
 800afc0:	bd38      	pop	{r3, r4, r5, pc}
 800afc2:	bf00      	nop
 800afc4:	20000ea4 	.word	0x20000ea4

0800afc8 <_isatty_r>:
 800afc8:	b538      	push	{r3, r4, r5, lr}
 800afca:	4d06      	ldr	r5, [pc, #24]	; (800afe4 <_isatty_r+0x1c>)
 800afcc:	2300      	movs	r3, #0
 800afce:	4604      	mov	r4, r0
 800afd0:	4608      	mov	r0, r1
 800afd2:	602b      	str	r3, [r5, #0]
 800afd4:	f7f6 f83f 	bl	8001056 <_isatty>
 800afd8:	1c43      	adds	r3, r0, #1
 800afda:	d102      	bne.n	800afe2 <_isatty_r+0x1a>
 800afdc:	682b      	ldr	r3, [r5, #0]
 800afde:	b103      	cbz	r3, 800afe2 <_isatty_r+0x1a>
 800afe0:	6023      	str	r3, [r4, #0]
 800afe2:	bd38      	pop	{r3, r4, r5, pc}
 800afe4:	20000ea4 	.word	0x20000ea4

0800afe8 <_lseek_r>:
 800afe8:	b538      	push	{r3, r4, r5, lr}
 800afea:	4d07      	ldr	r5, [pc, #28]	; (800b008 <_lseek_r+0x20>)
 800afec:	4604      	mov	r4, r0
 800afee:	4608      	mov	r0, r1
 800aff0:	4611      	mov	r1, r2
 800aff2:	2200      	movs	r2, #0
 800aff4:	602a      	str	r2, [r5, #0]
 800aff6:	461a      	mov	r2, r3
 800aff8:	f7f6 f838 	bl	800106c <_lseek>
 800affc:	1c43      	adds	r3, r0, #1
 800affe:	d102      	bne.n	800b006 <_lseek_r+0x1e>
 800b000:	682b      	ldr	r3, [r5, #0]
 800b002:	b103      	cbz	r3, 800b006 <_lseek_r+0x1e>
 800b004:	6023      	str	r3, [r4, #0]
 800b006:	bd38      	pop	{r3, r4, r5, pc}
 800b008:	20000ea4 	.word	0x20000ea4

0800b00c <_read_r>:
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	4d07      	ldr	r5, [pc, #28]	; (800b02c <_read_r+0x20>)
 800b010:	4604      	mov	r4, r0
 800b012:	4608      	mov	r0, r1
 800b014:	4611      	mov	r1, r2
 800b016:	2200      	movs	r2, #0
 800b018:	602a      	str	r2, [r5, #0]
 800b01a:	461a      	mov	r2, r3
 800b01c:	f7f5 ffc6 	bl	8000fac <_read>
 800b020:	1c43      	adds	r3, r0, #1
 800b022:	d102      	bne.n	800b02a <_read_r+0x1e>
 800b024:	682b      	ldr	r3, [r5, #0]
 800b026:	b103      	cbz	r3, 800b02a <_read_r+0x1e>
 800b028:	6023      	str	r3, [r4, #0]
 800b02a:	bd38      	pop	{r3, r4, r5, pc}
 800b02c:	20000ea4 	.word	0x20000ea4

0800b030 <_init>:
 800b030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b032:	bf00      	nop
 800b034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b036:	bc08      	pop	{r3}
 800b038:	469e      	mov	lr, r3
 800b03a:	4770      	bx	lr

0800b03c <_fini>:
 800b03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b03e:	bf00      	nop
 800b040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b042:	bc08      	pop	{r3}
 800b044:	469e      	mov	lr, r3
 800b046:	4770      	bx	lr
