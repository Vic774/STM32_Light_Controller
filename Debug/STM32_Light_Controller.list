
STM32_Light_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f04  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005104  08005104  00015104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005194  08005194  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08005194  08005194  00015194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800519c  0800519c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800519c  0800519c  0001519c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051a0  080051a0  000151a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080051a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000628  2000007c  08005220  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006a4  08005220  000206a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f0d  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d3f  00000000  00000000  00033fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00036cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc0  00000000  00000000  00037c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029178  00000000  00000000  000389d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e2a  00000000  00000000  00061b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5670  00000000  00000000  00076972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016bfe2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000410c  00000000  00000000  0016c034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	080050ec 	.word	0x080050ec

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	080050ec 	.word	0x080050ec

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08c      	sub	sp, #48	; 0x30
 80005f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	4b8c      	ldr	r3, [pc, #560]	; (800083c <MX_GPIO_Init+0x248>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a8b      	ldr	r2, [pc, #556]	; (800083c <MX_GPIO_Init+0x248>)
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b89      	ldr	r3, [pc, #548]	; (800083c <MX_GPIO_Init+0x248>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0304 	and.w	r3, r3, #4
 800061e:	61bb      	str	r3, [r7, #24]
 8000620:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000622:	4b86      	ldr	r3, [pc, #536]	; (800083c <MX_GPIO_Init+0x248>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a85      	ldr	r2, [pc, #532]	; (800083c <MX_GPIO_Init+0x248>)
 8000628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b83      	ldr	r3, [pc, #524]	; (800083c <MX_GPIO_Init+0x248>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b80      	ldr	r3, [pc, #512]	; (800083c <MX_GPIO_Init+0x248>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a7f      	ldr	r2, [pc, #508]	; (800083c <MX_GPIO_Init+0x248>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b7d      	ldr	r3, [pc, #500]	; (800083c <MX_GPIO_Init+0x248>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	4b7a      	ldr	r3, [pc, #488]	; (800083c <MX_GPIO_Init+0x248>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a79      	ldr	r2, [pc, #484]	; (800083c <MX_GPIO_Init+0x248>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b77      	ldr	r3, [pc, #476]	; (800083c <MX_GPIO_Init+0x248>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800066a:	4b74      	ldr	r3, [pc, #464]	; (800083c <MX_GPIO_Init+0x248>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a73      	ldr	r2, [pc, #460]	; (800083c <MX_GPIO_Init+0x248>)
 8000670:	f043 0320 	orr.w	r3, r3, #32
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b71      	ldr	r3, [pc, #452]	; (800083c <MX_GPIO_Init+0x248>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0320 	and.w	r3, r3, #32
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000682:	4b6e      	ldr	r3, [pc, #440]	; (800083c <MX_GPIO_Init+0x248>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a6d      	ldr	r2, [pc, #436]	; (800083c <MX_GPIO_Init+0x248>)
 8000688:	f043 0308 	orr.w	r3, r3, #8
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b6b      	ldr	r3, [pc, #428]	; (800083c <MX_GPIO_Init+0x248>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0308 	and.w	r3, r3, #8
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800069a:	4b68      	ldr	r3, [pc, #416]	; (800083c <MX_GPIO_Init+0x248>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a67      	ldr	r2, [pc, #412]	; (800083c <MX_GPIO_Init+0x248>)
 80006a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b65      	ldr	r3, [pc, #404]	; (800083c <MX_GPIO_Init+0x248>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	21e0      	movs	r1, #224	; 0xe0
 80006b6:	4862      	ldr	r0, [pc, #392]	; (8000840 <MX_GPIO_Init+0x24c>)
 80006b8:	f001 f8e0 	bl	800187c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f244 0181 	movw	r1, #16513	; 0x4081
 80006c2:	4860      	ldr	r0, [pc, #384]	; (8000844 <MX_GPIO_Init+0x250>)
 80006c4:	f001 f8da 	bl	800187c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ce:	485e      	ldr	r0, [pc, #376]	; (8000848 <MX_GPIO_Init+0x254>)
 80006d0:	f001 f8d4 	bl	800187c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_D4_Pin|LCD_E_Pin, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80006da:	485c      	ldr	r0, [pc, #368]	; (800084c <MX_GPIO_Init+0x258>)
 80006dc:	f001 f8ce 	bl	800187c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2140      	movs	r1, #64	; 0x40
 80006e4:	485a      	ldr	r0, [pc, #360]	; (8000850 <MX_GPIO_Init+0x25c>)
 80006e6:	f001 f8c9 	bl	800187c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4619      	mov	r1, r3
 8000700:	4854      	ldr	r0, [pc, #336]	; (8000854 <MX_GPIO_Init+0x260>)
 8000702:	f000 ff0f 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000706:	2332      	movs	r3, #50	; 0x32
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070a:	2302      	movs	r3, #2
 800070c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000716:	230b      	movs	r3, #11
 8000718:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	4619      	mov	r1, r3
 8000720:	484c      	ldr	r0, [pc, #304]	; (8000854 <MX_GPIO_Init+0x260>)
 8000722:	f000 feff 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8000726:	2306      	movs	r3, #6
 8000728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072a:	2302      	movs	r3, #2
 800072c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000732:	2303      	movs	r3, #3
 8000734:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000736:	230b      	movs	r3, #11
 8000738:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	4619      	mov	r1, r3
 8000740:	483f      	ldr	r0, [pc, #252]	; (8000840 <MX_GPIO_Init+0x24c>)
 8000742:	f000 feef 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin;
 8000746:	23e0      	movs	r3, #224	; 0xe0
 8000748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	4619      	mov	r1, r3
 800075c:	4838      	ldr	r0, [pc, #224]	; (8000840 <MX_GPIO_Init+0x24c>)
 800075e:	f000 fee1 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000762:	f244 0381 	movw	r3, #16513	; 0x4081
 8000766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	4832      	ldr	r0, [pc, #200]	; (8000844 <MX_GPIO_Init+0x250>)
 800077c:	f000 fed2 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 8000780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	482b      	ldr	r0, [pc, #172]	; (8000848 <MX_GPIO_Init+0x254>)
 800079a:	f000 fec3 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800079e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ac:	2303      	movs	r3, #3
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b0:	230b      	movs	r3, #11
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	4822      	ldr	r0, [pc, #136]	; (8000844 <MX_GPIO_Init+0x250>)
 80007bc:	f000 feb2 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_E_Pin;
 80007c0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	481c      	ldr	r0, [pc, #112]	; (800084c <MX_GPIO_Init+0x258>)
 80007da:	f000 fea3 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007de:	2340      	movs	r3, #64	; 0x40
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	4816      	ldr	r0, [pc, #88]	; (8000850 <MX_GPIO_Init+0x25c>)
 80007f6:	f000 fe95 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007fa:	2380      	movs	r3, #128	; 0x80
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4810      	ldr	r0, [pc, #64]	; (8000850 <MX_GPIO_Init+0x25c>)
 800080e:	f000 fe89 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000812:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000818:	2302      	movs	r3, #2
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000820:	2303      	movs	r3, #3
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000824:	230b      	movs	r3, #11
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4619      	mov	r1, r3
 800082e:	4808      	ldr	r0, [pc, #32]	; (8000850 <MX_GPIO_Init+0x25c>)
 8000830:	f000 fe78 	bl	8001524 <HAL_GPIO_Init>

}
 8000834:	bf00      	nop
 8000836:	3730      	adds	r7, #48	; 0x30
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40020000 	.word	0x40020000
 8000844:	40020400 	.word	0x40020400
 8000848:	40021400 	.word	0x40021400
 800084c:	40020c00 	.word	0x40020c00
 8000850:	40021800 	.word	0x40021800
 8000854:	40020800 	.word	0x40020800

08000858 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800085c:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_I2C1_Init+0x74>)
 800085e:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <MX_I2C1_Init+0x78>)
 8000860:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_I2C1_Init+0x74>)
 8000864:	4a1b      	ldr	r2, [pc, #108]	; (80008d4 <MX_I2C1_Init+0x7c>)
 8000866:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000868:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_I2C1_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <MX_I2C1_Init+0x74>)
 8000870:	2201      	movs	r2, #1
 8000872:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000874:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_I2C1_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_I2C1_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_I2C1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_I2C1_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_I2C1_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000892:	480e      	ldr	r0, [pc, #56]	; (80008cc <MX_I2C1_Init+0x74>)
 8000894:	f001 f80c 	bl	80018b0 <HAL_I2C_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800089e:	f000 f963 	bl	8000b68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008a2:	2100      	movs	r1, #0
 80008a4:	4809      	ldr	r0, [pc, #36]	; (80008cc <MX_I2C1_Init+0x74>)
 80008a6:	f001 fce9 	bl	800227c <HAL_I2CEx_ConfigAnalogFilter>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008b0:	f000 f95a 	bl	8000b68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008b4:	2100      	movs	r1, #0
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_I2C1_Init+0x74>)
 80008b8:	f001 fd2b 	bl	8002312 <HAL_I2CEx_ConfigDigitalFilter>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008c2:	f000 f951 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000098 	.word	0x20000098
 80008d0:	40005400 	.word	0x40005400
 80008d4:	20303e5d 	.word	0x20303e5d

080008d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b0ae      	sub	sp, #184	; 0xb8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2290      	movs	r2, #144	; 0x90
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f003 ff81 	bl	8004800 <memset>
  if(i2cHandle->Instance==I2C1)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a22      	ldr	r2, [pc, #136]	; (800098c <HAL_I2C_MspInit+0xb4>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d13c      	bne.n	8000982 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000908:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800090c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800090e:	2300      	movs	r3, #0
 8000910:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4618      	mov	r0, r3
 8000918:	f002 fbc4 	bl	80030a4 <HAL_RCCEx_PeriphCLKConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000922:	f000 f921 	bl	8000b68 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <HAL_I2C_MspInit+0xb8>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a19      	ldr	r2, [pc, #100]	; (8000990 <HAL_I2C_MspInit+0xb8>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <HAL_I2C_MspInit+0xb8>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800093e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000942:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000946:	2312      	movs	r3, #18
 8000948:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000958:	2304      	movs	r3, #4
 800095a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000962:	4619      	mov	r1, r3
 8000964:	480b      	ldr	r0, [pc, #44]	; (8000994 <HAL_I2C_MspInit+0xbc>)
 8000966:	f000 fddd 	bl	8001524 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <HAL_I2C_MspInit+0xb8>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	4a08      	ldr	r2, [pc, #32]	; (8000990 <HAL_I2C_MspInit+0xb8>)
 8000970:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_I2C_MspInit+0xb8>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000982:	bf00      	nop
 8000984:	37b8      	adds	r7, #184	; 0xb8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40005400 	.word	0x40005400
 8000990:	40023800 	.word	0x40023800
 8000994:	40020400 	.word	0x40020400

08000998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b091      	sub	sp, #68	; 0x44
 800099c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099e:	f000 fc59 	bl	8001254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a2:	f000 f86f 	bl	8000a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a6:	f7ff fe25 	bl	80005f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009aa:	f000 f979 	bl	8000ca0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009ae:	f000 fa07 	bl	8000dc0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80009b2:	f7ff ff51 	bl	8000858 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  BH1750_Init(&hbh1750_1);
 80009b6:	482a      	ldr	r0, [pc, #168]	; (8000a60 <main+0xc8>)
 80009b8:	f000 fad3 	bl	8000f62 <BH1750_Init>

  Lcd_PortType ports[] = {
 80009bc:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <main+0xcc>)
 80009be:	f107 0420 	add.w	r4, r7, #32
 80009c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  LCD_D4_GPIO_Port, LCD_D5_GPIO_Port, LCD_D6_GPIO_Port, LCD_D7_GPIO_Port
  };

  Lcd_PinType pins[] = {LCD_D4_Pin, LCD_D5_Pin, LCD_D6_Pin, LCD_D7_Pin};
 80009c8:	4a27      	ldr	r2, [pc, #156]	; (8000a68 <main+0xd0>)
 80009ca:	f107 0318 	add.w	r3, r7, #24
 80009ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009d2:	e883 0003 	stmia.w	r3, {r0, r1}

  Lcd_HandleTypeDef lcd = Lcd_create(ports, pins, LCD_RS_GPIO_Port, LCD_RS_Pin, LCD_E_GPIO_Port, LCD_E_Pin, LCD_4_BIT_MODE);
 80009d6:	4638      	mov	r0, r7
 80009d8:	f107 0218 	add.w	r2, r7, #24
 80009dc:	f107 0120 	add.w	r1, r7, #32
 80009e0:	2300      	movs	r3, #0
 80009e2:	9303      	str	r3, [sp, #12]
 80009e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009e8:	9302      	str	r3, [sp, #8]
 80009ea:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <main+0xd4>)
 80009ec:	9301      	str	r3, [sp, #4]
 80009ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <main+0xd8>)
 80009f6:	f000 fb03 	bl	8001000 <Lcd_create>


  Lcd_cursor(&lcd, 0,0);
 80009fa:	463b      	mov	r3, r7
 80009fc:	2200      	movs	r2, #0
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 fb71 	bl	80010e8 <Lcd_cursor>
  Lcd_string(&lcd, "SM ZZ");
 8000a06:	463b      	mov	r3, r7
 8000a08:	491a      	ldr	r1, [pc, #104]	; (8000a74 <main+0xdc>)
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 fb4c 	bl	80010a8 <Lcd_string>
  Lcd_cursor(&lcd, 1,0);
 8000a10:	463b      	mov	r3, r7
 8000a12:	2200      	movs	r2, #0
 8000a14:	2101      	movs	r1, #1
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 fb66 	bl	80010e8 <Lcd_cursor>
  Lcd_string(&lcd, "Measured: 99999");
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	4916      	ldr	r1, [pc, #88]	; (8000a78 <main+0xe0>)
 8000a20:	4618      	mov	r0, r3
 8000a22:	f000 fb41 	bl	80010a8 <Lcd_string>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Lcd_cursor(&lcd, 1,0);
 8000a26:	463b      	mov	r3, r7
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 fb5b 	bl	80010e8 <Lcd_cursor>
	  sprintf(str_buffer, "Measured: %5d", (int)BH1750_ReadLux(&hbh1750_1));
 8000a32:	480b      	ldr	r0, [pc, #44]	; (8000a60 <main+0xc8>)
 8000a34:	f000 fabc 	bl	8000fb0 <BH1750_ReadLux>
 8000a38:	eef0 7a40 	vmov.f32	s15, s0
 8000a3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a40:	ee17 2a90 	vmov	r2, s15
 8000a44:	490d      	ldr	r1, [pc, #52]	; (8000a7c <main+0xe4>)
 8000a46:	480e      	ldr	r0, [pc, #56]	; (8000a80 <main+0xe8>)
 8000a48:	f003 fee2 	bl	8004810 <siprintf>
	  Lcd_string(&lcd, str_buffer);
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	490c      	ldr	r1, [pc, #48]	; (8000a80 <main+0xe8>)
 8000a50:	4618      	mov	r0, r3
 8000a52:	f000 fb29 	bl	80010a8 <Lcd_string>
	  HAL_Delay(500);
 8000a56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a5a:	f000 fc59 	bl	8001310 <HAL_Delay>
	  Lcd_cursor(&lcd, 1,0);
 8000a5e:	e7e2      	b.n	8000a26 <main+0x8e>
 8000a60:	20000004 	.word	0x20000004
 8000a64:	0800512c 	.word	0x0800512c
 8000a68:	0800513c 	.word	0x0800513c
 8000a6c:	40020c00 	.word	0x40020c00
 8000a70:	40021400 	.word	0x40021400
 8000a74:	08005104 	.word	0x08005104
 8000a78:	0800510c 	.word	0x0800510c
 8000a7c:	0800511c 	.word	0x0800511c
 8000a80:	200000ec 	.word	0x200000ec

08000a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b094      	sub	sp, #80	; 0x50
 8000a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	2234      	movs	r2, #52	; 0x34
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f003 feb4 	bl	8004800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a98:	f107 0308 	add.w	r3, r7, #8
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000aa8:	f001 fdc8 	bl	800263c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aac:	4b2c      	ldr	r3, [pc, #176]	; (8000b60 <SystemClock_Config+0xdc>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	4a2b      	ldr	r2, [pc, #172]	; (8000b60 <SystemClock_Config+0xdc>)
 8000ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab8:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <SystemClock_Config+0xdc>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ac4:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <SystemClock_Config+0xe0>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000acc:	4a25      	ldr	r2, [pc, #148]	; (8000b64 <SystemClock_Config+0xe0>)
 8000ace:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad2:	6013      	str	r3, [r2, #0]
 8000ad4:	4b23      	ldr	r3, [pc, #140]	; (8000b64 <SystemClock_Config+0xe0>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ae4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ae8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aea:	2302      	movs	r3, #2
 8000aec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000af2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000af4:	2304      	movs	r3, #4
 8000af6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000af8:	2360      	movs	r3, #96	; 0x60
 8000afa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000afc:	2302      	movs	r3, #2
 8000afe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b00:	2304      	movs	r3, #4
 8000b02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b04:	2302      	movs	r3, #2
 8000b06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f001 fdf5 	bl	80026fc <HAL_RCC_OscConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b18:	f000 f826 	bl	8000b68 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b1c:	f001 fd9e 	bl	800265c <HAL_PWREx_EnableOverDrive>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b26:	f000 f81f 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b40:	f107 0308 	add.w	r3, r7, #8
 8000b44:	2103      	movs	r1, #3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f002 f886 	bl	8002c58 <HAL_RCC_ClockConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b52:	f000 f809 	bl	8000b68 <Error_Handler>
  }
}
 8000b56:	bf00      	nop
 8000b58:	3750      	adds	r7, #80	; 0x50
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40007000 	.word	0x40007000

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <Error_Handler+0x8>
	...

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_MspInit+0x44>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <MemManage_Handler+0x4>

08000bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c08:	f000 fb62 	bl	80012d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c18:	4a14      	ldr	r2, [pc, #80]	; (8000c6c <_sbrk+0x5c>)
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <_sbrk+0x60>)
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d102      	bne.n	8000c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <_sbrk+0x64>)
 8000c2e:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <_sbrk+0x68>)
 8000c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d207      	bcs.n	8000c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c40:	f003 fdb4 	bl	80047ac <__errno>
 8000c44:	4603      	mov	r3, r0
 8000c46:	220c      	movs	r2, #12
 8000c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4e:	e009      	b.n	8000c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c56:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <_sbrk+0x64>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <_sbrk+0x64>)
 8000c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c62:	68fb      	ldr	r3, [r7, #12]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20080000 	.word	0x20080000
 8000c70:	00000400 	.word	0x00000400
 8000c74:	200000fc 	.word	0x200000fc
 8000c78:	200006a8 	.word	0x200006a8

08000c7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <SystemInit+0x20>)
 8000c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c86:	4a05      	ldr	r2, [pc, #20]	; (8000c9c <SystemInit+0x20>)
 8000c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000ca6:	4a15      	ldr	r2, [pc, #84]	; (8000cfc <MX_USART3_UART_Init+0x5c>)
 8000ca8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000cac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000ce4:	f002 fe06 	bl	80038f4 <HAL_UART_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cee:	f7ff ff3b 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000100 	.word	0x20000100
 8000cfc:	40004800 	.word	0x40004800

08000d00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b0ae      	sub	sp, #184	; 0xb8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2290      	movs	r2, #144	; 0x90
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f003 fd6d 	bl	8004800 <memset>
  if(uartHandle->Instance==USART3)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a22      	ldr	r2, [pc, #136]	; (8000db4 <HAL_UART_MspInit+0xb4>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d13c      	bne.n	8000daa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d34:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f002 f9b0 	bl	80030a4 <HAL_RCCEx_PeriphCLKConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d4a:	f7ff ff0d 	bl	8000b68 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <HAL_UART_MspInit+0xb8>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <HAL_UART_MspInit+0xb8>)
 8000d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_UART_MspInit+0xb8>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d66:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <HAL_UART_MspInit+0xb8>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a13      	ldr	r2, [pc, #76]	; (8000db8 <HAL_UART_MspInit+0xb8>)
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_UART_MspInit+0xb8>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d98:	2307      	movs	r3, #7
 8000d9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000da2:	4619      	mov	r1, r3
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <HAL_UART_MspInit+0xbc>)
 8000da6:	f000 fbbd 	bl	8001524 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000daa:	bf00      	nop
 8000dac:	37b8      	adds	r7, #184	; 0xb8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40004800 	.word	0x40004800
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020c00 	.word	0x40020c00

08000dc0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000dc4:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dce:	2206      	movs	r2, #6
 8000dd0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000de0:	2202      	movs	r2, #2
 8000de2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e04:	f001 fad1 	bl	80023aa <HAL_PCD_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e0e:	f7ff feab 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000188 	.word	0x20000188

08000e1c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b0ae      	sub	sp, #184	; 0xb8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2290      	movs	r2, #144	; 0x90
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f003 fcdf 	bl	8004800 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e4a:	d159      	bne.n	8000f00 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e50:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f002 f921 	bl	80030a4 <HAL_RCCEx_PeriphCLKConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e68:	f7ff fe7e 	bl	8000b68 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6c:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <HAL_PCD_MspInit+0xec>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	4a25      	ldr	r2, [pc, #148]	; (8000f08 <HAL_PCD_MspInit+0xec>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	6313      	str	r3, [r2, #48]	; 0x30
 8000e78:	4b23      	ldr	r3, [pc, #140]	; (8000f08 <HAL_PCD_MspInit+0xec>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e84:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e9e:	230a      	movs	r3, #10
 8000ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4818      	ldr	r0, [pc, #96]	; (8000f0c <HAL_PCD_MspInit+0xf0>)
 8000eac:	f000 fb3a 	bl	8001524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000eb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4810      	ldr	r0, [pc, #64]	; (8000f0c <HAL_PCD_MspInit+0xf0>)
 8000ecc:	f000 fb2a 	bl	8001524 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <HAL_PCD_MspInit+0xec>)
 8000ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ed4:	4a0c      	ldr	r2, [pc, #48]	; (8000f08 <HAL_PCD_MspInit+0xec>)
 8000ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eda:	6353      	str	r3, [r2, #52]	; 0x34
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_PCD_MspInit+0xec>)
 8000ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <HAL_PCD_MspInit+0xec>)
 8000eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eec:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <HAL_PCD_MspInit+0xec>)
 8000eee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef2:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <HAL_PCD_MspInit+0xec>)
 8000ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000f00:	bf00      	nop
 8000f02:	37b8      	adds	r7, #184	; 0xb8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020000 	.word	0x40020000

08000f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f14:	480d      	ldr	r0, [pc, #52]	; (8000f4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f16:	490e      	ldr	r1, [pc, #56]	; (8000f50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f18:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f1c:	e002      	b.n	8000f24 <LoopCopyDataInit>

08000f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f22:	3304      	adds	r3, #4

08000f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f28:	d3f9      	bcc.n	8000f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2a:	4a0b      	ldr	r2, [pc, #44]	; (8000f58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f2c:	4c0b      	ldr	r4, [pc, #44]	; (8000f5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f30:	e001      	b.n	8000f36 <LoopFillZerobss>

08000f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f34:	3204      	adds	r2, #4

08000f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f38:	d3fb      	bcc.n	8000f32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f3a:	f7ff fe9f 	bl	8000c7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f3e:	f003 fc3b 	bl	80047b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f42:	f7ff fd29 	bl	8000998 <main>
  bx  lr    
 8000f46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f48:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f50:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000f54:	080051a4 	.word	0x080051a4
  ldr r2, =_sbss
 8000f58:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000f5c:	200006a4 	.word	0x200006a4

08000f60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f60:	e7fe      	b.n	8000f60 <ADC_IRQHandler>

08000f62 <BH1750_Init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hbh1750 BH1750 digital light sensor handler
 * @return None
 */
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af02      	add	r7, sp, #8
 8000f68:	6078      	str	r0, [r7, #4]
  uint8_t command;
  command = BH1750_POWER_ON;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6818      	ldr	r0, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	791b      	ldrb	r3, [r3, #4]
 8000f76:	b299      	uxth	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f107 020f 	add.w	r2, r7, #15
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2301      	movs	r3, #1
 8000f84:	f000 fd24 	bl	80019d0 <HAL_I2C_Master_Transmit>
  command = BH1750_CONTINOUS_H_RES_MODE;
 8000f88:	2310      	movs	r3, #16
 8000f8a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	791b      	ldrb	r3, [r3, #4]
 8000f94:	b299      	uxth	r1, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f107 020f 	add.w	r2, r7, #15
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	f000 fd15 	bl	80019d0 <HAL_I2C_Master_Transmit>
}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <BH1750_ReadLux>:
 * @note Uses blocking mode I2C receiving routine.
 * @param[in] hbh1750 BH1750 digital light sensor handler
 * @return Measurement result in lux [lx]
 */
float BH1750_ReadLux(BH1750_HandleTypeDef* hbh1750)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af02      	add	r7, sp, #8
 8000fb6:	6078      	str	r0, [r7, #4]
  uint8_t rxarray[BH1750_DATA_SIZE];
  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	791b      	ldrb	r3, [r3, #4]
 8000fc0:	b299      	uxth	r1, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f107 020c 	add.w	r2, r7, #12
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	2302      	movs	r3, #2
 8000fce:	f000 fdf3 	bl	8001bb8 <HAL_I2C_Master_Receive>
  return ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2; // @see BH1750 technical note p. 10;
 8000fd2:	7b3b      	ldrb	r3, [r7, #12]
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	7b7a      	ldrb	r2, [r7, #13]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	ee07 3a90 	vmov	s15, r3
 8000fde:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fe2:	ed9f 5b05 	vldr	d5, [pc, #20]	; 8000ff8 <BH1750_ReadLux+0x48>
 8000fe6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8000fee:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	33333333 	.word	0x33333333
 8000ffc:	3ff33333 	.word	0x3ff33333

08001000 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8001000:	b5b0      	push	{r4, r5, r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800100e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001012:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8001016:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800101a:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 800101c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800101e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8001020:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001022:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	4618      	mov	r0, r3
 8001036:	f000 f80e 	bl	8001056 <Lcd_init>

	return lcd;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	461d      	mov	r5, r3
 800103e:	f107 0410 	add.w	r4, r7, #16
 8001042:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001044:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001046:	e894 0003 	ldmia.w	r4, {r0, r1}
 800104a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	3728      	adds	r7, #40	; 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bdb0      	pop	{r4, r5, r7, pc}

08001056 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	7d9b      	ldrb	r3, [r3, #22]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10c      	bne.n	8001080 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8001066:	2133      	movs	r1, #51	; 0x33
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f000 f857 	bl	800111c <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 800106e:	2132      	movs	r1, #50	; 0x32
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f853 	bl	800111c <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8001076:	2128      	movs	r1, #40	; 0x28
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 f84f 	bl	800111c <lcd_write_command>
 800107e:	e003      	b.n	8001088 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8001080:	2138      	movs	r1, #56	; 0x38
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 f84a 	bl	800111c <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8001088:	2101      	movs	r1, #1
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 f846 	bl	800111c <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_C | OPT_B);		// Lcd-on, cursor-off, no-blink
 8001090:	210f      	movs	r1, #15
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 f842 	bl	800111c <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8001098:	2106      	movs	r1, #6
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 f83e 	bl	800111c <lcd_write_command>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	73fb      	strb	r3, [r7, #15]
 80010b6:	e00a      	b.n	80010ce <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	4413      	add	r3, r2
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 f858 	bl	8001178 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	3301      	adds	r3, #1
 80010cc:	73fb      	strb	r3, [r7, #15]
 80010ce:	7bfc      	ldrb	r4, [r7, #15]
 80010d0:	6838      	ldr	r0, [r7, #0]
 80010d2:	f7ff f8b5 	bl	8000240 <strlen>
 80010d6:	4603      	mov	r3, r0
 80010d8:	429c      	cmp	r4, r3
 80010da:	d3ed      	bcc.n	80010b8 <Lcd_string+0x10>
	}
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd90      	pop	{r4, r7, pc}
	...

080010e8 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	70fb      	strb	r3, [r7, #3]
 80010f4:	4613      	mov	r3, r2
 80010f6:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	4a07      	ldr	r2, [pc, #28]	; (8001118 <Lcd_cursor+0x30>)
 80010fc:	5cd2      	ldrb	r2, [r2, r3]
 80010fe:	78bb      	ldrb	r3, [r7, #2]
 8001100:	4413      	add	r3, r2
 8001102:	b2db      	uxtb	r3, r3
 8001104:	3b80      	subs	r3, #128	; 0x80
 8001106:	b2db      	uxtb	r3, r3
 8001108:	4619      	mov	r1, r3
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 f806 	bl	800111c <lcd_write_command>
	#endif
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	0800515c 	.word	0x0800515c

0800111c <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6898      	ldr	r0, [r3, #8]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	899b      	ldrh	r3, [r3, #12]
 8001130:	2200      	movs	r2, #0
 8001132:	4619      	mov	r1, r3
 8001134:	f000 fba2 	bl	800187c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7d9b      	ldrb	r3, [r3, #22]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d111      	bne.n	8001164 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8001140:	78fb      	ldrb	r3, [r7, #3]
 8001142:	091b      	lsrs	r3, r3, #4
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2204      	movs	r2, #4
 8001148:	4619      	mov	r1, r3
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 f842 	bl	80011d4 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8001150:	78fb      	ldrb	r3, [r7, #3]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2204      	movs	r2, #4
 800115a:	4619      	mov	r1, r3
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f839 	bl	80011d4 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8001162:	e005      	b.n	8001170 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8001164:	78fb      	ldrb	r3, [r7, #3]
 8001166:	2208      	movs	r2, #8
 8001168:	4619      	mov	r1, r3
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 f832 	bl	80011d4 <lcd_write>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6898      	ldr	r0, [r3, #8]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	899b      	ldrh	r3, [r3, #12]
 800118c:	2201      	movs	r2, #1
 800118e:	4619      	mov	r1, r3
 8001190:	f000 fb74 	bl	800187c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7d9b      	ldrb	r3, [r3, #22]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d111      	bne.n	80011c0 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	091b      	lsrs	r3, r3, #4
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2204      	movs	r2, #4
 80011a4:	4619      	mov	r1, r3
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 f814 	bl	80011d4 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2204      	movs	r2, #4
 80011b6:	4619      	mov	r1, r3
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f80b 	bl	80011d4 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80011be:	e005      	b.n	80011cc <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80011c0:	78fb      	ldrb	r3, [r7, #3]
 80011c2:	2208      	movs	r2, #8
 80011c4:	4619      	mov	r1, r3
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f804 	bl	80011d4 <lcd_write>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	70fb      	strb	r3, [r7, #3]
 80011e0:	4613      	mov	r3, r2
 80011e2:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80011e4:	2300      	movs	r3, #0
 80011e6:	73fb      	strb	r3, [r7, #15]
 80011e8:	e019      	b.n	800121e <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	6818      	ldr	r0, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	8819      	ldrh	r1, [r3, #0]
 8001202:	78fa      	ldrb	r2, [r7, #3]
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	fa42 f303 	asr.w	r3, r2, r3
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	b2db      	uxtb	r3, r3
 8001212:	461a      	mov	r2, r3
 8001214:	f000 fb32 	bl	800187c <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	3301      	adds	r3, #1
 800121c:	73fb      	strb	r3, [r7, #15]
 800121e:	7bfa      	ldrb	r2, [r7, #15]
 8001220:	78bb      	ldrb	r3, [r7, #2]
 8001222:	429a      	cmp	r2, r3
 8001224:	d3e1      	bcc.n	80011ea <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6918      	ldr	r0, [r3, #16]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	8a9b      	ldrh	r3, [r3, #20]
 800122e:	2201      	movs	r2, #1
 8001230:	4619      	mov	r1, r3
 8001232:	f000 fb23 	bl	800187c <HAL_GPIO_WritePin>
	DELAY(1);
 8001236:	2001      	movs	r0, #1
 8001238:	f000 f86a 	bl	8001310 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6918      	ldr	r0, [r3, #16]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	8a9b      	ldrh	r3, [r3, #20]
 8001244:	2200      	movs	r2, #0
 8001246:	4619      	mov	r1, r3
 8001248:	f000 fb18 	bl	800187c <HAL_GPIO_WritePin>
}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001258:	2003      	movs	r0, #3
 800125a:	f000 f92f 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800125e:	2000      	movs	r0, #0
 8001260:	f000 f806 	bl	8001270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001264:	f7ff fc86 	bl	8000b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_InitTick+0x54>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_InitTick+0x58>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4619      	mov	r1, r3
 8001282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001286:	fbb3 f3f1 	udiv	r3, r3, r1
 800128a:	fbb2 f3f3 	udiv	r3, r2, r3
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f93b 	bl	800150a <HAL_SYSTICK_Config>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e00e      	b.n	80012bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b0f      	cmp	r3, #15
 80012a2:	d80a      	bhi.n	80012ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a4:	2200      	movs	r2, #0
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ac:	f000 f911 	bl	80014d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b0:	4a06      	ldr	r2, [pc, #24]	; (80012cc <HAL_InitTick+0x5c>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e000      	b.n	80012bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000014 	.word	0x20000014
 80012cc:	20000010 	.word	0x20000010

080012d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_IncTick+0x20>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_IncTick+0x24>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <HAL_IncTick+0x24>)
 80012e2:	6013      	str	r3, [r2, #0]
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000014 	.word	0x20000014
 80012f4:	20000690 	.word	0x20000690

080012f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return uwTick;
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <HAL_GetTick+0x14>)
 80012fe:	681b      	ldr	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000690 	.word	0x20000690

08001310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001318:	f7ff ffee 	bl	80012f8 <HAL_GetTick>
 800131c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001328:	d005      	beq.n	8001336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <HAL_Delay+0x44>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4413      	add	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001336:	bf00      	nop
 8001338:	f7ff ffde 	bl	80012f8 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	429a      	cmp	r2, r3
 8001346:	d8f7      	bhi.n	8001338 <HAL_Delay+0x28>
  {
  }
}
 8001348:	bf00      	nop
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000014 	.word	0x20000014

08001358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <__NVIC_SetPriorityGrouping+0x40>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001374:	4013      	ands	r3, r2
 8001376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <__NVIC_SetPriorityGrouping+0x44>)
 8001382:	4313      	orrs	r3, r2
 8001384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001386:	4a04      	ldr	r2, [pc, #16]	; (8001398 <__NVIC_SetPriorityGrouping+0x40>)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	60d3      	str	r3, [r2, #12]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00
 800139c:	05fa0000 	.word	0x05fa0000

080013a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <__NVIC_GetPriorityGrouping+0x18>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	0a1b      	lsrs	r3, r3, #8
 80013aa:	f003 0307 	and.w	r3, r3, #7
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	; (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	; (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
         );
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	; 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001488:	d301      	bcc.n	800148e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148a:	2301      	movs	r3, #1
 800148c:	e00f      	b.n	80014ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <SysTick_Config+0x40>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001496:	210f      	movs	r1, #15
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f7ff ff8e 	bl	80013bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <SysTick_Config+0x40>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <SysTick_Config+0x40>)
 80014a8:	2207      	movs	r2, #7
 80014aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	e000e010 	.word	0xe000e010

080014bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff47 	bl	8001358 <__NVIC_SetPriorityGrouping>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e4:	f7ff ff5c 	bl	80013a0 <__NVIC_GetPriorityGrouping>
 80014e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	6978      	ldr	r0, [r7, #20]
 80014f0:	f7ff ff8e 	bl	8001410 <NVIC_EncodePriority>
 80014f4:	4602      	mov	r2, r0
 80014f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff5d 	bl	80013bc <__NVIC_SetPriority>
}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ffb0 	bl	8001478 <SysTick_Config>
 8001518:	4603      	mov	r3, r0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001524:	b480      	push	{r7}
 8001526:	b089      	sub	sp, #36	; 0x24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
 8001542:	e175      	b.n	8001830 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001544:	2201      	movs	r2, #1
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	429a      	cmp	r2, r3
 800155e:	f040 8164 	bne.w	800182a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	2b01      	cmp	r3, #1
 800156c:	d005      	beq.n	800157a <HAL_GPIO_Init+0x56>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d130      	bne.n	80015dc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	2203      	movs	r2, #3
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015b0:	2201      	movs	r2, #1
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	091b      	lsrs	r3, r3, #4
 80015c6:	f003 0201 	and.w	r2, r3, #1
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d017      	beq.n	8001618 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	2203      	movs	r2, #3
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d123      	bne.n	800166c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	08da      	lsrs	r2, r3, #3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3208      	adds	r2, #8
 800162c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	220f      	movs	r2, #15
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	691a      	ldr	r2, [r3, #16]
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	08da      	lsrs	r2, r3, #3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3208      	adds	r2, #8
 8001666:	69b9      	ldr	r1, [r7, #24]
 8001668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	2203      	movs	r2, #3
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0203 	and.w	r2, r3, #3
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 80be 	beq.w	800182a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ae:	4b66      	ldr	r3, [pc, #408]	; (8001848 <HAL_GPIO_Init+0x324>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	4a65      	ldr	r2, [pc, #404]	; (8001848 <HAL_GPIO_Init+0x324>)
 80016b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ba:	4b63      	ldr	r3, [pc, #396]	; (8001848 <HAL_GPIO_Init+0x324>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80016c6:	4a61      	ldr	r2, [pc, #388]	; (800184c <HAL_GPIO_Init+0x328>)
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	089b      	lsrs	r3, r3, #2
 80016cc:	3302      	adds	r3, #2
 80016ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	220f      	movs	r2, #15
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a58      	ldr	r2, [pc, #352]	; (8001850 <HAL_GPIO_Init+0x32c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d037      	beq.n	8001762 <HAL_GPIO_Init+0x23e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a57      	ldr	r2, [pc, #348]	; (8001854 <HAL_GPIO_Init+0x330>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d031      	beq.n	800175e <HAL_GPIO_Init+0x23a>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a56      	ldr	r2, [pc, #344]	; (8001858 <HAL_GPIO_Init+0x334>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d02b      	beq.n	800175a <HAL_GPIO_Init+0x236>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a55      	ldr	r2, [pc, #340]	; (800185c <HAL_GPIO_Init+0x338>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d025      	beq.n	8001756 <HAL_GPIO_Init+0x232>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a54      	ldr	r2, [pc, #336]	; (8001860 <HAL_GPIO_Init+0x33c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d01f      	beq.n	8001752 <HAL_GPIO_Init+0x22e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a53      	ldr	r2, [pc, #332]	; (8001864 <HAL_GPIO_Init+0x340>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d019      	beq.n	800174e <HAL_GPIO_Init+0x22a>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a52      	ldr	r2, [pc, #328]	; (8001868 <HAL_GPIO_Init+0x344>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d013      	beq.n	800174a <HAL_GPIO_Init+0x226>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a51      	ldr	r2, [pc, #324]	; (800186c <HAL_GPIO_Init+0x348>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d00d      	beq.n	8001746 <HAL_GPIO_Init+0x222>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a50      	ldr	r2, [pc, #320]	; (8001870 <HAL_GPIO_Init+0x34c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d007      	beq.n	8001742 <HAL_GPIO_Init+0x21e>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a4f      	ldr	r2, [pc, #316]	; (8001874 <HAL_GPIO_Init+0x350>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d101      	bne.n	800173e <HAL_GPIO_Init+0x21a>
 800173a:	2309      	movs	r3, #9
 800173c:	e012      	b.n	8001764 <HAL_GPIO_Init+0x240>
 800173e:	230a      	movs	r3, #10
 8001740:	e010      	b.n	8001764 <HAL_GPIO_Init+0x240>
 8001742:	2308      	movs	r3, #8
 8001744:	e00e      	b.n	8001764 <HAL_GPIO_Init+0x240>
 8001746:	2307      	movs	r3, #7
 8001748:	e00c      	b.n	8001764 <HAL_GPIO_Init+0x240>
 800174a:	2306      	movs	r3, #6
 800174c:	e00a      	b.n	8001764 <HAL_GPIO_Init+0x240>
 800174e:	2305      	movs	r3, #5
 8001750:	e008      	b.n	8001764 <HAL_GPIO_Init+0x240>
 8001752:	2304      	movs	r3, #4
 8001754:	e006      	b.n	8001764 <HAL_GPIO_Init+0x240>
 8001756:	2303      	movs	r3, #3
 8001758:	e004      	b.n	8001764 <HAL_GPIO_Init+0x240>
 800175a:	2302      	movs	r3, #2
 800175c:	e002      	b.n	8001764 <HAL_GPIO_Init+0x240>
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_GPIO_Init+0x240>
 8001762:	2300      	movs	r3, #0
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	f002 0203 	and.w	r2, r2, #3
 800176a:	0092      	lsls	r2, r2, #2
 800176c:	4093      	lsls	r3, r2
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001774:	4935      	ldr	r1, [pc, #212]	; (800184c <HAL_GPIO_Init+0x328>)
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	089b      	lsrs	r3, r3, #2
 800177a:	3302      	adds	r3, #2
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001782:	4b3d      	ldr	r3, [pc, #244]	; (8001878 <HAL_GPIO_Init+0x354>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017a6:	4a34      	ldr	r2, [pc, #208]	; (8001878 <HAL_GPIO_Init+0x354>)
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017ac:	4b32      	ldr	r3, [pc, #200]	; (8001878 <HAL_GPIO_Init+0x354>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017d0:	4a29      	ldr	r2, [pc, #164]	; (8001878 <HAL_GPIO_Init+0x354>)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017d6:	4b28      	ldr	r3, [pc, #160]	; (8001878 <HAL_GPIO_Init+0x354>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017fa:	4a1f      	ldr	r2, [pc, #124]	; (8001878 <HAL_GPIO_Init+0x354>)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001800:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <HAL_GPIO_Init+0x354>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001824:	4a14      	ldr	r2, [pc, #80]	; (8001878 <HAL_GPIO_Init+0x354>)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3301      	adds	r3, #1
 800182e:	61fb      	str	r3, [r7, #28]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	2b0f      	cmp	r3, #15
 8001834:	f67f ae86 	bls.w	8001544 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	3724      	adds	r7, #36	; 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800
 800184c:	40013800 	.word	0x40013800
 8001850:	40020000 	.word	0x40020000
 8001854:	40020400 	.word	0x40020400
 8001858:	40020800 	.word	0x40020800
 800185c:	40020c00 	.word	0x40020c00
 8001860:	40021000 	.word	0x40021000
 8001864:	40021400 	.word	0x40021400
 8001868:	40021800 	.word	0x40021800
 800186c:	40021c00 	.word	0x40021c00
 8001870:	40022000 	.word	0x40022000
 8001874:	40022400 	.word	0x40022400
 8001878:	40013c00 	.word	0x40013c00

0800187c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	807b      	strh	r3, [r7, #2]
 8001888:	4613      	mov	r3, r2
 800188a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800188c:	787b      	ldrb	r3, [r7, #1]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001892:	887a      	ldrh	r2, [r7, #2]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001898:	e003      	b.n	80018a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800189a:	887b      	ldrh	r3, [r7, #2]
 800189c:	041a      	lsls	r2, r3, #16
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	619a      	str	r2, [r3, #24]
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e07f      	b.n	80019c2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d106      	bne.n	80018dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7fe fffe 	bl	80008d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2224      	movs	r2, #36	; 0x24
 80018e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 0201 	bic.w	r2, r2, #1
 80018f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001900:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001910:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d107      	bne.n	800192a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	e006      	b.n	8001938 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001936:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d104      	bne.n	800194a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001948:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6859      	ldr	r1, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <HAL_I2C_Init+0x11c>)
 8001956:	430b      	orrs	r3, r1
 8001958:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001968:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691a      	ldr	r2, [r3, #16]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69d9      	ldr	r1, [r3, #28]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a1a      	ldr	r2, [r3, #32]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0201 	orr.w	r2, r2, #1
 80019a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2220      	movs	r2, #32
 80019ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	02008000 	.word	0x02008000

080019d0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af02      	add	r7, sp, #8
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	461a      	mov	r2, r3
 80019dc:	460b      	mov	r3, r1
 80019de:	817b      	strh	r3, [r7, #10]
 80019e0:	4613      	mov	r3, r2
 80019e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b20      	cmp	r3, #32
 80019ee:	f040 80da 	bne.w	8001ba6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d101      	bne.n	8001a00 <HAL_I2C_Master_Transmit+0x30>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e0d3      	b.n	8001ba8 <HAL_I2C_Master_Transmit+0x1d8>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a08:	f7ff fc76 	bl	80012f8 <HAL_GetTick>
 8001a0c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	2319      	movs	r3, #25
 8001a14:	2201      	movs	r2, #1
 8001a16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f000 f9e6 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e0be      	b.n	8001ba8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2221      	movs	r2, #33	; 0x21
 8001a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2210      	movs	r2, #16
 8001a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	893a      	ldrh	r2, [r7, #8]
 8001a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	2bff      	cmp	r3, #255	; 0xff
 8001a5a:	d90e      	bls.n	8001a7a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	22ff      	movs	r2, #255	; 0xff
 8001a60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	8979      	ldrh	r1, [r7, #10]
 8001a6a:	4b51      	ldr	r3, [pc, #324]	; (8001bb0 <HAL_I2C_Master_Transmit+0x1e0>)
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f000 fbd0 	bl	8002218 <I2C_TransferConfig>
 8001a78:	e06c      	b.n	8001b54 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	8979      	ldrh	r1, [r7, #10]
 8001a8c:	4b48      	ldr	r3, [pc, #288]	; (8001bb0 <HAL_I2C_Master_Transmit+0x1e0>)
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f000 fbbf 	bl	8002218 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001a9a:	e05b      	b.n	8001b54 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	6a39      	ldr	r1, [r7, #32]
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 f9e3 	bl	8001e6c <I2C_WaitOnTXISFlagUntilTimeout>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e07b      	b.n	8001ba8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	781a      	ldrb	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	3b01      	subs	r3, #1
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d034      	beq.n	8001b54 <HAL_I2C_Master_Transmit+0x184>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d130      	bne.n	8001b54 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	2200      	movs	r2, #0
 8001afa:	2180      	movs	r1, #128	; 0x80
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 f975 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e04d      	b.n	8001ba8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	2bff      	cmp	r3, #255	; 0xff
 8001b14:	d90e      	bls.n	8001b34 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	22ff      	movs	r2, #255	; 0xff
 8001b1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	8979      	ldrh	r1, [r7, #10]
 8001b24:	2300      	movs	r3, #0
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 fb73 	bl	8002218 <I2C_TransferConfig>
 8001b32:	e00f      	b.n	8001b54 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	8979      	ldrh	r1, [r7, #10]
 8001b46:	2300      	movs	r3, #0
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 fb62 	bl	8002218 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d19e      	bne.n	8001a9c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	6a39      	ldr	r1, [r7, #32]
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f000 f9c2 	bl	8001eec <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e01a      	b.n	8001ba8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2220      	movs	r2, #32
 8001b78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6859      	ldr	r1, [r3, #4]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_I2C_Master_Transmit+0x1e4>)
 8001b86:	400b      	ands	r3, r1
 8001b88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e000      	b.n	8001ba8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001ba6:	2302      	movs	r3, #2
  }
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	80002000 	.word	0x80002000
 8001bb4:	fe00e800 	.word	0xfe00e800

08001bb8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	817b      	strh	r3, [r7, #10]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b20      	cmp	r3, #32
 8001bd6:	f040 80db 	bne.w	8001d90 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_I2C_Master_Receive+0x30>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e0d4      	b.n	8001d92 <HAL_I2C_Master_Receive+0x1da>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bf0:	f7ff fb82 	bl	80012f8 <HAL_GetTick>
 8001bf4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	2319      	movs	r3, #25
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f8f2 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e0bf      	b.n	8001d92 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2222      	movs	r2, #34	; 0x22
 8001c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2210      	movs	r2, #16
 8001c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	893a      	ldrh	r2, [r7, #8]
 8001c32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	2bff      	cmp	r3, #255	; 0xff
 8001c42:	d90e      	bls.n	8001c62 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	22ff      	movs	r2, #255	; 0xff
 8001c48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	8979      	ldrh	r1, [r7, #10]
 8001c52:	4b52      	ldr	r3, [pc, #328]	; (8001d9c <HAL_I2C_Master_Receive+0x1e4>)
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 fadc 	bl	8002218 <I2C_TransferConfig>
 8001c60:	e06d      	b.n	8001d3e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	8979      	ldrh	r1, [r7, #10]
 8001c74:	4b49      	ldr	r3, [pc, #292]	; (8001d9c <HAL_I2C_Master_Receive+0x1e4>)
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 facb 	bl	8002218 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001c82:	e05c      	b.n	8001d3e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	6a39      	ldr	r1, [r7, #32]
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f000 f96b 	bl	8001f64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e07c      	b.n	8001d92 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d034      	beq.n	8001d3e <HAL_I2C_Master_Receive+0x186>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d130      	bne.n	8001d3e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2180      	movs	r1, #128	; 0x80
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 f880 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e04d      	b.n	8001d92 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	2bff      	cmp	r3, #255	; 0xff
 8001cfe:	d90e      	bls.n	8001d1e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	22ff      	movs	r2, #255	; 0xff
 8001d04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	8979      	ldrh	r1, [r7, #10]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 fa7e 	bl	8002218 <I2C_TransferConfig>
 8001d1c:	e00f      	b.n	8001d3e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	8979      	ldrh	r1, [r7, #10]
 8001d30:	2300      	movs	r3, #0
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f000 fa6d 	bl	8002218 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d19d      	bne.n	8001c84 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	6a39      	ldr	r1, [r7, #32]
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 f8cd 	bl	8001eec <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e01a      	b.n	8001d92 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2220      	movs	r2, #32
 8001d62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6859      	ldr	r1, [r3, #4]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <HAL_I2C_Master_Receive+0x1e8>)
 8001d70:	400b      	ands	r3, r1
 8001d72:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e000      	b.n	8001d92 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001d90:	2302      	movs	r3, #2
  }
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	80002400 	.word	0x80002400
 8001da0:	fe00e800 	.word	0xfe00e800

08001da4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d103      	bne.n	8001dc2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d007      	beq.n	8001de0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	699a      	ldr	r2, [r3, #24]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0201 	orr.w	r2, r2, #1
 8001dde:	619a      	str	r2, [r3, #24]
  }
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dfc:	e022      	b.n	8001e44 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e04:	d01e      	beq.n	8001e44 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e06:	f7ff fa77 	bl	80012f8 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d302      	bcc.n	8001e1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d113      	bne.n	8001e44 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e20:	f043 0220 	orr.w	r2, r3, #32
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e00f      	b.n	8001e64 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	699a      	ldr	r2, [r3, #24]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	bf0c      	ite	eq
 8001e54:	2301      	moveq	r3, #1
 8001e56:	2300      	movne	r3, #0
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d0cd      	beq.n	8001dfe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e78:	e02c      	b.n	8001ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 f8ea 	bl	8002058 <I2C_IsErrorOccurred>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e02a      	b.n	8001ee4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e94:	d01e      	beq.n	8001ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e96:	f7ff fa2f 	bl	80012f8 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d302      	bcc.n	8001eac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d113      	bne.n	8001ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb0:	f043 0220 	orr.w	r2, r3, #32
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e007      	b.n	8001ee4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d1cb      	bne.n	8001e7a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ef8:	e028      	b.n	8001f4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 f8aa 	bl	8002058 <I2C_IsErrorOccurred>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e026      	b.n	8001f5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f0e:	f7ff f9f3 	bl	80012f8 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d302      	bcc.n	8001f24 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d113      	bne.n	8001f4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f28:	f043 0220 	orr.w	r2, r3, #32
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2220      	movs	r2, #32
 8001f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e007      	b.n	8001f5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f003 0320 	and.w	r3, r3, #32
 8001f56:	2b20      	cmp	r3, #32
 8001f58:	d1cf      	bne.n	8001efa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f70:	e064      	b.n	800203c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f000 f86e 	bl	8002058 <I2C_IsErrorOccurred>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e062      	b.n	800204c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	f003 0320 	and.w	r3, r3, #32
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d138      	bne.n	8002006 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d105      	bne.n	8001fae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	e04e      	b.n	800204c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	2b10      	cmp	r3, #16
 8001fba:	d107      	bne.n	8001fcc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2210      	movs	r2, #16
 8001fc2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2204      	movs	r2, #4
 8001fc8:	645a      	str	r2, [r3, #68]	; 0x44
 8001fca:	e002      	b.n	8001fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6859      	ldr	r1, [r3, #4]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001fe6:	400b      	ands	r3, r1
 8001fe8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2220      	movs	r2, #32
 8001fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e022      	b.n	800204c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002006:	f7ff f977 	bl	80012f8 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	429a      	cmp	r2, r3
 8002014:	d302      	bcc.n	800201c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10f      	bne.n	800203c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002020:	f043 0220 	orr.w	r2, r3, #32
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2220      	movs	r2, #32
 800202c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e007      	b.n	800204c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	2b04      	cmp	r3, #4
 8002048:	d193      	bne.n	8001f72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	fe00e800 	.word	0xfe00e800

08002058 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	; 0x28
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	f003 0310 	and.w	r3, r3, #16
 8002080:	2b00      	cmp	r3, #0
 8002082:	d068      	beq.n	8002156 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2210      	movs	r2, #16
 800208a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800208c:	e049      	b.n	8002122 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002094:	d045      	beq.n	8002122 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002096:	f7ff f92f 	bl	80012f8 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d302      	bcc.n	80020ac <I2C_IsErrorOccurred+0x54>
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d13a      	bne.n	8002122 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80020be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ce:	d121      	bne.n	8002114 <I2C_IsErrorOccurred+0xbc>
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020d6:	d01d      	beq.n	8002114 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80020d8:	7cfb      	ldrb	r3, [r7, #19]
 80020da:	2b20      	cmp	r3, #32
 80020dc:	d01a      	beq.n	8002114 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80020ee:	f7ff f903 	bl	80012f8 <HAL_GetTick>
 80020f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020f4:	e00e      	b.n	8002114 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80020f6:	f7ff f8ff 	bl	80012f8 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b19      	cmp	r3, #25
 8002102:	d907      	bls.n	8002114 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	f043 0320 	orr.w	r3, r3, #32
 800210a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002112:	e006      	b.n	8002122 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f003 0320 	and.w	r3, r3, #32
 800211e:	2b20      	cmp	r3, #32
 8002120:	d1e9      	bne.n	80020f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b20      	cmp	r3, #32
 800212e:	d003      	beq.n	8002138 <I2C_IsErrorOccurred+0xe0>
 8002130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0aa      	beq.n	800208e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800213c:	2b00      	cmp	r3, #0
 800213e:	d103      	bne.n	8002148 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2220      	movs	r2, #32
 8002146:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	f043 0304 	orr.w	r3, r3, #4
 800214e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00b      	beq.n	8002180 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002168:	6a3b      	ldr	r3, [r7, #32]
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002178:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00b      	beq.n	80021a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	f043 0308 	orr.w	r3, r3, #8
 8002190:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800219a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00b      	beq.n	80021c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80021ac:	6a3b      	ldr	r3, [r7, #32]
 80021ae:	f043 0302 	orr.w	r3, r3, #2
 80021b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80021c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d01c      	beq.n	8002206 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f7ff fde9 	bl	8001da4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <I2C_IsErrorOccurred+0x1bc>)
 80021de:	400b      	ands	r3, r1
 80021e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	431a      	orrs	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2220      	movs	r2, #32
 80021f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800220a:	4618      	mov	r0, r3
 800220c:	3728      	adds	r7, #40	; 0x28
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	fe00e800 	.word	0xfe00e800

08002218 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	460b      	mov	r3, r1
 8002224:	817b      	strh	r3, [r7, #10]
 8002226:	4613      	mov	r3, r2
 8002228:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800222a:	897b      	ldrh	r3, [r7, #10]
 800222c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002230:	7a7b      	ldrb	r3, [r7, #9]
 8002232:	041b      	lsls	r3, r3, #16
 8002234:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002238:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	4313      	orrs	r3, r2
 8002242:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002246:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	0d5b      	lsrs	r3, r3, #21
 8002252:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <I2C_TransferConfig+0x60>)
 8002258:	430b      	orrs	r3, r1
 800225a:	43db      	mvns	r3, r3
 800225c:	ea02 0103 	and.w	r1, r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	430a      	orrs	r2, r1
 8002268:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800226a:	bf00      	nop
 800226c:	371c      	adds	r7, #28
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	03ff63ff 	.word	0x03ff63ff

0800227c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b20      	cmp	r3, #32
 8002290:	d138      	bne.n	8002304 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800229c:	2302      	movs	r3, #2
 800229e:	e032      	b.n	8002306 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2224      	movs	r2, #36	; 0x24
 80022ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6819      	ldr	r1, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	e000      	b.n	8002306 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002304:	2302      	movs	r3, #2
  }
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002312:	b480      	push	{r7}
 8002314:	b085      	sub	sp, #20
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b20      	cmp	r3, #32
 8002326:	d139      	bne.n	800239c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002332:	2302      	movs	r3, #2
 8002334:	e033      	b.n	800239e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2224      	movs	r2, #36	; 0x24
 8002342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0201 	bic.w	r2, r2, #1
 8002354:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002364:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	021b      	lsls	r3, r3, #8
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	4313      	orrs	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	e000      	b.n	800239e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800239c:	2302      	movs	r3, #2
  }
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ac:	b08f      	sub	sp, #60	; 0x3c
 80023ae:	af0a      	add	r7, sp, #40	; 0x28
 80023b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e116      	b.n	80025ea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7fe fd20 	bl	8000e1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2203      	movs	r2, #3
 80023e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d102      	bne.n	80023f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f001 ff3a 	bl	8004274 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	603b      	str	r3, [r7, #0]
 8002406:	687e      	ldr	r6, [r7, #4]
 8002408:	466d      	mov	r5, sp
 800240a:	f106 0410 	add.w	r4, r6, #16
 800240e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002412:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002414:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002416:	e894 0003 	ldmia.w	r4, {r0, r1}
 800241a:	e885 0003 	stmia.w	r5, {r0, r1}
 800241e:	1d33      	adds	r3, r6, #4
 8002420:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002422:	6838      	ldr	r0, [r7, #0]
 8002424:	f001 fece 	bl	80041c4 <USB_CoreInit>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2202      	movs	r2, #2
 8002432:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e0d7      	b.n	80025ea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2100      	movs	r1, #0
 8002440:	4618      	mov	r0, r3
 8002442:	f001 ff28 	bl	8004296 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002446:	2300      	movs	r3, #0
 8002448:	73fb      	strb	r3, [r7, #15]
 800244a:	e04a      	b.n	80024e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800244c:	7bfa      	ldrb	r2, [r7, #15]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4413      	add	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	333d      	adds	r3, #61	; 0x3d
 800245c:	2201      	movs	r2, #1
 800245e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002460:	7bfa      	ldrb	r2, [r7, #15]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	333c      	adds	r3, #60	; 0x3c
 8002470:	7bfa      	ldrb	r2, [r7, #15]
 8002472:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002474:	7bfa      	ldrb	r2, [r7, #15]
 8002476:	7bfb      	ldrb	r3, [r7, #15]
 8002478:	b298      	uxth	r0, r3
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	3344      	adds	r3, #68	; 0x44
 8002488:	4602      	mov	r2, r0
 800248a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800248c:	7bfa      	ldrb	r2, [r7, #15]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	3340      	adds	r3, #64	; 0x40
 800249c:	2200      	movs	r2, #0
 800249e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024a0:	7bfa      	ldrb	r2, [r7, #15]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4413      	add	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	3348      	adds	r3, #72	; 0x48
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024b4:	7bfa      	ldrb	r2, [r7, #15]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	334c      	adds	r3, #76	; 0x4c
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024c8:	7bfa      	ldrb	r2, [r7, #15]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	3354      	adds	r3, #84	; 0x54
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	3301      	adds	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d3af      	bcc.n	800244c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ec:	2300      	movs	r3, #0
 80024ee:	73fb      	strb	r3, [r7, #15]
 80024f0:	e044      	b.n	800257c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024f2:	7bfa      	ldrb	r2, [r7, #15]
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	4413      	add	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	440b      	add	r3, r1
 8002500:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002508:	7bfa      	ldrb	r2, [r7, #15]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4413      	add	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800251a:	7bfa      	ldrb	r2, [r7, #15]
 800251c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800251e:	7bfa      	ldrb	r2, [r7, #15]
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002534:	7bfa      	ldrb	r2, [r7, #15]
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4413      	add	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800254a:	7bfa      	ldrb	r2, [r7, #15]
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	4413      	add	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002560:	7bfa      	ldrb	r2, [r7, #15]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	3301      	adds	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
 800257c:	7bfa      	ldrb	r2, [r7, #15]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	429a      	cmp	r2, r3
 8002584:	d3b5      	bcc.n	80024f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	603b      	str	r3, [r7, #0]
 800258c:	687e      	ldr	r6, [r7, #4]
 800258e:	466d      	mov	r5, sp
 8002590:	f106 0410 	add.w	r4, r6, #16
 8002594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002598:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800259a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800259c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80025a4:	1d33      	adds	r3, r6, #4
 80025a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025a8:	6838      	ldr	r0, [r7, #0]
 80025aa:	f001 fec1 	bl	8004330 <USB_DevInit>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e014      	b.n	80025ea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d102      	bne.n	80025de <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f80b 	bl	80025f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f002 f87f 	bl	80046e6 <USB_DevDisconnect>

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080025f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_PCDEx_ActivateLPM+0x44>)
 8002624:	4313      	orrs	r3, r2
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	10000003 	.word	0x10000003

0800263c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a04      	ldr	r2, [pc, #16]	; (8002658 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264a:	6013      	str	r3, [r2, #0]
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	40007000 	.word	0x40007000

0800265c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002666:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	4a22      	ldr	r2, [pc, #136]	; (80026f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800266c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002670:	6413      	str	r3, [r2, #64]	; 0x40
 8002672:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800267e:	4b1e      	ldr	r3, [pc, #120]	; (80026f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a1d      	ldr	r2, [pc, #116]	; (80026f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002688:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800268a:	f7fe fe35 	bl	80012f8 <HAL_GetTick>
 800268e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002690:	e009      	b.n	80026a6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002692:	f7fe fe31 	bl	80012f8 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026a0:	d901      	bls.n	80026a6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e022      	b.n	80026ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026a6:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b2:	d1ee      	bne.n	8002692 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80026b4:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0f      	ldr	r2, [pc, #60]	; (80026f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026c0:	f7fe fe1a 	bl	80012f8 <HAL_GetTick>
 80026c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026c6:	e009      	b.n	80026dc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026c8:	f7fe fe16 	bl	80012f8 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026d6:	d901      	bls.n	80026dc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e007      	b.n	80026ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026e8:	d1ee      	bne.n	80026c8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40007000 	.word	0x40007000

080026fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002704:	2300      	movs	r3, #0
 8002706:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e29b      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 8087 	beq.w	800282e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002720:	4b96      	ldr	r3, [pc, #600]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 030c 	and.w	r3, r3, #12
 8002728:	2b04      	cmp	r3, #4
 800272a:	d00c      	beq.n	8002746 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800272c:	4b93      	ldr	r3, [pc, #588]	; (800297c <HAL_RCC_OscConfig+0x280>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 030c 	and.w	r3, r3, #12
 8002734:	2b08      	cmp	r3, #8
 8002736:	d112      	bne.n	800275e <HAL_RCC_OscConfig+0x62>
 8002738:	4b90      	ldr	r3, [pc, #576]	; (800297c <HAL_RCC_OscConfig+0x280>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002740:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002744:	d10b      	bne.n	800275e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002746:	4b8d      	ldr	r3, [pc, #564]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d06c      	beq.n	800282c <HAL_RCC_OscConfig+0x130>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d168      	bne.n	800282c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e275      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002766:	d106      	bne.n	8002776 <HAL_RCC_OscConfig+0x7a>
 8002768:	4b84      	ldr	r3, [pc, #528]	; (800297c <HAL_RCC_OscConfig+0x280>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a83      	ldr	r2, [pc, #524]	; (800297c <HAL_RCC_OscConfig+0x280>)
 800276e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	e02e      	b.n	80027d4 <HAL_RCC_OscConfig+0xd8>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10c      	bne.n	8002798 <HAL_RCC_OscConfig+0x9c>
 800277e:	4b7f      	ldr	r3, [pc, #508]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a7e      	ldr	r2, [pc, #504]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	4b7c      	ldr	r3, [pc, #496]	; (800297c <HAL_RCC_OscConfig+0x280>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a7b      	ldr	r2, [pc, #492]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002790:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	e01d      	b.n	80027d4 <HAL_RCC_OscConfig+0xd8>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a0:	d10c      	bne.n	80027bc <HAL_RCC_OscConfig+0xc0>
 80027a2:	4b76      	ldr	r3, [pc, #472]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a75      	ldr	r2, [pc, #468]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80027a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	4b73      	ldr	r3, [pc, #460]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a72      	ldr	r2, [pc, #456]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80027b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	e00b      	b.n	80027d4 <HAL_RCC_OscConfig+0xd8>
 80027bc:	4b6f      	ldr	r3, [pc, #444]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a6e      	ldr	r2, [pc, #440]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80027c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c6:	6013      	str	r3, [r2, #0]
 80027c8:	4b6c      	ldr	r3, [pc, #432]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a6b      	ldr	r2, [pc, #428]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80027ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d013      	beq.n	8002804 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027dc:	f7fe fd8c 	bl	80012f8 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e4:	f7fe fd88 	bl	80012f8 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b64      	cmp	r3, #100	; 0x64
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e229      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f6:	4b61      	ldr	r3, [pc, #388]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f0      	beq.n	80027e4 <HAL_RCC_OscConfig+0xe8>
 8002802:	e014      	b.n	800282e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7fe fd78 	bl	80012f8 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800280c:	f7fe fd74 	bl	80012f8 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	; 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e215      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800281e:	4b57      	ldr	r3, [pc, #348]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x110>
 800282a:	e000      	b.n	800282e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800282c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d069      	beq.n	800290e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800283a:	4b50      	ldr	r3, [pc, #320]	; (800297c <HAL_RCC_OscConfig+0x280>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 030c 	and.w	r3, r3, #12
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00b      	beq.n	800285e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002846:	4b4d      	ldr	r3, [pc, #308]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b08      	cmp	r3, #8
 8002850:	d11c      	bne.n	800288c <HAL_RCC_OscConfig+0x190>
 8002852:	4b4a      	ldr	r3, [pc, #296]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d116      	bne.n	800288c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285e:	4b47      	ldr	r3, [pc, #284]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d005      	beq.n	8002876 <HAL_RCC_OscConfig+0x17a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d001      	beq.n	8002876 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e1e9      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002876:	4b41      	ldr	r3, [pc, #260]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	493d      	ldr	r1, [pc, #244]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002886:	4313      	orrs	r3, r2
 8002888:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800288a:	e040      	b.n	800290e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d023      	beq.n	80028dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002894:	4b39      	ldr	r3, [pc, #228]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a38      	ldr	r2, [pc, #224]	; (800297c <HAL_RCC_OscConfig+0x280>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7fe fd2a 	bl	80012f8 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a8:	f7fe fd26 	bl	80012f8 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e1c7      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ba:	4b30      	ldr	r3, [pc, #192]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c6:	4b2d      	ldr	r3, [pc, #180]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	4929      	ldr	r1, [pc, #164]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]
 80028da:	e018      	b.n	800290e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028dc:	4b27      	ldr	r3, [pc, #156]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a26      	ldr	r2, [pc, #152]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80028e2:	f023 0301 	bic.w	r3, r3, #1
 80028e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7fe fd06 	bl	80012f8 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f0:	f7fe fd02 	bl	80012f8 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e1a3      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002902:	4b1e      	ldr	r3, [pc, #120]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d038      	beq.n	800298c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d019      	beq.n	8002956 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002922:	4b16      	ldr	r3, [pc, #88]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002926:	4a15      	ldr	r2, [pc, #84]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292e:	f7fe fce3 	bl	80012f8 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002936:	f7fe fcdf 	bl	80012f8 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e180      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002948:	4b0c      	ldr	r3, [pc, #48]	; (800297c <HAL_RCC_OscConfig+0x280>)
 800294a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x23a>
 8002954:	e01a      	b.n	800298c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002956:	4b09      	ldr	r3, [pc, #36]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800295a:	4a08      	ldr	r2, [pc, #32]	; (800297c <HAL_RCC_OscConfig+0x280>)
 800295c:	f023 0301 	bic.w	r3, r3, #1
 8002960:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002962:	f7fe fcc9 	bl	80012f8 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002968:	e00a      	b.n	8002980 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800296a:	f7fe fcc5 	bl	80012f8 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d903      	bls.n	8002980 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e166      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
 800297c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002980:	4b92      	ldr	r3, [pc, #584]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1ee      	bne.n	800296a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 80a4 	beq.w	8002ae2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299a:	4b8c      	ldr	r3, [pc, #560]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10d      	bne.n	80029c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a6:	4b89      	ldr	r3, [pc, #548]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	4a88      	ldr	r2, [pc, #544]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 80029ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b0:	6413      	str	r3, [r2, #64]	; 0x40
 80029b2:	4b86      	ldr	r3, [pc, #536]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029be:	2301      	movs	r3, #1
 80029c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029c2:	4b83      	ldr	r3, [pc, #524]	; (8002bd0 <HAL_RCC_OscConfig+0x4d4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d118      	bne.n	8002a00 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80029ce:	4b80      	ldr	r3, [pc, #512]	; (8002bd0 <HAL_RCC_OscConfig+0x4d4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a7f      	ldr	r2, [pc, #508]	; (8002bd0 <HAL_RCC_OscConfig+0x4d4>)
 80029d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029da:	f7fe fc8d 	bl	80012f8 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e2:	f7fe fc89 	bl	80012f8 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b64      	cmp	r3, #100	; 0x64
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e12a      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f4:	4b76      	ldr	r3, [pc, #472]	; (8002bd0 <HAL_RCC_OscConfig+0x4d4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d106      	bne.n	8002a16 <HAL_RCC_OscConfig+0x31a>
 8002a08:	4b70      	ldr	r3, [pc, #448]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0c:	4a6f      	ldr	r2, [pc, #444]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	6713      	str	r3, [r2, #112]	; 0x70
 8002a14:	e02d      	b.n	8002a72 <HAL_RCC_OscConfig+0x376>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCC_OscConfig+0x33c>
 8002a1e:	4b6b      	ldr	r3, [pc, #428]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a22:	4a6a      	ldr	r2, [pc, #424]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a24:	f023 0301 	bic.w	r3, r3, #1
 8002a28:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2a:	4b68      	ldr	r3, [pc, #416]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2e:	4a67      	ldr	r2, [pc, #412]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a30:	f023 0304 	bic.w	r3, r3, #4
 8002a34:	6713      	str	r3, [r2, #112]	; 0x70
 8002a36:	e01c      	b.n	8002a72 <HAL_RCC_OscConfig+0x376>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b05      	cmp	r3, #5
 8002a3e:	d10c      	bne.n	8002a5a <HAL_RCC_OscConfig+0x35e>
 8002a40:	4b62      	ldr	r3, [pc, #392]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	4a61      	ldr	r2, [pc, #388]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a46:	f043 0304 	orr.w	r3, r3, #4
 8002a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4c:	4b5f      	ldr	r3, [pc, #380]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a50:	4a5e      	ldr	r2, [pc, #376]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6713      	str	r3, [r2, #112]	; 0x70
 8002a58:	e00b      	b.n	8002a72 <HAL_RCC_OscConfig+0x376>
 8002a5a:	4b5c      	ldr	r3, [pc, #368]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5e:	4a5b      	ldr	r2, [pc, #364]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a60:	f023 0301 	bic.w	r3, r3, #1
 8002a64:	6713      	str	r3, [r2, #112]	; 0x70
 8002a66:	4b59      	ldr	r3, [pc, #356]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6a:	4a58      	ldr	r2, [pc, #352]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a6c:	f023 0304 	bic.w	r3, r3, #4
 8002a70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d015      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7a:	f7fe fc3d 	bl	80012f8 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a80:	e00a      	b.n	8002a98 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a82:	f7fe fc39 	bl	80012f8 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e0d8      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a98:	4b4c      	ldr	r3, [pc, #304]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0ee      	beq.n	8002a82 <HAL_RCC_OscConfig+0x386>
 8002aa4:	e014      	b.n	8002ad0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa6:	f7fe fc27 	bl	80012f8 <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aac:	e00a      	b.n	8002ac4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aae:	f7fe fc23 	bl	80012f8 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e0c2      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac4:	4b41      	ldr	r3, [pc, #260]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1ee      	bne.n	8002aae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ad0:	7dfb      	ldrb	r3, [r7, #23]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d105      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad6:	4b3d      	ldr	r3, [pc, #244]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	4a3c      	ldr	r2, [pc, #240]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002adc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 80ae 	beq.w	8002c48 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aec:	4b37      	ldr	r3, [pc, #220]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 030c 	and.w	r3, r3, #12
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d06d      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d14b      	bne.n	8002b98 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b00:	4b32      	ldr	r3, [pc, #200]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a31      	ldr	r2, [pc, #196]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002b06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7fe fbf4 	bl	80012f8 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b14:	f7fe fbf0 	bl	80012f8 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e091      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b26:	4b29      	ldr	r3, [pc, #164]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69da      	ldr	r2, [r3, #28]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	019b      	lsls	r3, r3, #6
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b48:	085b      	lsrs	r3, r3, #1
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	041b      	lsls	r3, r3, #16
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	061b      	lsls	r3, r3, #24
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	071b      	lsls	r3, r3, #28
 8002b5e:	491b      	ldr	r1, [pc, #108]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b64:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a18      	ldr	r2, [pc, #96]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002b6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7fe fbc2 	bl	80012f8 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fe fbbe 	bl	80012f8 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e05f      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8a:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x47c>
 8002b96:	e057      	b.n	8002c48 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b98:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a0b      	ldr	r2, [pc, #44]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002b9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fba8 	bl	80012f8 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bac:	f7fe fba4 	bl	80012f8 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e045      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bbe:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x4b0>
 8002bca:	e03d      	b.n	8002c48 <HAL_RCC_OscConfig+0x54c>
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002bd4:	4b1f      	ldr	r3, [pc, #124]	; (8002c54 <HAL_RCC_OscConfig+0x558>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d030      	beq.n	8002c44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d129      	bne.n	8002c44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d122      	bne.n	8002c44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c04:	4013      	ands	r3, r2
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d119      	bne.n	8002c44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1a:	085b      	lsrs	r3, r3, #1
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d10f      	bne.n	8002c44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d107      	bne.n	8002c44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40023800 	.word	0x40023800

08002c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0d0      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c70:	4b6a      	ldr	r3, [pc, #424]	; (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d910      	bls.n	8002ca0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b67      	ldr	r3, [pc, #412]	; (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 020f 	bic.w	r2, r3, #15
 8002c86:	4965      	ldr	r1, [pc, #404]	; (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8e:	4b63      	ldr	r3, [pc, #396]	; (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0b8      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d020      	beq.n	8002cee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cb8:	4b59      	ldr	r3, [pc, #356]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	4a58      	ldr	r2, [pc, #352]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002cbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cd0:	4b53      	ldr	r3, [pc, #332]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	4a52      	ldr	r2, [pc, #328]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cdc:	4b50      	ldr	r3, [pc, #320]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	494d      	ldr	r1, [pc, #308]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d040      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d107      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d02:	4b47      	ldr	r3, [pc, #284]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d115      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e07f      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d107      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1a:	4b41      	ldr	r3, [pc, #260]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e073      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2a:	4b3d      	ldr	r3, [pc, #244]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e06b      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d3a:	4b39      	ldr	r3, [pc, #228]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f023 0203 	bic.w	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	4936      	ldr	r1, [pc, #216]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d4c:	f7fe fad4 	bl	80012f8 <HAL_GetTick>
 8002d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d52:	e00a      	b.n	8002d6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d54:	f7fe fad0 	bl	80012f8 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e053      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6a:	4b2d      	ldr	r3, [pc, #180]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 020c 	and.w	r2, r3, #12
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d1eb      	bne.n	8002d54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b27      	ldr	r3, [pc, #156]	; (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d210      	bcs.n	8002dac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8a:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 020f 	bic.w	r2, r3, #15
 8002d92:	4922      	ldr	r1, [pc, #136]	; (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9a:	4b20      	ldr	r3, [pc, #128]	; (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d001      	beq.n	8002dac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e032      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db8:	4b19      	ldr	r3, [pc, #100]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	4916      	ldr	r1, [pc, #88]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d009      	beq.n	8002dea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dd6:	4b12      	ldr	r3, [pc, #72]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	490e      	ldr	r1, [pc, #56]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dea:	f000 f821 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 8002dee:	4602      	mov	r2, r0
 8002df0:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	091b      	lsrs	r3, r3, #4
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	490a      	ldr	r1, [pc, #40]	; (8002e24 <HAL_RCC_ClockConfig+0x1cc>)
 8002dfc:	5ccb      	ldrb	r3, [r1, r3]
 8002dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002e02:	4a09      	ldr	r2, [pc, #36]	; (8002e28 <HAL_RCC_ClockConfig+0x1d0>)
 8002e04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e06:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <HAL_RCC_ClockConfig+0x1d4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fe fa30 	bl	8001270 <HAL_InitTick>

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40023c00 	.word	0x40023c00
 8002e20:	40023800 	.word	0x40023800
 8002e24:	08005144 	.word	0x08005144
 8002e28:	20000000 	.word	0x20000000
 8002e2c:	20000010 	.word	0x20000010

08002e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e34:	b094      	sub	sp, #80	; 0x50
 8002e36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e40:	2300      	movs	r3, #0
 8002e42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e48:	4b79      	ldr	r3, [pc, #484]	; (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 030c 	and.w	r3, r3, #12
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d00d      	beq.n	8002e70 <HAL_RCC_GetSysClockFreq+0x40>
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	f200 80e1 	bhi.w	800301c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0x34>
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d003      	beq.n	8002e6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e62:	e0db      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e64:	4b73      	ldr	r3, [pc, #460]	; (8003034 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e68:	e0db      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e6a:	4b73      	ldr	r3, [pc, #460]	; (8003038 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e6e:	e0d8      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e70:	4b6f      	ldr	r3, [pc, #444]	; (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e78:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e7a:	4b6d      	ldr	r3, [pc, #436]	; (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d063      	beq.n	8002f4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e86:	4b6a      	ldr	r3, [pc, #424]	; (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	099b      	lsrs	r3, r3, #6
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e98:	633b      	str	r3, [r7, #48]	; 0x30
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ea2:	4622      	mov	r2, r4
 8002ea4:	462b      	mov	r3, r5
 8002ea6:	f04f 0000 	mov.w	r0, #0
 8002eaa:	f04f 0100 	mov.w	r1, #0
 8002eae:	0159      	lsls	r1, r3, #5
 8002eb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eb4:	0150      	lsls	r0, r2, #5
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4621      	mov	r1, r4
 8002ebc:	1a51      	subs	r1, r2, r1
 8002ebe:	6139      	str	r1, [r7, #16]
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ed4:	4659      	mov	r1, fp
 8002ed6:	018b      	lsls	r3, r1, #6
 8002ed8:	4651      	mov	r1, sl
 8002eda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ede:	4651      	mov	r1, sl
 8002ee0:	018a      	lsls	r2, r1, #6
 8002ee2:	4651      	mov	r1, sl
 8002ee4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ee8:	4659      	mov	r1, fp
 8002eea:	eb63 0901 	sbc.w	r9, r3, r1
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002efa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002efe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f02:	4690      	mov	r8, r2
 8002f04:	4699      	mov	r9, r3
 8002f06:	4623      	mov	r3, r4
 8002f08:	eb18 0303 	adds.w	r3, r8, r3
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	462b      	mov	r3, r5
 8002f10:	eb49 0303 	adc.w	r3, r9, r3
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f22:	4629      	mov	r1, r5
 8002f24:	024b      	lsls	r3, r1, #9
 8002f26:	4621      	mov	r1, r4
 8002f28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f2c:	4621      	mov	r1, r4
 8002f2e:	024a      	lsls	r2, r1, #9
 8002f30:	4610      	mov	r0, r2
 8002f32:	4619      	mov	r1, r3
 8002f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f36:	2200      	movs	r2, #0
 8002f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f40:	f7fd f9d6 	bl	80002f0 <__aeabi_uldivmod>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4613      	mov	r3, r2
 8002f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f4c:	e058      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f4e:	4b38      	ldr	r3, [pc, #224]	; (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	099b      	lsrs	r3, r3, #6
 8002f54:	2200      	movs	r2, #0
 8002f56:	4618      	mov	r0, r3
 8002f58:	4611      	mov	r1, r2
 8002f5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f5e:	623b      	str	r3, [r7, #32]
 8002f60:	2300      	movs	r3, #0
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
 8002f64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f68:	4642      	mov	r2, r8
 8002f6a:	464b      	mov	r3, r9
 8002f6c:	f04f 0000 	mov.w	r0, #0
 8002f70:	f04f 0100 	mov.w	r1, #0
 8002f74:	0159      	lsls	r1, r3, #5
 8002f76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f7a:	0150      	lsls	r0, r2, #5
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4641      	mov	r1, r8
 8002f82:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f86:	4649      	mov	r1, r9
 8002f88:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fa0:	ebb2 040a 	subs.w	r4, r2, sl
 8002fa4:	eb63 050b 	sbc.w	r5, r3, fp
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	00eb      	lsls	r3, r5, #3
 8002fb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fb6:	00e2      	lsls	r2, r4, #3
 8002fb8:	4614      	mov	r4, r2
 8002fba:	461d      	mov	r5, r3
 8002fbc:	4643      	mov	r3, r8
 8002fbe:	18e3      	adds	r3, r4, r3
 8002fc0:	603b      	str	r3, [r7, #0]
 8002fc2:	464b      	mov	r3, r9
 8002fc4:	eb45 0303 	adc.w	r3, r5, r3
 8002fc8:	607b      	str	r3, [r7, #4]
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fd6:	4629      	mov	r1, r5
 8002fd8:	028b      	lsls	r3, r1, #10
 8002fda:	4621      	mov	r1, r4
 8002fdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fe0:	4621      	mov	r1, r4
 8002fe2:	028a      	lsls	r2, r1, #10
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fea:	2200      	movs	r2, #0
 8002fec:	61bb      	str	r3, [r7, #24]
 8002fee:	61fa      	str	r2, [r7, #28]
 8002ff0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ff4:	f7fd f97c 	bl	80002f0 <__aeabi_uldivmod>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	0c1b      	lsrs	r3, r3, #16
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	3301      	adds	r3, #1
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003010:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003014:	fbb2 f3f3 	udiv	r3, r2, r3
 8003018:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800301a:	e002      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800301c:	4b05      	ldr	r3, [pc, #20]	; (8003034 <HAL_RCC_GetSysClockFreq+0x204>)
 800301e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003020:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003024:	4618      	mov	r0, r3
 8003026:	3750      	adds	r7, #80	; 0x50
 8003028:	46bd      	mov	sp, r7
 800302a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800302e:	bf00      	nop
 8003030:	40023800 	.word	0x40023800
 8003034:	00f42400 	.word	0x00f42400
 8003038:	007a1200 	.word	0x007a1200

0800303c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003040:	4b03      	ldr	r3, [pc, #12]	; (8003050 <HAL_RCC_GetHCLKFreq+0x14>)
 8003042:	681b      	ldr	r3, [r3, #0]
}
 8003044:	4618      	mov	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	20000000 	.word	0x20000000

08003054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003058:	f7ff fff0 	bl	800303c <HAL_RCC_GetHCLKFreq>
 800305c:	4602      	mov	r2, r0
 800305e:	4b05      	ldr	r3, [pc, #20]	; (8003074 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	0a9b      	lsrs	r3, r3, #10
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	4903      	ldr	r1, [pc, #12]	; (8003078 <HAL_RCC_GetPCLK1Freq+0x24>)
 800306a:	5ccb      	ldrb	r3, [r1, r3]
 800306c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003070:	4618      	mov	r0, r3
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40023800 	.word	0x40023800
 8003078:	08005154 	.word	0x08005154

0800307c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003080:	f7ff ffdc 	bl	800303c <HAL_RCC_GetHCLKFreq>
 8003084:	4602      	mov	r2, r0
 8003086:	4b05      	ldr	r3, [pc, #20]	; (800309c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	0b5b      	lsrs	r3, r3, #13
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	4903      	ldr	r1, [pc, #12]	; (80030a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003092:	5ccb      	ldrb	r3, [r1, r3]
 8003094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003098:	4618      	mov	r0, r3
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40023800 	.word	0x40023800
 80030a0:	08005154 	.word	0x08005154

080030a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d012      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030cc:	4b69      	ldr	r3, [pc, #420]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	4a68      	ldr	r2, [pc, #416]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030d6:	6093      	str	r3, [r2, #8]
 80030d8:	4b66      	ldr	r3, [pc, #408]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e0:	4964      	ldr	r1, [pc, #400]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80030ee:	2301      	movs	r3, #1
 80030f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d017      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030fe:	4b5d      	ldr	r3, [pc, #372]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003104:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310c:	4959      	ldr	r1, [pc, #356]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800311c:	d101      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800311e:	2301      	movs	r3, #1
 8003120:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800312a:	2301      	movs	r3, #1
 800312c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d017      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800313a:	4b4e      	ldr	r3, [pc, #312]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800313c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003140:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	494a      	ldr	r1, [pc, #296]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003158:	d101      	bne.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800315a:	2301      	movs	r3, #1
 800315c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003166:	2301      	movs	r3, #1
 8003168:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003176:	2301      	movs	r3, #1
 8003178:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 808b 	beq.w	800329e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003188:	4b3a      	ldr	r3, [pc, #232]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	4a39      	ldr	r2, [pc, #228]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003192:	6413      	str	r3, [r2, #64]	; 0x40
 8003194:	4b37      	ldr	r3, [pc, #220]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80031a0:	4b35      	ldr	r3, [pc, #212]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a34      	ldr	r2, [pc, #208]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ac:	f7fe f8a4 	bl	80012f8 <HAL_GetTick>
 80031b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b4:	f7fe f8a0 	bl	80012f8 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	; 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e38f      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80031c6:	4b2c      	ldr	r3, [pc, #176]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031d2:	4b28      	ldr	r3, [pc, #160]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d035      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d02e      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031f0:	4b20      	ldr	r3, [pc, #128]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031fa:	4b1e      	ldr	r3, [pc, #120]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fe:	4a1d      	ldr	r2, [pc, #116]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003204:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003206:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320a:	4a1a      	ldr	r2, [pc, #104]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800320c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003210:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003212:	4a18      	ldr	r2, [pc, #96]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003218:	4b16      	ldr	r3, [pc, #88]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800321a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b01      	cmp	r3, #1
 8003222:	d114      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003224:	f7fe f868 	bl	80012f8 <HAL_GetTick>
 8003228:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322a:	e00a      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800322c:	f7fe f864 	bl	80012f8 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	f241 3288 	movw	r2, #5000	; 0x1388
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e351      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003242:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0ee      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003256:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800325a:	d111      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800325c:	4b05      	ldr	r3, [pc, #20]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003268:	4b04      	ldr	r3, [pc, #16]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800326a:	400b      	ands	r3, r1
 800326c:	4901      	ldr	r1, [pc, #4]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326e:	4313      	orrs	r3, r2
 8003270:	608b      	str	r3, [r1, #8]
 8003272:	e00b      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003274:	40023800 	.word	0x40023800
 8003278:	40007000 	.word	0x40007000
 800327c:	0ffffcff 	.word	0x0ffffcff
 8003280:	4bac      	ldr	r3, [pc, #688]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	4aab      	ldr	r2, [pc, #684]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003286:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800328a:	6093      	str	r3, [r2, #8]
 800328c:	4ba9      	ldr	r3, [pc, #676]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800328e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003298:	49a6      	ldr	r1, [pc, #664]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800329a:	4313      	orrs	r3, r2
 800329c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d010      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032aa:	4ba2      	ldr	r3, [pc, #648]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032b0:	4aa0      	ldr	r2, [pc, #640]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80032ba:	4b9e      	ldr	r3, [pc, #632]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	499b      	ldr	r1, [pc, #620]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032d8:	4b96      	ldr	r3, [pc, #600]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032e6:	4993      	ldr	r1, [pc, #588]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032fa:	4b8e      	ldr	r3, [pc, #568]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003300:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003308:	498a      	ldr	r1, [pc, #552]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800331c:	4b85      	ldr	r3, [pc, #532]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800331e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003322:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800332a:	4982      	ldr	r1, [pc, #520]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800333e:	4b7d      	ldr	r3, [pc, #500]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003344:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334c:	4979      	ldr	r1, [pc, #484]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003360:	4b74      	ldr	r3, [pc, #464]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003366:	f023 0203 	bic.w	r2, r3, #3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	4971      	ldr	r1, [pc, #452]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003382:	4b6c      	ldr	r3, [pc, #432]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003388:	f023 020c 	bic.w	r2, r3, #12
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003390:	4968      	ldr	r1, [pc, #416]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033a4:	4b63      	ldr	r3, [pc, #396]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b2:	4960      	ldr	r1, [pc, #384]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033c6:	4b5b      	ldr	r3, [pc, #364]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d4:	4957      	ldr	r1, [pc, #348]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033e8:	4b52      	ldr	r3, [pc, #328]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f6:	494f      	ldr	r1, [pc, #316]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800340a:	4b4a      	ldr	r3, [pc, #296]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800340c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003410:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003418:	4946      	ldr	r1, [pc, #280]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00a      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800342c:	4b41      	ldr	r3, [pc, #260]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003432:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343a:	493e      	ldr	r1, [pc, #248]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800344e:	4b39      	ldr	r3, [pc, #228]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003454:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800345c:	4935      	ldr	r1, [pc, #212]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800345e:	4313      	orrs	r3, r2
 8003460:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003470:	4b30      	ldr	r3, [pc, #192]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003476:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800347e:	492d      	ldr	r1, [pc, #180]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003480:	4313      	orrs	r3, r2
 8003482:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d011      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003492:	4b28      	ldr	r3, [pc, #160]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003498:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034a0:	4924      	ldr	r1, [pc, #144]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034b0:	d101      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80034b2:	2301      	movs	r3, #1
 80034b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80034c2:	2301      	movs	r3, #1
 80034c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034d2:	4b18      	ldr	r3, [pc, #96]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e0:	4914      	ldr	r1, [pc, #80]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00b      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034f4:	4b0f      	ldr	r3, [pc, #60]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003504:	490b      	ldr	r1, [pc, #44]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00f      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003528:	4902      	ldr	r1, [pc, #8]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003530:	e002      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003532:	bf00      	nop
 8003534:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00b      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003544:	4b8a      	ldr	r3, [pc, #552]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800354a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003554:	4986      	ldr	r1, [pc, #536]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00b      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003568:	4b81      	ldr	r3, [pc, #516]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800356a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800356e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003578:	497d      	ldr	r1, [pc, #500]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d006      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 80d6 	beq.w	8003740 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003594:	4b76      	ldr	r3, [pc, #472]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a75      	ldr	r2, [pc, #468]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800359a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800359e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a0:	f7fd feaa 	bl	80012f8 <HAL_GetTick>
 80035a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035a8:	f7fd fea6 	bl	80012f8 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e195      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035ba:	4b6d      	ldr	r3, [pc, #436]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d021      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d11d      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80035da:	4b65      	ldr	r3, [pc, #404]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035e0:	0c1b      	lsrs	r3, r3, #16
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035e8:	4b61      	ldr	r3, [pc, #388]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ee:	0e1b      	lsrs	r3, r3, #24
 80035f0:	f003 030f 	and.w	r3, r3, #15
 80035f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	019a      	lsls	r2, r3, #6
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	041b      	lsls	r3, r3, #16
 8003600:	431a      	orrs	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	061b      	lsls	r3, r3, #24
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	071b      	lsls	r3, r3, #28
 800360e:	4958      	ldr	r1, [pc, #352]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d004      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800362a:	d00a      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003634:	2b00      	cmp	r3, #0
 8003636:	d02e      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003640:	d129      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003642:	4b4b      	ldr	r3, [pc, #300]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003648:	0c1b      	lsrs	r3, r3, #16
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003650:	4b47      	ldr	r3, [pc, #284]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003656:	0f1b      	lsrs	r3, r3, #28
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	019a      	lsls	r2, r3, #6
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	041b      	lsls	r3, r3, #16
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	061b      	lsls	r3, r3, #24
 8003670:	431a      	orrs	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	071b      	lsls	r3, r3, #28
 8003676:	493e      	ldr	r1, [pc, #248]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800367e:	4b3c      	ldr	r3, [pc, #240]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003684:	f023 021f 	bic.w	r2, r3, #31
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	3b01      	subs	r3, #1
 800368e:	4938      	ldr	r1, [pc, #224]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d01d      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036a2:	4b33      	ldr	r3, [pc, #204]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a8:	0e1b      	lsrs	r3, r3, #24
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036b0:	4b2f      	ldr	r3, [pc, #188]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036b6:	0f1b      	lsrs	r3, r3, #28
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	019a      	lsls	r2, r3, #6
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	041b      	lsls	r3, r3, #16
 80036ca:	431a      	orrs	r2, r3
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	061b      	lsls	r3, r3, #24
 80036d0:	431a      	orrs	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	071b      	lsls	r3, r3, #28
 80036d6:	4926      	ldr	r1, [pc, #152]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d011      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	019a      	lsls	r2, r3, #6
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	041b      	lsls	r3, r3, #16
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	061b      	lsls	r3, r3, #24
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	071b      	lsls	r3, r3, #28
 8003706:	491a      	ldr	r1, [pc, #104]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800370e:	4b18      	ldr	r3, [pc, #96]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a17      	ldr	r2, [pc, #92]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003714:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003718:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800371a:	f7fd fded 	bl	80012f8 <HAL_GetTick>
 800371e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003720:	e008      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003722:	f7fd fde9 	bl	80012f8 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b64      	cmp	r3, #100	; 0x64
 800372e:	d901      	bls.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e0d8      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003734:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0f0      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2b01      	cmp	r3, #1
 8003744:	f040 80ce 	bne.w	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003748:	4b09      	ldr	r3, [pc, #36]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a08      	ldr	r2, [pc, #32]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800374e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003754:	f7fd fdd0 	bl	80012f8 <HAL_GetTick>
 8003758:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800375a:	e00b      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800375c:	f7fd fdcc 	bl	80012f8 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b64      	cmp	r3, #100	; 0x64
 8003768:	d904      	bls.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e0bb      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800376e:	bf00      	nop
 8003770:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003774:	4b5e      	ldr	r3, [pc, #376]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800377c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003780:	d0ec      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003792:	2b00      	cmp	r3, #0
 8003794:	d009      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d02e      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d12a      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037aa:	4b51      	ldr	r3, [pc, #324]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b0:	0c1b      	lsrs	r3, r3, #16
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037b8:	4b4d      	ldr	r3, [pc, #308]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037be:	0f1b      	lsrs	r3, r3, #28
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	019a      	lsls	r2, r3, #6
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	041b      	lsls	r3, r3, #16
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	061b      	lsls	r3, r3, #24
 80037d8:	431a      	orrs	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	071b      	lsls	r3, r3, #28
 80037de:	4944      	ldr	r1, [pc, #272]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80037e6:	4b42      	ldr	r3, [pc, #264]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f4:	3b01      	subs	r3, #1
 80037f6:	021b      	lsls	r3, r3, #8
 80037f8:	493d      	ldr	r1, [pc, #244]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d022      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003810:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003814:	d11d      	bne.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003816:	4b36      	ldr	r3, [pc, #216]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381c:	0e1b      	lsrs	r3, r3, #24
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003824:	4b32      	ldr	r3, [pc, #200]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382a:	0f1b      	lsrs	r3, r3, #28
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	019a      	lsls	r2, r3, #6
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	041b      	lsls	r3, r3, #16
 800383e:	431a      	orrs	r2, r3
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	061b      	lsls	r3, r3, #24
 8003844:	431a      	orrs	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	071b      	lsls	r3, r3, #28
 800384a:	4929      	ldr	r1, [pc, #164]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d028      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800385e:	4b24      	ldr	r3, [pc, #144]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003864:	0e1b      	lsrs	r3, r3, #24
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800386c:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800386e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003872:	0c1b      	lsrs	r3, r3, #16
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	019a      	lsls	r2, r3, #6
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	041b      	lsls	r3, r3, #16
 8003884:	431a      	orrs	r2, r3
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	061b      	lsls	r3, r3, #24
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	071b      	lsls	r3, r3, #28
 8003892:	4917      	ldr	r1, [pc, #92]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800389a:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800389c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	4911      	ldr	r1, [pc, #68]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80038b0:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a0e      	ldr	r2, [pc, #56]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038bc:	f7fd fd1c 	bl	80012f8 <HAL_GetTick>
 80038c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038c4:	f7fd fd18 	bl	80012f8 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b64      	cmp	r3, #100	; 0x64
 80038d0:	d901      	bls.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e007      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038d6:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038e2:	d1ef      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3720      	adds	r7, #32
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40023800 	.word	0x40023800

080038f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e040      	b.n	8003988 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800390a:	2b00      	cmp	r3, #0
 800390c:	d106      	bne.n	800391c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fd f9f2 	bl	8000d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2224      	movs	r2, #36	; 0x24
 8003920:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0201 	bic.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f82c 	bl	8003990 <UART_SetConfig>
 8003938:	4603      	mov	r3, r0
 800393a:	2b01      	cmp	r3, #1
 800393c:	d101      	bne.n	8003942 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e022      	b.n	8003988 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 fa84 	bl	8003e58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800395e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800396e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fb0b 	bl	8003f9c <UART_CheckIdleState>
 8003986:	4603      	mov	r3, r0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b088      	sub	sp, #32
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	431a      	orrs	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	4ba6      	ldr	r3, [pc, #664]	; (8003c54 <UART_SetConfig+0x2c4>)
 80039bc:	4013      	ands	r3, r2
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6812      	ldr	r2, [r2, #0]
 80039c2:	6979      	ldr	r1, [r7, #20]
 80039c4:	430b      	orrs	r3, r1
 80039c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a94      	ldr	r2, [pc, #592]	; (8003c58 <UART_SetConfig+0x2c8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d120      	bne.n	8003a4e <UART_SetConfig+0xbe>
 8003a0c:	4b93      	ldr	r3, [pc, #588]	; (8003c5c <UART_SetConfig+0x2cc>)
 8003a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	2b03      	cmp	r3, #3
 8003a18:	d816      	bhi.n	8003a48 <UART_SetConfig+0xb8>
 8003a1a:	a201      	add	r2, pc, #4	; (adr r2, 8003a20 <UART_SetConfig+0x90>)
 8003a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a20:	08003a31 	.word	0x08003a31
 8003a24:	08003a3d 	.word	0x08003a3d
 8003a28:	08003a37 	.word	0x08003a37
 8003a2c:	08003a43 	.word	0x08003a43
 8003a30:	2301      	movs	r3, #1
 8003a32:	77fb      	strb	r3, [r7, #31]
 8003a34:	e150      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003a36:	2302      	movs	r3, #2
 8003a38:	77fb      	strb	r3, [r7, #31]
 8003a3a:	e14d      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003a3c:	2304      	movs	r3, #4
 8003a3e:	77fb      	strb	r3, [r7, #31]
 8003a40:	e14a      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003a42:	2308      	movs	r3, #8
 8003a44:	77fb      	strb	r3, [r7, #31]
 8003a46:	e147      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003a48:	2310      	movs	r3, #16
 8003a4a:	77fb      	strb	r3, [r7, #31]
 8003a4c:	e144      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a83      	ldr	r2, [pc, #524]	; (8003c60 <UART_SetConfig+0x2d0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d132      	bne.n	8003abe <UART_SetConfig+0x12e>
 8003a58:	4b80      	ldr	r3, [pc, #512]	; (8003c5c <UART_SetConfig+0x2cc>)
 8003a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b0c      	cmp	r3, #12
 8003a64:	d828      	bhi.n	8003ab8 <UART_SetConfig+0x128>
 8003a66:	a201      	add	r2, pc, #4	; (adr r2, 8003a6c <UART_SetConfig+0xdc>)
 8003a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6c:	08003aa1 	.word	0x08003aa1
 8003a70:	08003ab9 	.word	0x08003ab9
 8003a74:	08003ab9 	.word	0x08003ab9
 8003a78:	08003ab9 	.word	0x08003ab9
 8003a7c:	08003aad 	.word	0x08003aad
 8003a80:	08003ab9 	.word	0x08003ab9
 8003a84:	08003ab9 	.word	0x08003ab9
 8003a88:	08003ab9 	.word	0x08003ab9
 8003a8c:	08003aa7 	.word	0x08003aa7
 8003a90:	08003ab9 	.word	0x08003ab9
 8003a94:	08003ab9 	.word	0x08003ab9
 8003a98:	08003ab9 	.word	0x08003ab9
 8003a9c:	08003ab3 	.word	0x08003ab3
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	77fb      	strb	r3, [r7, #31]
 8003aa4:	e118      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	77fb      	strb	r3, [r7, #31]
 8003aaa:	e115      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003aac:	2304      	movs	r3, #4
 8003aae:	77fb      	strb	r3, [r7, #31]
 8003ab0:	e112      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003ab2:	2308      	movs	r3, #8
 8003ab4:	77fb      	strb	r3, [r7, #31]
 8003ab6:	e10f      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003ab8:	2310      	movs	r3, #16
 8003aba:	77fb      	strb	r3, [r7, #31]
 8003abc:	e10c      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a68      	ldr	r2, [pc, #416]	; (8003c64 <UART_SetConfig+0x2d4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d120      	bne.n	8003b0a <UART_SetConfig+0x17a>
 8003ac8:	4b64      	ldr	r3, [pc, #400]	; (8003c5c <UART_SetConfig+0x2cc>)
 8003aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ace:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ad2:	2b30      	cmp	r3, #48	; 0x30
 8003ad4:	d013      	beq.n	8003afe <UART_SetConfig+0x16e>
 8003ad6:	2b30      	cmp	r3, #48	; 0x30
 8003ad8:	d814      	bhi.n	8003b04 <UART_SetConfig+0x174>
 8003ada:	2b20      	cmp	r3, #32
 8003adc:	d009      	beq.n	8003af2 <UART_SetConfig+0x162>
 8003ade:	2b20      	cmp	r3, #32
 8003ae0:	d810      	bhi.n	8003b04 <UART_SetConfig+0x174>
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d002      	beq.n	8003aec <UART_SetConfig+0x15c>
 8003ae6:	2b10      	cmp	r3, #16
 8003ae8:	d006      	beq.n	8003af8 <UART_SetConfig+0x168>
 8003aea:	e00b      	b.n	8003b04 <UART_SetConfig+0x174>
 8003aec:	2300      	movs	r3, #0
 8003aee:	77fb      	strb	r3, [r7, #31]
 8003af0:	e0f2      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003af2:	2302      	movs	r3, #2
 8003af4:	77fb      	strb	r3, [r7, #31]
 8003af6:	e0ef      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003af8:	2304      	movs	r3, #4
 8003afa:	77fb      	strb	r3, [r7, #31]
 8003afc:	e0ec      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003afe:	2308      	movs	r3, #8
 8003b00:	77fb      	strb	r3, [r7, #31]
 8003b02:	e0e9      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003b04:	2310      	movs	r3, #16
 8003b06:	77fb      	strb	r3, [r7, #31]
 8003b08:	e0e6      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a56      	ldr	r2, [pc, #344]	; (8003c68 <UART_SetConfig+0x2d8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d120      	bne.n	8003b56 <UART_SetConfig+0x1c6>
 8003b14:	4b51      	ldr	r3, [pc, #324]	; (8003c5c <UART_SetConfig+0x2cc>)
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b1e:	2bc0      	cmp	r3, #192	; 0xc0
 8003b20:	d013      	beq.n	8003b4a <UART_SetConfig+0x1ba>
 8003b22:	2bc0      	cmp	r3, #192	; 0xc0
 8003b24:	d814      	bhi.n	8003b50 <UART_SetConfig+0x1c0>
 8003b26:	2b80      	cmp	r3, #128	; 0x80
 8003b28:	d009      	beq.n	8003b3e <UART_SetConfig+0x1ae>
 8003b2a:	2b80      	cmp	r3, #128	; 0x80
 8003b2c:	d810      	bhi.n	8003b50 <UART_SetConfig+0x1c0>
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <UART_SetConfig+0x1a8>
 8003b32:	2b40      	cmp	r3, #64	; 0x40
 8003b34:	d006      	beq.n	8003b44 <UART_SetConfig+0x1b4>
 8003b36:	e00b      	b.n	8003b50 <UART_SetConfig+0x1c0>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	77fb      	strb	r3, [r7, #31]
 8003b3c:	e0cc      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	77fb      	strb	r3, [r7, #31]
 8003b42:	e0c9      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003b44:	2304      	movs	r3, #4
 8003b46:	77fb      	strb	r3, [r7, #31]
 8003b48:	e0c6      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003b4a:	2308      	movs	r3, #8
 8003b4c:	77fb      	strb	r3, [r7, #31]
 8003b4e:	e0c3      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003b50:	2310      	movs	r3, #16
 8003b52:	77fb      	strb	r3, [r7, #31]
 8003b54:	e0c0      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a44      	ldr	r2, [pc, #272]	; (8003c6c <UART_SetConfig+0x2dc>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d125      	bne.n	8003bac <UART_SetConfig+0x21c>
 8003b60:	4b3e      	ldr	r3, [pc, #248]	; (8003c5c <UART_SetConfig+0x2cc>)
 8003b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b6e:	d017      	beq.n	8003ba0 <UART_SetConfig+0x210>
 8003b70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b74:	d817      	bhi.n	8003ba6 <UART_SetConfig+0x216>
 8003b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b7a:	d00b      	beq.n	8003b94 <UART_SetConfig+0x204>
 8003b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b80:	d811      	bhi.n	8003ba6 <UART_SetConfig+0x216>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <UART_SetConfig+0x1fe>
 8003b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b8a:	d006      	beq.n	8003b9a <UART_SetConfig+0x20a>
 8003b8c:	e00b      	b.n	8003ba6 <UART_SetConfig+0x216>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	77fb      	strb	r3, [r7, #31]
 8003b92:	e0a1      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003b94:	2302      	movs	r3, #2
 8003b96:	77fb      	strb	r3, [r7, #31]
 8003b98:	e09e      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003b9a:	2304      	movs	r3, #4
 8003b9c:	77fb      	strb	r3, [r7, #31]
 8003b9e:	e09b      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003ba0:	2308      	movs	r3, #8
 8003ba2:	77fb      	strb	r3, [r7, #31]
 8003ba4:	e098      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003ba6:	2310      	movs	r3, #16
 8003ba8:	77fb      	strb	r3, [r7, #31]
 8003baa:	e095      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a2f      	ldr	r2, [pc, #188]	; (8003c70 <UART_SetConfig+0x2e0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d125      	bne.n	8003c02 <UART_SetConfig+0x272>
 8003bb6:	4b29      	ldr	r3, [pc, #164]	; (8003c5c <UART_SetConfig+0x2cc>)
 8003bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bc4:	d017      	beq.n	8003bf6 <UART_SetConfig+0x266>
 8003bc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bca:	d817      	bhi.n	8003bfc <UART_SetConfig+0x26c>
 8003bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bd0:	d00b      	beq.n	8003bea <UART_SetConfig+0x25a>
 8003bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bd6:	d811      	bhi.n	8003bfc <UART_SetConfig+0x26c>
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <UART_SetConfig+0x254>
 8003bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be0:	d006      	beq.n	8003bf0 <UART_SetConfig+0x260>
 8003be2:	e00b      	b.n	8003bfc <UART_SetConfig+0x26c>
 8003be4:	2301      	movs	r3, #1
 8003be6:	77fb      	strb	r3, [r7, #31]
 8003be8:	e076      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003bea:	2302      	movs	r3, #2
 8003bec:	77fb      	strb	r3, [r7, #31]
 8003bee:	e073      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003bf0:	2304      	movs	r3, #4
 8003bf2:	77fb      	strb	r3, [r7, #31]
 8003bf4:	e070      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003bf6:	2308      	movs	r3, #8
 8003bf8:	77fb      	strb	r3, [r7, #31]
 8003bfa:	e06d      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003bfc:	2310      	movs	r3, #16
 8003bfe:	77fb      	strb	r3, [r7, #31]
 8003c00:	e06a      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a1b      	ldr	r2, [pc, #108]	; (8003c74 <UART_SetConfig+0x2e4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d138      	bne.n	8003c7e <UART_SetConfig+0x2ee>
 8003c0c:	4b13      	ldr	r3, [pc, #76]	; (8003c5c <UART_SetConfig+0x2cc>)
 8003c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c12:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003c16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c1a:	d017      	beq.n	8003c4c <UART_SetConfig+0x2bc>
 8003c1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c20:	d82a      	bhi.n	8003c78 <UART_SetConfig+0x2e8>
 8003c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c26:	d00b      	beq.n	8003c40 <UART_SetConfig+0x2b0>
 8003c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c2c:	d824      	bhi.n	8003c78 <UART_SetConfig+0x2e8>
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <UART_SetConfig+0x2aa>
 8003c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c36:	d006      	beq.n	8003c46 <UART_SetConfig+0x2b6>
 8003c38:	e01e      	b.n	8003c78 <UART_SetConfig+0x2e8>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	77fb      	strb	r3, [r7, #31]
 8003c3e:	e04b      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003c40:	2302      	movs	r3, #2
 8003c42:	77fb      	strb	r3, [r7, #31]
 8003c44:	e048      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003c46:	2304      	movs	r3, #4
 8003c48:	77fb      	strb	r3, [r7, #31]
 8003c4a:	e045      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003c4c:	2308      	movs	r3, #8
 8003c4e:	77fb      	strb	r3, [r7, #31]
 8003c50:	e042      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003c52:	bf00      	nop
 8003c54:	efff69f3 	.word	0xefff69f3
 8003c58:	40011000 	.word	0x40011000
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	40004400 	.word	0x40004400
 8003c64:	40004800 	.word	0x40004800
 8003c68:	40004c00 	.word	0x40004c00
 8003c6c:	40005000 	.word	0x40005000
 8003c70:	40011400 	.word	0x40011400
 8003c74:	40007800 	.word	0x40007800
 8003c78:	2310      	movs	r3, #16
 8003c7a:	77fb      	strb	r3, [r7, #31]
 8003c7c:	e02c      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a72      	ldr	r2, [pc, #456]	; (8003e4c <UART_SetConfig+0x4bc>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d125      	bne.n	8003cd4 <UART_SetConfig+0x344>
 8003c88:	4b71      	ldr	r3, [pc, #452]	; (8003e50 <UART_SetConfig+0x4c0>)
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c96:	d017      	beq.n	8003cc8 <UART_SetConfig+0x338>
 8003c98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c9c:	d817      	bhi.n	8003cce <UART_SetConfig+0x33e>
 8003c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca2:	d00b      	beq.n	8003cbc <UART_SetConfig+0x32c>
 8003ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca8:	d811      	bhi.n	8003cce <UART_SetConfig+0x33e>
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <UART_SetConfig+0x326>
 8003cae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cb2:	d006      	beq.n	8003cc2 <UART_SetConfig+0x332>
 8003cb4:	e00b      	b.n	8003cce <UART_SetConfig+0x33e>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	77fb      	strb	r3, [r7, #31]
 8003cba:	e00d      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	77fb      	strb	r3, [r7, #31]
 8003cc0:	e00a      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003cc2:	2304      	movs	r3, #4
 8003cc4:	77fb      	strb	r3, [r7, #31]
 8003cc6:	e007      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003cc8:	2308      	movs	r3, #8
 8003cca:	77fb      	strb	r3, [r7, #31]
 8003ccc:	e004      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003cce:	2310      	movs	r3, #16
 8003cd0:	77fb      	strb	r3, [r7, #31]
 8003cd2:	e001      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003cd4:	2310      	movs	r3, #16
 8003cd6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ce0:	d15b      	bne.n	8003d9a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003ce2:	7ffb      	ldrb	r3, [r7, #31]
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d828      	bhi.n	8003d3a <UART_SetConfig+0x3aa>
 8003ce8:	a201      	add	r2, pc, #4	; (adr r2, 8003cf0 <UART_SetConfig+0x360>)
 8003cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cee:	bf00      	nop
 8003cf0:	08003d15 	.word	0x08003d15
 8003cf4:	08003d1d 	.word	0x08003d1d
 8003cf8:	08003d25 	.word	0x08003d25
 8003cfc:	08003d3b 	.word	0x08003d3b
 8003d00:	08003d2b 	.word	0x08003d2b
 8003d04:	08003d3b 	.word	0x08003d3b
 8003d08:	08003d3b 	.word	0x08003d3b
 8003d0c:	08003d3b 	.word	0x08003d3b
 8003d10:	08003d33 	.word	0x08003d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d14:	f7ff f99e 	bl	8003054 <HAL_RCC_GetPCLK1Freq>
 8003d18:	61b8      	str	r0, [r7, #24]
        break;
 8003d1a:	e013      	b.n	8003d44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d1c:	f7ff f9ae 	bl	800307c <HAL_RCC_GetPCLK2Freq>
 8003d20:	61b8      	str	r0, [r7, #24]
        break;
 8003d22:	e00f      	b.n	8003d44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d24:	4b4b      	ldr	r3, [pc, #300]	; (8003e54 <UART_SetConfig+0x4c4>)
 8003d26:	61bb      	str	r3, [r7, #24]
        break;
 8003d28:	e00c      	b.n	8003d44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d2a:	f7ff f881 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 8003d2e:	61b8      	str	r0, [r7, #24]
        break;
 8003d30:	e008      	b.n	8003d44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d36:	61bb      	str	r3, [r7, #24]
        break;
 8003d38:	e004      	b.n	8003d44 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	77bb      	strb	r3, [r7, #30]
        break;
 8003d42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d074      	beq.n	8003e34 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	005a      	lsls	r2, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	085b      	lsrs	r3, r3, #1
 8003d54:	441a      	add	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	2b0f      	cmp	r3, #15
 8003d64:	d916      	bls.n	8003d94 <UART_SetConfig+0x404>
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d6c:	d212      	bcs.n	8003d94 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	f023 030f 	bic.w	r3, r3, #15
 8003d76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	085b      	lsrs	r3, r3, #1
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	f003 0307 	and.w	r3, r3, #7
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	89fb      	ldrh	r3, [r7, #14]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	89fa      	ldrh	r2, [r7, #14]
 8003d90:	60da      	str	r2, [r3, #12]
 8003d92:	e04f      	b.n	8003e34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	77bb      	strb	r3, [r7, #30]
 8003d98:	e04c      	b.n	8003e34 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d9a:	7ffb      	ldrb	r3, [r7, #31]
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d828      	bhi.n	8003df2 <UART_SetConfig+0x462>
 8003da0:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <UART_SetConfig+0x418>)
 8003da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da6:	bf00      	nop
 8003da8:	08003dcd 	.word	0x08003dcd
 8003dac:	08003dd5 	.word	0x08003dd5
 8003db0:	08003ddd 	.word	0x08003ddd
 8003db4:	08003df3 	.word	0x08003df3
 8003db8:	08003de3 	.word	0x08003de3
 8003dbc:	08003df3 	.word	0x08003df3
 8003dc0:	08003df3 	.word	0x08003df3
 8003dc4:	08003df3 	.word	0x08003df3
 8003dc8:	08003deb 	.word	0x08003deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dcc:	f7ff f942 	bl	8003054 <HAL_RCC_GetPCLK1Freq>
 8003dd0:	61b8      	str	r0, [r7, #24]
        break;
 8003dd2:	e013      	b.n	8003dfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dd4:	f7ff f952 	bl	800307c <HAL_RCC_GetPCLK2Freq>
 8003dd8:	61b8      	str	r0, [r7, #24]
        break;
 8003dda:	e00f      	b.n	8003dfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ddc:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <UART_SetConfig+0x4c4>)
 8003dde:	61bb      	str	r3, [r7, #24]
        break;
 8003de0:	e00c      	b.n	8003dfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003de2:	f7ff f825 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 8003de6:	61b8      	str	r0, [r7, #24]
        break;
 8003de8:	e008      	b.n	8003dfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dee:	61bb      	str	r3, [r7, #24]
        break;
 8003df0:	e004      	b.n	8003dfc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	77bb      	strb	r3, [r7, #30]
        break;
 8003dfa:	bf00      	nop
    }

    if (pclk != 0U)
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d018      	beq.n	8003e34 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	085a      	lsrs	r2, r3, #1
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	441a      	add	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	2b0f      	cmp	r3, #15
 8003e1a:	d909      	bls.n	8003e30 <UART_SetConfig+0x4a0>
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e22:	d205      	bcs.n	8003e30 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60da      	str	r2, [r3, #12]
 8003e2e:	e001      	b.n	8003e34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003e40:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3720      	adds	r7, #32
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40007c00 	.word	0x40007c00
 8003e50:	40023800 	.word	0x40023800
 8003e54:	00f42400 	.word	0x00f42400

08003e58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	f003 0310 	and.w	r3, r3, #16
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	f003 0320 	and.w	r3, r3, #32
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d01a      	beq.n	8003f6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f56:	d10a      	bne.n	8003f6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	605a      	str	r2, [r3, #4]
  }
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fac:	f7fd f9a4 	bl	80012f8 <HAL_GetTick>
 8003fb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d10e      	bne.n	8003fde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f831 	bl	8004036 <UART_WaitOnFlagUntilTimeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e027      	b.n	800402e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b04      	cmp	r3, #4
 8003fea:	d10e      	bne.n	800400a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f81b 	bl	8004036 <UART_WaitOnFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e011      	b.n	800402e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2220      	movs	r2, #32
 800400e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b09c      	sub	sp, #112	; 0x70
 800403a:	af00      	add	r7, sp, #0
 800403c:	60f8      	str	r0, [r7, #12]
 800403e:	60b9      	str	r1, [r7, #8]
 8004040:	603b      	str	r3, [r7, #0]
 8004042:	4613      	mov	r3, r2
 8004044:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004046:	e0a7      	b.n	8004198 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004048:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800404a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404e:	f000 80a3 	beq.w	8004198 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004052:	f7fd f951 	bl	80012f8 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800405e:	429a      	cmp	r2, r3
 8004060:	d302      	bcc.n	8004068 <UART_WaitOnFlagUntilTimeout+0x32>
 8004062:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004064:	2b00      	cmp	r3, #0
 8004066:	d13f      	bne.n	80040e8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004070:	e853 3f00 	ldrex	r3, [r3]
 8004074:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004078:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800407c:	667b      	str	r3, [r7, #100]	; 0x64
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004086:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004088:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800408c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800408e:	e841 2300 	strex	r3, r2, [r1]
 8004092:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1e6      	bne.n	8004068 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3308      	adds	r3, #8
 80040a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040a4:	e853 3f00 	ldrex	r3, [r3]
 80040a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ac:	f023 0301 	bic.w	r3, r3, #1
 80040b0:	663b      	str	r3, [r7, #96]	; 0x60
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	3308      	adds	r3, #8
 80040b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80040bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040c2:	e841 2300 	strex	r3, r2, [r1]
 80040c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80040c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1e5      	bne.n	800409a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2220      	movs	r2, #32
 80040d2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e068      	b.n	80041ba <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d050      	beq.n	8004198 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004100:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004104:	d148      	bne.n	8004198 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800410e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004118:	e853 3f00 	ldrex	r3, [r3]
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004124:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800412e:	637b      	str	r3, [r7, #52]	; 0x34
 8004130:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004132:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004134:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800413c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1e6      	bne.n	8004110 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3308      	adds	r3, #8
 8004148:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	e853 3f00 	ldrex	r3, [r3]
 8004150:	613b      	str	r3, [r7, #16]
   return(result);
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f023 0301 	bic.w	r3, r3, #1
 8004158:	66bb      	str	r3, [r7, #104]	; 0x68
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3308      	adds	r3, #8
 8004160:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004162:	623a      	str	r2, [r7, #32]
 8004164:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004166:	69f9      	ldr	r1, [r7, #28]
 8004168:	6a3a      	ldr	r2, [r7, #32]
 800416a:	e841 2300 	strex	r3, r2, [r1]
 800416e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1e5      	bne.n	8004142 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2220      	movs	r2, #32
 800417a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2220      	movs	r2, #32
 8004180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e010      	b.n	80041ba <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	69da      	ldr	r2, [r3, #28]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	4013      	ands	r3, r2
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	bf0c      	ite	eq
 80041a8:	2301      	moveq	r3, #1
 80041aa:	2300      	movne	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	461a      	mov	r2, r3
 80041b0:	79fb      	ldrb	r3, [r7, #7]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	f43f af48 	beq.w	8004048 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3770      	adds	r7, #112	; 0x70
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041c4:	b084      	sub	sp, #16
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b084      	sub	sp, #16
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	f107 001c 	add.w	r0, r7, #28
 80041d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d120      	bne.n	800421e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	4b20      	ldr	r3, [pc, #128]	; (8004270 <USB_CoreInit+0xac>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004202:	2b01      	cmp	r3, #1
 8004204:	d105      	bne.n	8004212 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fa96 	bl	8004744 <USB_CoreReset>
 8004218:	4603      	mov	r3, r0
 800421a:	73fb      	strb	r3, [r7, #15]
 800421c:	e010      	b.n	8004240 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fa8a 	bl	8004744 <USB_CoreReset>
 8004230:	4603      	mov	r3, r0
 8004232:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004238:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004242:	2b01      	cmp	r3, #1
 8004244:	d10b      	bne.n	800425e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f043 0206 	orr.w	r2, r3, #6
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f043 0220 	orr.w	r2, r3, #32
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800425e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800426a:	b004      	add	sp, #16
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	ffbdffbf 	.word	0xffbdffbf

08004274 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f023 0201 	bic.w	r2, r3, #1
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b084      	sub	sp, #16
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	460b      	mov	r3, r1
 80042a0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042b2:	78fb      	ldrb	r3, [r7, #3]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d115      	bne.n	80042e4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042c4:	2001      	movs	r0, #1
 80042c6:	f7fd f823 	bl	8001310 <HAL_Delay>
      ms++;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	3301      	adds	r3, #1
 80042ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 fa29 	bl	8004728 <USB_GetMode>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d01e      	beq.n	800431a <USB_SetCurrentMode+0x84>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2b31      	cmp	r3, #49	; 0x31
 80042e0:	d9f0      	bls.n	80042c4 <USB_SetCurrentMode+0x2e>
 80042e2:	e01a      	b.n	800431a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d115      	bne.n	8004316 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042f6:	2001      	movs	r0, #1
 80042f8:	f7fd f80a 	bl	8001310 <HAL_Delay>
      ms++;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	3301      	adds	r3, #1
 8004300:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fa10 	bl	8004728 <USB_GetMode>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d005      	beq.n	800431a <USB_SetCurrentMode+0x84>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2b31      	cmp	r3, #49	; 0x31
 8004312:	d9f0      	bls.n	80042f6 <USB_SetCurrentMode+0x60>
 8004314:	e001      	b.n	800431a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e005      	b.n	8004326 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2b32      	cmp	r3, #50	; 0x32
 800431e:	d101      	bne.n	8004324 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004330:	b084      	sub	sp, #16
 8004332:	b580      	push	{r7, lr}
 8004334:	b086      	sub	sp, #24
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800433e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800434a:	2300      	movs	r3, #0
 800434c:	613b      	str	r3, [r7, #16]
 800434e:	e009      	b.n	8004364 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	3340      	adds	r3, #64	; 0x40
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	2200      	movs	r2, #0
 800435c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	3301      	adds	r3, #1
 8004362:	613b      	str	r3, [r7, #16]
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	2b0e      	cmp	r3, #14
 8004368:	d9f2      	bls.n	8004350 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800436a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800436c:	2b00      	cmp	r3, #0
 800436e:	d11c      	bne.n	80043aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800437e:	f043 0302 	orr.w	r3, r3, #2
 8004382:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004388:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	e005      	b.n	80043b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043bc:	461a      	mov	r2, r3
 80043be:	2300      	movs	r3, #0
 80043c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c8:	4619      	mov	r1, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d0:	461a      	mov	r2, r3
 80043d2:	680b      	ldr	r3, [r1, #0]
 80043d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d10c      	bne.n	80043f6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80043dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d104      	bne.n	80043ec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80043e2:	2100      	movs	r1, #0
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f965 	bl	80046b4 <USB_SetDevSpeed>
 80043ea:	e008      	b.n	80043fe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80043ec:	2101      	movs	r1, #1
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f960 	bl	80046b4 <USB_SetDevSpeed>
 80043f4:	e003      	b.n	80043fe <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80043f6:	2103      	movs	r1, #3
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f95b 	bl	80046b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043fe:	2110      	movs	r1, #16
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f8f3 	bl	80045ec <USB_FlushTxFifo>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f91f 	bl	8004654 <USB_FlushRxFifo>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004426:	461a      	mov	r2, r3
 8004428:	2300      	movs	r3, #0
 800442a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004432:	461a      	mov	r2, r3
 8004434:	2300      	movs	r3, #0
 8004436:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800443e:	461a      	mov	r2, r3
 8004440:	2300      	movs	r3, #0
 8004442:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004444:	2300      	movs	r3, #0
 8004446:	613b      	str	r3, [r7, #16]
 8004448:	e043      	b.n	80044d2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800445c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004460:	d118      	bne.n	8004494 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10a      	bne.n	800447e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004474:	461a      	mov	r2, r3
 8004476:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	e013      	b.n	80044a6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448a:	461a      	mov	r2, r3
 800448c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	e008      	b.n	80044a6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a0:	461a      	mov	r2, r3
 80044a2:	2300      	movs	r3, #0
 80044a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b2:	461a      	mov	r2, r3
 80044b4:	2300      	movs	r3, #0
 80044b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c4:	461a      	mov	r2, r3
 80044c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	3301      	adds	r3, #1
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d3b7      	bcc.n	800444a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044da:	2300      	movs	r3, #0
 80044dc:	613b      	str	r3, [r7, #16]
 80044de:	e043      	b.n	8004568 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044f6:	d118      	bne.n	800452a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10a      	bne.n	8004514 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4413      	add	r3, r2
 8004506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450a:	461a      	mov	r2, r3
 800450c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	e013      	b.n	800453c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4413      	add	r3, r2
 800451c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004520:	461a      	mov	r2, r3
 8004522:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	e008      	b.n	800453c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	015a      	lsls	r2, r3, #5
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	4413      	add	r3, r2
 8004532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004536:	461a      	mov	r2, r3
 8004538:	2300      	movs	r3, #0
 800453a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4413      	add	r3, r2
 8004544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004548:	461a      	mov	r2, r3
 800454a:	2300      	movs	r3, #0
 800454c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455a:	461a      	mov	r2, r3
 800455c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004560:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	3301      	adds	r3, #1
 8004566:	613b      	str	r3, [r7, #16]
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	429a      	cmp	r2, r3
 800456e:	d3b7      	bcc.n	80044e0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800457e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004582:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004590:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004594:	2b00      	cmp	r3, #0
 8004596:	d105      	bne.n	80045a4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	f043 0210 	orr.w	r2, r3, #16
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699a      	ldr	r2, [r3, #24]
 80045a8:	4b0e      	ldr	r3, [pc, #56]	; (80045e4 <USB_DevInit+0x2b4>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80045b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d005      	beq.n	80045c2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	f043 0208 	orr.w	r2, r3, #8
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80045c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d105      	bne.n	80045d4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699a      	ldr	r2, [r3, #24]
 80045cc:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <USB_DevInit+0x2b8>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80045d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045e0:	b004      	add	sp, #16
 80045e2:	4770      	bx	lr
 80045e4:	803c3800 	.word	0x803c3800
 80045e8:	40000004 	.word	0x40000004

080045ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3301      	adds	r3, #1
 80045fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4a13      	ldr	r2, [pc, #76]	; (8004650 <USB_FlushTxFifo+0x64>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d901      	bls.n	800460c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e01b      	b.n	8004644 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	2b00      	cmp	r3, #0
 8004612:	daf2      	bge.n	80045fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	019b      	lsls	r3, r3, #6
 800461c:	f043 0220 	orr.w	r2, r3, #32
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3301      	adds	r3, #1
 8004628:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4a08      	ldr	r2, [pc, #32]	; (8004650 <USB_FlushTxFifo+0x64>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d901      	bls.n	8004636 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e006      	b.n	8004644 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f003 0320 	and.w	r3, r3, #32
 800463e:	2b20      	cmp	r3, #32
 8004640:	d0f0      	beq.n	8004624 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	00030d40 	.word	0x00030d40

08004654 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	3301      	adds	r3, #1
 8004664:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4a11      	ldr	r2, [pc, #68]	; (80046b0 <USB_FlushRxFifo+0x5c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e018      	b.n	80046a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	2b00      	cmp	r3, #0
 8004678:	daf2      	bge.n	8004660 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2210      	movs	r2, #16
 8004682:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	3301      	adds	r3, #1
 8004688:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4a08      	ldr	r2, [pc, #32]	; (80046b0 <USB_FlushRxFifo+0x5c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d901      	bls.n	8004696 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e006      	b.n	80046a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f003 0310 	and.w	r3, r3, #16
 800469e:	2b10      	cmp	r3, #16
 80046a0:	d0f0      	beq.n	8004684 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	00030d40 	.word	0x00030d40

080046b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	460b      	mov	r3, r1
 80046be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	78fb      	ldrb	r3, [r7, #3]
 80046ce:	68f9      	ldr	r1, [r7, #12]
 80046d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046d4:	4313      	orrs	r3, r2
 80046d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b085      	sub	sp, #20
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004700:	f023 0303 	bic.w	r3, r3, #3
 8004704:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004714:	f043 0302 	orr.w	r3, r3, #2
 8004718:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	f003 0301 	and.w	r3, r3, #1
}
 8004738:	4618      	mov	r0, r3
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3301      	adds	r3, #1
 8004754:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4a13      	ldr	r2, [pc, #76]	; (80047a8 <USB_CoreReset+0x64>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d901      	bls.n	8004762 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e01b      	b.n	800479a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	daf2      	bge.n	8004750 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	f043 0201 	orr.w	r2, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	3301      	adds	r3, #1
 800477e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4a09      	ldr	r2, [pc, #36]	; (80047a8 <USB_CoreReset+0x64>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d901      	bls.n	800478c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e006      	b.n	800479a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b01      	cmp	r3, #1
 8004796:	d0f0      	beq.n	800477a <USB_CoreReset+0x36>

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	00030d40 	.word	0x00030d40

080047ac <__errno>:
 80047ac:	4b01      	ldr	r3, [pc, #4]	; (80047b4 <__errno+0x8>)
 80047ae:	6818      	ldr	r0, [r3, #0]
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	20000018 	.word	0x20000018

080047b8 <__libc_init_array>:
 80047b8:	b570      	push	{r4, r5, r6, lr}
 80047ba:	4d0d      	ldr	r5, [pc, #52]	; (80047f0 <__libc_init_array+0x38>)
 80047bc:	4c0d      	ldr	r4, [pc, #52]	; (80047f4 <__libc_init_array+0x3c>)
 80047be:	1b64      	subs	r4, r4, r5
 80047c0:	10a4      	asrs	r4, r4, #2
 80047c2:	2600      	movs	r6, #0
 80047c4:	42a6      	cmp	r6, r4
 80047c6:	d109      	bne.n	80047dc <__libc_init_array+0x24>
 80047c8:	4d0b      	ldr	r5, [pc, #44]	; (80047f8 <__libc_init_array+0x40>)
 80047ca:	4c0c      	ldr	r4, [pc, #48]	; (80047fc <__libc_init_array+0x44>)
 80047cc:	f000 fc8e 	bl	80050ec <_init>
 80047d0:	1b64      	subs	r4, r4, r5
 80047d2:	10a4      	asrs	r4, r4, #2
 80047d4:	2600      	movs	r6, #0
 80047d6:	42a6      	cmp	r6, r4
 80047d8:	d105      	bne.n	80047e6 <__libc_init_array+0x2e>
 80047da:	bd70      	pop	{r4, r5, r6, pc}
 80047dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e0:	4798      	blx	r3
 80047e2:	3601      	adds	r6, #1
 80047e4:	e7ee      	b.n	80047c4 <__libc_init_array+0xc>
 80047e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ea:	4798      	blx	r3
 80047ec:	3601      	adds	r6, #1
 80047ee:	e7f2      	b.n	80047d6 <__libc_init_array+0x1e>
 80047f0:	0800519c 	.word	0x0800519c
 80047f4:	0800519c 	.word	0x0800519c
 80047f8:	0800519c 	.word	0x0800519c
 80047fc:	080051a0 	.word	0x080051a0

08004800 <memset>:
 8004800:	4402      	add	r2, r0
 8004802:	4603      	mov	r3, r0
 8004804:	4293      	cmp	r3, r2
 8004806:	d100      	bne.n	800480a <memset+0xa>
 8004808:	4770      	bx	lr
 800480a:	f803 1b01 	strb.w	r1, [r3], #1
 800480e:	e7f9      	b.n	8004804 <memset+0x4>

08004810 <siprintf>:
 8004810:	b40e      	push	{r1, r2, r3}
 8004812:	b500      	push	{lr}
 8004814:	b09c      	sub	sp, #112	; 0x70
 8004816:	ab1d      	add	r3, sp, #116	; 0x74
 8004818:	9002      	str	r0, [sp, #8]
 800481a:	9006      	str	r0, [sp, #24]
 800481c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004820:	4809      	ldr	r0, [pc, #36]	; (8004848 <siprintf+0x38>)
 8004822:	9107      	str	r1, [sp, #28]
 8004824:	9104      	str	r1, [sp, #16]
 8004826:	4909      	ldr	r1, [pc, #36]	; (800484c <siprintf+0x3c>)
 8004828:	f853 2b04 	ldr.w	r2, [r3], #4
 800482c:	9105      	str	r1, [sp, #20]
 800482e:	6800      	ldr	r0, [r0, #0]
 8004830:	9301      	str	r3, [sp, #4]
 8004832:	a902      	add	r1, sp, #8
 8004834:	f000 f868 	bl	8004908 <_svfiprintf_r>
 8004838:	9b02      	ldr	r3, [sp, #8]
 800483a:	2200      	movs	r2, #0
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	b01c      	add	sp, #112	; 0x70
 8004840:	f85d eb04 	ldr.w	lr, [sp], #4
 8004844:	b003      	add	sp, #12
 8004846:	4770      	bx	lr
 8004848:	20000018 	.word	0x20000018
 800484c:	ffff0208 	.word	0xffff0208

08004850 <__ssputs_r>:
 8004850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004854:	688e      	ldr	r6, [r1, #8]
 8004856:	429e      	cmp	r6, r3
 8004858:	4682      	mov	sl, r0
 800485a:	460c      	mov	r4, r1
 800485c:	4690      	mov	r8, r2
 800485e:	461f      	mov	r7, r3
 8004860:	d838      	bhi.n	80048d4 <__ssputs_r+0x84>
 8004862:	898a      	ldrh	r2, [r1, #12]
 8004864:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004868:	d032      	beq.n	80048d0 <__ssputs_r+0x80>
 800486a:	6825      	ldr	r5, [r4, #0]
 800486c:	6909      	ldr	r1, [r1, #16]
 800486e:	eba5 0901 	sub.w	r9, r5, r1
 8004872:	6965      	ldr	r5, [r4, #20]
 8004874:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004878:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800487c:	3301      	adds	r3, #1
 800487e:	444b      	add	r3, r9
 8004880:	106d      	asrs	r5, r5, #1
 8004882:	429d      	cmp	r5, r3
 8004884:	bf38      	it	cc
 8004886:	461d      	movcc	r5, r3
 8004888:	0553      	lsls	r3, r2, #21
 800488a:	d531      	bpl.n	80048f0 <__ssputs_r+0xa0>
 800488c:	4629      	mov	r1, r5
 800488e:	f000 fb63 	bl	8004f58 <_malloc_r>
 8004892:	4606      	mov	r6, r0
 8004894:	b950      	cbnz	r0, 80048ac <__ssputs_r+0x5c>
 8004896:	230c      	movs	r3, #12
 8004898:	f8ca 3000 	str.w	r3, [sl]
 800489c:	89a3      	ldrh	r3, [r4, #12]
 800489e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048a2:	81a3      	strh	r3, [r4, #12]
 80048a4:	f04f 30ff 	mov.w	r0, #4294967295
 80048a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ac:	6921      	ldr	r1, [r4, #16]
 80048ae:	464a      	mov	r2, r9
 80048b0:	f000 fabe 	bl	8004e30 <memcpy>
 80048b4:	89a3      	ldrh	r3, [r4, #12]
 80048b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048be:	81a3      	strh	r3, [r4, #12]
 80048c0:	6126      	str	r6, [r4, #16]
 80048c2:	6165      	str	r5, [r4, #20]
 80048c4:	444e      	add	r6, r9
 80048c6:	eba5 0509 	sub.w	r5, r5, r9
 80048ca:	6026      	str	r6, [r4, #0]
 80048cc:	60a5      	str	r5, [r4, #8]
 80048ce:	463e      	mov	r6, r7
 80048d0:	42be      	cmp	r6, r7
 80048d2:	d900      	bls.n	80048d6 <__ssputs_r+0x86>
 80048d4:	463e      	mov	r6, r7
 80048d6:	6820      	ldr	r0, [r4, #0]
 80048d8:	4632      	mov	r2, r6
 80048da:	4641      	mov	r1, r8
 80048dc:	f000 fab6 	bl	8004e4c <memmove>
 80048e0:	68a3      	ldr	r3, [r4, #8]
 80048e2:	1b9b      	subs	r3, r3, r6
 80048e4:	60a3      	str	r3, [r4, #8]
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	4433      	add	r3, r6
 80048ea:	6023      	str	r3, [r4, #0]
 80048ec:	2000      	movs	r0, #0
 80048ee:	e7db      	b.n	80048a8 <__ssputs_r+0x58>
 80048f0:	462a      	mov	r2, r5
 80048f2:	f000 fba5 	bl	8005040 <_realloc_r>
 80048f6:	4606      	mov	r6, r0
 80048f8:	2800      	cmp	r0, #0
 80048fa:	d1e1      	bne.n	80048c0 <__ssputs_r+0x70>
 80048fc:	6921      	ldr	r1, [r4, #16]
 80048fe:	4650      	mov	r0, sl
 8004900:	f000 fabe 	bl	8004e80 <_free_r>
 8004904:	e7c7      	b.n	8004896 <__ssputs_r+0x46>
	...

08004908 <_svfiprintf_r>:
 8004908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800490c:	4698      	mov	r8, r3
 800490e:	898b      	ldrh	r3, [r1, #12]
 8004910:	061b      	lsls	r3, r3, #24
 8004912:	b09d      	sub	sp, #116	; 0x74
 8004914:	4607      	mov	r7, r0
 8004916:	460d      	mov	r5, r1
 8004918:	4614      	mov	r4, r2
 800491a:	d50e      	bpl.n	800493a <_svfiprintf_r+0x32>
 800491c:	690b      	ldr	r3, [r1, #16]
 800491e:	b963      	cbnz	r3, 800493a <_svfiprintf_r+0x32>
 8004920:	2140      	movs	r1, #64	; 0x40
 8004922:	f000 fb19 	bl	8004f58 <_malloc_r>
 8004926:	6028      	str	r0, [r5, #0]
 8004928:	6128      	str	r0, [r5, #16]
 800492a:	b920      	cbnz	r0, 8004936 <_svfiprintf_r+0x2e>
 800492c:	230c      	movs	r3, #12
 800492e:	603b      	str	r3, [r7, #0]
 8004930:	f04f 30ff 	mov.w	r0, #4294967295
 8004934:	e0d1      	b.n	8004ada <_svfiprintf_r+0x1d2>
 8004936:	2340      	movs	r3, #64	; 0x40
 8004938:	616b      	str	r3, [r5, #20]
 800493a:	2300      	movs	r3, #0
 800493c:	9309      	str	r3, [sp, #36]	; 0x24
 800493e:	2320      	movs	r3, #32
 8004940:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004944:	f8cd 800c 	str.w	r8, [sp, #12]
 8004948:	2330      	movs	r3, #48	; 0x30
 800494a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004af4 <_svfiprintf_r+0x1ec>
 800494e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004952:	f04f 0901 	mov.w	r9, #1
 8004956:	4623      	mov	r3, r4
 8004958:	469a      	mov	sl, r3
 800495a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800495e:	b10a      	cbz	r2, 8004964 <_svfiprintf_r+0x5c>
 8004960:	2a25      	cmp	r2, #37	; 0x25
 8004962:	d1f9      	bne.n	8004958 <_svfiprintf_r+0x50>
 8004964:	ebba 0b04 	subs.w	fp, sl, r4
 8004968:	d00b      	beq.n	8004982 <_svfiprintf_r+0x7a>
 800496a:	465b      	mov	r3, fp
 800496c:	4622      	mov	r2, r4
 800496e:	4629      	mov	r1, r5
 8004970:	4638      	mov	r0, r7
 8004972:	f7ff ff6d 	bl	8004850 <__ssputs_r>
 8004976:	3001      	adds	r0, #1
 8004978:	f000 80aa 	beq.w	8004ad0 <_svfiprintf_r+0x1c8>
 800497c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800497e:	445a      	add	r2, fp
 8004980:	9209      	str	r2, [sp, #36]	; 0x24
 8004982:	f89a 3000 	ldrb.w	r3, [sl]
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 80a2 	beq.w	8004ad0 <_svfiprintf_r+0x1c8>
 800498c:	2300      	movs	r3, #0
 800498e:	f04f 32ff 	mov.w	r2, #4294967295
 8004992:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004996:	f10a 0a01 	add.w	sl, sl, #1
 800499a:	9304      	str	r3, [sp, #16]
 800499c:	9307      	str	r3, [sp, #28]
 800499e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049a2:	931a      	str	r3, [sp, #104]	; 0x68
 80049a4:	4654      	mov	r4, sl
 80049a6:	2205      	movs	r2, #5
 80049a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ac:	4851      	ldr	r0, [pc, #324]	; (8004af4 <_svfiprintf_r+0x1ec>)
 80049ae:	f7fb fc4f 	bl	8000250 <memchr>
 80049b2:	9a04      	ldr	r2, [sp, #16]
 80049b4:	b9d8      	cbnz	r0, 80049ee <_svfiprintf_r+0xe6>
 80049b6:	06d0      	lsls	r0, r2, #27
 80049b8:	bf44      	itt	mi
 80049ba:	2320      	movmi	r3, #32
 80049bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049c0:	0711      	lsls	r1, r2, #28
 80049c2:	bf44      	itt	mi
 80049c4:	232b      	movmi	r3, #43	; 0x2b
 80049c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049ca:	f89a 3000 	ldrb.w	r3, [sl]
 80049ce:	2b2a      	cmp	r3, #42	; 0x2a
 80049d0:	d015      	beq.n	80049fe <_svfiprintf_r+0xf6>
 80049d2:	9a07      	ldr	r2, [sp, #28]
 80049d4:	4654      	mov	r4, sl
 80049d6:	2000      	movs	r0, #0
 80049d8:	f04f 0c0a 	mov.w	ip, #10
 80049dc:	4621      	mov	r1, r4
 80049de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049e2:	3b30      	subs	r3, #48	; 0x30
 80049e4:	2b09      	cmp	r3, #9
 80049e6:	d94e      	bls.n	8004a86 <_svfiprintf_r+0x17e>
 80049e8:	b1b0      	cbz	r0, 8004a18 <_svfiprintf_r+0x110>
 80049ea:	9207      	str	r2, [sp, #28]
 80049ec:	e014      	b.n	8004a18 <_svfiprintf_r+0x110>
 80049ee:	eba0 0308 	sub.w	r3, r0, r8
 80049f2:	fa09 f303 	lsl.w	r3, r9, r3
 80049f6:	4313      	orrs	r3, r2
 80049f8:	9304      	str	r3, [sp, #16]
 80049fa:	46a2      	mov	sl, r4
 80049fc:	e7d2      	b.n	80049a4 <_svfiprintf_r+0x9c>
 80049fe:	9b03      	ldr	r3, [sp, #12]
 8004a00:	1d19      	adds	r1, r3, #4
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	9103      	str	r1, [sp, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	bfbb      	ittet	lt
 8004a0a:	425b      	neglt	r3, r3
 8004a0c:	f042 0202 	orrlt.w	r2, r2, #2
 8004a10:	9307      	strge	r3, [sp, #28]
 8004a12:	9307      	strlt	r3, [sp, #28]
 8004a14:	bfb8      	it	lt
 8004a16:	9204      	strlt	r2, [sp, #16]
 8004a18:	7823      	ldrb	r3, [r4, #0]
 8004a1a:	2b2e      	cmp	r3, #46	; 0x2e
 8004a1c:	d10c      	bne.n	8004a38 <_svfiprintf_r+0x130>
 8004a1e:	7863      	ldrb	r3, [r4, #1]
 8004a20:	2b2a      	cmp	r3, #42	; 0x2a
 8004a22:	d135      	bne.n	8004a90 <_svfiprintf_r+0x188>
 8004a24:	9b03      	ldr	r3, [sp, #12]
 8004a26:	1d1a      	adds	r2, r3, #4
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	9203      	str	r2, [sp, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	bfb8      	it	lt
 8004a30:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a34:	3402      	adds	r4, #2
 8004a36:	9305      	str	r3, [sp, #20]
 8004a38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b04 <_svfiprintf_r+0x1fc>
 8004a3c:	7821      	ldrb	r1, [r4, #0]
 8004a3e:	2203      	movs	r2, #3
 8004a40:	4650      	mov	r0, sl
 8004a42:	f7fb fc05 	bl	8000250 <memchr>
 8004a46:	b140      	cbz	r0, 8004a5a <_svfiprintf_r+0x152>
 8004a48:	2340      	movs	r3, #64	; 0x40
 8004a4a:	eba0 000a 	sub.w	r0, r0, sl
 8004a4e:	fa03 f000 	lsl.w	r0, r3, r0
 8004a52:	9b04      	ldr	r3, [sp, #16]
 8004a54:	4303      	orrs	r3, r0
 8004a56:	3401      	adds	r4, #1
 8004a58:	9304      	str	r3, [sp, #16]
 8004a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a5e:	4826      	ldr	r0, [pc, #152]	; (8004af8 <_svfiprintf_r+0x1f0>)
 8004a60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a64:	2206      	movs	r2, #6
 8004a66:	f7fb fbf3 	bl	8000250 <memchr>
 8004a6a:	2800      	cmp	r0, #0
 8004a6c:	d038      	beq.n	8004ae0 <_svfiprintf_r+0x1d8>
 8004a6e:	4b23      	ldr	r3, [pc, #140]	; (8004afc <_svfiprintf_r+0x1f4>)
 8004a70:	bb1b      	cbnz	r3, 8004aba <_svfiprintf_r+0x1b2>
 8004a72:	9b03      	ldr	r3, [sp, #12]
 8004a74:	3307      	adds	r3, #7
 8004a76:	f023 0307 	bic.w	r3, r3, #7
 8004a7a:	3308      	adds	r3, #8
 8004a7c:	9303      	str	r3, [sp, #12]
 8004a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a80:	4433      	add	r3, r6
 8004a82:	9309      	str	r3, [sp, #36]	; 0x24
 8004a84:	e767      	b.n	8004956 <_svfiprintf_r+0x4e>
 8004a86:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a8a:	460c      	mov	r4, r1
 8004a8c:	2001      	movs	r0, #1
 8004a8e:	e7a5      	b.n	80049dc <_svfiprintf_r+0xd4>
 8004a90:	2300      	movs	r3, #0
 8004a92:	3401      	adds	r4, #1
 8004a94:	9305      	str	r3, [sp, #20]
 8004a96:	4619      	mov	r1, r3
 8004a98:	f04f 0c0a 	mov.w	ip, #10
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004aa2:	3a30      	subs	r2, #48	; 0x30
 8004aa4:	2a09      	cmp	r2, #9
 8004aa6:	d903      	bls.n	8004ab0 <_svfiprintf_r+0x1a8>
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0c5      	beq.n	8004a38 <_svfiprintf_r+0x130>
 8004aac:	9105      	str	r1, [sp, #20]
 8004aae:	e7c3      	b.n	8004a38 <_svfiprintf_r+0x130>
 8004ab0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ab4:	4604      	mov	r4, r0
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e7f0      	b.n	8004a9c <_svfiprintf_r+0x194>
 8004aba:	ab03      	add	r3, sp, #12
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	462a      	mov	r2, r5
 8004ac0:	4b0f      	ldr	r3, [pc, #60]	; (8004b00 <_svfiprintf_r+0x1f8>)
 8004ac2:	a904      	add	r1, sp, #16
 8004ac4:	4638      	mov	r0, r7
 8004ac6:	f3af 8000 	nop.w
 8004aca:	1c42      	adds	r2, r0, #1
 8004acc:	4606      	mov	r6, r0
 8004ace:	d1d6      	bne.n	8004a7e <_svfiprintf_r+0x176>
 8004ad0:	89ab      	ldrh	r3, [r5, #12]
 8004ad2:	065b      	lsls	r3, r3, #25
 8004ad4:	f53f af2c 	bmi.w	8004930 <_svfiprintf_r+0x28>
 8004ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ada:	b01d      	add	sp, #116	; 0x74
 8004adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ae0:	ab03      	add	r3, sp, #12
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	462a      	mov	r2, r5
 8004ae6:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <_svfiprintf_r+0x1f8>)
 8004ae8:	a904      	add	r1, sp, #16
 8004aea:	4638      	mov	r0, r7
 8004aec:	f000 f87a 	bl	8004be4 <_printf_i>
 8004af0:	e7eb      	b.n	8004aca <_svfiprintf_r+0x1c2>
 8004af2:	bf00      	nop
 8004af4:	08005160 	.word	0x08005160
 8004af8:	0800516a 	.word	0x0800516a
 8004afc:	00000000 	.word	0x00000000
 8004b00:	08004851 	.word	0x08004851
 8004b04:	08005166 	.word	0x08005166

08004b08 <_printf_common>:
 8004b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b0c:	4616      	mov	r6, r2
 8004b0e:	4699      	mov	r9, r3
 8004b10:	688a      	ldr	r2, [r1, #8]
 8004b12:	690b      	ldr	r3, [r1, #16]
 8004b14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	bfb8      	it	lt
 8004b1c:	4613      	movlt	r3, r2
 8004b1e:	6033      	str	r3, [r6, #0]
 8004b20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b24:	4607      	mov	r7, r0
 8004b26:	460c      	mov	r4, r1
 8004b28:	b10a      	cbz	r2, 8004b2e <_printf_common+0x26>
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	6033      	str	r3, [r6, #0]
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	0699      	lsls	r1, r3, #26
 8004b32:	bf42      	ittt	mi
 8004b34:	6833      	ldrmi	r3, [r6, #0]
 8004b36:	3302      	addmi	r3, #2
 8004b38:	6033      	strmi	r3, [r6, #0]
 8004b3a:	6825      	ldr	r5, [r4, #0]
 8004b3c:	f015 0506 	ands.w	r5, r5, #6
 8004b40:	d106      	bne.n	8004b50 <_printf_common+0x48>
 8004b42:	f104 0a19 	add.w	sl, r4, #25
 8004b46:	68e3      	ldr	r3, [r4, #12]
 8004b48:	6832      	ldr	r2, [r6, #0]
 8004b4a:	1a9b      	subs	r3, r3, r2
 8004b4c:	42ab      	cmp	r3, r5
 8004b4e:	dc26      	bgt.n	8004b9e <_printf_common+0x96>
 8004b50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b54:	1e13      	subs	r3, r2, #0
 8004b56:	6822      	ldr	r2, [r4, #0]
 8004b58:	bf18      	it	ne
 8004b5a:	2301      	movne	r3, #1
 8004b5c:	0692      	lsls	r2, r2, #26
 8004b5e:	d42b      	bmi.n	8004bb8 <_printf_common+0xb0>
 8004b60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b64:	4649      	mov	r1, r9
 8004b66:	4638      	mov	r0, r7
 8004b68:	47c0      	blx	r8
 8004b6a:	3001      	adds	r0, #1
 8004b6c:	d01e      	beq.n	8004bac <_printf_common+0xa4>
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	68e5      	ldr	r5, [r4, #12]
 8004b72:	6832      	ldr	r2, [r6, #0]
 8004b74:	f003 0306 	and.w	r3, r3, #6
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	bf08      	it	eq
 8004b7c:	1aad      	subeq	r5, r5, r2
 8004b7e:	68a3      	ldr	r3, [r4, #8]
 8004b80:	6922      	ldr	r2, [r4, #16]
 8004b82:	bf0c      	ite	eq
 8004b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b88:	2500      	movne	r5, #0
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	bfc4      	itt	gt
 8004b8e:	1a9b      	subgt	r3, r3, r2
 8004b90:	18ed      	addgt	r5, r5, r3
 8004b92:	2600      	movs	r6, #0
 8004b94:	341a      	adds	r4, #26
 8004b96:	42b5      	cmp	r5, r6
 8004b98:	d11a      	bne.n	8004bd0 <_printf_common+0xc8>
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	e008      	b.n	8004bb0 <_printf_common+0xa8>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	4652      	mov	r2, sl
 8004ba2:	4649      	mov	r1, r9
 8004ba4:	4638      	mov	r0, r7
 8004ba6:	47c0      	blx	r8
 8004ba8:	3001      	adds	r0, #1
 8004baa:	d103      	bne.n	8004bb4 <_printf_common+0xac>
 8004bac:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb4:	3501      	adds	r5, #1
 8004bb6:	e7c6      	b.n	8004b46 <_printf_common+0x3e>
 8004bb8:	18e1      	adds	r1, r4, r3
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	2030      	movs	r0, #48	; 0x30
 8004bbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bc2:	4422      	add	r2, r4
 8004bc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bcc:	3302      	adds	r3, #2
 8004bce:	e7c7      	b.n	8004b60 <_printf_common+0x58>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	4622      	mov	r2, r4
 8004bd4:	4649      	mov	r1, r9
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	47c0      	blx	r8
 8004bda:	3001      	adds	r0, #1
 8004bdc:	d0e6      	beq.n	8004bac <_printf_common+0xa4>
 8004bde:	3601      	adds	r6, #1
 8004be0:	e7d9      	b.n	8004b96 <_printf_common+0x8e>
	...

08004be4 <_printf_i>:
 8004be4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004be8:	7e0f      	ldrb	r7, [r1, #24]
 8004bea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bec:	2f78      	cmp	r7, #120	; 0x78
 8004bee:	4691      	mov	r9, r2
 8004bf0:	4680      	mov	r8, r0
 8004bf2:	460c      	mov	r4, r1
 8004bf4:	469a      	mov	sl, r3
 8004bf6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bfa:	d807      	bhi.n	8004c0c <_printf_i+0x28>
 8004bfc:	2f62      	cmp	r7, #98	; 0x62
 8004bfe:	d80a      	bhi.n	8004c16 <_printf_i+0x32>
 8004c00:	2f00      	cmp	r7, #0
 8004c02:	f000 80d8 	beq.w	8004db6 <_printf_i+0x1d2>
 8004c06:	2f58      	cmp	r7, #88	; 0x58
 8004c08:	f000 80a3 	beq.w	8004d52 <_printf_i+0x16e>
 8004c0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c14:	e03a      	b.n	8004c8c <_printf_i+0xa8>
 8004c16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c1a:	2b15      	cmp	r3, #21
 8004c1c:	d8f6      	bhi.n	8004c0c <_printf_i+0x28>
 8004c1e:	a101      	add	r1, pc, #4	; (adr r1, 8004c24 <_printf_i+0x40>)
 8004c20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c24:	08004c7d 	.word	0x08004c7d
 8004c28:	08004c91 	.word	0x08004c91
 8004c2c:	08004c0d 	.word	0x08004c0d
 8004c30:	08004c0d 	.word	0x08004c0d
 8004c34:	08004c0d 	.word	0x08004c0d
 8004c38:	08004c0d 	.word	0x08004c0d
 8004c3c:	08004c91 	.word	0x08004c91
 8004c40:	08004c0d 	.word	0x08004c0d
 8004c44:	08004c0d 	.word	0x08004c0d
 8004c48:	08004c0d 	.word	0x08004c0d
 8004c4c:	08004c0d 	.word	0x08004c0d
 8004c50:	08004d9d 	.word	0x08004d9d
 8004c54:	08004cc1 	.word	0x08004cc1
 8004c58:	08004d7f 	.word	0x08004d7f
 8004c5c:	08004c0d 	.word	0x08004c0d
 8004c60:	08004c0d 	.word	0x08004c0d
 8004c64:	08004dbf 	.word	0x08004dbf
 8004c68:	08004c0d 	.word	0x08004c0d
 8004c6c:	08004cc1 	.word	0x08004cc1
 8004c70:	08004c0d 	.word	0x08004c0d
 8004c74:	08004c0d 	.word	0x08004c0d
 8004c78:	08004d87 	.word	0x08004d87
 8004c7c:	682b      	ldr	r3, [r5, #0]
 8004c7e:	1d1a      	adds	r2, r3, #4
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	602a      	str	r2, [r5, #0]
 8004c84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e0a3      	b.n	8004dd8 <_printf_i+0x1f4>
 8004c90:	6820      	ldr	r0, [r4, #0]
 8004c92:	6829      	ldr	r1, [r5, #0]
 8004c94:	0606      	lsls	r6, r0, #24
 8004c96:	f101 0304 	add.w	r3, r1, #4
 8004c9a:	d50a      	bpl.n	8004cb2 <_printf_i+0xce>
 8004c9c:	680e      	ldr	r6, [r1, #0]
 8004c9e:	602b      	str	r3, [r5, #0]
 8004ca0:	2e00      	cmp	r6, #0
 8004ca2:	da03      	bge.n	8004cac <_printf_i+0xc8>
 8004ca4:	232d      	movs	r3, #45	; 0x2d
 8004ca6:	4276      	negs	r6, r6
 8004ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cac:	485e      	ldr	r0, [pc, #376]	; (8004e28 <_printf_i+0x244>)
 8004cae:	230a      	movs	r3, #10
 8004cb0:	e019      	b.n	8004ce6 <_printf_i+0x102>
 8004cb2:	680e      	ldr	r6, [r1, #0]
 8004cb4:	602b      	str	r3, [r5, #0]
 8004cb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cba:	bf18      	it	ne
 8004cbc:	b236      	sxthne	r6, r6
 8004cbe:	e7ef      	b.n	8004ca0 <_printf_i+0xbc>
 8004cc0:	682b      	ldr	r3, [r5, #0]
 8004cc2:	6820      	ldr	r0, [r4, #0]
 8004cc4:	1d19      	adds	r1, r3, #4
 8004cc6:	6029      	str	r1, [r5, #0]
 8004cc8:	0601      	lsls	r1, r0, #24
 8004cca:	d501      	bpl.n	8004cd0 <_printf_i+0xec>
 8004ccc:	681e      	ldr	r6, [r3, #0]
 8004cce:	e002      	b.n	8004cd6 <_printf_i+0xf2>
 8004cd0:	0646      	lsls	r6, r0, #25
 8004cd2:	d5fb      	bpl.n	8004ccc <_printf_i+0xe8>
 8004cd4:	881e      	ldrh	r6, [r3, #0]
 8004cd6:	4854      	ldr	r0, [pc, #336]	; (8004e28 <_printf_i+0x244>)
 8004cd8:	2f6f      	cmp	r7, #111	; 0x6f
 8004cda:	bf0c      	ite	eq
 8004cdc:	2308      	moveq	r3, #8
 8004cde:	230a      	movne	r3, #10
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ce6:	6865      	ldr	r5, [r4, #4]
 8004ce8:	60a5      	str	r5, [r4, #8]
 8004cea:	2d00      	cmp	r5, #0
 8004cec:	bfa2      	ittt	ge
 8004cee:	6821      	ldrge	r1, [r4, #0]
 8004cf0:	f021 0104 	bicge.w	r1, r1, #4
 8004cf4:	6021      	strge	r1, [r4, #0]
 8004cf6:	b90e      	cbnz	r6, 8004cfc <_printf_i+0x118>
 8004cf8:	2d00      	cmp	r5, #0
 8004cfa:	d04d      	beq.n	8004d98 <_printf_i+0x1b4>
 8004cfc:	4615      	mov	r5, r2
 8004cfe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d02:	fb03 6711 	mls	r7, r3, r1, r6
 8004d06:	5dc7      	ldrb	r7, [r0, r7]
 8004d08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d0c:	4637      	mov	r7, r6
 8004d0e:	42bb      	cmp	r3, r7
 8004d10:	460e      	mov	r6, r1
 8004d12:	d9f4      	bls.n	8004cfe <_printf_i+0x11a>
 8004d14:	2b08      	cmp	r3, #8
 8004d16:	d10b      	bne.n	8004d30 <_printf_i+0x14c>
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	07de      	lsls	r6, r3, #31
 8004d1c:	d508      	bpl.n	8004d30 <_printf_i+0x14c>
 8004d1e:	6923      	ldr	r3, [r4, #16]
 8004d20:	6861      	ldr	r1, [r4, #4]
 8004d22:	4299      	cmp	r1, r3
 8004d24:	bfde      	ittt	le
 8004d26:	2330      	movle	r3, #48	; 0x30
 8004d28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d30:	1b52      	subs	r2, r2, r5
 8004d32:	6122      	str	r2, [r4, #16]
 8004d34:	f8cd a000 	str.w	sl, [sp]
 8004d38:	464b      	mov	r3, r9
 8004d3a:	aa03      	add	r2, sp, #12
 8004d3c:	4621      	mov	r1, r4
 8004d3e:	4640      	mov	r0, r8
 8004d40:	f7ff fee2 	bl	8004b08 <_printf_common>
 8004d44:	3001      	adds	r0, #1
 8004d46:	d14c      	bne.n	8004de2 <_printf_i+0x1fe>
 8004d48:	f04f 30ff 	mov.w	r0, #4294967295
 8004d4c:	b004      	add	sp, #16
 8004d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d52:	4835      	ldr	r0, [pc, #212]	; (8004e28 <_printf_i+0x244>)
 8004d54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d58:	6829      	ldr	r1, [r5, #0]
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d60:	6029      	str	r1, [r5, #0]
 8004d62:	061d      	lsls	r5, r3, #24
 8004d64:	d514      	bpl.n	8004d90 <_printf_i+0x1ac>
 8004d66:	07df      	lsls	r7, r3, #31
 8004d68:	bf44      	itt	mi
 8004d6a:	f043 0320 	orrmi.w	r3, r3, #32
 8004d6e:	6023      	strmi	r3, [r4, #0]
 8004d70:	b91e      	cbnz	r6, 8004d7a <_printf_i+0x196>
 8004d72:	6823      	ldr	r3, [r4, #0]
 8004d74:	f023 0320 	bic.w	r3, r3, #32
 8004d78:	6023      	str	r3, [r4, #0]
 8004d7a:	2310      	movs	r3, #16
 8004d7c:	e7b0      	b.n	8004ce0 <_printf_i+0xfc>
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	f043 0320 	orr.w	r3, r3, #32
 8004d84:	6023      	str	r3, [r4, #0]
 8004d86:	2378      	movs	r3, #120	; 0x78
 8004d88:	4828      	ldr	r0, [pc, #160]	; (8004e2c <_printf_i+0x248>)
 8004d8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d8e:	e7e3      	b.n	8004d58 <_printf_i+0x174>
 8004d90:	0659      	lsls	r1, r3, #25
 8004d92:	bf48      	it	mi
 8004d94:	b2b6      	uxthmi	r6, r6
 8004d96:	e7e6      	b.n	8004d66 <_printf_i+0x182>
 8004d98:	4615      	mov	r5, r2
 8004d9a:	e7bb      	b.n	8004d14 <_printf_i+0x130>
 8004d9c:	682b      	ldr	r3, [r5, #0]
 8004d9e:	6826      	ldr	r6, [r4, #0]
 8004da0:	6961      	ldr	r1, [r4, #20]
 8004da2:	1d18      	adds	r0, r3, #4
 8004da4:	6028      	str	r0, [r5, #0]
 8004da6:	0635      	lsls	r5, r6, #24
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	d501      	bpl.n	8004db0 <_printf_i+0x1cc>
 8004dac:	6019      	str	r1, [r3, #0]
 8004dae:	e002      	b.n	8004db6 <_printf_i+0x1d2>
 8004db0:	0670      	lsls	r0, r6, #25
 8004db2:	d5fb      	bpl.n	8004dac <_printf_i+0x1c8>
 8004db4:	8019      	strh	r1, [r3, #0]
 8004db6:	2300      	movs	r3, #0
 8004db8:	6123      	str	r3, [r4, #16]
 8004dba:	4615      	mov	r5, r2
 8004dbc:	e7ba      	b.n	8004d34 <_printf_i+0x150>
 8004dbe:	682b      	ldr	r3, [r5, #0]
 8004dc0:	1d1a      	adds	r2, r3, #4
 8004dc2:	602a      	str	r2, [r5, #0]
 8004dc4:	681d      	ldr	r5, [r3, #0]
 8004dc6:	6862      	ldr	r2, [r4, #4]
 8004dc8:	2100      	movs	r1, #0
 8004dca:	4628      	mov	r0, r5
 8004dcc:	f7fb fa40 	bl	8000250 <memchr>
 8004dd0:	b108      	cbz	r0, 8004dd6 <_printf_i+0x1f2>
 8004dd2:	1b40      	subs	r0, r0, r5
 8004dd4:	6060      	str	r0, [r4, #4]
 8004dd6:	6863      	ldr	r3, [r4, #4]
 8004dd8:	6123      	str	r3, [r4, #16]
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004de0:	e7a8      	b.n	8004d34 <_printf_i+0x150>
 8004de2:	6923      	ldr	r3, [r4, #16]
 8004de4:	462a      	mov	r2, r5
 8004de6:	4649      	mov	r1, r9
 8004de8:	4640      	mov	r0, r8
 8004dea:	47d0      	blx	sl
 8004dec:	3001      	adds	r0, #1
 8004dee:	d0ab      	beq.n	8004d48 <_printf_i+0x164>
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	079b      	lsls	r3, r3, #30
 8004df4:	d413      	bmi.n	8004e1e <_printf_i+0x23a>
 8004df6:	68e0      	ldr	r0, [r4, #12]
 8004df8:	9b03      	ldr	r3, [sp, #12]
 8004dfa:	4298      	cmp	r0, r3
 8004dfc:	bfb8      	it	lt
 8004dfe:	4618      	movlt	r0, r3
 8004e00:	e7a4      	b.n	8004d4c <_printf_i+0x168>
 8004e02:	2301      	movs	r3, #1
 8004e04:	4632      	mov	r2, r6
 8004e06:	4649      	mov	r1, r9
 8004e08:	4640      	mov	r0, r8
 8004e0a:	47d0      	blx	sl
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d09b      	beq.n	8004d48 <_printf_i+0x164>
 8004e10:	3501      	adds	r5, #1
 8004e12:	68e3      	ldr	r3, [r4, #12]
 8004e14:	9903      	ldr	r1, [sp, #12]
 8004e16:	1a5b      	subs	r3, r3, r1
 8004e18:	42ab      	cmp	r3, r5
 8004e1a:	dcf2      	bgt.n	8004e02 <_printf_i+0x21e>
 8004e1c:	e7eb      	b.n	8004df6 <_printf_i+0x212>
 8004e1e:	2500      	movs	r5, #0
 8004e20:	f104 0619 	add.w	r6, r4, #25
 8004e24:	e7f5      	b.n	8004e12 <_printf_i+0x22e>
 8004e26:	bf00      	nop
 8004e28:	08005171 	.word	0x08005171
 8004e2c:	08005182 	.word	0x08005182

08004e30 <memcpy>:
 8004e30:	440a      	add	r2, r1
 8004e32:	4291      	cmp	r1, r2
 8004e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e38:	d100      	bne.n	8004e3c <memcpy+0xc>
 8004e3a:	4770      	bx	lr
 8004e3c:	b510      	push	{r4, lr}
 8004e3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e46:	4291      	cmp	r1, r2
 8004e48:	d1f9      	bne.n	8004e3e <memcpy+0xe>
 8004e4a:	bd10      	pop	{r4, pc}

08004e4c <memmove>:
 8004e4c:	4288      	cmp	r0, r1
 8004e4e:	b510      	push	{r4, lr}
 8004e50:	eb01 0402 	add.w	r4, r1, r2
 8004e54:	d902      	bls.n	8004e5c <memmove+0x10>
 8004e56:	4284      	cmp	r4, r0
 8004e58:	4623      	mov	r3, r4
 8004e5a:	d807      	bhi.n	8004e6c <memmove+0x20>
 8004e5c:	1e43      	subs	r3, r0, #1
 8004e5e:	42a1      	cmp	r1, r4
 8004e60:	d008      	beq.n	8004e74 <memmove+0x28>
 8004e62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e6a:	e7f8      	b.n	8004e5e <memmove+0x12>
 8004e6c:	4402      	add	r2, r0
 8004e6e:	4601      	mov	r1, r0
 8004e70:	428a      	cmp	r2, r1
 8004e72:	d100      	bne.n	8004e76 <memmove+0x2a>
 8004e74:	bd10      	pop	{r4, pc}
 8004e76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e7e:	e7f7      	b.n	8004e70 <memmove+0x24>

08004e80 <_free_r>:
 8004e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e82:	2900      	cmp	r1, #0
 8004e84:	d044      	beq.n	8004f10 <_free_r+0x90>
 8004e86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e8a:	9001      	str	r0, [sp, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f1a1 0404 	sub.w	r4, r1, #4
 8004e92:	bfb8      	it	lt
 8004e94:	18e4      	addlt	r4, r4, r3
 8004e96:	f000 f913 	bl	80050c0 <__malloc_lock>
 8004e9a:	4a1e      	ldr	r2, [pc, #120]	; (8004f14 <_free_r+0x94>)
 8004e9c:	9801      	ldr	r0, [sp, #4]
 8004e9e:	6813      	ldr	r3, [r2, #0]
 8004ea0:	b933      	cbnz	r3, 8004eb0 <_free_r+0x30>
 8004ea2:	6063      	str	r3, [r4, #4]
 8004ea4:	6014      	str	r4, [r2, #0]
 8004ea6:	b003      	add	sp, #12
 8004ea8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004eac:	f000 b90e 	b.w	80050cc <__malloc_unlock>
 8004eb0:	42a3      	cmp	r3, r4
 8004eb2:	d908      	bls.n	8004ec6 <_free_r+0x46>
 8004eb4:	6825      	ldr	r5, [r4, #0]
 8004eb6:	1961      	adds	r1, r4, r5
 8004eb8:	428b      	cmp	r3, r1
 8004eba:	bf01      	itttt	eq
 8004ebc:	6819      	ldreq	r1, [r3, #0]
 8004ebe:	685b      	ldreq	r3, [r3, #4]
 8004ec0:	1949      	addeq	r1, r1, r5
 8004ec2:	6021      	streq	r1, [r4, #0]
 8004ec4:	e7ed      	b.n	8004ea2 <_free_r+0x22>
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	b10b      	cbz	r3, 8004ed0 <_free_r+0x50>
 8004ecc:	42a3      	cmp	r3, r4
 8004ece:	d9fa      	bls.n	8004ec6 <_free_r+0x46>
 8004ed0:	6811      	ldr	r1, [r2, #0]
 8004ed2:	1855      	adds	r5, r2, r1
 8004ed4:	42a5      	cmp	r5, r4
 8004ed6:	d10b      	bne.n	8004ef0 <_free_r+0x70>
 8004ed8:	6824      	ldr	r4, [r4, #0]
 8004eda:	4421      	add	r1, r4
 8004edc:	1854      	adds	r4, r2, r1
 8004ede:	42a3      	cmp	r3, r4
 8004ee0:	6011      	str	r1, [r2, #0]
 8004ee2:	d1e0      	bne.n	8004ea6 <_free_r+0x26>
 8004ee4:	681c      	ldr	r4, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	6053      	str	r3, [r2, #4]
 8004eea:	4421      	add	r1, r4
 8004eec:	6011      	str	r1, [r2, #0]
 8004eee:	e7da      	b.n	8004ea6 <_free_r+0x26>
 8004ef0:	d902      	bls.n	8004ef8 <_free_r+0x78>
 8004ef2:	230c      	movs	r3, #12
 8004ef4:	6003      	str	r3, [r0, #0]
 8004ef6:	e7d6      	b.n	8004ea6 <_free_r+0x26>
 8004ef8:	6825      	ldr	r5, [r4, #0]
 8004efa:	1961      	adds	r1, r4, r5
 8004efc:	428b      	cmp	r3, r1
 8004efe:	bf04      	itt	eq
 8004f00:	6819      	ldreq	r1, [r3, #0]
 8004f02:	685b      	ldreq	r3, [r3, #4]
 8004f04:	6063      	str	r3, [r4, #4]
 8004f06:	bf04      	itt	eq
 8004f08:	1949      	addeq	r1, r1, r5
 8004f0a:	6021      	streq	r1, [r4, #0]
 8004f0c:	6054      	str	r4, [r2, #4]
 8004f0e:	e7ca      	b.n	8004ea6 <_free_r+0x26>
 8004f10:	b003      	add	sp, #12
 8004f12:	bd30      	pop	{r4, r5, pc}
 8004f14:	20000694 	.word	0x20000694

08004f18 <sbrk_aligned>:
 8004f18:	b570      	push	{r4, r5, r6, lr}
 8004f1a:	4e0e      	ldr	r6, [pc, #56]	; (8004f54 <sbrk_aligned+0x3c>)
 8004f1c:	460c      	mov	r4, r1
 8004f1e:	6831      	ldr	r1, [r6, #0]
 8004f20:	4605      	mov	r5, r0
 8004f22:	b911      	cbnz	r1, 8004f2a <sbrk_aligned+0x12>
 8004f24:	f000 f8bc 	bl	80050a0 <_sbrk_r>
 8004f28:	6030      	str	r0, [r6, #0]
 8004f2a:	4621      	mov	r1, r4
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	f000 f8b7 	bl	80050a0 <_sbrk_r>
 8004f32:	1c43      	adds	r3, r0, #1
 8004f34:	d00a      	beq.n	8004f4c <sbrk_aligned+0x34>
 8004f36:	1cc4      	adds	r4, r0, #3
 8004f38:	f024 0403 	bic.w	r4, r4, #3
 8004f3c:	42a0      	cmp	r0, r4
 8004f3e:	d007      	beq.n	8004f50 <sbrk_aligned+0x38>
 8004f40:	1a21      	subs	r1, r4, r0
 8004f42:	4628      	mov	r0, r5
 8004f44:	f000 f8ac 	bl	80050a0 <_sbrk_r>
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d101      	bne.n	8004f50 <sbrk_aligned+0x38>
 8004f4c:	f04f 34ff 	mov.w	r4, #4294967295
 8004f50:	4620      	mov	r0, r4
 8004f52:	bd70      	pop	{r4, r5, r6, pc}
 8004f54:	20000698 	.word	0x20000698

08004f58 <_malloc_r>:
 8004f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f5c:	1ccd      	adds	r5, r1, #3
 8004f5e:	f025 0503 	bic.w	r5, r5, #3
 8004f62:	3508      	adds	r5, #8
 8004f64:	2d0c      	cmp	r5, #12
 8004f66:	bf38      	it	cc
 8004f68:	250c      	movcc	r5, #12
 8004f6a:	2d00      	cmp	r5, #0
 8004f6c:	4607      	mov	r7, r0
 8004f6e:	db01      	blt.n	8004f74 <_malloc_r+0x1c>
 8004f70:	42a9      	cmp	r1, r5
 8004f72:	d905      	bls.n	8004f80 <_malloc_r+0x28>
 8004f74:	230c      	movs	r3, #12
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	2600      	movs	r6, #0
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f80:	4e2e      	ldr	r6, [pc, #184]	; (800503c <_malloc_r+0xe4>)
 8004f82:	f000 f89d 	bl	80050c0 <__malloc_lock>
 8004f86:	6833      	ldr	r3, [r6, #0]
 8004f88:	461c      	mov	r4, r3
 8004f8a:	bb34      	cbnz	r4, 8004fda <_malloc_r+0x82>
 8004f8c:	4629      	mov	r1, r5
 8004f8e:	4638      	mov	r0, r7
 8004f90:	f7ff ffc2 	bl	8004f18 <sbrk_aligned>
 8004f94:	1c43      	adds	r3, r0, #1
 8004f96:	4604      	mov	r4, r0
 8004f98:	d14d      	bne.n	8005036 <_malloc_r+0xde>
 8004f9a:	6834      	ldr	r4, [r6, #0]
 8004f9c:	4626      	mov	r6, r4
 8004f9e:	2e00      	cmp	r6, #0
 8004fa0:	d140      	bne.n	8005024 <_malloc_r+0xcc>
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	4631      	mov	r1, r6
 8004fa6:	4638      	mov	r0, r7
 8004fa8:	eb04 0803 	add.w	r8, r4, r3
 8004fac:	f000 f878 	bl	80050a0 <_sbrk_r>
 8004fb0:	4580      	cmp	r8, r0
 8004fb2:	d13a      	bne.n	800502a <_malloc_r+0xd2>
 8004fb4:	6821      	ldr	r1, [r4, #0]
 8004fb6:	3503      	adds	r5, #3
 8004fb8:	1a6d      	subs	r5, r5, r1
 8004fba:	f025 0503 	bic.w	r5, r5, #3
 8004fbe:	3508      	adds	r5, #8
 8004fc0:	2d0c      	cmp	r5, #12
 8004fc2:	bf38      	it	cc
 8004fc4:	250c      	movcc	r5, #12
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	4638      	mov	r0, r7
 8004fca:	f7ff ffa5 	bl	8004f18 <sbrk_aligned>
 8004fce:	3001      	adds	r0, #1
 8004fd0:	d02b      	beq.n	800502a <_malloc_r+0xd2>
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	442b      	add	r3, r5
 8004fd6:	6023      	str	r3, [r4, #0]
 8004fd8:	e00e      	b.n	8004ff8 <_malloc_r+0xa0>
 8004fda:	6822      	ldr	r2, [r4, #0]
 8004fdc:	1b52      	subs	r2, r2, r5
 8004fde:	d41e      	bmi.n	800501e <_malloc_r+0xc6>
 8004fe0:	2a0b      	cmp	r2, #11
 8004fe2:	d916      	bls.n	8005012 <_malloc_r+0xba>
 8004fe4:	1961      	adds	r1, r4, r5
 8004fe6:	42a3      	cmp	r3, r4
 8004fe8:	6025      	str	r5, [r4, #0]
 8004fea:	bf18      	it	ne
 8004fec:	6059      	strne	r1, [r3, #4]
 8004fee:	6863      	ldr	r3, [r4, #4]
 8004ff0:	bf08      	it	eq
 8004ff2:	6031      	streq	r1, [r6, #0]
 8004ff4:	5162      	str	r2, [r4, r5]
 8004ff6:	604b      	str	r3, [r1, #4]
 8004ff8:	4638      	mov	r0, r7
 8004ffa:	f104 060b 	add.w	r6, r4, #11
 8004ffe:	f000 f865 	bl	80050cc <__malloc_unlock>
 8005002:	f026 0607 	bic.w	r6, r6, #7
 8005006:	1d23      	adds	r3, r4, #4
 8005008:	1af2      	subs	r2, r6, r3
 800500a:	d0b6      	beq.n	8004f7a <_malloc_r+0x22>
 800500c:	1b9b      	subs	r3, r3, r6
 800500e:	50a3      	str	r3, [r4, r2]
 8005010:	e7b3      	b.n	8004f7a <_malloc_r+0x22>
 8005012:	6862      	ldr	r2, [r4, #4]
 8005014:	42a3      	cmp	r3, r4
 8005016:	bf0c      	ite	eq
 8005018:	6032      	streq	r2, [r6, #0]
 800501a:	605a      	strne	r2, [r3, #4]
 800501c:	e7ec      	b.n	8004ff8 <_malloc_r+0xa0>
 800501e:	4623      	mov	r3, r4
 8005020:	6864      	ldr	r4, [r4, #4]
 8005022:	e7b2      	b.n	8004f8a <_malloc_r+0x32>
 8005024:	4634      	mov	r4, r6
 8005026:	6876      	ldr	r6, [r6, #4]
 8005028:	e7b9      	b.n	8004f9e <_malloc_r+0x46>
 800502a:	230c      	movs	r3, #12
 800502c:	603b      	str	r3, [r7, #0]
 800502e:	4638      	mov	r0, r7
 8005030:	f000 f84c 	bl	80050cc <__malloc_unlock>
 8005034:	e7a1      	b.n	8004f7a <_malloc_r+0x22>
 8005036:	6025      	str	r5, [r4, #0]
 8005038:	e7de      	b.n	8004ff8 <_malloc_r+0xa0>
 800503a:	bf00      	nop
 800503c:	20000694 	.word	0x20000694

08005040 <_realloc_r>:
 8005040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005044:	4680      	mov	r8, r0
 8005046:	4614      	mov	r4, r2
 8005048:	460e      	mov	r6, r1
 800504a:	b921      	cbnz	r1, 8005056 <_realloc_r+0x16>
 800504c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005050:	4611      	mov	r1, r2
 8005052:	f7ff bf81 	b.w	8004f58 <_malloc_r>
 8005056:	b92a      	cbnz	r2, 8005064 <_realloc_r+0x24>
 8005058:	f7ff ff12 	bl	8004e80 <_free_r>
 800505c:	4625      	mov	r5, r4
 800505e:	4628      	mov	r0, r5
 8005060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005064:	f000 f838 	bl	80050d8 <_malloc_usable_size_r>
 8005068:	4284      	cmp	r4, r0
 800506a:	4607      	mov	r7, r0
 800506c:	d802      	bhi.n	8005074 <_realloc_r+0x34>
 800506e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005072:	d812      	bhi.n	800509a <_realloc_r+0x5a>
 8005074:	4621      	mov	r1, r4
 8005076:	4640      	mov	r0, r8
 8005078:	f7ff ff6e 	bl	8004f58 <_malloc_r>
 800507c:	4605      	mov	r5, r0
 800507e:	2800      	cmp	r0, #0
 8005080:	d0ed      	beq.n	800505e <_realloc_r+0x1e>
 8005082:	42bc      	cmp	r4, r7
 8005084:	4622      	mov	r2, r4
 8005086:	4631      	mov	r1, r6
 8005088:	bf28      	it	cs
 800508a:	463a      	movcs	r2, r7
 800508c:	f7ff fed0 	bl	8004e30 <memcpy>
 8005090:	4631      	mov	r1, r6
 8005092:	4640      	mov	r0, r8
 8005094:	f7ff fef4 	bl	8004e80 <_free_r>
 8005098:	e7e1      	b.n	800505e <_realloc_r+0x1e>
 800509a:	4635      	mov	r5, r6
 800509c:	e7df      	b.n	800505e <_realloc_r+0x1e>
	...

080050a0 <_sbrk_r>:
 80050a0:	b538      	push	{r3, r4, r5, lr}
 80050a2:	4d06      	ldr	r5, [pc, #24]	; (80050bc <_sbrk_r+0x1c>)
 80050a4:	2300      	movs	r3, #0
 80050a6:	4604      	mov	r4, r0
 80050a8:	4608      	mov	r0, r1
 80050aa:	602b      	str	r3, [r5, #0]
 80050ac:	f7fb fdb0 	bl	8000c10 <_sbrk>
 80050b0:	1c43      	adds	r3, r0, #1
 80050b2:	d102      	bne.n	80050ba <_sbrk_r+0x1a>
 80050b4:	682b      	ldr	r3, [r5, #0]
 80050b6:	b103      	cbz	r3, 80050ba <_sbrk_r+0x1a>
 80050b8:	6023      	str	r3, [r4, #0]
 80050ba:	bd38      	pop	{r3, r4, r5, pc}
 80050bc:	2000069c 	.word	0x2000069c

080050c0 <__malloc_lock>:
 80050c0:	4801      	ldr	r0, [pc, #4]	; (80050c8 <__malloc_lock+0x8>)
 80050c2:	f000 b811 	b.w	80050e8 <__retarget_lock_acquire_recursive>
 80050c6:	bf00      	nop
 80050c8:	200006a0 	.word	0x200006a0

080050cc <__malloc_unlock>:
 80050cc:	4801      	ldr	r0, [pc, #4]	; (80050d4 <__malloc_unlock+0x8>)
 80050ce:	f000 b80c 	b.w	80050ea <__retarget_lock_release_recursive>
 80050d2:	bf00      	nop
 80050d4:	200006a0 	.word	0x200006a0

080050d8 <_malloc_usable_size_r>:
 80050d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050dc:	1f18      	subs	r0, r3, #4
 80050de:	2b00      	cmp	r3, #0
 80050e0:	bfbc      	itt	lt
 80050e2:	580b      	ldrlt	r3, [r1, r0]
 80050e4:	18c0      	addlt	r0, r0, r3
 80050e6:	4770      	bx	lr

080050e8 <__retarget_lock_acquire_recursive>:
 80050e8:	4770      	bx	lr

080050ea <__retarget_lock_release_recursive>:
 80050ea:	4770      	bx	lr

080050ec <_init>:
 80050ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ee:	bf00      	nop
 80050f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050f2:	bc08      	pop	{r3}
 80050f4:	469e      	mov	lr, r3
 80050f6:	4770      	bx	lr

080050f8 <_fini>:
 80050f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fa:	bf00      	nop
 80050fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050fe:	bc08      	pop	{r3}
 8005100:	469e      	mov	lr, r3
 8005102:	4770      	bx	lr
