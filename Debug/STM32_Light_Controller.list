
STM32_Light_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008004  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08008204  08008204  00018204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008390  08008390  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08008390  08008390  00018390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008398  08008398  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008398  08008398  00018398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800839c  0800839c  0001839c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080083a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b0  200000b0  08008450  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000860  08008450  00020860  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d717  00000000  00000000  000200de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d00  00000000  00000000  0003d7f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  000414f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001478  00000000  00000000  00042b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b09d  00000000  00000000  00043fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e16c  00000000  00000000  0006f05d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001001ff  00000000  00000000  0008d1c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018d3c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060f0  00000000  00000000  0018d418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000b0 	.word	0x200000b0
 800021c:	00000000 	.word	0x00000000
 8000220:	080081ec 	.word	0x080081ec

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000b4 	.word	0x200000b4
 800023c:	080081ec 	.word	0x080081ec

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08c      	sub	sp, #48	; 0x30
 80005f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	4b90      	ldr	r3, [pc, #576]	; (800084c <MX_GPIO_Init+0x258>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a8f      	ldr	r2, [pc, #572]	; (800084c <MX_GPIO_Init+0x258>)
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b8d      	ldr	r3, [pc, #564]	; (800084c <MX_GPIO_Init+0x258>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0304 	and.w	r3, r3, #4
 800061e:	61bb      	str	r3, [r7, #24]
 8000620:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000622:	4b8a      	ldr	r3, [pc, #552]	; (800084c <MX_GPIO_Init+0x258>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a89      	ldr	r2, [pc, #548]	; (800084c <MX_GPIO_Init+0x258>)
 8000628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b87      	ldr	r3, [pc, #540]	; (800084c <MX_GPIO_Init+0x258>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b84      	ldr	r3, [pc, #528]	; (800084c <MX_GPIO_Init+0x258>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a83      	ldr	r2, [pc, #524]	; (800084c <MX_GPIO_Init+0x258>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b81      	ldr	r3, [pc, #516]	; (800084c <MX_GPIO_Init+0x258>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	4b7e      	ldr	r3, [pc, #504]	; (800084c <MX_GPIO_Init+0x258>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a7d      	ldr	r2, [pc, #500]	; (800084c <MX_GPIO_Init+0x258>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b7b      	ldr	r3, [pc, #492]	; (800084c <MX_GPIO_Init+0x258>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800066a:	4b78      	ldr	r3, [pc, #480]	; (800084c <MX_GPIO_Init+0x258>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a77      	ldr	r2, [pc, #476]	; (800084c <MX_GPIO_Init+0x258>)
 8000670:	f043 0320 	orr.w	r3, r3, #32
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b75      	ldr	r3, [pc, #468]	; (800084c <MX_GPIO_Init+0x258>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0320 	and.w	r3, r3, #32
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000682:	4b72      	ldr	r3, [pc, #456]	; (800084c <MX_GPIO_Init+0x258>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a71      	ldr	r2, [pc, #452]	; (800084c <MX_GPIO_Init+0x258>)
 8000688:	f043 0308 	orr.w	r3, r3, #8
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b6f      	ldr	r3, [pc, #444]	; (800084c <MX_GPIO_Init+0x258>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0308 	and.w	r3, r3, #8
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800069a:	4b6c      	ldr	r3, [pc, #432]	; (800084c <MX_GPIO_Init+0x258>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a6b      	ldr	r2, [pc, #428]	; (800084c <MX_GPIO_Init+0x258>)
 80006a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b69      	ldr	r3, [pc, #420]	; (800084c <MX_GPIO_Init+0x258>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	21e0      	movs	r1, #224	; 0xe0
 80006b6:	4866      	ldr	r0, [pc, #408]	; (8000850 <MX_GPIO_Init+0x25c>)
 80006b8:	f001 ff18 	bl	80024ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f244 0181 	movw	r1, #16513	; 0x4081
 80006c2:	4864      	ldr	r0, [pc, #400]	; (8000854 <MX_GPIO_Init+0x260>)
 80006c4:	f001 ff12 	bl	80024ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ce:	4862      	ldr	r0, [pc, #392]	; (8000858 <MX_GPIO_Init+0x264>)
 80006d0:	f001 ff0c 	bl	80024ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_D4_Pin|LCD_E_Pin, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80006da:	4860      	ldr	r0, [pc, #384]	; (800085c <MX_GPIO_Init+0x268>)
 80006dc:	f001 ff06 	bl	80024ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2140      	movs	r1, #64	; 0x40
 80006e4:	485e      	ldr	r0, [pc, #376]	; (8000860 <MX_GPIO_Init+0x26c>)
 80006e6:	f001 ff01 	bl	80024ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4619      	mov	r1, r3
 8000700:	4858      	ldr	r0, [pc, #352]	; (8000864 <MX_GPIO_Init+0x270>)
 8000702:	f001 fd47 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000706:	2332      	movs	r3, #50	; 0x32
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070a:	2302      	movs	r3, #2
 800070c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000716:	230b      	movs	r3, #11
 8000718:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	4619      	mov	r1, r3
 8000720:	4850      	ldr	r0, [pc, #320]	; (8000864 <MX_GPIO_Init+0x270>)
 8000722:	f001 fd37 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8000726:	2306      	movs	r3, #6
 8000728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072a:	2302      	movs	r3, #2
 800072c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000732:	2303      	movs	r3, #3
 8000734:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000736:	230b      	movs	r3, #11
 8000738:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	4619      	mov	r1, r3
 8000740:	4843      	ldr	r0, [pc, #268]	; (8000850 <MX_GPIO_Init+0x25c>)
 8000742:	f001 fd27 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin;
 8000746:	23e0      	movs	r3, #224	; 0xe0
 8000748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	4619      	mov	r1, r3
 800075c:	483c      	ldr	r0, [pc, #240]	; (8000850 <MX_GPIO_Init+0x25c>)
 800075e:	f001 fd19 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000762:	f244 0381 	movw	r3, #16513	; 0x4081
 8000766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	4836      	ldr	r0, [pc, #216]	; (8000854 <MX_GPIO_Init+0x260>)
 800077c:	f001 fd0a 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 8000780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	482f      	ldr	r0, [pc, #188]	; (8000858 <MX_GPIO_Init+0x264>)
 800079a:	f001 fcfb 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800079e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ac:	2303      	movs	r3, #3
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b0:	230b      	movs	r3, #11
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	4826      	ldr	r0, [pc, #152]	; (8000854 <MX_GPIO_Init+0x260>)
 80007bc:	f001 fcea 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_E_Pin;
 80007c0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	4820      	ldr	r0, [pc, #128]	; (800085c <MX_GPIO_Init+0x268>)
 80007da:	f001 fcdb 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007de:	2340      	movs	r3, #64	; 0x40
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	481a      	ldr	r0, [pc, #104]	; (8000860 <MX_GPIO_Init+0x26c>)
 80007f6:	f001 fccd 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007fa:	2380      	movs	r3, #128	; 0x80
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4814      	ldr	r0, [pc, #80]	; (8000860 <MX_GPIO_Init+0x26c>)
 800080e:	f001 fcc1 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000812:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000818:	2302      	movs	r3, #2
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000820:	2303      	movs	r3, #3
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000824:	230b      	movs	r3, #11
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4619      	mov	r1, r3
 800082e:	480c      	ldr	r0, [pc, #48]	; (8000860 <MX_GPIO_Init+0x26c>)
 8000830:	f001 fcb0 	bl	8002194 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	2028      	movs	r0, #40	; 0x28
 800083a:	f001 fbe2 	bl	8002002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800083e:	2028      	movs	r0, #40	; 0x28
 8000840:	f001 fbfb 	bl	800203a <HAL_NVIC_EnableIRQ>

}
 8000844:	bf00      	nop
 8000846:	3730      	adds	r7, #48	; 0x30
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40020000 	.word	0x40020000
 8000854:	40020400 	.word	0x40020400
 8000858:	40021400 	.word	0x40021400
 800085c:	40020c00 	.word	0x40020c00
 8000860:	40021800 	.word	0x40021800
 8000864:	40020800 	.word	0x40020800

08000868 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_I2C1_Init+0x74>)
 800086e:	4a1c      	ldr	r2, [pc, #112]	; (80008e0 <MX_I2C1_Init+0x78>)
 8000870:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_I2C1_Init+0x74>)
 8000874:	4a1b      	ldr	r2, [pc, #108]	; (80008e4 <MX_I2C1_Init+0x7c>)
 8000876:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_I2C1_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_I2C1_Init+0x74>)
 8000880:	2201      	movs	r2, #1
 8000882:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_I2C1_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_I2C1_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_I2C1_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_I2C1_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_I2C1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008a2:	480e      	ldr	r0, [pc, #56]	; (80008dc <MX_I2C1_Init+0x74>)
 80008a4:	f001 fe60 	bl	8002568 <HAL_I2C_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008ae:	f000 fa4d 	bl	8000d4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008b2:	2100      	movs	r1, #0
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <MX_I2C1_Init+0x74>)
 80008b6:	f002 fb3d 	bl	8002f34 <HAL_I2CEx_ConfigAnalogFilter>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008c0:	f000 fa44 	bl	8000d4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008c4:	2100      	movs	r1, #0
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_I2C1_Init+0x74>)
 80008c8:	f002 fb7f 	bl	8002fca <HAL_I2CEx_ConfigDigitalFilter>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008d2:	f000 fa3b 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200000cc 	.word	0x200000cc
 80008e0:	40005400 	.word	0x40005400
 80008e4:	20303e5d 	.word	0x20303e5d

080008e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b0ae      	sub	sp, #184	; 0xb8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2290      	movs	r2, #144	; 0x90
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f006 ff6d 	bl	80077e8 <memset>
  if(i2cHandle->Instance==I2C1)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a22      	ldr	r2, [pc, #136]	; (800099c <HAL_I2C_MspInit+0xb4>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d13c      	bne.n	8000992 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000918:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800091c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800091e:	2300      	movs	r3, #0
 8000920:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4618      	mov	r0, r3
 8000928:	f003 fa18 	bl	8003d5c <HAL_RCCEx_PeriphCLKConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000932:	f000 fa0b 	bl	8000d4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <HAL_I2C_MspInit+0xb8>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a19      	ldr	r2, [pc, #100]	; (80009a0 <HAL_I2C_MspInit+0xb8>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <HAL_I2C_MspInit+0xb8>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800094e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000952:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000956:	2312      	movs	r3, #18
 8000958:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000968:	2304      	movs	r3, #4
 800096a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000972:	4619      	mov	r1, r3
 8000974:	480b      	ldr	r0, [pc, #44]	; (80009a4 <HAL_I2C_MspInit+0xbc>)
 8000976:	f001 fc0d 	bl	8002194 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_I2C_MspInit+0xb8>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_I2C_MspInit+0xb8>)
 8000980:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_I2C_MspInit+0xb8>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000992:	bf00      	nop
 8000994:	37b8      	adds	r7, #184	; 0xb8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40005400 	.word	0x40005400
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020400 	.word	0x40020400

080009a8 <send_string>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void send_string(char* s)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)s, strlen(s));
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff fc45 	bl	8000240 <strlen>
 80009b6:	4603      	mov	r3, r0
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	461a      	mov	r2, r3
 80009bc:	6879      	ldr	r1, [r7, #4]
 80009be:	4803      	ldr	r0, [pc, #12]	; (80009cc <send_string+0x24>)
 80009c0:	f005 f896 	bl	8005af0 <HAL_UART_Transmit_IT>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200002bc 	.word	0x200002bc

080009d0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]



  }

  if (htim->Instance == TIM6)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a33      	ldr	r2, [pc, #204]	; (8000aac <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d160      	bne.n	8000aa4 <HAL_TIM_PeriodElapsedCallback+0xd4>
    {
	  static int time_ms = 0;

	  if(time_ms % 200 == 0)
 80009e2:	4b33      	ldr	r3, [pc, #204]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	4b33      	ldr	r3, [pc, #204]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80009e8:	fb83 1302 	smull	r1, r3, r3, r2
 80009ec:	1199      	asrs	r1, r3, #6
 80009ee:	17d3      	asrs	r3, r2, #31
 80009f0:	1acb      	subs	r3, r1, r3
 80009f2:	21c8      	movs	r1, #200	; 0xc8
 80009f4:	fb01 f303 	mul.w	r3, r1, r3
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d122      	bne.n	8000a44 <HAL_TIM_PeriodElapsedCallback+0x74>
	  {
		  Light = BH1750_ReadLux(&hbh1750_1);
 80009fe:	482e      	ldr	r0, [pc, #184]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000a00:	f000 fd5a 	bl	80014b8 <BH1750_ReadLux>
 8000a04:	eef0 7a40 	vmov.f32	s15, s0
 8000a08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a0c:	4b2b      	ldr	r3, [pc, #172]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000a0e:	ed83 7b00 	vstr	d7, [r3]

		  PID_Compute(&Light_PID);
 8000a12:	482b      	ldr	r0, [pc, #172]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000a14:	f000 ff38 	bl	8001888 <PID_Compute>
		  pulse = PID_Out;
 8000a18:	4b2a      	ldr	r3, [pc, #168]	; (8000ac4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000a1a:	ed93 7b00 	vldr	d7, [r3]
 8000a1e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a22:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000a24:	edc3 7a00 	vstr	s15, [r3]

		  int_pulse = (int)pulse;
 8000a28:	4b27      	ldr	r3, [pc, #156]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000a2a:	edd3 7a00 	vldr	s15, [r3]
 8000a2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a32:	ee17 2a90 	vmov	r2, s15
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000a38:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, int_pulse);
 8000a3a:	4b24      	ldr	r3, [pc, #144]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	635a      	str	r2, [r3, #52]	; 0x34
	  }


	  if(time_ms % 500 == 0)
 8000a44:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b22      	ldr	r3, [pc, #136]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000a4a:	fb83 1302 	smull	r1, r3, r3, r2
 8000a4e:	1159      	asrs	r1, r3, #5
 8000a50:	17d3      	asrs	r3, r2, #31
 8000a52:	1acb      	subs	r3, r1, r3
 8000a54:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a58:	fb01 f303 	mul.w	r3, r1, r3
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d113      	bne.n	8000a8a <HAL_TIM_PeriodElapsedCallback+0xba>
	  {
		  Lcd_cursor(&lcd, 1,0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2101      	movs	r1, #1
 8000a66:	481c      	ldr	r0, [pc, #112]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000a68:	f000 fdac 	bl	80015c4 <Lcd_cursor>
		  sprintf(str_buffer, "Measured: %5d", (int)Light);
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000a6e:	ed93 7b00 	vldr	d7, [r3]
 8000a72:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000a76:	ee17 2a90 	vmov	r2, s15
 8000a7a:	4918      	ldr	r1, [pc, #96]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000a7c:	4818      	ldr	r0, [pc, #96]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a7e:	f006 febb 	bl	80077f8 <siprintf>

		  Lcd_string(&lcd, str_buffer);
 8000a82:	4917      	ldr	r1, [pc, #92]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a84:	4814      	ldr	r0, [pc, #80]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000a86:	f000 fd7d 	bl	8001584 <Lcd_string>
	  }


	  time_ms += 100;
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	3364      	adds	r3, #100	; 0x64
 8000a90:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000a92:	6013      	str	r3, [r2, #0]
	  if(time_ms == 1000)
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a9c:	d102      	bne.n	8000aa4 <HAL_TIM_PeriodElapsedCallback+0xd4>
	  {
		  time_ms = 0;
 8000a9e:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
	  }
    }


}
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40001000 	.word	0x40001000
 8000ab0:	200001d0 	.word	0x200001d0
 8000ab4:	51eb851f 	.word	0x51eb851f
 8000ab8:	20000004 	.word	0x20000004
 8000abc:	200001b8 	.word	0x200001b8
 8000ac0:	20000120 	.word	0x20000120
 8000ac4:	200001c0 	.word	0x200001c0
 8000ac8:	200001ac 	.word	0x200001ac
 8000acc:	200001b0 	.word	0x200001b0
 8000ad0:	200001d8 	.word	0x200001d8
 8000ad4:	10624dd3 	.word	0x10624dd3
 8000ad8:	20000028 	.word	0x20000028
 8000adc:	08008204 	.word	0x08008204
 8000ae0:	2000019c 	.word	0x2000019c

08000ae4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08e      	sub	sp, #56	; 0x38
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	uint8_t Data[6];
	sprintf(Data, "%s",Received);
 8000aec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000af0:	4a1a      	ldr	r2, [pc, #104]	; (8000b5c <HAL_UART_RxCpltCallback+0x78>)
 8000af2:	491b      	ldr	r1, [pc, #108]	; (8000b60 <HAL_UART_RxCpltCallback+0x7c>)
 8000af4:	4618      	mov	r0, r3
 8000af6:	f006 fe7f 	bl	80077f8 <siprintf>
	if(Data[0]=='L')
 8000afa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000afe:	2b4c      	cmp	r3, #76	; 0x4c
 8000b00:	d122      	bne.n	8000b48 <HAL_UART_RxCpltCallback+0x64>
	{
		int value = atoi(&Data[1]);
 8000b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b06:	3301      	adds	r3, #1
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f006 fe3f 	bl	800778c <atoi>
 8000b0e:	6378      	str	r0, [r7, #52]	; 0x34
		if(value >= 0 && value <=9999)
 8000b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	db18      	blt.n	8000b48 <HAL_UART_RxCpltCallback+0x64>
 8000b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b18:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	dc13      	bgt.n	8000b48 <HAL_UART_RxCpltCallback+0x64>
		{
			char str_buffer[32];
			LightSetpoint = value;
 8000b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b22:	ee07 3a90 	vmov	s15, r3
 8000b26:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <HAL_UART_RxCpltCallback+0x80>)
 8000b2c:	ed83 7b00 	vstr	d7, [r3]
			sprintf(str_buffer, "Light set point set at: %4d \r\n", value);
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b36:	490c      	ldr	r1, [pc, #48]	; (8000b68 <HAL_UART_RxCpltCallback+0x84>)
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f006 fe5d 	bl	80077f8 <siprintf>
			send_string(str_buffer);
 8000b3e:	f107 030c 	add.w	r3, r7, #12
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff ff30 	bl	80009a8 <send_string>
		}
	}
	HAL_UART_Receive_IT(&huart3, Received, 5);
 8000b48:	2205      	movs	r2, #5
 8000b4a:	4904      	ldr	r1, [pc, #16]	; (8000b5c <HAL_UART_RxCpltCallback+0x78>)
 8000b4c:	4807      	ldr	r0, [pc, #28]	; (8000b6c <HAL_UART_RxCpltCallback+0x88>)
 8000b4e:	f005 f82d 	bl	8005bac <HAL_UART_Receive_IT>
}
 8000b52:	bf00      	nop
 8000b54:	3738      	adds	r7, #56	; 0x38
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000190 	.word	0x20000190
 8000b60:	08008214 	.word	0x08008214
 8000b64:	200001c8 	.word	0x200001c8
 8000b68:	08008218 	.word	0x08008218
 8000b6c:	200002bc 	.word	0x200002bc

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b76:	f001 f8e7 	bl	8001d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7a:	f000 f875 	bl	8000c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7e:	f7ff fd39 	bl	80005f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b82:	f000 fb07 	bl	8001194 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b86:	f000 fb9d 	bl	80012c4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 8000b8a:	f000 f9a1 	bl	8000ed0 <MX_TIM4_Init>
  MX_I2C1_Init();
 8000b8e:	f7ff fe6b 	bl	8000868 <MX_I2C1_Init>
  MX_TIM6_Init();
 8000b92:	f000 fa15 	bl	8000fc0 <MX_TIM6_Init>
  MX_TIM14_Init();
 8000b96:	f000 fa4b 	bl	8001030 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000b9a:	4827      	ldr	r0, [pc, #156]	; (8000c38 <main+0xc8>)
 8000b9c:	f003 fdf6 	bl	800478c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000ba0:	4826      	ldr	r0, [pc, #152]	; (8000c3c <main+0xcc>)
 8000ba2:	f003 fdf3 	bl	800478c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4823      	ldr	r0, [pc, #140]	; (8000c38 <main+0xc8>)
 8000baa:	f003 fec9 	bl	8004940 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  BH1750_Init(&hbh1750_1);
 8000bae:	4824      	ldr	r0, [pc, #144]	; (8000c40 <main+0xd0>)
 8000bb0:	f000 fc59 	bl	8001466 <BH1750_Init>
  Lcd_init(&lcd);
 8000bb4:	4823      	ldr	r0, [pc, #140]	; (8000c44 <main+0xd4>)
 8000bb6:	f000 fca7 	bl	8001508 <Lcd_init>

  Lcd_cursor(&lcd, 0,0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4821      	ldr	r0, [pc, #132]	; (8000c44 <main+0xd4>)
 8000bc0:	f000 fd00 	bl	80015c4 <Lcd_cursor>
  Lcd_string(&lcd, "SM ZZ");
 8000bc4:	4920      	ldr	r1, [pc, #128]	; (8000c48 <main+0xd8>)
 8000bc6:	481f      	ldr	r0, [pc, #124]	; (8000c44 <main+0xd4>)
 8000bc8:	f000 fcdc 	bl	8001584 <Lcd_string>

  LightSetpoint = 200;
 8000bcc:	491f      	ldr	r1, [pc, #124]	; (8000c4c <main+0xdc>)
 8000bce:	f04f 0200 	mov.w	r2, #0
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <main+0xe0>)
 8000bd4:	e9c1 2300 	strd	r2, r3, [r1]
  PID(&Light_PID, &Light, &PID_Out, &LightSetpoint, 3, 0.5, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8000bd8:	2300      	movs	r3, #0
 8000bda:	9301      	str	r3, [sp, #4]
 8000bdc:	2301      	movs	r3, #1
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	ed9f 2b11 	vldr	d2, [pc, #68]	; 8000c28 <main+0xb8>
 8000be4:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8000be8:	eeb0 0b08 	vmov.f64	d0, #8	; 0x40400000  3.0
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <main+0xdc>)
 8000bee:	4a19      	ldr	r2, [pc, #100]	; (8000c54 <main+0xe4>)
 8000bf0:	4919      	ldr	r1, [pc, #100]	; (8000c58 <main+0xe8>)
 8000bf2:	481a      	ldr	r0, [pc, #104]	; (8000c5c <main+0xec>)
 8000bf4:	f000 fdfc 	bl	80017f0 <PID>

  PID_SetMode(&Light_PID, _PID_MODE_AUTOMATIC);
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	4818      	ldr	r0, [pc, #96]	; (8000c5c <main+0xec>)
 8000bfc:	f000 ff14 	bl	8001a28 <PID_SetMode>
  PID_SetSampleTime(&Light_PID, 200);
 8000c00:	21c8      	movs	r1, #200	; 0xc8
 8000c02:	4816      	ldr	r0, [pc, #88]	; (8000c5c <main+0xec>)
 8000c04:	f001 f86c 	bl	8001ce0 <PID_SetSampleTime>
  PID_SetOutputLimits(&Light_PID, 0, 999);
 8000c08:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8000c30 <main+0xc0>
 8000c0c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8000c28 <main+0xb8>
 8000c10:	4812      	ldr	r0, [pc, #72]	; (8000c5c <main+0xec>)
 8000c12:	f000 ff27 	bl	8001a64 <PID_SetOutputLimits>

  HAL_UART_Receive_IT(&huart3, Received, 5);
 8000c16:	2205      	movs	r2, #5
 8000c18:	4911      	ldr	r1, [pc, #68]	; (8000c60 <main+0xf0>)
 8000c1a:	4812      	ldr	r0, [pc, #72]	; (8000c64 <main+0xf4>)
 8000c1c:	f004 ffc6 	bl	8005bac <HAL_UART_Receive_IT>

  while (1)
 8000c20:	e7fe      	b.n	8000c20 <main+0xb0>
 8000c22:	bf00      	nop
 8000c24:	f3af 8000 	nop.w
	...
 8000c34:	408f3800 	.word	0x408f3800
 8000c38:	200001d8 	.word	0x200001d8
 8000c3c:	20000224 	.word	0x20000224
 8000c40:	20000004 	.word	0x20000004
 8000c44:	20000028 	.word	0x20000028
 8000c48:	08008238 	.word	0x08008238
 8000c4c:	200001c8 	.word	0x200001c8
 8000c50:	40690000 	.word	0x40690000
 8000c54:	200001c0 	.word	0x200001c0
 8000c58:	200001b8 	.word	0x200001b8
 8000c5c:	20000120 	.word	0x20000120
 8000c60:	20000190 	.word	0x20000190
 8000c64:	200002bc 	.word	0x200002bc

08000c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b094      	sub	sp, #80	; 0x50
 8000c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	2234      	movs	r2, #52	; 0x34
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f006 fdb6 	bl	80077e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c7c:	f107 0308 	add.w	r3, r7, #8
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c8c:	f002 fb32 	bl	80032f4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c90:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <SystemClock_Config+0xdc>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	4a2b      	ldr	r2, [pc, #172]	; (8000d44 <SystemClock_Config+0xdc>)
 8000c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9c:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <SystemClock_Config+0xdc>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ca8:	4b27      	ldr	r3, [pc, #156]	; (8000d48 <SystemClock_Config+0xe0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cb0:	4a25      	ldr	r2, [pc, #148]	; (8000d48 <SystemClock_Config+0xe0>)
 8000cb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <SystemClock_Config+0xe0>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cc8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ccc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cd6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cd8:	2304      	movs	r3, #4
 8000cda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000cdc:	2360      	movs	r3, #96	; 0x60
 8000cde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f002 fb5f 	bl	80033b4 <HAL_RCC_OscConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000cfc:	f000 f826 	bl	8000d4c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d00:	f002 fb08 	bl	8003314 <HAL_PWREx_EnableOverDrive>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d0a:	f000 f81f 	bl	8000d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0e:	230f      	movs	r3, #15
 8000d10:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d12:	2302      	movs	r3, #2
 8000d14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	2103      	movs	r1, #3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f002 fdf0 	bl	8003910 <HAL_RCC_ClockConfig>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000d36:	f000 f809 	bl	8000d4c <Error_Handler>
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	3750      	adds	r7, #80	; 0x50
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40007000 	.word	0x40007000

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <Error_Handler+0x8>
	...

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <HAL_MspInit+0x44>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <HAL_MspInit+0x44>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d68:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <HAL_MspInit+0x44>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <HAL_MspInit+0x44>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <HAL_MspInit+0x44>)
 8000d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d80:	6453      	str	r3, [r2, #68]	; 0x44
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_MspInit+0x44>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <NMI_Handler+0x4>

08000da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <MemManage_Handler+0x4>

08000db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dec:	f000 ffea 	bl	8001dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <TIM4_IRQHandler+0x10>)
 8000dfa:	f003 fe9b 	bl	8004b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200001d8 	.word	0x200001d8

08000e08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <USART3_IRQHandler+0x10>)
 8000e0e:	f004 ff11 	bl	8005c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200002bc 	.word	0x200002bc

08000e1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000e20:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e24:	f001 fb7c 	bl	8002520 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <TIM6_DAC_IRQHandler+0x10>)
 8000e32:	f003 fe7f 	bl	8004b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000224 	.word	0x20000224

08000e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e48:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <_sbrk+0x5c>)
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <_sbrk+0x60>)
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <_sbrk+0x64>)
 8000e5e:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <_sbrk+0x68>)
 8000e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d207      	bcs.n	8000e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e70:	f006 fc90 	bl	8007794 <__errno>
 8000e74:	4603      	mov	r3, r0
 8000e76:	220c      	movs	r2, #12
 8000e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7e:	e009      	b.n	8000e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <_sbrk+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <_sbrk+0x64>)
 8000e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e92:	68fb      	ldr	r3, [r7, #12]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20080000 	.word	0x20080000
 8000ea0:	00000400 	.word	0x00000400
 8000ea4:	200001d4 	.word	0x200001d4
 8000ea8:	20000860 	.word	0x20000860

08000eac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <SystemInit+0x20>)
 8000eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb6:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <SystemInit+0x20>)
 8000eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <MX_TIM4_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim14;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08e      	sub	sp, #56	; 0x38
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]
 8000efe:	615a      	str	r2, [r3, #20]
 8000f00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f02:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <MX_TIM4_Init+0xe8>)
 8000f04:	4a2d      	ldr	r2, [pc, #180]	; (8000fbc <MX_TIM4_Init+0xec>)
 8000f06:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 95;
 8000f08:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <MX_TIM4_Init+0xe8>)
 8000f0a:	225f      	movs	r2, #95	; 0x5f
 8000f0c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <MX_TIM4_Init+0xe8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000f14:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <MX_TIM4_Init+0xe8>)
 8000f16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f1a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1c:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <MX_TIM4_Init+0xe8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f22:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <MX_TIM4_Init+0xe8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f28:	4823      	ldr	r0, [pc, #140]	; (8000fb8 <MX_TIM4_Init+0xe8>)
 8000f2a:	f003 fb3f 	bl	80045ac <HAL_TIM_Base_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000f34:	f7ff ff0a 	bl	8000d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f42:	4619      	mov	r1, r3
 8000f44:	481c      	ldr	r0, [pc, #112]	; (8000fb8 <MX_TIM4_Init+0xe8>)
 8000f46:	f004 f829 	bl	8004f9c <HAL_TIM_ConfigClockSource>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000f50:	f7ff fefc 	bl	8000d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f54:	4818      	ldr	r0, [pc, #96]	; (8000fb8 <MX_TIM4_Init+0xe8>)
 8000f56:	f003 fc91 	bl	800487c <HAL_TIM_PWM_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000f60:	f7ff fef4 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <MX_TIM4_Init+0xe8>)
 8000f74:	f004 fcc2 	bl	80058fc <HAL_TIMEx_MasterConfigSynchronization>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000f7e:	f7ff fee5 	bl	8000d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f82:	2360      	movs	r3, #96	; 0x60
 8000f84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000f86:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f8a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f94:	463b      	mov	r3, r7
 8000f96:	2200      	movs	r2, #0
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <MX_TIM4_Init+0xe8>)
 8000f9c:	f003 feea 	bl	8004d74 <HAL_TIM_PWM_ConfigChannel>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000fa6:	f7ff fed1 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000faa:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <MX_TIM4_Init+0xe8>)
 8000fac:	f000 f8ba 	bl	8001124 <HAL_TIM_MspPostInit>

}
 8000fb0:	bf00      	nop
 8000fb2:	3738      	adds	r7, #56	; 0x38
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	200001d8 	.word	0x200001d8
 8000fbc:	40000800 	.word	0x40000800

08000fc0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000fd0:	4b15      	ldr	r3, [pc, #84]	; (8001028 <MX_TIM6_Init+0x68>)
 8000fd2:	4a16      	ldr	r2, [pc, #88]	; (800102c <MX_TIM6_Init+0x6c>)
 8000fd4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <MX_TIM6_Init+0x68>)
 8000fd8:	f242 527f 	movw	r2, #9599	; 0x257f
 8000fdc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <MX_TIM6_Init+0x68>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000fe4:	4b10      	ldr	r3, [pc, #64]	; (8001028 <MX_TIM6_Init+0x68>)
 8000fe6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fec:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_TIM6_Init+0x68>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ff2:	480d      	ldr	r0, [pc, #52]	; (8001028 <MX_TIM6_Init+0x68>)
 8000ff4:	f003 fada 	bl	80045ac <HAL_TIM_Base_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000ffe:	f7ff fea5 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	4619      	mov	r1, r3
 800100e:	4806      	ldr	r0, [pc, #24]	; (8001028 <MX_TIM6_Init+0x68>)
 8001010:	f004 fc74 	bl	80058fc <HAL_TIMEx_MasterConfigSynchronization>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800101a:	f7ff fe97 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000224 	.word	0x20000224
 800102c:	40001000 	.word	0x40001000

08001030 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <MX_TIM14_Init+0x40>)
 8001036:	4a0f      	ldr	r2, [pc, #60]	; (8001074 <MX_TIM14_Init+0x44>)
 8001038:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 95;
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <MX_TIM14_Init+0x40>)
 800103c:	225f      	movs	r2, #95	; 0x5f
 800103e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <MX_TIM14_Init+0x40>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65000;
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <MX_TIM14_Init+0x40>)
 8001048:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800104c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <MX_TIM14_Init+0x40>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <MX_TIM14_Init+0x40>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_TIM14_Init+0x40>)
 800105c:	f003 faa6 	bl	80045ac <HAL_TIM_Base_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001066:	f7ff fe71 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000270 	.word	0x20000270
 8001074:	40002000 	.word	0x40002000

08001078 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a23      	ldr	r2, [pc, #140]	; (8001114 <HAL_TIM_Base_MspInit+0x9c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d114      	bne.n	80010b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800108a:	4b23      	ldr	r3, [pc, #140]	; (8001118 <HAL_TIM_Base_MspInit+0xa0>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	4a22      	ldr	r2, [pc, #136]	; (8001118 <HAL_TIM_Base_MspInit+0xa0>)
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	6413      	str	r3, [r2, #64]	; 0x40
 8001096:	4b20      	ldr	r3, [pc, #128]	; (8001118 <HAL_TIM_Base_MspInit+0xa0>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f003 0304 	and.w	r3, r3, #4
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	697b      	ldr	r3, [r7, #20]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	201e      	movs	r0, #30
 80010a8:	f000 ffab 	bl	8002002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80010ac:	201e      	movs	r0, #30
 80010ae:	f000 ffc4 	bl	800203a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80010b2:	e02a      	b.n	800110a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a18      	ldr	r2, [pc, #96]	; (800111c <HAL_TIM_Base_MspInit+0xa4>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d114      	bne.n	80010e8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HAL_TIM_Base_MspInit+0xa0>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	4a15      	ldr	r2, [pc, #84]	; (8001118 <HAL_TIM_Base_MspInit+0xa0>)
 80010c4:	f043 0310 	orr.w	r3, r3, #16
 80010c8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <HAL_TIM_Base_MspInit+0xa0>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f003 0310 	and.w	r3, r3, #16
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	2036      	movs	r0, #54	; 0x36
 80010dc:	f000 ff91 	bl	8002002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010e0:	2036      	movs	r0, #54	; 0x36
 80010e2:	f000 ffaa 	bl	800203a <HAL_NVIC_EnableIRQ>
}
 80010e6:	e010      	b.n	800110a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM14)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0c      	ldr	r2, [pc, #48]	; (8001120 <HAL_TIM_Base_MspInit+0xa8>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d10b      	bne.n	800110a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_TIM_Base_MspInit+0xa0>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a08      	ldr	r2, [pc, #32]	; (8001118 <HAL_TIM_Base_MspInit+0xa0>)
 80010f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_TIM_Base_MspInit+0xa0>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40000800 	.word	0x40000800
 8001118:	40023800 	.word	0x40023800
 800111c:	40001000 	.word	0x40001000
 8001120:	40002000 	.word	0x40002000

08001124 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a11      	ldr	r2, [pc, #68]	; (8001188 <HAL_TIM_MspPostInit+0x64>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d11c      	bne.n	8001180 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <HAL_TIM_MspPostInit+0x68>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a10      	ldr	r2, [pc, #64]	; (800118c <HAL_TIM_MspPostInit+0x68>)
 800114c:	f043 0308 	orr.w	r3, r3, #8
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <HAL_TIM_MspPostInit+0x68>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800115e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001162:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001170:	2302      	movs	r3, #2
 8001172:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	4619      	mov	r1, r3
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <HAL_TIM_MspPostInit+0x6c>)
 800117c:	f001 f80a 	bl	8002194 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001180:	bf00      	nop
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40000800 	.word	0x40000800
 800118c:	40023800 	.word	0x40023800
 8001190:	40020c00 	.word	0x40020c00

08001194 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <MX_USART3_UART_Init+0x58>)
 800119a:	4a15      	ldr	r2, [pc, #84]	; (80011f0 <MX_USART3_UART_Init+0x5c>)
 800119c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <MX_USART3_UART_Init+0x58>)
 80011a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <MX_USART3_UART_Init+0x58>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <MX_USART3_UART_Init+0x58>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_USART3_UART_Init+0x58>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_USART3_UART_Init+0x58>)
 80011ba:	220c      	movs	r2, #12
 80011bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <MX_USART3_UART_Init+0x58>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_USART3_UART_Init+0x58>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <MX_USART3_UART_Init+0x58>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_USART3_UART_Init+0x58>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_USART3_UART_Init+0x58>)
 80011d8:	f004 fc3c 	bl	8005a54 <HAL_UART_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80011e2:	f7ff fdb3 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200002bc 	.word	0x200002bc
 80011f0:	40004800 	.word	0x40004800

080011f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b0ae      	sub	sp, #184	; 0xb8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	2290      	movs	r2, #144	; 0x90
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f006 fae7 	bl	80077e8 <memset>
  if(uartHandle->Instance==USART3)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a26      	ldr	r2, [pc, #152]	; (80012b8 <HAL_UART_MspInit+0xc4>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d144      	bne.n	80012ae <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001224:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001228:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800122a:	2300      	movs	r3, #0
 800122c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4618      	mov	r0, r3
 8001234:	f002 fd92 	bl	8003d5c <HAL_RCCEx_PeriphCLKConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800123e:	f7ff fd85 	bl	8000d4c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001242:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <HAL_UART_MspInit+0xc8>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	4a1d      	ldr	r2, [pc, #116]	; (80012bc <HAL_UART_MspInit+0xc8>)
 8001248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
 800124e:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <HAL_UART_MspInit+0xc8>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <HAL_UART_MspInit+0xc8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a17      	ldr	r2, [pc, #92]	; (80012bc <HAL_UART_MspInit+0xc8>)
 8001260:	f043 0308 	orr.w	r3, r3, #8
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <HAL_UART_MspInit+0xc8>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001272:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001276:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	2303      	movs	r3, #3
 8001288:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800128c:	2307      	movs	r3, #7
 800128e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001292:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001296:	4619      	mov	r1, r3
 8001298:	4809      	ldr	r0, [pc, #36]	; (80012c0 <HAL_UART_MspInit+0xcc>)
 800129a:	f000 ff7b 	bl	8002194 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	2027      	movs	r0, #39	; 0x27
 80012a4:	f000 fead 	bl	8002002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80012a8:	2027      	movs	r0, #39	; 0x27
 80012aa:	f000 fec6 	bl	800203a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80012ae:	bf00      	nop
 80012b0:	37b8      	adds	r7, #184	; 0xb8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40004800 	.word	0x40004800
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020c00 	.word	0x40020c00

080012c4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012d2:	2206      	movs	r2, #6
 80012d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012d8:	2202      	movs	r2, #2
 80012da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012e4:	2202      	movs	r2, #2
 80012e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012f4:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001302:	2200      	movs	r2, #0
 8001304:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001308:	f001 feab 	bl	8003062 <HAL_PCD_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001312:	f7ff fd1b 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000344 	.word	0x20000344

08001320 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b0ae      	sub	sp, #184	; 0xb8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2290      	movs	r2, #144	; 0x90
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f006 fa51 	bl	80077e8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800134e:	d159      	bne.n	8001404 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001350:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001354:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001356:	2300      	movs	r3, #0
 8001358:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4618      	mov	r0, r3
 8001362:	f002 fcfb 	bl	8003d5c <HAL_RCCEx_PeriphCLKConfig>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800136c:	f7ff fcee 	bl	8000d4c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001370:	4b26      	ldr	r3, [pc, #152]	; (800140c <HAL_PCD_MspInit+0xec>)
 8001372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001374:	4a25      	ldr	r2, [pc, #148]	; (800140c <HAL_PCD_MspInit+0xec>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	6313      	str	r3, [r2, #48]	; 0x30
 800137c:	4b23      	ldr	r3, [pc, #140]	; (800140c <HAL_PCD_MspInit+0xec>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001388:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800138c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013a2:	230a      	movs	r3, #10
 80013a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013ac:	4619      	mov	r1, r3
 80013ae:	4818      	ldr	r0, [pc, #96]	; (8001410 <HAL_PCD_MspInit+0xf0>)
 80013b0:	f000 fef0 	bl	8002194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80013b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013bc:	2300      	movs	r3, #0
 80013be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013cc:	4619      	mov	r1, r3
 80013ce:	4810      	ldr	r0, [pc, #64]	; (8001410 <HAL_PCD_MspInit+0xf0>)
 80013d0:	f000 fee0 	bl	8002194 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013d4:	4b0d      	ldr	r3, [pc, #52]	; (800140c <HAL_PCD_MspInit+0xec>)
 80013d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d8:	4a0c      	ldr	r2, [pc, #48]	; (800140c <HAL_PCD_MspInit+0xec>)
 80013da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013de:	6353      	str	r3, [r2, #52]	; 0x34
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_PCD_MspInit+0xec>)
 80013e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4b07      	ldr	r3, [pc, #28]	; (800140c <HAL_PCD_MspInit+0xec>)
 80013ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f0:	4a06      	ldr	r2, [pc, #24]	; (800140c <HAL_PCD_MspInit+0xec>)
 80013f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f6:	6453      	str	r3, [r2, #68]	; 0x44
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <HAL_PCD_MspInit+0xec>)
 80013fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001404:	bf00      	nop
 8001406:	37b8      	adds	r7, #184	; 0xb8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40023800 	.word	0x40023800
 8001410:	40020000 	.word	0x40020000

08001414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800144c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001418:	480d      	ldr	r0, [pc, #52]	; (8001450 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800141a:	490e      	ldr	r1, [pc, #56]	; (8001454 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800141c:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001420:	e002      	b.n	8001428 <LoopCopyDataInit>

08001422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001426:	3304      	adds	r3, #4

08001428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800142c:	d3f9      	bcc.n	8001422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142e:	4a0b      	ldr	r2, [pc, #44]	; (800145c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001430:	4c0b      	ldr	r4, [pc, #44]	; (8001460 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001434:	e001      	b.n	800143a <LoopFillZerobss>

08001436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001438:	3204      	adds	r2, #4

0800143a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800143c:	d3fb      	bcc.n	8001436 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800143e:	f7ff fd35 	bl	8000eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001442:	f006 f9ad 	bl	80077a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001446:	f7ff fb93 	bl	8000b70 <main>
  bx  lr    
 800144a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800144c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001454:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001458:	080083a0 	.word	0x080083a0
  ldr r2, =_sbss
 800145c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001460:	20000860 	.word	0x20000860

08001464 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001464:	e7fe      	b.n	8001464 <ADC_IRQHandler>

08001466 <BH1750_Init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hbh1750 BH1750 digital light sensor handler
 * @return None
 */
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af02      	add	r7, sp, #8
 800146c:	6078      	str	r0, [r7, #4]
  uint8_t command;
  command = BH1750_POWER_ON;
 800146e:	2301      	movs	r3, #1
 8001470:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6818      	ldr	r0, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	791b      	ldrb	r3, [r3, #4]
 800147a:	b299      	uxth	r1, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f107 020f 	add.w	r2, r7, #15
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2301      	movs	r3, #1
 8001488:	f001 f8fe 	bl	8002688 <HAL_I2C_Master_Transmit>
  command = BH1750_CONTINOUS_H_RES_MODE;
 800148c:	2310      	movs	r3, #16
 800148e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	791b      	ldrb	r3, [r3, #4]
 8001498:	b299      	uxth	r1, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f107 020f 	add.w	r2, r7, #15
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2301      	movs	r3, #1
 80014a6:	f001 f8ef 	bl	8002688 <HAL_I2C_Master_Transmit>
}
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	0000      	movs	r0, r0
 80014b4:	0000      	movs	r0, r0
	...

080014b8 <BH1750_ReadLux>:
 * @note Uses blocking mode I2C receiving routine.
 * @param[in] hbh1750 BH1750 digital light sensor handler
 * @return Measurement result in lux [lx]
 */
float BH1750_ReadLux(BH1750_HandleTypeDef* hbh1750)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af02      	add	r7, sp, #8
 80014be:	6078      	str	r0, [r7, #4]
  uint8_t rxarray[BH1750_DATA_SIZE];
  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	791b      	ldrb	r3, [r3, #4]
 80014c8:	b299      	uxth	r1, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f107 020c 	add.w	r2, r7, #12
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	2302      	movs	r3, #2
 80014d6:	f001 f9cb 	bl	8002870 <HAL_I2C_Master_Receive>
  return ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2; // @see BH1750 technical note p. 10;
 80014da:	7b3b      	ldrb	r3, [r7, #12]
 80014dc:	021b      	lsls	r3, r3, #8
 80014de:	7b7a      	ldrb	r2, [r7, #13]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	ee07 3a90 	vmov	s15, r3
 80014e6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80014ea:	ed9f 5b05 	vldr	d5, [pc, #20]	; 8001500 <BH1750_ReadLux+0x48>
 80014ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 80014f6:	eeb0 0a67 	vmov.f32	s0, s15
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	33333333 	.word	0x33333333
 8001504:	3ff33333 	.word	0x3ff33333

08001508 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	HAL_Delay(16);
 8001510:	2010      	movs	r0, #16
 8001512:	f000 fc77 	bl	8001e04 <HAL_Delay>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7d9b      	ldrb	r3, [r3, #22]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d115      	bne.n	800154a <Lcd_init+0x42>
	{
			lcd_write_command(lcd, 0x33);
 800151e:	2133      	movs	r1, #51	; 0x33
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 f88a 	bl	800163a <lcd_write_command>
			HAL_Delay(5);
 8001526:	2005      	movs	r0, #5
 8001528:	f000 fc6c 	bl	8001e04 <HAL_Delay>
			lcd_write_command(lcd, 0x32);
 800152c:	2132      	movs	r1, #50	; 0x32
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 f883 	bl	800163a <lcd_write_command>
			HAL_Delay(1);
 8001534:	2001      	movs	r0, #1
 8001536:	f000 fc65 	bl	8001e04 <HAL_Delay>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 800153a:	2128      	movs	r1, #40	; 0x28
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 f87c 	bl	800163a <lcd_write_command>
			HAL_Delay(1);
 8001542:	2001      	movs	r0, #1
 8001544:	f000 fc5e 	bl	8001e04 <HAL_Delay>
 8001548:	e003      	b.n	8001552 <Lcd_init+0x4a>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 800154a:	2138      	movs	r1, #56	; 0x38
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 f874 	bl	800163a <lcd_write_command>

	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8001552:	2101      	movs	r1, #1
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 f870 	bl	800163a <lcd_write_command>
	HAL_Delay(2);
 800155a:	2002      	movs	r0, #2
 800155c:	f000 fc52 	bl	8001e04 <HAL_Delay>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8001560:	210c      	movs	r1, #12
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 f869 	bl	800163a <lcd_write_command>
	HAL_Delay(2);
 8001568:	2002      	movs	r0, #2
 800156a:	f000 fc4b 	bl	8001e04 <HAL_Delay>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 800156e:	2106      	movs	r1, #6
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f862 	bl	800163a <lcd_write_command>
	HAL_Delay(2);
 8001576:	2002      	movs	r0, #2
 8001578:	f000 fc44 	bl	8001e04 <HAL_Delay>
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800158e:	2300      	movs	r3, #0
 8001590:	73fb      	strb	r3, [r7, #15]
 8001592:	e00a      	b.n	80015aa <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	4413      	add	r3, r2
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 f879 	bl	8001696 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	3301      	adds	r3, #1
 80015a8:	73fb      	strb	r3, [r7, #15]
 80015aa:	7bfc      	ldrb	r4, [r7, #15]
 80015ac:	6838      	ldr	r0, [r7, #0]
 80015ae:	f7fe fe47 	bl	8000240 <strlen>
 80015b2:	4603      	mov	r3, r0
 80015b4:	429c      	cmp	r4, r3
 80015b6:	d3ed      	bcc.n	8001594 <Lcd_string+0x10>
	}
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd90      	pop	{r4, r7, pc}
	...

080015c4 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	70fb      	strb	r3, [r7, #3]
 80015d0:	4613      	mov	r3, r2
 80015d2:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80015d4:	78fb      	ldrb	r3, [r7, #3]
 80015d6:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <Lcd_cursor+0x30>)
 80015d8:	5cd2      	ldrb	r2, [r2, r3]
 80015da:	78bb      	ldrb	r3, [r7, #2]
 80015dc:	4413      	add	r3, r2
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	3b80      	subs	r3, #128	; 0x80
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	4619      	mov	r1, r3
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f827 	bl	800163a <lcd_write_command>
	#endif
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	08008258 	.word	0x08008258

080015f8 <DELAY_func>:


/************************************** Static function definition **************************************/

void DELAY_func(Lcd_HandleTypeDef* lcd, uint16_t delay_us)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COUNTER(lcd->timer, 0);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2200      	movs	r2, #0
 800160c:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(lcd->timer);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	4618      	mov	r0, r3
 8001614:	f003 f822 	bl	800465c <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(lcd->timer) < delay_us);
 8001618:	bf00      	nop
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001622:	887b      	ldrh	r3, [r7, #2]
 8001624:	429a      	cmp	r2, r3
 8001626:	d3f8      	bcc.n	800161a <DELAY_func+0x22>
  HAL_TIM_Base_Stop(lcd->timer);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	4618      	mov	r0, r3
 800162e:	f003 f885 	bl	800473c <HAL_TIM_Base_Stop>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
 8001642:	460b      	mov	r3, r1
 8001644:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6898      	ldr	r0, [r3, #8]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	899b      	ldrh	r3, [r3, #12]
 800164e:	2200      	movs	r2, #0
 8001650:	4619      	mov	r1, r3
 8001652:	f000 ff4b 	bl	80024ec <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	7d9b      	ldrb	r3, [r3, #22]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d111      	bne.n	8001682 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 800165e:	78fb      	ldrb	r3, [r7, #3]
 8001660:	091b      	lsrs	r3, r3, #4
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2204      	movs	r2, #4
 8001666:	4619      	mov	r1, r3
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f842 	bl	80016f2 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 800166e:	78fb      	ldrb	r3, [r7, #3]
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2204      	movs	r2, #4
 8001678:	4619      	mov	r1, r3
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f839 	bl	80016f2 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8001680:	e005      	b.n	800168e <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8001682:	78fb      	ldrb	r3, [r7, #3]
 8001684:	2208      	movs	r2, #8
 8001686:	4619      	mov	r1, r3
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f832 	bl	80016f2 <lcd_write>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	460b      	mov	r3, r1
 80016a0:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6898      	ldr	r0, [r3, #8]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	899b      	ldrh	r3, [r3, #12]
 80016aa:	2201      	movs	r2, #1
 80016ac:	4619      	mov	r1, r3
 80016ae:	f000 ff1d 	bl	80024ec <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	7d9b      	ldrb	r3, [r3, #22]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d111      	bne.n	80016de <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80016ba:	78fb      	ldrb	r3, [r7, #3]
 80016bc:	091b      	lsrs	r3, r3, #4
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2204      	movs	r2, #4
 80016c2:	4619      	mov	r1, r3
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f000 f814 	bl	80016f2 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80016ca:	78fb      	ldrb	r3, [r7, #3]
 80016cc:	f003 030f 	and.w	r3, r3, #15
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2204      	movs	r2, #4
 80016d4:	4619      	mov	r1, r3
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f80b 	bl	80016f2 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80016dc:	e005      	b.n	80016ea <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80016de:	78fb      	ldrb	r3, [r7, #3]
 80016e0:	2208      	movs	r2, #8
 80016e2:	4619      	mov	r1, r3
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f804 	bl	80016f2 <lcd_write>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b084      	sub	sp, #16
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	460b      	mov	r3, r1
 80016fc:	70fb      	strb	r3, [r7, #3]
 80016fe:	4613      	mov	r3, r2
 8001700:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6918      	ldr	r0, [r3, #16]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	8a9b      	ldrh	r3, [r3, #20]
 800170a:	2201      	movs	r2, #1
 800170c:	4619      	mov	r1, r3
 800170e:	f000 feed 	bl	80024ec <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001712:	2300      	movs	r3, #0
 8001714:	73fb      	strb	r3, [r7, #15]
 8001716:	e019      	b.n	800174c <lcd_write+0x5a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	6818      	ldr	r0, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4413      	add	r3, r2
 800172e:	8819      	ldrh	r1, [r3, #0]
 8001730:	78fa      	ldrb	r2, [r7, #3]
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	fa42 f303 	asr.w	r3, r2, r3
 8001738:	b2db      	uxtb	r3, r3
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	b2db      	uxtb	r3, r3
 8001740:	461a      	mov	r2, r3
 8001742:	f000 fed3 	bl	80024ec <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	3301      	adds	r3, #1
 800174a:	73fb      	strb	r3, [r7, #15]
 800174c:	7bfa      	ldrb	r2, [r7, #15]
 800174e:	78bb      	ldrb	r3, [r7, #2]
 8001750:	429a      	cmp	r2, r3
 8001752:	d3e1      	bcc.n	8001718 <lcd_write+0x26>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6918      	ldr	r0, [r3, #16]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	8a9b      	ldrh	r3, [r3, #20]
 800175c:	2200      	movs	r2, #0
 800175e:	4619      	mov	r1, r3
 8001760:	f000 fec4 	bl	80024ec <HAL_GPIO_WritePin>
	DELAY(lcd, 0.08);// Data receive on falling edge
 8001764:	214f      	movs	r1, #79	; 0x4f
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ff46 	bl	80015f8 <DELAY_func>
}
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <PID_Init>:
#include "main.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	if (uPID->OutputSum > uPID->OutMax)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80017a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80017a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ac:	dd06      	ble.n	80017bc <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 80017ba:	e011      	b.n	80017e0 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80017c8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80017cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d0:	d400      	bmi.n	80017d4 <PID_Init+0x60>
}
 80017d2:	e005      	b.n	80017e0 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	0000      	movs	r0, r0
	...

080017f0 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6278      	str	r0, [r7, #36]	; 0x24
 80017f8:	6239      	str	r1, [r7, #32]
 80017fa:	61fa      	str	r2, [r7, #28]
 80017fc:	61bb      	str	r3, [r7, #24]
 80017fe:	ed87 0b04 	vstr	d0, [r7, #16]
 8001802:	ed87 1b02 	vstr	d1, [r7, #8]
 8001806:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	6a3a      	ldr	r2, [r7, #32]
 8001814:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	2200      	movs	r2, #0
 8001820:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8001822:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8001878 <PID+0x88>
 8001826:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8001880 <PID+0x90>
 800182a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800182c:	f000 f91a 	bl	8001a64 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	2264      	movs	r2, #100	; 0x64
 8001834:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8001836:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800183a:	4619      	mov	r1, r3
 800183c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800183e:	f000 fa13 	bl	8001c68 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8001842:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001846:	4619      	mov	r1, r3
 8001848:	ed97 2b00 	vldr	d2, [r7]
 800184c:	ed97 1b02 	vldr	d1, [r7, #8]
 8001850:	ed97 0b04 	vldr	d0, [r7, #16]
 8001854:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001856:	f000 f977 	bl	8001b48 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 800185a:	f000 fac7 	bl	8001dec <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	1ad2      	subs	r2, r2, r3
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	605a      	str	r2, [r3, #4]

}
 800186a:	bf00      	nop
 800186c:	3728      	adds	r7, #40	; 0x28
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	f3af 8000 	nop.w
 8001878:	00000000 	.word	0x00000000
 800187c:	406fe000 	.word	0x406fe000
	...

08001888 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08c      	sub	sp, #48	; 0x30
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	785b      	ldrb	r3, [r3, #1]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <PID_Compute+0x14>
	{
		return _FALSE;
 8001898:	2300      	movs	r3, #0
 800189a:	e0c1      	b.n	8001a20 <PID_Compute+0x198>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 800189c:	f000 faa6 	bl	8001dec <HAL_GetTick>
 80018a0:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	6a3a      	ldr	r2, [r7, #32]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	f0c0 80b3 	bcc.w	8001a1e <PID_Compute+0x196>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c8:	ed93 6b00 	vldr	d6, [r3]
 80018cc:	ed97 7b06 	vldr	d7, [r7, #24]
 80018d0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018d4:	ed87 7b04 	vstr	d7, [r7, #16]
		dInput  = (input - uPID->LastInput);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 80018de:	ed97 6b06 	vldr	d6, [r7, #24]
 80018e2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018e6:	ed87 7b02 	vstr	d7, [r7, #8]

		uPID->OutputSum     += (uPID->Ki * error);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	ed93 5b0c 	vldr	d5, [r3, #48]	; 0x30
 80018f6:	ed97 7b04 	vldr	d7, [r7, #16]
 80018fa:	ee25 7b07 	vmul.f64	d7, d5, d7
 80018fe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50

		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d10e      	bne.n	800192e <PID_Compute+0xa6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 800191c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001920:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001924:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
		}

		if (uPID->OutputSum > uPID->OutMax)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800193a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800193e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001942:	dd06      	ble.n	8001952 <PID_Compute+0xca>
		{
			uPID->OutputSum = uPID->OutMax;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001950:	e010      	b.n	8001974 <PID_Compute+0xec>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 800195e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001966:	d505      	bpl.n	8001974 <PID_Compute+0xec>
		{
			uPID->OutputSum = uPID->OutMin;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }

		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d009      	beq.n	8001990 <PID_Compute+0x108>
		{
			output = uPID->Kp * error;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001982:	ed97 6b04 	vldr	d6, [r7, #16]
 8001986:	ee26 7b07 	vmul.f64	d7, d6, d7
 800198a:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
 800198e:	e005      	b.n	800199c <PID_Compute+0x114>
		}
		else
		{
			output = 0;
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 80019a8:	ed97 7b02 	vldr	d7, [r7, #8]
 80019ac:	ee25 7b07 	vmul.f64	d7, d5, d7
 80019b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80019b4:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 80019b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019bc:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80019c6:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 80019ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80019ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d2:	dd05      	ble.n	80019e0 <PID_Compute+0x158>
		{
			output = uPID->OutMax;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80019da:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80019de:	e00e      	b.n	80019fe <PID_Compute+0x176>
		}
		else if (output < uPID->OutMin)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80019e6:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 80019ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80019ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f2:	d504      	bpl.n	80019fe <PID_Compute+0x176>
		{
			output = uPID->OutMin;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80019fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }

		*uPID->MyOutput = output;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001a02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a06:	e9c1 2300 	strd	r2, r3, [r1]

		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a10:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a18:	605a      	str	r2, [r3, #4]

		return _TRUE;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <PID_Compute+0x198>

	}
	else
	{
		return _FALSE;
 8001a1e:	2300      	movs	r3, #0
	}

}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3730      	adds	r7, #48	; 0x30
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8001a34:	78fb      	ldrb	r3, [r7, #3]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	bf0c      	ite	eq
 8001a3a:	2301      	moveq	r3, #1
 8001a3c:	2300      	movne	r3, #0
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d006      	beq.n	8001a56 <PID_SetMode+0x2e>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	785b      	ldrb	r3, [r3, #1]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d102      	bne.n	8001a56 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff fe8f 	bl	8001774 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	705a      	strb	r2, [r3, #1]

}
 8001a5c:	bf00      	nop
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6178      	str	r0, [r7, #20]
 8001a6c:	ed87 0b02 	vstr	d0, [r7, #8]
 8001a70:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8001a74:	ed97 6b02 	vldr	d6, [r7, #8]
 8001a78:	ed97 7b00 	vldr	d7, [r7]
 8001a7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a84:	da58      	bge.n	8001b38 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 8001a86:	6979      	ldr	r1, [r7, #20]
 8001a88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a8c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8001a90:	6979      	ldr	r1, [r7, #20]
 8001a92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a96:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	785b      	ldrb	r3, [r3, #1]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d04b      	beq.n	8001b3a <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	ed93 6b00 	vldr	d6, [r3]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8001ab0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab8:	dd07      	ble.n	8001aca <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001ac4:	e9c1 2300 	strd	r2, r3, [r1]
 8001ac8:	e012      	b.n	8001af0 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	ed93 6b00 	vldr	d6, [r3]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8001ad8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae0:	d506      	bpl.n	8001af0 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001aec:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8001afc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b04:	dd06      	ble.n	8001b14 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001b0c:	6979      	ldr	r1, [r7, #20]
 8001b0e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001b12:	e012      	b.n	8001b3a <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8001b20:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b28:	d507      	bpl.n	8001b3a <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001b30:	6979      	ldr	r1, [r7, #20]
 8001b32:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001b36:	e000      	b.n	8001b3a <PID_SetOutputLimits+0xd6>
		return;
 8001b38:	bf00      	nop
		}
		else { }

	}

}
 8001b3a:	371c      	adds	r7, #28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	0000      	movs	r0, r0
	...

08001b48 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b08b      	sub	sp, #44	; 0x2c
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	61f8      	str	r0, [r7, #28]
 8001b50:	ed87 0b04 	vstr	d0, [r7, #16]
 8001b54:	ed87 1b02 	vstr	d1, [r7, #8]
 8001b58:	ed87 2b00 	vstr	d2, [r7]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8001b60:	ed97 7b04 	vldr	d7, [r7, #16]
 8001b64:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6c:	d46e      	bmi.n	8001c4c <PID_SetTunings2+0x104>
 8001b6e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001b72:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7a:	d467      	bmi.n	8001c4c <PID_SetTunings2+0x104>
 8001b7c:	ed97 7b00 	vldr	d7, [r7]
 8001b80:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b88:	d460      	bmi.n	8001c4c <PID_SetTunings2+0x104>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	7efa      	ldrb	r2, [r7, #27]
 8001b8e:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8001b90:	7efb      	ldrb	r3, [r7, #27]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	bf0c      	ite	eq
 8001b96:	2301      	moveq	r3, #1
 8001b98:	2300      	movne	r3, #0
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8001ba2:	69f9      	ldr	r1, [r7, #28]
 8001ba4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ba8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8001bac:	69f9      	ldr	r1, [r7, #28]
 8001bae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bb2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8001bb6:	69f9      	ldr	r1, [r7, #28]
 8001bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bbc:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	ee07 3a90 	vmov	s15, r3
 8001bc8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001bcc:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8001c58 <PID_SetTunings2+0x110>
 8001bd0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001bd4:	ed87 7b08 	vstr	d7, [r7, #32]

	uPID->Kp = Kp;
 8001bd8:	69f9      	ldr	r1, [r7, #28]
 8001bda:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bde:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8001be2:	ed97 6b02 	vldr	d6, [r7, #8]
 8001be6:	ed97 7b08 	vldr	d7, [r7, #32]
 8001bea:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8001bf4:	ed97 5b00 	vldr	d5, [r7]
 8001bf8:	ed97 6b08 	vldr	d6, [r7, #32]
 8001bfc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	78db      	ldrb	r3, [r3, #3]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d11f      	bne.n	8001c4e <PID_SetTunings2+0x106>
	{

		uPID->Kp = (0 - uPID->Kp);
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001c14:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001c60 <PID_SetTunings2+0x118>
 8001c18:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001c28:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001c60 <PID_SetTunings2+0x118>
 8001c2c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001c3c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001c60 <PID_SetTunings2+0x118>
 8001c40:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
 8001c4a:	e000      	b.n	8001c4e <PID_SetTunings2+0x106>
		return;
 8001c4c:	bf00      	nop

	}

}
 8001c4e:	372c      	adds	r7, #44	; 0x2c
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	00000000 	.word	0x00000000
 8001c5c:	408f4000 	.word	0x408f4000
	...

08001c68 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	785b      	ldrb	r3, [r3, #1]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d022      	beq.n	8001cc2 <PID_SetControllerDirection+0x5a>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	78db      	ldrb	r3, [r3, #3]
 8001c80:	78fa      	ldrb	r2, [r7, #3]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d01d      	beq.n	8001cc2 <PID_SetControllerDirection+0x5a>
	{

		uPID->Kp = (0 - uPID->Kp);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001c8c:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001cd8 <PID_SetControllerDirection+0x70>
 8001c90:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001ca0:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001cd8 <PID_SetControllerDirection+0x70>
 8001ca4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001cb4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001cd8 <PID_SetControllerDirection+0x70>
 8001cb8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	78fa      	ldrb	r2, [r7, #3]
 8001cc6:	70da      	strb	r2, [r3, #3]

}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	f3af 8000 	nop.w
	...

08001ce0 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	dd25      	ble.n	8001d3c <PID_SetSampleTime+0x5c>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	ee07 3a90 	vmov	s15, r3
 8001cf6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001d06:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001d0a:	ed87 7b02 	vstr	d7, [r7, #8]

		uPID->Ki *= ratio;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 8001d14:	ed97 7b02 	vldr	d7, [r7, #8]
 8001d18:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		uPID->Kd /= ratio;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 8001d28:	ed97 6b02 	vldr	d6, [r7, #8]
 8001d2c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	609a      	str	r2, [r3, #8]

	}

}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d4c:	2003      	movs	r0, #3
 8001d4e:	f000 f94d 	bl	8001fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d52:	2000      	movs	r0, #0
 8001d54:	f000 f806 	bl	8001d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d58:	f7fe fffe 	bl	8000d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_InitTick+0x54>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <HAL_InitTick+0x58>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	4619      	mov	r1, r3
 8001d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 f967 	bl	8002056 <HAL_SYSTICK_Config>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e00e      	b.n	8001db0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b0f      	cmp	r3, #15
 8001d96:	d80a      	bhi.n	8001dae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001da0:	f000 f92f 	bl	8002002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001da4:	4a06      	ldr	r2, [pc, #24]	; (8001dc0 <HAL_InitTick+0x5c>)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	e000      	b.n	8001db0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	20000048 	.word	0x20000048
 8001dc0:	20000044 	.word	0x20000044

08001dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_IncTick+0x20>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_IncTick+0x24>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <HAL_IncTick+0x24>)
 8001dd6:	6013      	str	r3, [r2, #0]
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	20000048 	.word	0x20000048
 8001de8:	2000084c 	.word	0x2000084c

08001dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return uwTick;
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <HAL_GetTick+0x14>)
 8001df2:	681b      	ldr	r3, [r3, #0]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	2000084c 	.word	0x2000084c

08001e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e0c:	f7ff ffee 	bl	8001dec <HAL_GetTick>
 8001e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1c:	d005      	beq.n	8001e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <HAL_Delay+0x44>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	461a      	mov	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4413      	add	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e2a:	bf00      	nop
 8001e2c:	f7ff ffde 	bl	8001dec <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d8f7      	bhi.n	8001e2c <HAL_Delay+0x28>
  {
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000048 	.word	0x20000048

08001e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <__NVIC_SetPriorityGrouping+0x40>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <__NVIC_SetPriorityGrouping+0x44>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e7a:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <__NVIC_SetPriorityGrouping+0x40>)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	60d3      	str	r3, [r2, #12]
}
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000ed00 	.word	0xe000ed00
 8001e90:	05fa0000 	.word	0x05fa0000

08001e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e98:	4b04      	ldr	r3, [pc, #16]	; (8001eac <__NVIC_GetPriorityGrouping+0x18>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	db0b      	blt.n	8001eda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	f003 021f 	and.w	r2, r3, #31
 8001ec8:	4907      	ldr	r1, [pc, #28]	; (8001ee8 <__NVIC_EnableIRQ+0x38>)
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	095b      	lsrs	r3, r3, #5
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000e100 	.word	0xe000e100

08001eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	db0a      	blt.n	8001f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	490c      	ldr	r1, [pc, #48]	; (8001f38 <__NVIC_SetPriority+0x4c>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	0112      	lsls	r2, r2, #4
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f14:	e00a      	b.n	8001f2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4908      	ldr	r1, [pc, #32]	; (8001f3c <__NVIC_SetPriority+0x50>)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	3b04      	subs	r3, #4
 8001f24:	0112      	lsls	r2, r2, #4
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	440b      	add	r3, r1
 8001f2a:	761a      	strb	r2, [r3, #24]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000e100 	.word	0xe000e100
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	; 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f1c3 0307 	rsb	r3, r3, #7
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	bf28      	it	cs
 8001f5e:	2304      	movcs	r3, #4
 8001f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3304      	adds	r3, #4
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	d902      	bls.n	8001f70 <NVIC_EncodePriority+0x30>
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3b03      	subs	r3, #3
 8001f6e:	e000      	b.n	8001f72 <NVIC_EncodePriority+0x32>
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	f04f 32ff 	mov.w	r2, #4294967295
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	401a      	ands	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f88:	f04f 31ff 	mov.w	r1, #4294967295
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f92:	43d9      	mvns	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f98:	4313      	orrs	r3, r2
         );
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3724      	adds	r7, #36	; 0x24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
	...

08001fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fb8:	d301      	bcc.n	8001fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e00f      	b.n	8001fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <SysTick_Config+0x40>)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fc6:	210f      	movs	r1, #15
 8001fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fcc:	f7ff ff8e 	bl	8001eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <SysTick_Config+0x40>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd6:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <SysTick_Config+0x40>)
 8001fd8:	2207      	movs	r2, #7
 8001fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	e000e010 	.word	0xe000e010

08001fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff ff29 	bl	8001e4c <__NVIC_SetPriorityGrouping>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002002:	b580      	push	{r7, lr}
 8002004:	b086      	sub	sp, #24
 8002006:	af00      	add	r7, sp, #0
 8002008:	4603      	mov	r3, r0
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
 800200e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002014:	f7ff ff3e 	bl	8001e94 <__NVIC_GetPriorityGrouping>
 8002018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	68b9      	ldr	r1, [r7, #8]
 800201e:	6978      	ldr	r0, [r7, #20]
 8002020:	f7ff ff8e 	bl	8001f40 <NVIC_EncodePriority>
 8002024:	4602      	mov	r2, r0
 8002026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff5d 	bl	8001eec <__NVIC_SetPriority>
}
 8002032:	bf00      	nop
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	4603      	mov	r3, r0
 8002042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff ff31 	bl	8001eb0 <__NVIC_EnableIRQ>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff ffa2 	bl	8001fa8 <SysTick_Config>
 8002064:	4603      	mov	r3, r0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800207c:	f7ff feb6 	bl	8001dec <HAL_GetTick>
 8002080:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d008      	beq.n	80020a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2280      	movs	r2, #128	; 0x80
 8002092:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e052      	b.n	8002146 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0216 	bic.w	r2, r2, #22
 80020ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	695a      	ldr	r2, [r3, #20]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d103      	bne.n	80020d0 <HAL_DMA_Abort+0x62>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d007      	beq.n	80020e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0208 	bic.w	r2, r2, #8
 80020de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0201 	bic.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020f0:	e013      	b.n	800211a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020f2:	f7ff fe7b 	bl	8001dec <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b05      	cmp	r3, #5
 80020fe:	d90c      	bls.n	800211a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2220      	movs	r2, #32
 8002104:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2203      	movs	r2, #3
 800210a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e015      	b.n	8002146 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1e4      	bne.n	80020f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212c:	223f      	movs	r2, #63	; 0x3f
 800212e:	409a      	lsls	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d004      	beq.n	800216c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2280      	movs	r2, #128	; 0x80
 8002166:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e00c      	b.n	8002186 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2205      	movs	r2, #5
 8002170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002194:	b480      	push	{r7}
 8002196:	b089      	sub	sp, #36	; 0x24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
 80021b2:	e175      	b.n	80024a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80021b4:	2201      	movs	r2, #1
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	4013      	ands	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	f040 8164 	bne.w	800249a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d005      	beq.n	80021ea <HAL_GPIO_Init+0x56>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d130      	bne.n	800224c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	2203      	movs	r2, #3
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002220:	2201      	movs	r2, #1
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f003 0201 	and.w	r2, r3, #1
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b03      	cmp	r3, #3
 8002256:	d017      	beq.n	8002288 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d123      	bne.n	80022dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	08da      	lsrs	r2, r3, #3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3208      	adds	r2, #8
 800229c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	220f      	movs	r2, #15
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	08da      	lsrs	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3208      	adds	r2, #8
 80022d6:	69b9      	ldr	r1, [r7, #24]
 80022d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	2203      	movs	r2, #3
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 0203 	and.w	r2, r3, #3
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 80be 	beq.w	800249a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231e:	4b66      	ldr	r3, [pc, #408]	; (80024b8 <HAL_GPIO_Init+0x324>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	4a65      	ldr	r2, [pc, #404]	; (80024b8 <HAL_GPIO_Init+0x324>)
 8002324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002328:	6453      	str	r3, [r2, #68]	; 0x44
 800232a:	4b63      	ldr	r3, [pc, #396]	; (80024b8 <HAL_GPIO_Init+0x324>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002336:	4a61      	ldr	r2, [pc, #388]	; (80024bc <HAL_GPIO_Init+0x328>)
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	3302      	adds	r3, #2
 800233e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	220f      	movs	r2, #15
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a58      	ldr	r2, [pc, #352]	; (80024c0 <HAL_GPIO_Init+0x32c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d037      	beq.n	80023d2 <HAL_GPIO_Init+0x23e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a57      	ldr	r2, [pc, #348]	; (80024c4 <HAL_GPIO_Init+0x330>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d031      	beq.n	80023ce <HAL_GPIO_Init+0x23a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a56      	ldr	r2, [pc, #344]	; (80024c8 <HAL_GPIO_Init+0x334>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d02b      	beq.n	80023ca <HAL_GPIO_Init+0x236>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a55      	ldr	r2, [pc, #340]	; (80024cc <HAL_GPIO_Init+0x338>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d025      	beq.n	80023c6 <HAL_GPIO_Init+0x232>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a54      	ldr	r2, [pc, #336]	; (80024d0 <HAL_GPIO_Init+0x33c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d01f      	beq.n	80023c2 <HAL_GPIO_Init+0x22e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a53      	ldr	r2, [pc, #332]	; (80024d4 <HAL_GPIO_Init+0x340>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d019      	beq.n	80023be <HAL_GPIO_Init+0x22a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a52      	ldr	r2, [pc, #328]	; (80024d8 <HAL_GPIO_Init+0x344>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d013      	beq.n	80023ba <HAL_GPIO_Init+0x226>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a51      	ldr	r2, [pc, #324]	; (80024dc <HAL_GPIO_Init+0x348>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d00d      	beq.n	80023b6 <HAL_GPIO_Init+0x222>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a50      	ldr	r2, [pc, #320]	; (80024e0 <HAL_GPIO_Init+0x34c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d007      	beq.n	80023b2 <HAL_GPIO_Init+0x21e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a4f      	ldr	r2, [pc, #316]	; (80024e4 <HAL_GPIO_Init+0x350>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d101      	bne.n	80023ae <HAL_GPIO_Init+0x21a>
 80023aa:	2309      	movs	r3, #9
 80023ac:	e012      	b.n	80023d4 <HAL_GPIO_Init+0x240>
 80023ae:	230a      	movs	r3, #10
 80023b0:	e010      	b.n	80023d4 <HAL_GPIO_Init+0x240>
 80023b2:	2308      	movs	r3, #8
 80023b4:	e00e      	b.n	80023d4 <HAL_GPIO_Init+0x240>
 80023b6:	2307      	movs	r3, #7
 80023b8:	e00c      	b.n	80023d4 <HAL_GPIO_Init+0x240>
 80023ba:	2306      	movs	r3, #6
 80023bc:	e00a      	b.n	80023d4 <HAL_GPIO_Init+0x240>
 80023be:	2305      	movs	r3, #5
 80023c0:	e008      	b.n	80023d4 <HAL_GPIO_Init+0x240>
 80023c2:	2304      	movs	r3, #4
 80023c4:	e006      	b.n	80023d4 <HAL_GPIO_Init+0x240>
 80023c6:	2303      	movs	r3, #3
 80023c8:	e004      	b.n	80023d4 <HAL_GPIO_Init+0x240>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e002      	b.n	80023d4 <HAL_GPIO_Init+0x240>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <HAL_GPIO_Init+0x240>
 80023d2:	2300      	movs	r3, #0
 80023d4:	69fa      	ldr	r2, [r7, #28]
 80023d6:	f002 0203 	and.w	r2, r2, #3
 80023da:	0092      	lsls	r2, r2, #2
 80023dc:	4093      	lsls	r3, r2
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80023e4:	4935      	ldr	r1, [pc, #212]	; (80024bc <HAL_GPIO_Init+0x328>)
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	089b      	lsrs	r3, r3, #2
 80023ea:	3302      	adds	r3, #2
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023f2:	4b3d      	ldr	r3, [pc, #244]	; (80024e8 <HAL_GPIO_Init+0x354>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4013      	ands	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002416:	4a34      	ldr	r2, [pc, #208]	; (80024e8 <HAL_GPIO_Init+0x354>)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800241c:	4b32      	ldr	r3, [pc, #200]	; (80024e8 <HAL_GPIO_Init+0x354>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002440:	4a29      	ldr	r2, [pc, #164]	; (80024e8 <HAL_GPIO_Init+0x354>)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002446:	4b28      	ldr	r3, [pc, #160]	; (80024e8 <HAL_GPIO_Init+0x354>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800246a:	4a1f      	ldr	r2, [pc, #124]	; (80024e8 <HAL_GPIO_Init+0x354>)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002470:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <HAL_GPIO_Init+0x354>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002494:	4a14      	ldr	r2, [pc, #80]	; (80024e8 <HAL_GPIO_Init+0x354>)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3301      	adds	r3, #1
 800249e:	61fb      	str	r3, [r7, #28]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	2b0f      	cmp	r3, #15
 80024a4:	f67f ae86 	bls.w	80021b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	3724      	adds	r7, #36	; 0x24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40013800 	.word	0x40013800
 80024c0:	40020000 	.word	0x40020000
 80024c4:	40020400 	.word	0x40020400
 80024c8:	40020800 	.word	0x40020800
 80024cc:	40020c00 	.word	0x40020c00
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40021400 	.word	0x40021400
 80024d8:	40021800 	.word	0x40021800
 80024dc:	40021c00 	.word	0x40021c00
 80024e0:	40022000 	.word	0x40022000
 80024e4:	40022400 	.word	0x40022400
 80024e8:	40013c00 	.word	0x40013c00

080024ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	807b      	strh	r3, [r7, #2]
 80024f8:	4613      	mov	r3, r2
 80024fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024fc:	787b      	ldrb	r3, [r7, #1]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002502:	887a      	ldrh	r2, [r7, #2]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002508:	e003      	b.n	8002512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800250a:	887b      	ldrh	r3, [r7, #2]
 800250c:	041a      	lsls	r2, r3, #16
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	619a      	str	r2, [r3, #24]
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800252c:	695a      	ldr	r2, [r3, #20]
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	4013      	ands	r3, r2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d006      	beq.n	8002544 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002536:	4a05      	ldr	r2, [pc, #20]	; (800254c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f806 	bl	8002550 <HAL_GPIO_EXTI_Callback>
  }
}
 8002544:	bf00      	nop
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40013c00 	.word	0x40013c00

08002550 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e07f      	b.n	800267a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d106      	bne.n	8002594 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7fe f9aa 	bl	80008e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2224      	movs	r2, #36	; 0x24
 8002598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d107      	bne.n	80025e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	e006      	b.n	80025f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80025ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d104      	bne.n	8002602 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002600:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <HAL_I2C_Init+0x11c>)
 800260e:	430b      	orrs	r3, r1
 8002610:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002620:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691a      	ldr	r2, [r3, #16]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	69d9      	ldr	r1, [r3, #28]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1a      	ldr	r2, [r3, #32]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0201 	orr.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2220      	movs	r2, #32
 8002666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	02008000 	.word	0x02008000

08002688 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af02      	add	r7, sp, #8
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	461a      	mov	r2, r3
 8002694:	460b      	mov	r3, r1
 8002696:	817b      	strh	r3, [r7, #10]
 8002698:	4613      	mov	r3, r2
 800269a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b20      	cmp	r3, #32
 80026a6:	f040 80da 	bne.w	800285e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_I2C_Master_Transmit+0x30>
 80026b4:	2302      	movs	r3, #2
 80026b6:	e0d3      	b.n	8002860 <HAL_I2C_Master_Transmit+0x1d8>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026c0:	f7ff fb94 	bl	8001dec <HAL_GetTick>
 80026c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	2319      	movs	r3, #25
 80026cc:	2201      	movs	r2, #1
 80026ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 f9e6 	bl	8002aa4 <I2C_WaitOnFlagUntilTimeout>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e0be      	b.n	8002860 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2221      	movs	r2, #33	; 0x21
 80026e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2210      	movs	r2, #16
 80026ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	893a      	ldrh	r2, [r7, #8]
 8002702:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270e:	b29b      	uxth	r3, r3
 8002710:	2bff      	cmp	r3, #255	; 0xff
 8002712:	d90e      	bls.n	8002732 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	22ff      	movs	r2, #255	; 0xff
 8002718:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271e:	b2da      	uxtb	r2, r3
 8002720:	8979      	ldrh	r1, [r7, #10]
 8002722:	4b51      	ldr	r3, [pc, #324]	; (8002868 <HAL_I2C_Master_Transmit+0x1e0>)
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 fbd0 	bl	8002ed0 <I2C_TransferConfig>
 8002730:	e06c      	b.n	800280c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002736:	b29a      	uxth	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002740:	b2da      	uxtb	r2, r3
 8002742:	8979      	ldrh	r1, [r7, #10]
 8002744:	4b48      	ldr	r3, [pc, #288]	; (8002868 <HAL_I2C_Master_Transmit+0x1e0>)
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 fbbf 	bl	8002ed0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002752:	e05b      	b.n	800280c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	6a39      	ldr	r1, [r7, #32]
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 f9e3 	bl	8002b24 <I2C_WaitOnTXISFlagUntilTimeout>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e07b      	b.n	8002860 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	781a      	ldrb	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002790:	3b01      	subs	r3, #1
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279c:	b29b      	uxth	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d034      	beq.n	800280c <HAL_I2C_Master_Transmit+0x184>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d130      	bne.n	800280c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	2200      	movs	r2, #0
 80027b2:	2180      	movs	r1, #128	; 0x80
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 f975 	bl	8002aa4 <I2C_WaitOnFlagUntilTimeout>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e04d      	b.n	8002860 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2bff      	cmp	r3, #255	; 0xff
 80027cc:	d90e      	bls.n	80027ec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	22ff      	movs	r2, #255	; 0xff
 80027d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	8979      	ldrh	r1, [r7, #10]
 80027dc:	2300      	movs	r3, #0
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 fb73 	bl	8002ed0 <I2C_TransferConfig>
 80027ea:	e00f      	b.n	800280c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	8979      	ldrh	r1, [r7, #10]
 80027fe:	2300      	movs	r3, #0
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 fb62 	bl	8002ed0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002810:	b29b      	uxth	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d19e      	bne.n	8002754 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	6a39      	ldr	r1, [r7, #32]
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f9c2 	bl	8002ba4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e01a      	b.n	8002860 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2220      	movs	r2, #32
 8002830:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6859      	ldr	r1, [r3, #4]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <HAL_I2C_Master_Transmit+0x1e4>)
 800283e:	400b      	ands	r3, r1
 8002840:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	e000      	b.n	8002860 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800285e:	2302      	movs	r3, #2
  }
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	80002000 	.word	0x80002000
 800286c:	fe00e800 	.word	0xfe00e800

08002870 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af02      	add	r7, sp, #8
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	607a      	str	r2, [r7, #4]
 800287a:	461a      	mov	r2, r3
 800287c:	460b      	mov	r3, r1
 800287e:	817b      	strh	r3, [r7, #10]
 8002880:	4613      	mov	r3, r2
 8002882:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b20      	cmp	r3, #32
 800288e:	f040 80db 	bne.w	8002a48 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_I2C_Master_Receive+0x30>
 800289c:	2302      	movs	r3, #2
 800289e:	e0d4      	b.n	8002a4a <HAL_I2C_Master_Receive+0x1da>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028a8:	f7ff faa0 	bl	8001dec <HAL_GetTick>
 80028ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	2319      	movs	r3, #25
 80028b4:	2201      	movs	r2, #1
 80028b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 f8f2 	bl	8002aa4 <I2C_WaitOnFlagUntilTimeout>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e0bf      	b.n	8002a4a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2222      	movs	r2, #34	; 0x22
 80028ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2210      	movs	r2, #16
 80028d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	893a      	ldrh	r2, [r7, #8]
 80028ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2bff      	cmp	r3, #255	; 0xff
 80028fa:	d90e      	bls.n	800291a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	22ff      	movs	r2, #255	; 0xff
 8002900:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002906:	b2da      	uxtb	r2, r3
 8002908:	8979      	ldrh	r1, [r7, #10]
 800290a:	4b52      	ldr	r3, [pc, #328]	; (8002a54 <HAL_I2C_Master_Receive+0x1e4>)
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 fadc 	bl	8002ed0 <I2C_TransferConfig>
 8002918:	e06d      	b.n	80029f6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291e:	b29a      	uxth	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002928:	b2da      	uxtb	r2, r3
 800292a:	8979      	ldrh	r1, [r7, #10]
 800292c:	4b49      	ldr	r3, [pc, #292]	; (8002a54 <HAL_I2C_Master_Receive+0x1e4>)
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 facb 	bl	8002ed0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800293a:	e05c      	b.n	80029f6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	6a39      	ldr	r1, [r7, #32]
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 f96b 	bl	8002c1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e07c      	b.n	8002a4a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296c:	3b01      	subs	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002978:	b29b      	uxth	r3, r3
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002986:	b29b      	uxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d034      	beq.n	80029f6 <HAL_I2C_Master_Receive+0x186>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002990:	2b00      	cmp	r3, #0
 8002992:	d130      	bne.n	80029f6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	2200      	movs	r2, #0
 800299c:	2180      	movs	r1, #128	; 0x80
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f880 	bl	8002aa4 <I2C_WaitOnFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e04d      	b.n	8002a4a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	2bff      	cmp	r3, #255	; 0xff
 80029b6:	d90e      	bls.n	80029d6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	22ff      	movs	r2, #255	; 0xff
 80029bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	8979      	ldrh	r1, [r7, #10]
 80029c6:	2300      	movs	r3, #0
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 fa7e 	bl	8002ed0 <I2C_TransferConfig>
 80029d4:	e00f      	b.n	80029f6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	8979      	ldrh	r1, [r7, #10]
 80029e8:	2300      	movs	r3, #0
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 fa6d 	bl	8002ed0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d19d      	bne.n	800293c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	6a39      	ldr	r1, [r7, #32]
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f8cd 	bl	8002ba4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e01a      	b.n	8002a4a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6859      	ldr	r1, [r3, #4]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <HAL_I2C_Master_Receive+0x1e8>)
 8002a28:	400b      	ands	r3, r1
 8002a2a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	e000      	b.n	8002a4a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002a48:	2302      	movs	r3, #2
  }
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	80002400 	.word	0x80002400
 8002a58:	fe00e800 	.word	0xfe00e800

08002a5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d103      	bne.n	8002a7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2200      	movs	r2, #0
 8002a78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d007      	beq.n	8002a98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0201 	orr.w	r2, r2, #1
 8002a96:	619a      	str	r2, [r3, #24]
  }
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ab4:	e022      	b.n	8002afc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abc:	d01e      	beq.n	8002afc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002abe:	f7ff f995 	bl	8001dec <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d302      	bcc.n	8002ad4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d113      	bne.n	8002afc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad8:	f043 0220 	orr.w	r2, r3, #32
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e00f      	b.n	8002b1c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	4013      	ands	r3, r2
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	bf0c      	ite	eq
 8002b0c:	2301      	moveq	r3, #1
 8002b0e:	2300      	movne	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	461a      	mov	r2, r3
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d0cd      	beq.n	8002ab6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b30:	e02c      	b.n	8002b8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 f8ea 	bl	8002d10 <I2C_IsErrorOccurred>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e02a      	b.n	8002b9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4c:	d01e      	beq.n	8002b8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b4e:	f7ff f94d 	bl	8001dec <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d302      	bcc.n	8002b64 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d113      	bne.n	8002b8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b68:	f043 0220 	orr.w	r2, r3, #32
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e007      	b.n	8002b9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d1cb      	bne.n	8002b32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bb0:	e028      	b.n	8002c04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f8aa 	bl	8002d10 <I2C_IsErrorOccurred>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e026      	b.n	8002c14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc6:	f7ff f911 	bl	8001dec <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d302      	bcc.n	8002bdc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d113      	bne.n	8002c04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be0:	f043 0220 	orr.w	r2, r3, #32
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e007      	b.n	8002c14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f003 0320 	and.w	r3, r3, #32
 8002c0e:	2b20      	cmp	r3, #32
 8002c10:	d1cf      	bne.n	8002bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c28:	e064      	b.n	8002cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	68b9      	ldr	r1, [r7, #8]
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 f86e 	bl	8002d10 <I2C_IsErrorOccurred>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e062      	b.n	8002d04 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b20      	cmp	r3, #32
 8002c4a:	d138      	bne.n	8002cbe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d105      	bne.n	8002c66 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	e04e      	b.n	8002d04 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b10      	cmp	r3, #16
 8002c72:	d107      	bne.n	8002c84 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2210      	movs	r2, #16
 8002c7a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2204      	movs	r2, #4
 8002c80:	645a      	str	r2, [r3, #68]	; 0x44
 8002c82:	e002      	b.n	8002c8a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6859      	ldr	r1, [r3, #4]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002c9e:	400b      	ands	r3, r1
 8002ca0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e022      	b.n	8002d04 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cbe:	f7ff f895 	bl	8001dec <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d302      	bcc.n	8002cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10f      	bne.n	8002cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd8:	f043 0220 	orr.w	r2, r3, #32
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e007      	b.n	8002d04 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d193      	bne.n	8002c2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	fe00e800 	.word	0xfe00e800

08002d10 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08a      	sub	sp, #40	; 0x28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d068      	beq.n	8002e0e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2210      	movs	r2, #16
 8002d42:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d44:	e049      	b.n	8002dda <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4c:	d045      	beq.n	8002dda <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d4e:	f7ff f84d 	bl	8001dec <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d302      	bcc.n	8002d64 <I2C_IsErrorOccurred+0x54>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d13a      	bne.n	8002dda <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d6e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d76:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d86:	d121      	bne.n	8002dcc <I2C_IsErrorOccurred+0xbc>
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d8e:	d01d      	beq.n	8002dcc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002d90:	7cfb      	ldrb	r3, [r7, #19]
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	d01a      	beq.n	8002dcc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002da4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002da6:	f7ff f821 	bl	8001dec <HAL_GetTick>
 8002daa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dac:	e00e      	b.n	8002dcc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002dae:	f7ff f81d 	bl	8001dec <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b19      	cmp	r3, #25
 8002dba:	d907      	bls.n	8002dcc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	f043 0320 	orr.w	r3, r3, #32
 8002dc2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002dca:	e006      	b.n	8002dda <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f003 0320 	and.w	r3, r3, #32
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	d1e9      	bne.n	8002dae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	d003      	beq.n	8002df0 <I2C_IsErrorOccurred+0xe0>
 8002de8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0aa      	beq.n	8002d46 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d103      	bne.n	8002e00 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	f043 0304 	orr.w	r3, r3, #4
 8002e06:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00b      	beq.n	8002e38 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00b      	beq.n	8002e5a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	f043 0308 	orr.w	r3, r3, #8
 8002e48:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00b      	beq.n	8002e7c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	f043 0302 	orr.w	r3, r3, #2
 8002e6a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d01c      	beq.n	8002ebe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f7ff fde9 	bl	8002a5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6859      	ldr	r1, [r3, #4]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <I2C_IsErrorOccurred+0x1bc>)
 8002e96:	400b      	ands	r3, r1
 8002e98:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002ebe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3728      	adds	r7, #40	; 0x28
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	fe00e800 	.word	0xfe00e800

08002ed0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	607b      	str	r3, [r7, #4]
 8002eda:	460b      	mov	r3, r1
 8002edc:	817b      	strh	r3, [r7, #10]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ee2:	897b      	ldrh	r3, [r7, #10]
 8002ee4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ee8:	7a7b      	ldrb	r3, [r7, #9]
 8002eea:	041b      	lsls	r3, r3, #16
 8002eec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ef0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002efe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	0d5b      	lsrs	r3, r3, #21
 8002f0a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002f0e:	4b08      	ldr	r3, [pc, #32]	; (8002f30 <I2C_TransferConfig+0x60>)
 8002f10:	430b      	orrs	r3, r1
 8002f12:	43db      	mvns	r3, r3
 8002f14:	ea02 0103 	and.w	r1, r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f22:	bf00      	nop
 8002f24:	371c      	adds	r7, #28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	03ff63ff 	.word	0x03ff63ff

08002f34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b20      	cmp	r3, #32
 8002f48:	d138      	bne.n	8002fbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e032      	b.n	8002fbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2224      	movs	r2, #36	; 0x24
 8002f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0201 	bic.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6819      	ldr	r1, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	e000      	b.n	8002fbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fbc:	2302      	movs	r3, #2
  }
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b085      	sub	sp, #20
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	d139      	bne.n	8003054 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e033      	b.n	8003056 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2224      	movs	r2, #36	; 0x24
 8002ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0201 	bic.w	r2, r2, #1
 800300c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800301c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4313      	orrs	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0201 	orr.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	e000      	b.n	8003056 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003054:	2302      	movs	r3, #2
  }
}
 8003056:	4618      	mov	r0, r3
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003062:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003064:	b08f      	sub	sp, #60	; 0x3c
 8003066:	af0a      	add	r7, sp, #40	; 0x28
 8003068:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e116      	b.n	80032a2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fe f946 	bl	8001320 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2203      	movs	r2, #3
 8003098:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d102      	bne.n	80030ae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f004 f8ce 	bl	8007254 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	687e      	ldr	r6, [r7, #4]
 80030c0:	466d      	mov	r5, sp
 80030c2:	f106 0410 	add.w	r4, r6, #16
 80030c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80030d6:	1d33      	adds	r3, r6, #4
 80030d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030da:	6838      	ldr	r0, [r7, #0]
 80030dc:	f004 f862 	bl	80071a4 <USB_CoreInit>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d005      	beq.n	80030f2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2202      	movs	r2, #2
 80030ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e0d7      	b.n	80032a2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2100      	movs	r1, #0
 80030f8:	4618      	mov	r0, r3
 80030fa:	f004 f8bc 	bl	8007276 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030fe:	2300      	movs	r3, #0
 8003100:	73fb      	strb	r3, [r7, #15]
 8003102:	e04a      	b.n	800319a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003104:	7bfa      	ldrb	r2, [r7, #15]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	333d      	adds	r3, #61	; 0x3d
 8003114:	2201      	movs	r2, #1
 8003116:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003118:	7bfa      	ldrb	r2, [r7, #15]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	333c      	adds	r3, #60	; 0x3c
 8003128:	7bfa      	ldrb	r2, [r7, #15]
 800312a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800312c:	7bfa      	ldrb	r2, [r7, #15]
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	b298      	uxth	r0, r3
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4413      	add	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	3344      	adds	r3, #68	; 0x44
 8003140:	4602      	mov	r2, r0
 8003142:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003144:	7bfa      	ldrb	r2, [r7, #15]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	4413      	add	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	3340      	adds	r3, #64	; 0x40
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003158:	7bfa      	ldrb	r2, [r7, #15]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	3348      	adds	r3, #72	; 0x48
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800316c:	7bfa      	ldrb	r2, [r7, #15]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	334c      	adds	r3, #76	; 0x4c
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003180:	7bfa      	ldrb	r2, [r7, #15]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	3354      	adds	r3, #84	; 0x54
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	3301      	adds	r3, #1
 8003198:	73fb      	strb	r3, [r7, #15]
 800319a:	7bfa      	ldrb	r2, [r7, #15]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d3af      	bcc.n	8003104 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a4:	2300      	movs	r3, #0
 80031a6:	73fb      	strb	r3, [r7, #15]
 80031a8:	e044      	b.n	8003234 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031aa:	7bfa      	ldrb	r2, [r7, #15]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4413      	add	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031c0:	7bfa      	ldrb	r2, [r7, #15]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80031d2:	7bfa      	ldrb	r2, [r7, #15]
 80031d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031d6:	7bfa      	ldrb	r2, [r7, #15]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	4413      	add	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80031e8:	2200      	movs	r2, #0
 80031ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031ec:	7bfa      	ldrb	r2, [r7, #15]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003202:	7bfa      	ldrb	r2, [r7, #15]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003218:	7bfa      	ldrb	r2, [r7, #15]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	4413      	add	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800322e:	7bfb      	ldrb	r3, [r7, #15]
 8003230:	3301      	adds	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
 8003234:	7bfa      	ldrb	r2, [r7, #15]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	429a      	cmp	r2, r3
 800323c:	d3b5      	bcc.n	80031aa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	603b      	str	r3, [r7, #0]
 8003244:	687e      	ldr	r6, [r7, #4]
 8003246:	466d      	mov	r5, sp
 8003248:	f106 0410 	add.w	r4, r6, #16
 800324c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800324e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003250:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003252:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003254:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003258:	e885 0003 	stmia.w	r5, {r0, r1}
 800325c:	1d33      	adds	r3, r6, #4
 800325e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003260:	6838      	ldr	r0, [r7, #0]
 8003262:	f004 f855 	bl	8007310 <USB_DevInit>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e014      	b.n	80032a2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	2b01      	cmp	r3, #1
 800328e:	d102      	bne.n	8003296 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f80b 	bl	80032ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f004 fa13 	bl	80076c6 <USB_DevDisconnect>

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080032ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032da:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <HAL_PCDEx_ActivateLPM+0x44>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	10000003 	.word	0x10000003

080032f4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032f8:	4b05      	ldr	r3, [pc, #20]	; (8003310 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a04      	ldr	r2, [pc, #16]	; (8003310 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003302:	6013      	str	r3, [r2, #0]
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40007000 	.word	0x40007000

08003314 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800331a:	2300      	movs	r3, #0
 800331c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800331e:	4b23      	ldr	r3, [pc, #140]	; (80033ac <HAL_PWREx_EnableOverDrive+0x98>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	4a22      	ldr	r2, [pc, #136]	; (80033ac <HAL_PWREx_EnableOverDrive+0x98>)
 8003324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003328:	6413      	str	r3, [r2, #64]	; 0x40
 800332a:	4b20      	ldr	r3, [pc, #128]	; (80033ac <HAL_PWREx_EnableOverDrive+0x98>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003336:	4b1e      	ldr	r3, [pc, #120]	; (80033b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1d      	ldr	r2, [pc, #116]	; (80033b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800333c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003340:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003342:	f7fe fd53 	bl	8001dec <HAL_GetTick>
 8003346:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003348:	e009      	b.n	800335e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800334a:	f7fe fd4f 	bl	8001dec <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003358:	d901      	bls.n	800335e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e022      	b.n	80033a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800335e:	4b14      	ldr	r3, [pc, #80]	; (80033b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336a:	d1ee      	bne.n	800334a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800336c:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a0f      	ldr	r2, [pc, #60]	; (80033b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003376:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003378:	f7fe fd38 	bl	8001dec <HAL_GetTick>
 800337c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800337e:	e009      	b.n	8003394 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003380:	f7fe fd34 	bl	8001dec <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800338e:	d901      	bls.n	8003394 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e007      	b.n	80033a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033a0:	d1ee      	bne.n	8003380 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40007000 	.word	0x40007000

080033b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80033bc:	2300      	movs	r3, #0
 80033be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e29b      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 8087 	beq.w	80034e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033d8:	4b96      	ldr	r3, [pc, #600]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 030c 	and.w	r3, r3, #12
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d00c      	beq.n	80033fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033e4:	4b93      	ldr	r3, [pc, #588]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 030c 	and.w	r3, r3, #12
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d112      	bne.n	8003416 <HAL_RCC_OscConfig+0x62>
 80033f0:	4b90      	ldr	r3, [pc, #576]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033fc:	d10b      	bne.n	8003416 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fe:	4b8d      	ldr	r3, [pc, #564]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d06c      	beq.n	80034e4 <HAL_RCC_OscConfig+0x130>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d168      	bne.n	80034e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e275      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800341e:	d106      	bne.n	800342e <HAL_RCC_OscConfig+0x7a>
 8003420:	4b84      	ldr	r3, [pc, #528]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a83      	ldr	r2, [pc, #524]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	e02e      	b.n	800348c <HAL_RCC_OscConfig+0xd8>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10c      	bne.n	8003450 <HAL_RCC_OscConfig+0x9c>
 8003436:	4b7f      	ldr	r3, [pc, #508]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a7e      	ldr	r2, [pc, #504]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800343c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	4b7c      	ldr	r3, [pc, #496]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a7b      	ldr	r2, [pc, #492]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003448:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	e01d      	b.n	800348c <HAL_RCC_OscConfig+0xd8>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003458:	d10c      	bne.n	8003474 <HAL_RCC_OscConfig+0xc0>
 800345a:	4b76      	ldr	r3, [pc, #472]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a75      	ldr	r2, [pc, #468]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	4b73      	ldr	r3, [pc, #460]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a72      	ldr	r2, [pc, #456]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800346c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	e00b      	b.n	800348c <HAL_RCC_OscConfig+0xd8>
 8003474:	4b6f      	ldr	r3, [pc, #444]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a6e      	ldr	r2, [pc, #440]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800347a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	4b6c      	ldr	r3, [pc, #432]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a6b      	ldr	r2, [pc, #428]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800348a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d013      	beq.n	80034bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003494:	f7fe fcaa 	bl	8001dec <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800349c:	f7fe fca6 	bl	8001dec <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b64      	cmp	r3, #100	; 0x64
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e229      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ae:	4b61      	ldr	r3, [pc, #388]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0xe8>
 80034ba:	e014      	b.n	80034e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034bc:	f7fe fc96 	bl	8001dec <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c4:	f7fe fc92 	bl	8001dec <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b64      	cmp	r3, #100	; 0x64
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e215      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d6:	4b57      	ldr	r3, [pc, #348]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f0      	bne.n	80034c4 <HAL_RCC_OscConfig+0x110>
 80034e2:	e000      	b.n	80034e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d069      	beq.n	80035c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034f2:	4b50      	ldr	r3, [pc, #320]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00b      	beq.n	8003516 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034fe:	4b4d      	ldr	r3, [pc, #308]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b08      	cmp	r3, #8
 8003508:	d11c      	bne.n	8003544 <HAL_RCC_OscConfig+0x190>
 800350a:	4b4a      	ldr	r3, [pc, #296]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d116      	bne.n	8003544 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003516:	4b47      	ldr	r3, [pc, #284]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d005      	beq.n	800352e <HAL_RCC_OscConfig+0x17a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d001      	beq.n	800352e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e1e9      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352e:	4b41      	ldr	r3, [pc, #260]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	493d      	ldr	r1, [pc, #244]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003542:	e040      	b.n	80035c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d023      	beq.n	8003594 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800354c:	4b39      	ldr	r3, [pc, #228]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a38      	ldr	r2, [pc, #224]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003558:	f7fe fc48 	bl	8001dec <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003560:	f7fe fc44 	bl	8001dec <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e1c7      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003572:	4b30      	ldr	r3, [pc, #192]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f0      	beq.n	8003560 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357e:	4b2d      	ldr	r3, [pc, #180]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4929      	ldr	r1, [pc, #164]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]
 8003592:	e018      	b.n	80035c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003594:	4b27      	ldr	r3, [pc, #156]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a26      	ldr	r2, [pc, #152]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800359a:	f023 0301 	bic.w	r3, r3, #1
 800359e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fe fc24 	bl	8001dec <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035a8:	f7fe fc20 	bl	8001dec <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e1a3      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ba:	4b1e      	ldr	r3, [pc, #120]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d038      	beq.n	8003644 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d019      	beq.n	800360e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035da:	4b16      	ldr	r3, [pc, #88]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80035dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035de:	4a15      	ldr	r2, [pc, #84]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e6:	f7fe fc01 	bl	8001dec <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ee:	f7fe fbfd 	bl	8001dec <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e180      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003600:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x23a>
 800360c:	e01a      	b.n	8003644 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800360e:	4b09      	ldr	r3, [pc, #36]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003612:	4a08      	ldr	r2, [pc, #32]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003614:	f023 0301 	bic.w	r3, r3, #1
 8003618:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361a:	f7fe fbe7 	bl	8001dec <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003620:	e00a      	b.n	8003638 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003622:	f7fe fbe3 	bl	8001dec <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d903      	bls.n	8003638 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e166      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
 8003634:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003638:	4b92      	ldr	r3, [pc, #584]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 800363a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1ee      	bne.n	8003622 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 80a4 	beq.w	800379a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003652:	4b8c      	ldr	r3, [pc, #560]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10d      	bne.n	800367a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800365e:	4b89      	ldr	r3, [pc, #548]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	4a88      	ldr	r2, [pc, #544]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003668:	6413      	str	r3, [r2, #64]	; 0x40
 800366a:	4b86      	ldr	r3, [pc, #536]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003676:	2301      	movs	r3, #1
 8003678:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800367a:	4b83      	ldr	r3, [pc, #524]	; (8003888 <HAL_RCC_OscConfig+0x4d4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003682:	2b00      	cmp	r3, #0
 8003684:	d118      	bne.n	80036b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003686:	4b80      	ldr	r3, [pc, #512]	; (8003888 <HAL_RCC_OscConfig+0x4d4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a7f      	ldr	r2, [pc, #508]	; (8003888 <HAL_RCC_OscConfig+0x4d4>)
 800368c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003692:	f7fe fbab 	bl	8001dec <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369a:	f7fe fba7 	bl	8001dec <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b64      	cmp	r3, #100	; 0x64
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e12a      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ac:	4b76      	ldr	r3, [pc, #472]	; (8003888 <HAL_RCC_OscConfig+0x4d4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0f0      	beq.n	800369a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d106      	bne.n	80036ce <HAL_RCC_OscConfig+0x31a>
 80036c0:	4b70      	ldr	r3, [pc, #448]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	4a6f      	ldr	r2, [pc, #444]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	6713      	str	r3, [r2, #112]	; 0x70
 80036cc:	e02d      	b.n	800372a <HAL_RCC_OscConfig+0x376>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10c      	bne.n	80036f0 <HAL_RCC_OscConfig+0x33c>
 80036d6:	4b6b      	ldr	r3, [pc, #428]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	4a6a      	ldr	r2, [pc, #424]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80036dc:	f023 0301 	bic.w	r3, r3, #1
 80036e0:	6713      	str	r3, [r2, #112]	; 0x70
 80036e2:	4b68      	ldr	r3, [pc, #416]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	4a67      	ldr	r2, [pc, #412]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80036e8:	f023 0304 	bic.w	r3, r3, #4
 80036ec:	6713      	str	r3, [r2, #112]	; 0x70
 80036ee:	e01c      	b.n	800372a <HAL_RCC_OscConfig+0x376>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2b05      	cmp	r3, #5
 80036f6:	d10c      	bne.n	8003712 <HAL_RCC_OscConfig+0x35e>
 80036f8:	4b62      	ldr	r3, [pc, #392]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80036fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fc:	4a61      	ldr	r2, [pc, #388]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80036fe:	f043 0304 	orr.w	r3, r3, #4
 8003702:	6713      	str	r3, [r2, #112]	; 0x70
 8003704:	4b5f      	ldr	r3, [pc, #380]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003708:	4a5e      	ldr	r2, [pc, #376]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	6713      	str	r3, [r2, #112]	; 0x70
 8003710:	e00b      	b.n	800372a <HAL_RCC_OscConfig+0x376>
 8003712:	4b5c      	ldr	r3, [pc, #368]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003716:	4a5b      	ldr	r2, [pc, #364]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003718:	f023 0301 	bic.w	r3, r3, #1
 800371c:	6713      	str	r3, [r2, #112]	; 0x70
 800371e:	4b59      	ldr	r3, [pc, #356]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003722:	4a58      	ldr	r2, [pc, #352]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003724:	f023 0304 	bic.w	r3, r3, #4
 8003728:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d015      	beq.n	800375e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003732:	f7fe fb5b 	bl	8001dec <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003738:	e00a      	b.n	8003750 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373a:	f7fe fb57 	bl	8001dec <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	f241 3288 	movw	r2, #5000	; 0x1388
 8003748:	4293      	cmp	r3, r2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e0d8      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003750:	4b4c      	ldr	r3, [pc, #304]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0ee      	beq.n	800373a <HAL_RCC_OscConfig+0x386>
 800375c:	e014      	b.n	8003788 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375e:	f7fe fb45 	bl	8001dec <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003764:	e00a      	b.n	800377c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003766:	f7fe fb41 	bl	8001dec <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	f241 3288 	movw	r2, #5000	; 0x1388
 8003774:	4293      	cmp	r3, r2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e0c2      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800377c:	4b41      	ldr	r3, [pc, #260]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1ee      	bne.n	8003766 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003788:	7dfb      	ldrb	r3, [r7, #23]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d105      	bne.n	800379a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800378e:	4b3d      	ldr	r3, [pc, #244]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	4a3c      	ldr	r2, [pc, #240]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003798:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 80ae 	beq.w	8003900 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037a4:	4b37      	ldr	r3, [pc, #220]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 030c 	and.w	r3, r3, #12
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d06d      	beq.n	800388c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d14b      	bne.n	8003850 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b8:	4b32      	ldr	r3, [pc, #200]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a31      	ldr	r2, [pc, #196]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80037be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c4:	f7fe fb12 	bl	8001dec <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037cc:	f7fe fb0e 	bl	8001dec <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e091      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037de:	4b29      	ldr	r3, [pc, #164]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69da      	ldr	r2, [r3, #28]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	019b      	lsls	r3, r3, #6
 80037fa:	431a      	orrs	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	085b      	lsrs	r3, r3, #1
 8003802:	3b01      	subs	r3, #1
 8003804:	041b      	lsls	r3, r3, #16
 8003806:	431a      	orrs	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	061b      	lsls	r3, r3, #24
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003814:	071b      	lsls	r3, r3, #28
 8003816:	491b      	ldr	r1, [pc, #108]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003818:	4313      	orrs	r3, r2
 800381a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800381c:	4b19      	ldr	r3, [pc, #100]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a18      	ldr	r2, [pc, #96]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fe fae0 	bl	8001dec <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003830:	f7fe fadc 	bl	8001dec <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e05f      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003842:	4b10      	ldr	r3, [pc, #64]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f0      	beq.n	8003830 <HAL_RCC_OscConfig+0x47c>
 800384e:	e057      	b.n	8003900 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003850:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a0b      	ldr	r2, [pc, #44]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800385a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fe fac6 	bl	8001dec <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003864:	f7fe fac2 	bl	8001dec <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e045      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003876:	4b03      	ldr	r3, [pc, #12]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0x4b0>
 8003882:	e03d      	b.n	8003900 <HAL_RCC_OscConfig+0x54c>
 8003884:	40023800 	.word	0x40023800
 8003888:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800388c:	4b1f      	ldr	r3, [pc, #124]	; (800390c <HAL_RCC_OscConfig+0x558>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d030      	beq.n	80038fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d129      	bne.n	80038fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d122      	bne.n	80038fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038bc:	4013      	ands	r3, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d119      	bne.n	80038fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d2:	085b      	lsrs	r3, r3, #1
 80038d4:	3b01      	subs	r3, #1
 80038d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038d8:	429a      	cmp	r2, r3
 80038da:	d10f      	bne.n	80038fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d107      	bne.n	80038fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d001      	beq.n	8003900 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e000      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40023800 	.word	0x40023800

08003910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0d0      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003928:	4b6a      	ldr	r3, [pc, #424]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 030f 	and.w	r3, r3, #15
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d910      	bls.n	8003958 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003936:	4b67      	ldr	r3, [pc, #412]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f023 020f 	bic.w	r2, r3, #15
 800393e:	4965      	ldr	r1, [pc, #404]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	4313      	orrs	r3, r2
 8003944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003946:	4b63      	ldr	r3, [pc, #396]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d001      	beq.n	8003958 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0b8      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d020      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003970:	4b59      	ldr	r3, [pc, #356]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	4a58      	ldr	r2, [pc, #352]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003976:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800397a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003988:	4b53      	ldr	r3, [pc, #332]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	4a52      	ldr	r2, [pc, #328]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 800398e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003992:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003994:	4b50      	ldr	r3, [pc, #320]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	494d      	ldr	r1, [pc, #308]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d040      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d107      	bne.n	80039ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ba:	4b47      	ldr	r3, [pc, #284]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d115      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e07f      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d107      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d2:	4b41      	ldr	r3, [pc, #260]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e073      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e2:	4b3d      	ldr	r3, [pc, #244]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e06b      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039f2:	4b39      	ldr	r3, [pc, #228]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f023 0203 	bic.w	r2, r3, #3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	4936      	ldr	r1, [pc, #216]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a04:	f7fe f9f2 	bl	8001dec <HAL_GetTick>
 8003a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0a:	e00a      	b.n	8003a22 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a0c:	f7fe f9ee 	bl	8001dec <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e053      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a22:	4b2d      	ldr	r3, [pc, #180]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 020c 	and.w	r2, r3, #12
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d1eb      	bne.n	8003a0c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a34:	4b27      	ldr	r3, [pc, #156]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d210      	bcs.n	8003a64 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f023 020f 	bic.w	r2, r3, #15
 8003a4a:	4922      	ldr	r1, [pc, #136]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a52:	4b20      	ldr	r3, [pc, #128]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e032      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a70:	4b19      	ldr	r3, [pc, #100]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4916      	ldr	r1, [pc, #88]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d009      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a8e:	4b12      	ldr	r3, [pc, #72]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	490e      	ldr	r1, [pc, #56]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aa2:	f000 f821 	bl	8003ae8 <HAL_RCC_GetSysClockFreq>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	490a      	ldr	r1, [pc, #40]	; (8003adc <HAL_RCC_ClockConfig+0x1cc>)
 8003ab4:	5ccb      	ldrb	r3, [r1, r3]
 8003ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aba:	4a09      	ldr	r2, [pc, #36]	; (8003ae0 <HAL_RCC_ClockConfig+0x1d0>)
 8003abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003abe:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <HAL_RCC_ClockConfig+0x1d4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fe f94e 	bl	8001d64 <HAL_InitTick>

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40023c00 	.word	0x40023c00
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	08008240 	.word	0x08008240
 8003ae0:	20000000 	.word	0x20000000
 8003ae4:	20000044 	.word	0x20000044

08003ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aec:	b094      	sub	sp, #80	; 0x50
 8003aee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	647b      	str	r3, [r7, #68]	; 0x44
 8003af4:	2300      	movs	r3, #0
 8003af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003af8:	2300      	movs	r3, #0
 8003afa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003afc:	2300      	movs	r3, #0
 8003afe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b00:	4b79      	ldr	r3, [pc, #484]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 030c 	and.w	r3, r3, #12
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d00d      	beq.n	8003b28 <HAL_RCC_GetSysClockFreq+0x40>
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	f200 80e1 	bhi.w	8003cd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <HAL_RCC_GetSysClockFreq+0x34>
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d003      	beq.n	8003b22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b1a:	e0db      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b1c:	4b73      	ldr	r3, [pc, #460]	; (8003cec <HAL_RCC_GetSysClockFreq+0x204>)
 8003b1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b20:	e0db      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b22:	4b73      	ldr	r3, [pc, #460]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b26:	e0d8      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b28:	4b6f      	ldr	r3, [pc, #444]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b30:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b32:	4b6d      	ldr	r3, [pc, #436]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d063      	beq.n	8003c06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b3e:	4b6a      	ldr	r3, [pc, #424]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	099b      	lsrs	r3, r3, #6
 8003b44:	2200      	movs	r2, #0
 8003b46:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b50:	633b      	str	r3, [r7, #48]	; 0x30
 8003b52:	2300      	movs	r3, #0
 8003b54:	637b      	str	r3, [r7, #52]	; 0x34
 8003b56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b5a:	4622      	mov	r2, r4
 8003b5c:	462b      	mov	r3, r5
 8003b5e:	f04f 0000 	mov.w	r0, #0
 8003b62:	f04f 0100 	mov.w	r1, #0
 8003b66:	0159      	lsls	r1, r3, #5
 8003b68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b6c:	0150      	lsls	r0, r2, #5
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	4621      	mov	r1, r4
 8003b74:	1a51      	subs	r1, r2, r1
 8003b76:	6139      	str	r1, [r7, #16]
 8003b78:	4629      	mov	r1, r5
 8003b7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b8c:	4659      	mov	r1, fp
 8003b8e:	018b      	lsls	r3, r1, #6
 8003b90:	4651      	mov	r1, sl
 8003b92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b96:	4651      	mov	r1, sl
 8003b98:	018a      	lsls	r2, r1, #6
 8003b9a:	4651      	mov	r1, sl
 8003b9c:	ebb2 0801 	subs.w	r8, r2, r1
 8003ba0:	4659      	mov	r1, fp
 8003ba2:	eb63 0901 	sbc.w	r9, r3, r1
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bba:	4690      	mov	r8, r2
 8003bbc:	4699      	mov	r9, r3
 8003bbe:	4623      	mov	r3, r4
 8003bc0:	eb18 0303 	adds.w	r3, r8, r3
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	462b      	mov	r3, r5
 8003bc8:	eb49 0303 	adc.w	r3, r9, r3
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bda:	4629      	mov	r1, r5
 8003bdc:	024b      	lsls	r3, r1, #9
 8003bde:	4621      	mov	r1, r4
 8003be0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003be4:	4621      	mov	r1, r4
 8003be6:	024a      	lsls	r2, r1, #9
 8003be8:	4610      	mov	r0, r2
 8003bea:	4619      	mov	r1, r3
 8003bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bee:	2200      	movs	r2, #0
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bf8:	f7fc fb7a 	bl	80002f0 <__aeabi_uldivmod>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4613      	mov	r3, r2
 8003c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c04:	e058      	b.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c06:	4b38      	ldr	r3, [pc, #224]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	099b      	lsrs	r3, r3, #6
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	4611      	mov	r1, r2
 8003c12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c16:	623b      	str	r3, [r7, #32]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c20:	4642      	mov	r2, r8
 8003c22:	464b      	mov	r3, r9
 8003c24:	f04f 0000 	mov.w	r0, #0
 8003c28:	f04f 0100 	mov.w	r1, #0
 8003c2c:	0159      	lsls	r1, r3, #5
 8003c2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c32:	0150      	lsls	r0, r2, #5
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4641      	mov	r1, r8
 8003c3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c3e:	4649      	mov	r1, r9
 8003c40:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c58:	ebb2 040a 	subs.w	r4, r2, sl
 8003c5c:	eb63 050b 	sbc.w	r5, r3, fp
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	00eb      	lsls	r3, r5, #3
 8003c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c6e:	00e2      	lsls	r2, r4, #3
 8003c70:	4614      	mov	r4, r2
 8003c72:	461d      	mov	r5, r3
 8003c74:	4643      	mov	r3, r8
 8003c76:	18e3      	adds	r3, r4, r3
 8003c78:	603b      	str	r3, [r7, #0]
 8003c7a:	464b      	mov	r3, r9
 8003c7c:	eb45 0303 	adc.w	r3, r5, r3
 8003c80:	607b      	str	r3, [r7, #4]
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c8e:	4629      	mov	r1, r5
 8003c90:	028b      	lsls	r3, r1, #10
 8003c92:	4621      	mov	r1, r4
 8003c94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c98:	4621      	mov	r1, r4
 8003c9a:	028a      	lsls	r2, r1, #10
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	61fa      	str	r2, [r7, #28]
 8003ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cac:	f7fc fb20 	bl	80002f0 <__aeabi_uldivmod>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	0c1b      	lsrs	r3, r3, #16
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003cc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cd2:	e002      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cd4:	4b05      	ldr	r3, [pc, #20]	; (8003cec <HAL_RCC_GetSysClockFreq+0x204>)
 8003cd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3750      	adds	r7, #80	; 0x50
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	00f42400 	.word	0x00f42400
 8003cf0:	007a1200 	.word	0x007a1200

08003cf4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cf8:	4b03      	ldr	r3, [pc, #12]	; (8003d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	20000000 	.word	0x20000000

08003d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d10:	f7ff fff0 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 8003d14:	4602      	mov	r2, r0
 8003d16:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	0a9b      	lsrs	r3, r3, #10
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	4903      	ldr	r1, [pc, #12]	; (8003d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d22:	5ccb      	ldrb	r3, [r1, r3]
 8003d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	08008250 	.word	0x08008250

08003d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d38:	f7ff ffdc 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	0b5b      	lsrs	r3, r3, #13
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	4903      	ldr	r1, [pc, #12]	; (8003d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d4a:	5ccb      	ldrb	r3, [r1, r3]
 8003d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40023800 	.word	0x40023800
 8003d58:	08008250 	.word	0x08008250

08003d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d74:	2300      	movs	r3, #0
 8003d76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d012      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d84:	4b69      	ldr	r3, [pc, #420]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4a68      	ldr	r2, [pc, #416]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d8e:	6093      	str	r3, [r2, #8]
 8003d90:	4b66      	ldr	r3, [pc, #408]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d98:	4964      	ldr	r1, [pc, #400]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003da6:	2301      	movs	r3, #1
 8003da8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d017      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003db6:	4b5d      	ldr	r3, [pc, #372]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc4:	4959      	ldr	r1, [pc, #356]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dd4:	d101      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003de2:	2301      	movs	r3, #1
 8003de4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d017      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003df2:	4b4e      	ldr	r3, [pc, #312]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003df8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	494a      	ldr	r1, [pc, #296]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e10:	d101      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e12:	2301      	movs	r3, #1
 8003e14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0320 	and.w	r3, r3, #32
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 808b 	beq.w	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e40:	4b3a      	ldr	r3, [pc, #232]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	4a39      	ldr	r2, [pc, #228]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e4c:	4b37      	ldr	r3, [pc, #220]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e58:	4b35      	ldr	r3, [pc, #212]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a34      	ldr	r2, [pc, #208]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e64:	f7fd ffc2 	bl	8001dec <HAL_GetTick>
 8003e68:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6c:	f7fd ffbe 	bl	8001dec <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b64      	cmp	r3, #100	; 0x64
 8003e78:	d901      	bls.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e38f      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e7e:	4b2c      	ldr	r3, [pc, #176]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f0      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e8a:	4b28      	ldr	r3, [pc, #160]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e92:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d035      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d02e      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ea8:	4b20      	ldr	r3, [pc, #128]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eb2:	4b1e      	ldr	r3, [pc, #120]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	4a1d      	ldr	r2, [pc, #116]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ebc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ebe:	4b1b      	ldr	r3, [pc, #108]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec2:	4a1a      	ldr	r2, [pc, #104]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003eca:	4a18      	ldr	r2, [pc, #96]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ed0:	4b16      	ldr	r3, [pc, #88]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d114      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7fd ff86 	bl	8001dec <HAL_GetTick>
 8003ee0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee2:	e00a      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee4:	f7fd ff82 	bl	8001dec <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e351      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efa:	4b0c      	ldr	r3, [pc, #48]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0ee      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f12:	d111      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f14:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f20:	4b04      	ldr	r3, [pc, #16]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f22:	400b      	ands	r3, r1
 8003f24:	4901      	ldr	r1, [pc, #4]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	608b      	str	r3, [r1, #8]
 8003f2a:	e00b      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	40007000 	.word	0x40007000
 8003f34:	0ffffcff 	.word	0x0ffffcff
 8003f38:	4bac      	ldr	r3, [pc, #688]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	4aab      	ldr	r2, [pc, #684]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f42:	6093      	str	r3, [r2, #8]
 8003f44:	4ba9      	ldr	r3, [pc, #676]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f50:	49a6      	ldr	r1, [pc, #664]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0310 	and.w	r3, r3, #16
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d010      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f62:	4ba2      	ldr	r3, [pc, #648]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f68:	4aa0      	ldr	r2, [pc, #640]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f72:	4b9e      	ldr	r3, [pc, #632]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f74:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7c:	499b      	ldr	r1, [pc, #620]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f90:	4b96      	ldr	r3, [pc, #600]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f9e:	4993      	ldr	r1, [pc, #588]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fb2:	4b8e      	ldr	r3, [pc, #568]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fc0:	498a      	ldr	r1, [pc, #552]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fd4:	4b85      	ldr	r3, [pc, #532]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fe2:	4982      	ldr	r1, [pc, #520]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ff6:	4b7d      	ldr	r3, [pc, #500]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004004:	4979      	ldr	r1, [pc, #484]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004018:	4b74      	ldr	r3, [pc, #464]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800401a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401e:	f023 0203 	bic.w	r2, r3, #3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	4971      	ldr	r1, [pc, #452]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800403a:	4b6c      	ldr	r3, [pc, #432]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800403c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004040:	f023 020c 	bic.w	r2, r3, #12
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004048:	4968      	ldr	r1, [pc, #416]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800405c:	4b63      	ldr	r3, [pc, #396]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004062:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406a:	4960      	ldr	r1, [pc, #384]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800407e:	4b5b      	ldr	r3, [pc, #364]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004084:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408c:	4957      	ldr	r1, [pc, #348]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040a0:	4b52      	ldr	r3, [pc, #328]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ae:	494f      	ldr	r1, [pc, #316]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80040c2:	4b4a      	ldr	r3, [pc, #296]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d0:	4946      	ldr	r1, [pc, #280]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80040e4:	4b41      	ldr	r3, [pc, #260]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f2:	493e      	ldr	r1, [pc, #248]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004106:	4b39      	ldr	r3, [pc, #228]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004114:	4935      	ldr	r1, [pc, #212]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004128:	4b30      	ldr	r3, [pc, #192]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004136:	492d      	ldr	r1, [pc, #180]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d011      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800414a:	4b28      	ldr	r3, [pc, #160]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004150:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004158:	4924      	ldr	r1, [pc, #144]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004164:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004168:	d101      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800416a:	2301      	movs	r3, #1
 800416c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0308 	and.w	r3, r3, #8
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800417a:	2301      	movs	r3, #1
 800417c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800418a:	4b18      	ldr	r3, [pc, #96]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800418c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004190:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004198:	4914      	ldr	r1, [pc, #80]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00b      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041ac:	4b0f      	ldr	r3, [pc, #60]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041bc:	490b      	ldr	r1, [pc, #44]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00f      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80041d0:	4b06      	ldr	r3, [pc, #24]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041e0:	4902      	ldr	r1, [pc, #8]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041e8:	e002      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80041ea:	bf00      	nop
 80041ec:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00b      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041fc:	4b8a      	ldr	r3, [pc, #552]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004202:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420c:	4986      	ldr	r1, [pc, #536]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00b      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004220:	4b81      	ldr	r3, [pc, #516]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004226:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004230:	497d      	ldr	r1, [pc, #500]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d006      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 80d6 	beq.w	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800424c:	4b76      	ldr	r3, [pc, #472]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a75      	ldr	r2, [pc, #468]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004252:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004256:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004258:	f7fd fdc8 	bl	8001dec <HAL_GetTick>
 800425c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004260:	f7fd fdc4 	bl	8001dec <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b64      	cmp	r3, #100	; 0x64
 800426c:	d901      	bls.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e195      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004272:	4b6d      	ldr	r3, [pc, #436]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f0      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d021      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x572>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428e:	2b00      	cmp	r3, #0
 8004290:	d11d      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004292:	4b65      	ldr	r3, [pc, #404]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004298:	0c1b      	lsrs	r3, r3, #16
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042a0:	4b61      	ldr	r3, [pc, #388]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042a6:	0e1b      	lsrs	r3, r3, #24
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	019a      	lsls	r2, r3, #6
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	041b      	lsls	r3, r3, #16
 80042b8:	431a      	orrs	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	061b      	lsls	r3, r3, #24
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	071b      	lsls	r3, r3, #28
 80042c6:	4958      	ldr	r1, [pc, #352]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d004      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042e2:	d00a      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d02e      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042f8:	d129      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042fa:	4b4b      	ldr	r3, [pc, #300]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004300:	0c1b      	lsrs	r3, r3, #16
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004308:	4b47      	ldr	r3, [pc, #284]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800430a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800430e:	0f1b      	lsrs	r3, r3, #28
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	019a      	lsls	r2, r3, #6
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	041b      	lsls	r3, r3, #16
 8004320:	431a      	orrs	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	061b      	lsls	r3, r3, #24
 8004328:	431a      	orrs	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	071b      	lsls	r3, r3, #28
 800432e:	493e      	ldr	r1, [pc, #248]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004336:	4b3c      	ldr	r3, [pc, #240]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800433c:	f023 021f 	bic.w	r2, r3, #31
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	3b01      	subs	r3, #1
 8004346:	4938      	ldr	r1, [pc, #224]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d01d      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800435a:	4b33      	ldr	r3, [pc, #204]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800435c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004360:	0e1b      	lsrs	r3, r3, #24
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004368:	4b2f      	ldr	r3, [pc, #188]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800436a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800436e:	0f1b      	lsrs	r3, r3, #28
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	019a      	lsls	r2, r3, #6
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	041b      	lsls	r3, r3, #16
 8004382:	431a      	orrs	r2, r3
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	061b      	lsls	r3, r3, #24
 8004388:	431a      	orrs	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	071b      	lsls	r3, r3, #28
 800438e:	4926      	ldr	r1, [pc, #152]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d011      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	019a      	lsls	r2, r3, #6
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	041b      	lsls	r3, r3, #16
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	061b      	lsls	r3, r3, #24
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	071b      	lsls	r3, r3, #28
 80043be:	491a      	ldr	r1, [pc, #104]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043c6:	4b18      	ldr	r3, [pc, #96]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a17      	ldr	r2, [pc, #92]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043d2:	f7fd fd0b 	bl	8001dec <HAL_GetTick>
 80043d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043d8:	e008      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043da:	f7fd fd07 	bl	8001dec <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b64      	cmp	r3, #100	; 0x64
 80043e6:	d901      	bls.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e0d8      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043ec:	4b0e      	ldr	r3, [pc, #56]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0f0      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	f040 80ce 	bne.w	800459c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004400:	4b09      	ldr	r3, [pc, #36]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a08      	ldr	r2, [pc, #32]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004406:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800440a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800440c:	f7fd fcee 	bl	8001dec <HAL_GetTick>
 8004410:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004412:	e00b      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004414:	f7fd fcea 	bl	8001dec <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b64      	cmp	r3, #100	; 0x64
 8004420:	d904      	bls.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e0bb      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004426:	bf00      	nop
 8004428:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800442c:	4b5e      	ldr	r3, [pc, #376]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004438:	d0ec      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444a:	2b00      	cmp	r3, #0
 800444c:	d009      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004456:	2b00      	cmp	r3, #0
 8004458:	d02e      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	2b00      	cmp	r3, #0
 8004460:	d12a      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004462:	4b51      	ldr	r3, [pc, #324]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004468:	0c1b      	lsrs	r3, r3, #16
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004470:	4b4d      	ldr	r3, [pc, #308]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004476:	0f1b      	lsrs	r3, r3, #28
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	019a      	lsls	r2, r3, #6
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	041b      	lsls	r3, r3, #16
 8004488:	431a      	orrs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	061b      	lsls	r3, r3, #24
 8004490:	431a      	orrs	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	071b      	lsls	r3, r3, #28
 8004496:	4944      	ldr	r1, [pc, #272]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800449e:	4b42      	ldr	r3, [pc, #264]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ac:	3b01      	subs	r3, #1
 80044ae:	021b      	lsls	r3, r3, #8
 80044b0:	493d      	ldr	r1, [pc, #244]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d022      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044cc:	d11d      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044ce:	4b36      	ldr	r3, [pc, #216]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d4:	0e1b      	lsrs	r3, r3, #24
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044dc:	4b32      	ldr	r3, [pc, #200]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e2:	0f1b      	lsrs	r3, r3, #28
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	019a      	lsls	r2, r3, #6
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	041b      	lsls	r3, r3, #16
 80044f6:	431a      	orrs	r2, r3
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	061b      	lsls	r3, r3, #24
 80044fc:	431a      	orrs	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	071b      	lsls	r3, r3, #28
 8004502:	4929      	ldr	r1, [pc, #164]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b00      	cmp	r3, #0
 8004514:	d028      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004516:	4b24      	ldr	r3, [pc, #144]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451c:	0e1b      	lsrs	r3, r3, #24
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004524:	4b20      	ldr	r3, [pc, #128]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452a:	0c1b      	lsrs	r3, r3, #16
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	019a      	lsls	r2, r3, #6
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	041b      	lsls	r3, r3, #16
 800453c:	431a      	orrs	r2, r3
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	061b      	lsls	r3, r3, #24
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	071b      	lsls	r3, r3, #28
 800454a:	4917      	ldr	r1, [pc, #92]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004552:	4b15      	ldr	r3, [pc, #84]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004558:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004560:	4911      	ldr	r1, [pc, #68]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004568:	4b0f      	ldr	r3, [pc, #60]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a0e      	ldr	r2, [pc, #56]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800456e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004572:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004574:	f7fd fc3a 	bl	8001dec <HAL_GetTick>
 8004578:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800457a:	e008      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800457c:	f7fd fc36 	bl	8001dec <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b64      	cmp	r3, #100	; 0x64
 8004588:	d901      	bls.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e007      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800458e:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800459a:	d1ef      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3720      	adds	r7, #32
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40023800 	.word	0x40023800

080045ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e049      	b.n	8004652 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7fc fd50 	bl	8001078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3304      	adds	r3, #4
 80045e8:	4619      	mov	r1, r3
 80045ea:	4610      	mov	r0, r2
 80045ec:	f000 fdc8 	bl	8005180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
	...

0800465c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b01      	cmp	r3, #1
 800466e:	d001      	beq.n	8004674 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e04c      	b.n	800470e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a26      	ldr	r2, [pc, #152]	; (800471c <HAL_TIM_Base_Start+0xc0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d022      	beq.n	80046cc <HAL_TIM_Base_Start+0x70>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800468e:	d01d      	beq.n	80046cc <HAL_TIM_Base_Start+0x70>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a22      	ldr	r2, [pc, #136]	; (8004720 <HAL_TIM_Base_Start+0xc4>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d018      	beq.n	80046cc <HAL_TIM_Base_Start+0x70>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a21      	ldr	r2, [pc, #132]	; (8004724 <HAL_TIM_Base_Start+0xc8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d013      	beq.n	80046cc <HAL_TIM_Base_Start+0x70>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a1f      	ldr	r2, [pc, #124]	; (8004728 <HAL_TIM_Base_Start+0xcc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00e      	beq.n	80046cc <HAL_TIM_Base_Start+0x70>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a1e      	ldr	r2, [pc, #120]	; (800472c <HAL_TIM_Base_Start+0xd0>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d009      	beq.n	80046cc <HAL_TIM_Base_Start+0x70>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a1c      	ldr	r2, [pc, #112]	; (8004730 <HAL_TIM_Base_Start+0xd4>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d004      	beq.n	80046cc <HAL_TIM_Base_Start+0x70>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a1b      	ldr	r2, [pc, #108]	; (8004734 <HAL_TIM_Base_Start+0xd8>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d115      	bne.n	80046f8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	4b19      	ldr	r3, [pc, #100]	; (8004738 <HAL_TIM_Base_Start+0xdc>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2b06      	cmp	r3, #6
 80046dc:	d015      	beq.n	800470a <HAL_TIM_Base_Start+0xae>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e4:	d011      	beq.n	800470a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 0201 	orr.w	r2, r2, #1
 80046f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f6:	e008      	b.n	800470a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	e000      	b.n	800470c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800470a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40010000 	.word	0x40010000
 8004720:	40000400 	.word	0x40000400
 8004724:	40000800 	.word	0x40000800
 8004728:	40000c00 	.word	0x40000c00
 800472c:	40010400 	.word	0x40010400
 8004730:	40014000 	.word	0x40014000
 8004734:	40001800 	.word	0x40001800
 8004738:	00010007 	.word	0x00010007

0800473c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6a1a      	ldr	r2, [r3, #32]
 800474a:	f241 1311 	movw	r3, #4369	; 0x1111
 800474e:	4013      	ands	r3, r2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10f      	bne.n	8004774 <HAL_TIM_Base_Stop+0x38>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6a1a      	ldr	r2, [r3, #32]
 800475a:	f240 4344 	movw	r3, #1092	; 0x444
 800475e:	4013      	ands	r3, r2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d107      	bne.n	8004774 <HAL_TIM_Base_Stop+0x38>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0201 	bic.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
	...

0800478c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b01      	cmp	r3, #1
 800479e:	d001      	beq.n	80047a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e054      	b.n	800484e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0201 	orr.w	r2, r2, #1
 80047ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a26      	ldr	r2, [pc, #152]	; (800485c <HAL_TIM_Base_Start_IT+0xd0>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d022      	beq.n	800480c <HAL_TIM_Base_Start_IT+0x80>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ce:	d01d      	beq.n	800480c <HAL_TIM_Base_Start_IT+0x80>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a22      	ldr	r2, [pc, #136]	; (8004860 <HAL_TIM_Base_Start_IT+0xd4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d018      	beq.n	800480c <HAL_TIM_Base_Start_IT+0x80>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a21      	ldr	r2, [pc, #132]	; (8004864 <HAL_TIM_Base_Start_IT+0xd8>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d013      	beq.n	800480c <HAL_TIM_Base_Start_IT+0x80>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a1f      	ldr	r2, [pc, #124]	; (8004868 <HAL_TIM_Base_Start_IT+0xdc>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00e      	beq.n	800480c <HAL_TIM_Base_Start_IT+0x80>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a1e      	ldr	r2, [pc, #120]	; (800486c <HAL_TIM_Base_Start_IT+0xe0>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d009      	beq.n	800480c <HAL_TIM_Base_Start_IT+0x80>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1c      	ldr	r2, [pc, #112]	; (8004870 <HAL_TIM_Base_Start_IT+0xe4>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d004      	beq.n	800480c <HAL_TIM_Base_Start_IT+0x80>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1b      	ldr	r2, [pc, #108]	; (8004874 <HAL_TIM_Base_Start_IT+0xe8>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d115      	bne.n	8004838 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689a      	ldr	r2, [r3, #8]
 8004812:	4b19      	ldr	r3, [pc, #100]	; (8004878 <HAL_TIM_Base_Start_IT+0xec>)
 8004814:	4013      	ands	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b06      	cmp	r3, #6
 800481c:	d015      	beq.n	800484a <HAL_TIM_Base_Start_IT+0xbe>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004824:	d011      	beq.n	800484a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f042 0201 	orr.w	r2, r2, #1
 8004834:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004836:	e008      	b.n	800484a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0201 	orr.w	r2, r2, #1
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	e000      	b.n	800484c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800484a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40010000 	.word	0x40010000
 8004860:	40000400 	.word	0x40000400
 8004864:	40000800 	.word	0x40000800
 8004868:	40000c00 	.word	0x40000c00
 800486c:	40010400 	.word	0x40010400
 8004870:	40014000 	.word	0x40014000
 8004874:	40001800 	.word	0x40001800
 8004878:	00010007 	.word	0x00010007

0800487c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e049      	b.n	8004922 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f841 	bl	800492a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3304      	adds	r3, #4
 80048b8:	4619      	mov	r1, r3
 80048ba:	4610      	mov	r0, r2
 80048bc:	f000 fc60 	bl	8005180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
	...

08004940 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d109      	bne.n	8004964 <HAL_TIM_PWM_Start+0x24>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b01      	cmp	r3, #1
 800495a:	bf14      	ite	ne
 800495c:	2301      	movne	r3, #1
 800495e:	2300      	moveq	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	e03c      	b.n	80049de <HAL_TIM_PWM_Start+0x9e>
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	2b04      	cmp	r3, #4
 8004968:	d109      	bne.n	800497e <HAL_TIM_PWM_Start+0x3e>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b01      	cmp	r3, #1
 8004974:	bf14      	ite	ne
 8004976:	2301      	movne	r3, #1
 8004978:	2300      	moveq	r3, #0
 800497a:	b2db      	uxtb	r3, r3
 800497c:	e02f      	b.n	80049de <HAL_TIM_PWM_Start+0x9e>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b08      	cmp	r3, #8
 8004982:	d109      	bne.n	8004998 <HAL_TIM_PWM_Start+0x58>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b01      	cmp	r3, #1
 800498e:	bf14      	ite	ne
 8004990:	2301      	movne	r3, #1
 8004992:	2300      	moveq	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	e022      	b.n	80049de <HAL_TIM_PWM_Start+0x9e>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b0c      	cmp	r3, #12
 800499c:	d109      	bne.n	80049b2 <HAL_TIM_PWM_Start+0x72>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	bf14      	ite	ne
 80049aa:	2301      	movne	r3, #1
 80049ac:	2300      	moveq	r3, #0
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	e015      	b.n	80049de <HAL_TIM_PWM_Start+0x9e>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b10      	cmp	r3, #16
 80049b6:	d109      	bne.n	80049cc <HAL_TIM_PWM_Start+0x8c>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	bf14      	ite	ne
 80049c4:	2301      	movne	r3, #1
 80049c6:	2300      	moveq	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	e008      	b.n	80049de <HAL_TIM_PWM_Start+0x9e>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	bf14      	ite	ne
 80049d8:	2301      	movne	r3, #1
 80049da:	2300      	moveq	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e092      	b.n	8004b0c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d104      	bne.n	80049f6 <HAL_TIM_PWM_Start+0xb6>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049f4:	e023      	b.n	8004a3e <HAL_TIM_PWM_Start+0xfe>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d104      	bne.n	8004a06 <HAL_TIM_PWM_Start+0xc6>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a04:	e01b      	b.n	8004a3e <HAL_TIM_PWM_Start+0xfe>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d104      	bne.n	8004a16 <HAL_TIM_PWM_Start+0xd6>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a14:	e013      	b.n	8004a3e <HAL_TIM_PWM_Start+0xfe>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b0c      	cmp	r3, #12
 8004a1a:	d104      	bne.n	8004a26 <HAL_TIM_PWM_Start+0xe6>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a24:	e00b      	b.n	8004a3e <HAL_TIM_PWM_Start+0xfe>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b10      	cmp	r3, #16
 8004a2a:	d104      	bne.n	8004a36 <HAL_TIM_PWM_Start+0xf6>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a34:	e003      	b.n	8004a3e <HAL_TIM_PWM_Start+0xfe>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2202      	movs	r2, #2
 8004a3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2201      	movs	r2, #1
 8004a44:	6839      	ldr	r1, [r7, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 ff32 	bl	80058b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a30      	ldr	r2, [pc, #192]	; (8004b14 <HAL_TIM_PWM_Start+0x1d4>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d004      	beq.n	8004a60 <HAL_TIM_PWM_Start+0x120>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a2f      	ldr	r2, [pc, #188]	; (8004b18 <HAL_TIM_PWM_Start+0x1d8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d101      	bne.n	8004a64 <HAL_TIM_PWM_Start+0x124>
 8004a60:	2301      	movs	r3, #1
 8004a62:	e000      	b.n	8004a66 <HAL_TIM_PWM_Start+0x126>
 8004a64:	2300      	movs	r3, #0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d007      	beq.n	8004a7a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a25      	ldr	r2, [pc, #148]	; (8004b14 <HAL_TIM_PWM_Start+0x1d4>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d022      	beq.n	8004aca <HAL_TIM_PWM_Start+0x18a>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8c:	d01d      	beq.n	8004aca <HAL_TIM_PWM_Start+0x18a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a22      	ldr	r2, [pc, #136]	; (8004b1c <HAL_TIM_PWM_Start+0x1dc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d018      	beq.n	8004aca <HAL_TIM_PWM_Start+0x18a>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a20      	ldr	r2, [pc, #128]	; (8004b20 <HAL_TIM_PWM_Start+0x1e0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d013      	beq.n	8004aca <HAL_TIM_PWM_Start+0x18a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a1f      	ldr	r2, [pc, #124]	; (8004b24 <HAL_TIM_PWM_Start+0x1e4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00e      	beq.n	8004aca <HAL_TIM_PWM_Start+0x18a>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a19      	ldr	r2, [pc, #100]	; (8004b18 <HAL_TIM_PWM_Start+0x1d8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d009      	beq.n	8004aca <HAL_TIM_PWM_Start+0x18a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a1b      	ldr	r2, [pc, #108]	; (8004b28 <HAL_TIM_PWM_Start+0x1e8>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d004      	beq.n	8004aca <HAL_TIM_PWM_Start+0x18a>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a19      	ldr	r2, [pc, #100]	; (8004b2c <HAL_TIM_PWM_Start+0x1ec>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d115      	bne.n	8004af6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	4b17      	ldr	r3, [pc, #92]	; (8004b30 <HAL_TIM_PWM_Start+0x1f0>)
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2b06      	cmp	r3, #6
 8004ada:	d015      	beq.n	8004b08 <HAL_TIM_PWM_Start+0x1c8>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae2:	d011      	beq.n	8004b08 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0201 	orr.w	r2, r2, #1
 8004af2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af4:	e008      	b.n	8004b08 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f042 0201 	orr.w	r2, r2, #1
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	e000      	b.n	8004b0a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40010000 	.word	0x40010000
 8004b18:	40010400 	.word	0x40010400
 8004b1c:	40000400 	.word	0x40000400
 8004b20:	40000800 	.word	0x40000800
 8004b24:	40000c00 	.word	0x40000c00
 8004b28:	40014000 	.word	0x40014000
 8004b2c:	40001800 	.word	0x40001800
 8004b30:	00010007 	.word	0x00010007

08004b34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d122      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d11b      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0202 	mvn.w	r2, #2
 8004b60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fae4 	bl	8005144 <HAL_TIM_IC_CaptureCallback>
 8004b7c:	e005      	b.n	8004b8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fad6 	bl	8005130 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fae7 	bl	8005158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0304 	and.w	r3, r3, #4
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d122      	bne.n	8004be4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d11b      	bne.n	8004be4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0204 	mvn.w	r2, #4
 8004bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 faba 	bl	8005144 <HAL_TIM_IC_CaptureCallback>
 8004bd0:	e005      	b.n	8004bde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 faac 	bl	8005130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 fabd 	bl	8005158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d122      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d11b      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0208 	mvn.w	r2, #8
 8004c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2204      	movs	r2, #4
 8004c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fa90 	bl	8005144 <HAL_TIM_IC_CaptureCallback>
 8004c24:	e005      	b.n	8004c32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fa82 	bl	8005130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fa93 	bl	8005158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f003 0310 	and.w	r3, r3, #16
 8004c42:	2b10      	cmp	r3, #16
 8004c44:	d122      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f003 0310 	and.w	r3, r3, #16
 8004c50:	2b10      	cmp	r3, #16
 8004c52:	d11b      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f06f 0210 	mvn.w	r2, #16
 8004c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2208      	movs	r2, #8
 8004c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fa66 	bl	8005144 <HAL_TIM_IC_CaptureCallback>
 8004c78:	e005      	b.n	8004c86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fa58 	bl	8005130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fa69 	bl	8005158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d10e      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d107      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0201 	mvn.w	r2, #1
 8004cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7fb fe8c 	bl	80009d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc2:	2b80      	cmp	r3, #128	; 0x80
 8004cc4:	d10e      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd0:	2b80      	cmp	r3, #128	; 0x80
 8004cd2:	d107      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fea4 	bl	8005a2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf2:	d10e      	bne.n	8004d12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfe:	2b80      	cmp	r3, #128	; 0x80
 8004d00:	d107      	bne.n	8004d12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 fe97 	bl	8005a40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1c:	2b40      	cmp	r3, #64	; 0x40
 8004d1e:	d10e      	bne.n	8004d3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2a:	2b40      	cmp	r3, #64	; 0x40
 8004d2c:	d107      	bne.n	8004d3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fa17 	bl	800516c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f003 0320 	and.w	r3, r3, #32
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	d10e      	bne.n	8004d6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b20      	cmp	r3, #32
 8004d58:	d107      	bne.n	8004d6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f06f 0220 	mvn.w	r2, #32
 8004d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 fe57 	bl	8005a18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d6a:	bf00      	nop
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
	...

08004d74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d80:	2300      	movs	r3, #0
 8004d82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d101      	bne.n	8004d92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	e0ff      	b.n	8004f92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b14      	cmp	r3, #20
 8004d9e:	f200 80f0 	bhi.w	8004f82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004da2:	a201      	add	r2, pc, #4	; (adr r2, 8004da8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da8:	08004dfd 	.word	0x08004dfd
 8004dac:	08004f83 	.word	0x08004f83
 8004db0:	08004f83 	.word	0x08004f83
 8004db4:	08004f83 	.word	0x08004f83
 8004db8:	08004e3d 	.word	0x08004e3d
 8004dbc:	08004f83 	.word	0x08004f83
 8004dc0:	08004f83 	.word	0x08004f83
 8004dc4:	08004f83 	.word	0x08004f83
 8004dc8:	08004e7f 	.word	0x08004e7f
 8004dcc:	08004f83 	.word	0x08004f83
 8004dd0:	08004f83 	.word	0x08004f83
 8004dd4:	08004f83 	.word	0x08004f83
 8004dd8:	08004ebf 	.word	0x08004ebf
 8004ddc:	08004f83 	.word	0x08004f83
 8004de0:	08004f83 	.word	0x08004f83
 8004de4:	08004f83 	.word	0x08004f83
 8004de8:	08004f01 	.word	0x08004f01
 8004dec:	08004f83 	.word	0x08004f83
 8004df0:	08004f83 	.word	0x08004f83
 8004df4:	08004f83 	.word	0x08004f83
 8004df8:	08004f41 	.word	0x08004f41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68b9      	ldr	r1, [r7, #8]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fa5c 	bl	80052c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699a      	ldr	r2, [r3, #24]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0208 	orr.w	r2, r2, #8
 8004e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699a      	ldr	r2, [r3, #24]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0204 	bic.w	r2, r2, #4
 8004e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6999      	ldr	r1, [r3, #24]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	691a      	ldr	r2, [r3, #16]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	619a      	str	r2, [r3, #24]
      break;
 8004e3a:	e0a5      	b.n	8004f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68b9      	ldr	r1, [r7, #8]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 faae 	bl	80053a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699a      	ldr	r2, [r3, #24]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699a      	ldr	r2, [r3, #24]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6999      	ldr	r1, [r3, #24]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	021a      	lsls	r2, r3, #8
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	619a      	str	r2, [r3, #24]
      break;
 8004e7c:	e084      	b.n	8004f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68b9      	ldr	r1, [r7, #8]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 fb05 	bl	8005494 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69da      	ldr	r2, [r3, #28]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f042 0208 	orr.w	r2, r2, #8
 8004e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	69da      	ldr	r2, [r3, #28]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0204 	bic.w	r2, r2, #4
 8004ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69d9      	ldr	r1, [r3, #28]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	61da      	str	r2, [r3, #28]
      break;
 8004ebc:	e064      	b.n	8004f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68b9      	ldr	r1, [r7, #8]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fb5b 	bl	8005580 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69da      	ldr	r2, [r3, #28]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ed8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	69da      	ldr	r2, [r3, #28]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69d9      	ldr	r1, [r3, #28]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	021a      	lsls	r2, r3, #8
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	61da      	str	r2, [r3, #28]
      break;
 8004efe:	e043      	b.n	8004f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68b9      	ldr	r1, [r7, #8]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fb92 	bl	8005630 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0208 	orr.w	r2, r2, #8
 8004f1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0204 	bic.w	r2, r2, #4
 8004f2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	691a      	ldr	r2, [r3, #16]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f3e:	e023      	b.n	8004f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68b9      	ldr	r1, [r7, #8]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fbc4 	bl	80056d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	021a      	lsls	r2, r3, #8
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f80:	e002      	b.n	8004f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	75fb      	strb	r3, [r7, #23]
      break;
 8004f86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop

08004f9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_TIM_ConfigClockSource+0x1c>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e0b4      	b.n	8005122 <HAL_TIM_ConfigClockSource+0x186>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	4b56      	ldr	r3, [pc, #344]	; (800512c <HAL_TIM_ConfigClockSource+0x190>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff0:	d03e      	beq.n	8005070 <HAL_TIM_ConfigClockSource+0xd4>
 8004ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff6:	f200 8087 	bhi.w	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8004ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffe:	f000 8086 	beq.w	800510e <HAL_TIM_ConfigClockSource+0x172>
 8005002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005006:	d87f      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005008:	2b70      	cmp	r3, #112	; 0x70
 800500a:	d01a      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0xa6>
 800500c:	2b70      	cmp	r3, #112	; 0x70
 800500e:	d87b      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005010:	2b60      	cmp	r3, #96	; 0x60
 8005012:	d050      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0x11a>
 8005014:	2b60      	cmp	r3, #96	; 0x60
 8005016:	d877      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005018:	2b50      	cmp	r3, #80	; 0x50
 800501a:	d03c      	beq.n	8005096 <HAL_TIM_ConfigClockSource+0xfa>
 800501c:	2b50      	cmp	r3, #80	; 0x50
 800501e:	d873      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005020:	2b40      	cmp	r3, #64	; 0x40
 8005022:	d058      	beq.n	80050d6 <HAL_TIM_ConfigClockSource+0x13a>
 8005024:	2b40      	cmp	r3, #64	; 0x40
 8005026:	d86f      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005028:	2b30      	cmp	r3, #48	; 0x30
 800502a:	d064      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x15a>
 800502c:	2b30      	cmp	r3, #48	; 0x30
 800502e:	d86b      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005030:	2b20      	cmp	r3, #32
 8005032:	d060      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005034:	2b20      	cmp	r3, #32
 8005036:	d867      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005038:	2b00      	cmp	r3, #0
 800503a:	d05c      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x15a>
 800503c:	2b10      	cmp	r3, #16
 800503e:	d05a      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005040:	e062      	b.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6818      	ldr	r0, [r3, #0]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	6899      	ldr	r1, [r3, #8]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f000 fc0d 	bl	8005870 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005064:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	609a      	str	r2, [r3, #8]
      break;
 800506e:	e04f      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6818      	ldr	r0, [r3, #0]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	6899      	ldr	r1, [r3, #8]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f000 fbf6 	bl	8005870 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005092:	609a      	str	r2, [r3, #8]
      break;
 8005094:	e03c      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	6859      	ldr	r1, [r3, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	461a      	mov	r2, r3
 80050a4:	f000 fb6a 	bl	800577c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2150      	movs	r1, #80	; 0x50
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fbc3 	bl	800583a <TIM_ITRx_SetConfig>
      break;
 80050b4:	e02c      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6818      	ldr	r0, [r3, #0]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	6859      	ldr	r1, [r3, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	461a      	mov	r2, r3
 80050c4:	f000 fb89 	bl	80057da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2160      	movs	r1, #96	; 0x60
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 fbb3 	bl	800583a <TIM_ITRx_SetConfig>
      break;
 80050d4:	e01c      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	6859      	ldr	r1, [r3, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	461a      	mov	r2, r3
 80050e4:	f000 fb4a 	bl	800577c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2140      	movs	r1, #64	; 0x40
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fba3 	bl	800583a <TIM_ITRx_SetConfig>
      break;
 80050f4:	e00c      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4619      	mov	r1, r3
 8005100:	4610      	mov	r0, r2
 8005102:	f000 fb9a 	bl	800583a <TIM_ITRx_SetConfig>
      break;
 8005106:	e003      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	73fb      	strb	r3, [r7, #15]
      break;
 800510c:	e000      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800510e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005120:	7bfb      	ldrb	r3, [r7, #15]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	fffeff88 	.word	0xfffeff88

08005130 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a40      	ldr	r2, [pc, #256]	; (8005294 <TIM_Base_SetConfig+0x114>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d013      	beq.n	80051c0 <TIM_Base_SetConfig+0x40>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800519e:	d00f      	beq.n	80051c0 <TIM_Base_SetConfig+0x40>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a3d      	ldr	r2, [pc, #244]	; (8005298 <TIM_Base_SetConfig+0x118>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d00b      	beq.n	80051c0 <TIM_Base_SetConfig+0x40>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a3c      	ldr	r2, [pc, #240]	; (800529c <TIM_Base_SetConfig+0x11c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d007      	beq.n	80051c0 <TIM_Base_SetConfig+0x40>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a3b      	ldr	r2, [pc, #236]	; (80052a0 <TIM_Base_SetConfig+0x120>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d003      	beq.n	80051c0 <TIM_Base_SetConfig+0x40>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a3a      	ldr	r2, [pc, #232]	; (80052a4 <TIM_Base_SetConfig+0x124>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d108      	bne.n	80051d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a2f      	ldr	r2, [pc, #188]	; (8005294 <TIM_Base_SetConfig+0x114>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d02b      	beq.n	8005232 <TIM_Base_SetConfig+0xb2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e0:	d027      	beq.n	8005232 <TIM_Base_SetConfig+0xb2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a2c      	ldr	r2, [pc, #176]	; (8005298 <TIM_Base_SetConfig+0x118>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d023      	beq.n	8005232 <TIM_Base_SetConfig+0xb2>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a2b      	ldr	r2, [pc, #172]	; (800529c <TIM_Base_SetConfig+0x11c>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d01f      	beq.n	8005232 <TIM_Base_SetConfig+0xb2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a2a      	ldr	r2, [pc, #168]	; (80052a0 <TIM_Base_SetConfig+0x120>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d01b      	beq.n	8005232 <TIM_Base_SetConfig+0xb2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a29      	ldr	r2, [pc, #164]	; (80052a4 <TIM_Base_SetConfig+0x124>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d017      	beq.n	8005232 <TIM_Base_SetConfig+0xb2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a28      	ldr	r2, [pc, #160]	; (80052a8 <TIM_Base_SetConfig+0x128>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d013      	beq.n	8005232 <TIM_Base_SetConfig+0xb2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a27      	ldr	r2, [pc, #156]	; (80052ac <TIM_Base_SetConfig+0x12c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00f      	beq.n	8005232 <TIM_Base_SetConfig+0xb2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a26      	ldr	r2, [pc, #152]	; (80052b0 <TIM_Base_SetConfig+0x130>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00b      	beq.n	8005232 <TIM_Base_SetConfig+0xb2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a25      	ldr	r2, [pc, #148]	; (80052b4 <TIM_Base_SetConfig+0x134>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d007      	beq.n	8005232 <TIM_Base_SetConfig+0xb2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a24      	ldr	r2, [pc, #144]	; (80052b8 <TIM_Base_SetConfig+0x138>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d003      	beq.n	8005232 <TIM_Base_SetConfig+0xb2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a23      	ldr	r2, [pc, #140]	; (80052bc <TIM_Base_SetConfig+0x13c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d108      	bne.n	8005244 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a0a      	ldr	r2, [pc, #40]	; (8005294 <TIM_Base_SetConfig+0x114>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d003      	beq.n	8005278 <TIM_Base_SetConfig+0xf8>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a0c      	ldr	r2, [pc, #48]	; (80052a4 <TIM_Base_SetConfig+0x124>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d103      	bne.n	8005280 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	691a      	ldr	r2, [r3, #16]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	615a      	str	r2, [r3, #20]
}
 8005286:	bf00      	nop
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40010000 	.word	0x40010000
 8005298:	40000400 	.word	0x40000400
 800529c:	40000800 	.word	0x40000800
 80052a0:	40000c00 	.word	0x40000c00
 80052a4:	40010400 	.word	0x40010400
 80052a8:	40014000 	.word	0x40014000
 80052ac:	40014400 	.word	0x40014400
 80052b0:	40014800 	.word	0x40014800
 80052b4:	40001800 	.word	0x40001800
 80052b8:	40001c00 	.word	0x40001c00
 80052bc:	40002000 	.word	0x40002000

080052c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	f023 0201 	bic.w	r2, r3, #1
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4b2b      	ldr	r3, [pc, #172]	; (8005398 <TIM_OC1_SetConfig+0xd8>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0303 	bic.w	r3, r3, #3
 80052f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f023 0302 	bic.w	r3, r3, #2
 8005308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	4313      	orrs	r3, r2
 8005312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a21      	ldr	r2, [pc, #132]	; (800539c <TIM_OC1_SetConfig+0xdc>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d003      	beq.n	8005324 <TIM_OC1_SetConfig+0x64>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a20      	ldr	r2, [pc, #128]	; (80053a0 <TIM_OC1_SetConfig+0xe0>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d10c      	bne.n	800533e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f023 0308 	bic.w	r3, r3, #8
 800532a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f023 0304 	bic.w	r3, r3, #4
 800533c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a16      	ldr	r2, [pc, #88]	; (800539c <TIM_OC1_SetConfig+0xdc>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d003      	beq.n	800534e <TIM_OC1_SetConfig+0x8e>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a15      	ldr	r2, [pc, #84]	; (80053a0 <TIM_OC1_SetConfig+0xe0>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d111      	bne.n	8005372 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800535c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4313      	orrs	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	621a      	str	r2, [r3, #32]
}
 800538c:	bf00      	nop
 800538e:	371c      	adds	r7, #28
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	fffeff8f 	.word	0xfffeff8f
 800539c:	40010000 	.word	0x40010000
 80053a0:	40010400 	.word	0x40010400

080053a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b087      	sub	sp, #28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	f023 0210 	bic.w	r2, r3, #16
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4b2e      	ldr	r3, [pc, #184]	; (8005488 <TIM_OC2_SetConfig+0xe4>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	021b      	lsls	r3, r3, #8
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f023 0320 	bic.w	r3, r3, #32
 80053ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a23      	ldr	r2, [pc, #140]	; (800548c <TIM_OC2_SetConfig+0xe8>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d003      	beq.n	800540c <TIM_OC2_SetConfig+0x68>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a22      	ldr	r2, [pc, #136]	; (8005490 <TIM_OC2_SetConfig+0xec>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d10d      	bne.n	8005428 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	011b      	lsls	r3, r3, #4
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	4313      	orrs	r3, r2
 800541e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005426:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a18      	ldr	r2, [pc, #96]	; (800548c <TIM_OC2_SetConfig+0xe8>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d003      	beq.n	8005438 <TIM_OC2_SetConfig+0x94>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a17      	ldr	r2, [pc, #92]	; (8005490 <TIM_OC2_SetConfig+0xec>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d113      	bne.n	8005460 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800543e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005446:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	4313      	orrs	r3, r2
 8005452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	4313      	orrs	r3, r2
 800545e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	621a      	str	r2, [r3, #32]
}
 800547a:	bf00      	nop
 800547c:	371c      	adds	r7, #28
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	feff8fff 	.word	0xfeff8fff
 800548c:	40010000 	.word	0x40010000
 8005490:	40010400 	.word	0x40010400

08005494 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005494:	b480      	push	{r7}
 8005496:	b087      	sub	sp, #28
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4b2d      	ldr	r3, [pc, #180]	; (8005574 <TIM_OC3_SetConfig+0xe0>)
 80054c0:	4013      	ands	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 0303 	bic.w	r3, r3, #3
 80054ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	021b      	lsls	r3, r3, #8
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a22      	ldr	r2, [pc, #136]	; (8005578 <TIM_OC3_SetConfig+0xe4>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d003      	beq.n	80054fa <TIM_OC3_SetConfig+0x66>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a21      	ldr	r2, [pc, #132]	; (800557c <TIM_OC3_SetConfig+0xe8>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d10d      	bne.n	8005516 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005500:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	021b      	lsls	r3, r3, #8
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	4313      	orrs	r3, r2
 800550c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a17      	ldr	r2, [pc, #92]	; (8005578 <TIM_OC3_SetConfig+0xe4>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d003      	beq.n	8005526 <TIM_OC3_SetConfig+0x92>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a16      	ldr	r2, [pc, #88]	; (800557c <TIM_OC3_SetConfig+0xe8>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d113      	bne.n	800554e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800552c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	011b      	lsls	r3, r3, #4
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	4313      	orrs	r3, r2
 8005540:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	011b      	lsls	r3, r3, #4
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	4313      	orrs	r3, r2
 800554c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	621a      	str	r2, [r3, #32]
}
 8005568:	bf00      	nop
 800556a:	371c      	adds	r7, #28
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	fffeff8f 	.word	0xfffeff8f
 8005578:	40010000 	.word	0x40010000
 800557c:	40010400 	.word	0x40010400

08005580 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4b1e      	ldr	r3, [pc, #120]	; (8005624 <TIM_OC4_SetConfig+0xa4>)
 80055ac:	4013      	ands	r3, r2
 80055ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	021b      	lsls	r3, r3, #8
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	031b      	lsls	r3, r3, #12
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a13      	ldr	r2, [pc, #76]	; (8005628 <TIM_OC4_SetConfig+0xa8>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d003      	beq.n	80055e8 <TIM_OC4_SetConfig+0x68>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a12      	ldr	r2, [pc, #72]	; (800562c <TIM_OC4_SetConfig+0xac>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d109      	bne.n	80055fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	019b      	lsls	r3, r3, #6
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	621a      	str	r2, [r3, #32]
}
 8005616:	bf00      	nop
 8005618:	371c      	adds	r7, #28
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	feff8fff 	.word	0xfeff8fff
 8005628:	40010000 	.word	0x40010000
 800562c:	40010400 	.word	0x40010400

08005630 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	4b1b      	ldr	r3, [pc, #108]	; (80056c8 <TIM_OC5_SetConfig+0x98>)
 800565c:	4013      	ands	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005670:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	041b      	lsls	r3, r3, #16
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4313      	orrs	r3, r2
 800567c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a12      	ldr	r2, [pc, #72]	; (80056cc <TIM_OC5_SetConfig+0x9c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d003      	beq.n	800568e <TIM_OC5_SetConfig+0x5e>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a11      	ldr	r2, [pc, #68]	; (80056d0 <TIM_OC5_SetConfig+0xa0>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d109      	bne.n	80056a2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005694:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	021b      	lsls	r3, r3, #8
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	621a      	str	r2, [r3, #32]
}
 80056bc:	bf00      	nop
 80056be:	371c      	adds	r7, #28
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	fffeff8f 	.word	0xfffeff8f
 80056cc:	40010000 	.word	0x40010000
 80056d0:	40010400 	.word	0x40010400

080056d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	4b1c      	ldr	r3, [pc, #112]	; (8005770 <TIM_OC6_SetConfig+0x9c>)
 8005700:	4013      	ands	r3, r2
 8005702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	021b      	lsls	r3, r3, #8
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	4313      	orrs	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	051b      	lsls	r3, r3, #20
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	4313      	orrs	r3, r2
 8005722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a13      	ldr	r2, [pc, #76]	; (8005774 <TIM_OC6_SetConfig+0xa0>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d003      	beq.n	8005734 <TIM_OC6_SetConfig+0x60>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a12      	ldr	r2, [pc, #72]	; (8005778 <TIM_OC6_SetConfig+0xa4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d109      	bne.n	8005748 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800573a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	029b      	lsls	r3, r3, #10
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	621a      	str	r2, [r3, #32]
}
 8005762:	bf00      	nop
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	feff8fff 	.word	0xfeff8fff
 8005774:	40010000 	.word	0x40010000
 8005778:	40010400 	.word	0x40010400

0800577c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	f023 0201 	bic.w	r2, r3, #1
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	011b      	lsls	r3, r3, #4
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f023 030a 	bic.w	r3, r3, #10
 80057b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	4313      	orrs	r3, r2
 80057c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	621a      	str	r2, [r3, #32]
}
 80057ce:	bf00      	nop
 80057d0:	371c      	adds	r7, #28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057da:	b480      	push	{r7}
 80057dc:	b087      	sub	sp, #28
 80057de:	af00      	add	r7, sp, #0
 80057e0:	60f8      	str	r0, [r7, #12]
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	f023 0210 	bic.w	r2, r3, #16
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005804:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	031b      	lsls	r3, r3, #12
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	4313      	orrs	r3, r2
 800580e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005816:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	011b      	lsls	r3, r3, #4
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	4313      	orrs	r3, r2
 8005820:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	621a      	str	r2, [r3, #32]
}
 800582e:	bf00      	nop
 8005830:	371c      	adds	r7, #28
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800583a:	b480      	push	{r7}
 800583c:	b085      	sub	sp, #20
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005850:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4313      	orrs	r3, r2
 8005858:	f043 0307 	orr.w	r3, r3, #7
 800585c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	609a      	str	r2, [r3, #8]
}
 8005864:	bf00      	nop
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005870:	b480      	push	{r7}
 8005872:	b087      	sub	sp, #28
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800588a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	021a      	lsls	r2, r3, #8
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	431a      	orrs	r2, r3
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	4313      	orrs	r3, r2
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	4313      	orrs	r3, r2
 800589c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	609a      	str	r2, [r3, #8]
}
 80058a4:	bf00      	nop
 80058a6:	371c      	adds	r7, #28
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f003 031f 	and.w	r3, r3, #31
 80058c2:	2201      	movs	r2, #1
 80058c4:	fa02 f303 	lsl.w	r3, r2, r3
 80058c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6a1a      	ldr	r2, [r3, #32]
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	43db      	mvns	r3, r3
 80058d2:	401a      	ands	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6a1a      	ldr	r2, [r3, #32]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f003 031f 	and.w	r3, r3, #31
 80058e2:	6879      	ldr	r1, [r7, #4]
 80058e4:	fa01 f303 	lsl.w	r3, r1, r3
 80058e8:	431a      	orrs	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	621a      	str	r2, [r3, #32]
}
 80058ee:	bf00      	nop
 80058f0:	371c      	adds	r7, #28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
	...

080058fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800590c:	2b01      	cmp	r3, #1
 800590e:	d101      	bne.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005910:	2302      	movs	r3, #2
 8005912:	e06d      	b.n	80059f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a30      	ldr	r2, [pc, #192]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d004      	beq.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a2f      	ldr	r2, [pc, #188]	; (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d108      	bne.n	800595a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800594e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005960:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	4313      	orrs	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a20      	ldr	r2, [pc, #128]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d022      	beq.n	80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005986:	d01d      	beq.n	80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1d      	ldr	r2, [pc, #116]	; (8005a04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d018      	beq.n	80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1c      	ldr	r2, [pc, #112]	; (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d013      	beq.n	80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a1a      	ldr	r2, [pc, #104]	; (8005a0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d00e      	beq.n	80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a15      	ldr	r2, [pc, #84]	; (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d009      	beq.n	80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a16      	ldr	r2, [pc, #88]	; (8005a10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d004      	beq.n	80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a15      	ldr	r2, [pc, #84]	; (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d10c      	bne.n	80059de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	40010000 	.word	0x40010000
 8005a00:	40010400 	.word	0x40010400
 8005a04:	40000400 	.word	0x40000400
 8005a08:	40000800 	.word	0x40000800
 8005a0c:	40000c00 	.word	0x40000c00
 8005a10:	40014000 	.word	0x40014000
 8005a14:	40001800 	.word	0x40001800

08005a18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e040      	b.n	8005ae8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d106      	bne.n	8005a7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7fb fbbc 	bl	80011f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2224      	movs	r2, #36	; 0x24
 8005a80:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0201 	bic.w	r2, r2, #1
 8005a90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fbe0 	bl	8006258 <UART_SetConfig>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d101      	bne.n	8005aa2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e022      	b.n	8005ae8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d002      	beq.n	8005ab0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fe38 	bl	8006720 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005abe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689a      	ldr	r2, [r3, #8]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ace:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0201 	orr.w	r2, r2, #1
 8005ade:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 febf 	bl	8006864 <UART_CheckIdleState>
 8005ae6:	4603      	mov	r3, r0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b08b      	sub	sp, #44	; 0x2c
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	4613      	mov	r3, r2
 8005afc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b02:	2b20      	cmp	r3, #32
 8005b04:	d147      	bne.n	8005b96 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d002      	beq.n	8005b12 <HAL_UART_Transmit_IT+0x22>
 8005b0c:	88fb      	ldrh	r3, [r7, #6]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e040      	b.n	8005b98 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	88fa      	ldrh	r2, [r7, #6]
 8005b20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	88fa      	ldrh	r2, [r7, #6]
 8005b28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2221      	movs	r2, #33	; 0x21
 8005b3e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b48:	d107      	bne.n	8005b5a <HAL_UART_Transmit_IT+0x6a>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d103      	bne.n	8005b5a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4a13      	ldr	r2, [pc, #76]	; (8005ba4 <HAL_UART_Transmit_IT+0xb4>)
 8005b56:	66da      	str	r2, [r3, #108]	; 0x6c
 8005b58:	e002      	b.n	8005b60 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	4a12      	ldr	r2, [pc, #72]	; (8005ba8 <HAL_UART_Transmit_IT+0xb8>)
 8005b5e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	623b      	str	r3, [r7, #32]
 8005b80:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b82:	69f9      	ldr	r1, [r7, #28]
 8005b84:	6a3a      	ldr	r2, [r7, #32]
 8005b86:	e841 2300 	strex	r3, r2, [r1]
 8005b8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1e6      	bne.n	8005b60 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	e000      	b.n	8005b98 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005b96:	2302      	movs	r3, #2
  }
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	372c      	adds	r7, #44	; 0x2c
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	08006dc3 	.word	0x08006dc3
 8005ba8:	08006d0d 	.word	0x08006d0d

08005bac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b08a      	sub	sp, #40	; 0x28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	d132      	bne.n	8005c2a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <HAL_UART_Receive_IT+0x24>
 8005bca:	88fb      	ldrh	r3, [r7, #6]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e02b      	b.n	8005c2c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d018      	beq.n	8005c1a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	e853 3f00 	ldrex	r3, [r3]
 8005bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	461a      	mov	r2, r3
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	623b      	str	r3, [r7, #32]
 8005c08:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0a:	69f9      	ldr	r1, [r7, #28]
 8005c0c:	6a3a      	ldr	r2, [r7, #32]
 8005c0e:	e841 2300 	strex	r3, r2, [r1]
 8005c12:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1e6      	bne.n	8005be8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c1a:	88fb      	ldrh	r3, [r7, #6]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	68b9      	ldr	r1, [r7, #8]
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f000 ff33 	bl	8006a8c <UART_Start_Receive_IT>
 8005c26:	4603      	mov	r3, r0
 8005c28:	e000      	b.n	8005c2c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005c2a:	2302      	movs	r3, #2
  }
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3728      	adds	r7, #40	; 0x28
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b0ba      	sub	sp, #232	; 0xe8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005c5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005c62:	4013      	ands	r3, r2
 8005c64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005c68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d115      	bne.n	8005c9c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c74:	f003 0320 	and.w	r3, r3, #32
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00f      	beq.n	8005c9c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c80:	f003 0320 	and.w	r3, r3, #32
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d009      	beq.n	8005c9c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 82ac 	beq.w	80061ea <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	4798      	blx	r3
      }
      return;
 8005c9a:	e2a6      	b.n	80061ea <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005c9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 8117 	beq.w	8005ed4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d106      	bne.n	8005cc0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005cb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005cb6:	4b85      	ldr	r3, [pc, #532]	; (8005ecc <HAL_UART_IRQHandler+0x298>)
 8005cb8:	4013      	ands	r3, r2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 810a 	beq.w	8005ed4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d011      	beq.n	8005cf0 <HAL_UART_IRQHandler+0xbc>
 8005ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00b      	beq.n	8005cf0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ce6:	f043 0201 	orr.w	r2, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cf4:	f003 0302 	and.w	r3, r3, #2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d011      	beq.n	8005d20 <HAL_UART_IRQHandler+0xec>
 8005cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00b      	beq.n	8005d20 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d16:	f043 0204 	orr.w	r2, r3, #4
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d24:	f003 0304 	and.w	r3, r3, #4
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d011      	beq.n	8005d50 <HAL_UART_IRQHandler+0x11c>
 8005d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00b      	beq.n	8005d50 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2204      	movs	r2, #4
 8005d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d46:	f043 0202 	orr.w	r2, r3, #2
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d54:	f003 0308 	and.w	r3, r3, #8
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d017      	beq.n	8005d8c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d60:	f003 0320 	and.w	r3, r3, #32
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d105      	bne.n	8005d74 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d6c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00b      	beq.n	8005d8c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2208      	movs	r2, #8
 8005d7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d82:	f043 0208 	orr.w	r2, r3, #8
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d012      	beq.n	8005dbe <HAL_UART_IRQHandler+0x18a>
 8005d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00c      	beq.n	8005dbe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005db4:	f043 0220 	orr.w	r2, r3, #32
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 8212 	beq.w	80061ee <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dce:	f003 0320 	and.w	r3, r3, #32
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00d      	beq.n	8005df2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dda:	f003 0320 	and.w	r3, r3, #32
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d007      	beq.n	8005df2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005df8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e06:	2b40      	cmp	r3, #64	; 0x40
 8005e08:	d005      	beq.n	8005e16 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d04f      	beq.n	8005eb6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fefe 	bl	8006c18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e26:	2b40      	cmp	r3, #64	; 0x40
 8005e28:	d141      	bne.n	8005eae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3308      	adds	r3, #8
 8005e30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3308      	adds	r3, #8
 8005e52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e66:	e841 2300 	strex	r3, r2, [r1]
 8005e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1d9      	bne.n	8005e2a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d013      	beq.n	8005ea6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e82:	4a13      	ldr	r2, [pc, #76]	; (8005ed0 <HAL_UART_IRQHandler+0x29c>)
 8005e84:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fc f95f 	bl	800214e <HAL_DMA_Abort_IT>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d017      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea4:	e00f      	b.n	8005ec6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f9b6 	bl	8006218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eac:	e00b      	b.n	8005ec6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f9b2 	bl	8006218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb4:	e007      	b.n	8005ec6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f9ae 	bl	8006218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005ec4:	e193      	b.n	80061ee <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec6:	bf00      	nop
    return;
 8005ec8:	e191      	b.n	80061ee <HAL_UART_IRQHandler+0x5ba>
 8005eca:	bf00      	nop
 8005ecc:	04000120 	.word	0x04000120
 8005ed0:	08006ce1 	.word	0x08006ce1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	f040 814c 	bne.w	8006176 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee2:	f003 0310 	and.w	r3, r3, #16
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f000 8145 	beq.w	8006176 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ef0:	f003 0310 	and.w	r3, r3, #16
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 813e 	beq.w	8006176 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2210      	movs	r2, #16
 8005f00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0c:	2b40      	cmp	r3, #64	; 0x40
 8005f0e:	f040 80b6 	bne.w	800607e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f1e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 8165 	beq.w	80061f2 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f32:	429a      	cmp	r2, r3
 8005f34:	f080 815d 	bcs.w	80061f2 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f46:	69db      	ldr	r3, [r3, #28]
 8005f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f4c:	f000 8086 	beq.w	800605c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f5c:	e853 3f00 	ldrex	r3, [r3]
 8005f60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	461a      	mov	r2, r3
 8005f76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f7e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f8a:	e841 2300 	strex	r3, r2, [r1]
 8005f8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1da      	bne.n	8005f50 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	3308      	adds	r3, #8
 8005fa0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fa4:	e853 3f00 	ldrex	r3, [r3]
 8005fa8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005faa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fac:	f023 0301 	bic.w	r3, r3, #1
 8005fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3308      	adds	r3, #8
 8005fba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005fbe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005fc2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005fc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1e1      	bne.n	8005f9a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3308      	adds	r3, #8
 8005fdc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fe0:	e853 3f00 	ldrex	r3, [r3]
 8005fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3308      	adds	r3, #8
 8005ff6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ffa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ffc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006000:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1e3      	bne.n	8005fd6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2220      	movs	r2, #32
 8006012:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006024:	e853 3f00 	ldrex	r3, [r3]
 8006028:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800602a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800602c:	f023 0310 	bic.w	r3, r3, #16
 8006030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	461a      	mov	r2, r3
 800603a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800603e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006040:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006042:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006044:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006046:	e841 2300 	strex	r3, r2, [r1]
 800604a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800604c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1e4      	bne.n	800601c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006056:	4618      	mov	r0, r3
 8006058:	f7fc f809 	bl	800206e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800606e:	b29b      	uxth	r3, r3
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	b29b      	uxth	r3, r3
 8006074:	4619      	mov	r1, r3
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f8d8 	bl	800622c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800607c:	e0b9      	b.n	80061f2 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800608a:	b29b      	uxth	r3, r3
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006098:	b29b      	uxth	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 80ab 	beq.w	80061f6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80060a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 80a6 	beq.w	80061f6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b2:	e853 3f00 	ldrex	r3, [r3]
 80060b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	461a      	mov	r2, r3
 80060c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060cc:	647b      	str	r3, [r7, #68]	; 0x44
 80060ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060d4:	e841 2300 	strex	r3, r2, [r1]
 80060d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e4      	bne.n	80060aa <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3308      	adds	r3, #8
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	e853 3f00 	ldrex	r3, [r3]
 80060ee:	623b      	str	r3, [r7, #32]
   return(result);
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	f023 0301 	bic.w	r3, r3, #1
 80060f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3308      	adds	r3, #8
 8006100:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006104:	633a      	str	r2, [r7, #48]	; 0x30
 8006106:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800610a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800610c:	e841 2300 	strex	r3, r2, [r1]
 8006110:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e3      	bne.n	80060e0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2220      	movs	r2, #32
 800611c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	60fb      	str	r3, [r7, #12]
   return(result);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f023 0310 	bic.w	r3, r3, #16
 8006140:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	461a      	mov	r2, r3
 800614a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800614e:	61fb      	str	r3, [r7, #28]
 8006150:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006152:	69b9      	ldr	r1, [r7, #24]
 8006154:	69fa      	ldr	r2, [r7, #28]
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	617b      	str	r3, [r7, #20]
   return(result);
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1e4      	bne.n	800612c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2202      	movs	r2, #2
 8006166:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006168:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800616c:	4619      	mov	r1, r3
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f85c 	bl	800622c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006174:	e03f      	b.n	80061f6 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800617a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00e      	beq.n	80061a0 <HAL_UART_IRQHandler+0x56c>
 8006182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d008      	beq.n	80061a0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006196:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f853 	bl	8006244 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800619e:	e02d      	b.n	80061fc <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80061a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00e      	beq.n	80061ca <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80061ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d008      	beq.n	80061ca <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d01c      	beq.n	80061fa <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	4798      	blx	r3
    }
    return;
 80061c8:	e017      	b.n	80061fa <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80061ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d012      	beq.n	80061fc <HAL_UART_IRQHandler+0x5c8>
 80061d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00c      	beq.n	80061fc <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fe4d 	bl	8006e82 <UART_EndTransmit_IT>
    return;
 80061e8:	e008      	b.n	80061fc <HAL_UART_IRQHandler+0x5c8>
      return;
 80061ea:	bf00      	nop
 80061ec:	e006      	b.n	80061fc <HAL_UART_IRQHandler+0x5c8>
    return;
 80061ee:	bf00      	nop
 80061f0:	e004      	b.n	80061fc <HAL_UART_IRQHandler+0x5c8>
      return;
 80061f2:	bf00      	nop
 80061f4:	e002      	b.n	80061fc <HAL_UART_IRQHandler+0x5c8>
      return;
 80061f6:	bf00      	nop
 80061f8:	e000      	b.n	80061fc <HAL_UART_IRQHandler+0x5c8>
    return;
 80061fa:	bf00      	nop
  }

}
 80061fc:	37e8      	adds	r7, #232	; 0xe8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop

08006204 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	460b      	mov	r3, r1
 8006236:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b088      	sub	sp, #32
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006260:	2300      	movs	r3, #0
 8006262:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689a      	ldr	r2, [r3, #8]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	431a      	orrs	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	431a      	orrs	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	69db      	ldr	r3, [r3, #28]
 8006278:	4313      	orrs	r3, r2
 800627a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	4ba6      	ldr	r3, [pc, #664]	; (800651c <UART_SetConfig+0x2c4>)
 8006284:	4013      	ands	r3, r2
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	6812      	ldr	r2, [r2, #0]
 800628a:	6979      	ldr	r1, [r7, #20]
 800628c:	430b      	orrs	r3, r1
 800628e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68da      	ldr	r2, [r3, #12]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a1b      	ldr	r3, [r3, #32]
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a94      	ldr	r2, [pc, #592]	; (8006520 <UART_SetConfig+0x2c8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d120      	bne.n	8006316 <UART_SetConfig+0xbe>
 80062d4:	4b93      	ldr	r3, [pc, #588]	; (8006524 <UART_SetConfig+0x2cc>)
 80062d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062da:	f003 0303 	and.w	r3, r3, #3
 80062de:	2b03      	cmp	r3, #3
 80062e0:	d816      	bhi.n	8006310 <UART_SetConfig+0xb8>
 80062e2:	a201      	add	r2, pc, #4	; (adr r2, 80062e8 <UART_SetConfig+0x90>)
 80062e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e8:	080062f9 	.word	0x080062f9
 80062ec:	08006305 	.word	0x08006305
 80062f0:	080062ff 	.word	0x080062ff
 80062f4:	0800630b 	.word	0x0800630b
 80062f8:	2301      	movs	r3, #1
 80062fa:	77fb      	strb	r3, [r7, #31]
 80062fc:	e150      	b.n	80065a0 <UART_SetConfig+0x348>
 80062fe:	2302      	movs	r3, #2
 8006300:	77fb      	strb	r3, [r7, #31]
 8006302:	e14d      	b.n	80065a0 <UART_SetConfig+0x348>
 8006304:	2304      	movs	r3, #4
 8006306:	77fb      	strb	r3, [r7, #31]
 8006308:	e14a      	b.n	80065a0 <UART_SetConfig+0x348>
 800630a:	2308      	movs	r3, #8
 800630c:	77fb      	strb	r3, [r7, #31]
 800630e:	e147      	b.n	80065a0 <UART_SetConfig+0x348>
 8006310:	2310      	movs	r3, #16
 8006312:	77fb      	strb	r3, [r7, #31]
 8006314:	e144      	b.n	80065a0 <UART_SetConfig+0x348>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a83      	ldr	r2, [pc, #524]	; (8006528 <UART_SetConfig+0x2d0>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d132      	bne.n	8006386 <UART_SetConfig+0x12e>
 8006320:	4b80      	ldr	r3, [pc, #512]	; (8006524 <UART_SetConfig+0x2cc>)
 8006322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006326:	f003 030c 	and.w	r3, r3, #12
 800632a:	2b0c      	cmp	r3, #12
 800632c:	d828      	bhi.n	8006380 <UART_SetConfig+0x128>
 800632e:	a201      	add	r2, pc, #4	; (adr r2, 8006334 <UART_SetConfig+0xdc>)
 8006330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006334:	08006369 	.word	0x08006369
 8006338:	08006381 	.word	0x08006381
 800633c:	08006381 	.word	0x08006381
 8006340:	08006381 	.word	0x08006381
 8006344:	08006375 	.word	0x08006375
 8006348:	08006381 	.word	0x08006381
 800634c:	08006381 	.word	0x08006381
 8006350:	08006381 	.word	0x08006381
 8006354:	0800636f 	.word	0x0800636f
 8006358:	08006381 	.word	0x08006381
 800635c:	08006381 	.word	0x08006381
 8006360:	08006381 	.word	0x08006381
 8006364:	0800637b 	.word	0x0800637b
 8006368:	2300      	movs	r3, #0
 800636a:	77fb      	strb	r3, [r7, #31]
 800636c:	e118      	b.n	80065a0 <UART_SetConfig+0x348>
 800636e:	2302      	movs	r3, #2
 8006370:	77fb      	strb	r3, [r7, #31]
 8006372:	e115      	b.n	80065a0 <UART_SetConfig+0x348>
 8006374:	2304      	movs	r3, #4
 8006376:	77fb      	strb	r3, [r7, #31]
 8006378:	e112      	b.n	80065a0 <UART_SetConfig+0x348>
 800637a:	2308      	movs	r3, #8
 800637c:	77fb      	strb	r3, [r7, #31]
 800637e:	e10f      	b.n	80065a0 <UART_SetConfig+0x348>
 8006380:	2310      	movs	r3, #16
 8006382:	77fb      	strb	r3, [r7, #31]
 8006384:	e10c      	b.n	80065a0 <UART_SetConfig+0x348>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a68      	ldr	r2, [pc, #416]	; (800652c <UART_SetConfig+0x2d4>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d120      	bne.n	80063d2 <UART_SetConfig+0x17a>
 8006390:	4b64      	ldr	r3, [pc, #400]	; (8006524 <UART_SetConfig+0x2cc>)
 8006392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006396:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800639a:	2b30      	cmp	r3, #48	; 0x30
 800639c:	d013      	beq.n	80063c6 <UART_SetConfig+0x16e>
 800639e:	2b30      	cmp	r3, #48	; 0x30
 80063a0:	d814      	bhi.n	80063cc <UART_SetConfig+0x174>
 80063a2:	2b20      	cmp	r3, #32
 80063a4:	d009      	beq.n	80063ba <UART_SetConfig+0x162>
 80063a6:	2b20      	cmp	r3, #32
 80063a8:	d810      	bhi.n	80063cc <UART_SetConfig+0x174>
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <UART_SetConfig+0x15c>
 80063ae:	2b10      	cmp	r3, #16
 80063b0:	d006      	beq.n	80063c0 <UART_SetConfig+0x168>
 80063b2:	e00b      	b.n	80063cc <UART_SetConfig+0x174>
 80063b4:	2300      	movs	r3, #0
 80063b6:	77fb      	strb	r3, [r7, #31]
 80063b8:	e0f2      	b.n	80065a0 <UART_SetConfig+0x348>
 80063ba:	2302      	movs	r3, #2
 80063bc:	77fb      	strb	r3, [r7, #31]
 80063be:	e0ef      	b.n	80065a0 <UART_SetConfig+0x348>
 80063c0:	2304      	movs	r3, #4
 80063c2:	77fb      	strb	r3, [r7, #31]
 80063c4:	e0ec      	b.n	80065a0 <UART_SetConfig+0x348>
 80063c6:	2308      	movs	r3, #8
 80063c8:	77fb      	strb	r3, [r7, #31]
 80063ca:	e0e9      	b.n	80065a0 <UART_SetConfig+0x348>
 80063cc:	2310      	movs	r3, #16
 80063ce:	77fb      	strb	r3, [r7, #31]
 80063d0:	e0e6      	b.n	80065a0 <UART_SetConfig+0x348>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a56      	ldr	r2, [pc, #344]	; (8006530 <UART_SetConfig+0x2d8>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d120      	bne.n	800641e <UART_SetConfig+0x1c6>
 80063dc:	4b51      	ldr	r3, [pc, #324]	; (8006524 <UART_SetConfig+0x2cc>)
 80063de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80063e6:	2bc0      	cmp	r3, #192	; 0xc0
 80063e8:	d013      	beq.n	8006412 <UART_SetConfig+0x1ba>
 80063ea:	2bc0      	cmp	r3, #192	; 0xc0
 80063ec:	d814      	bhi.n	8006418 <UART_SetConfig+0x1c0>
 80063ee:	2b80      	cmp	r3, #128	; 0x80
 80063f0:	d009      	beq.n	8006406 <UART_SetConfig+0x1ae>
 80063f2:	2b80      	cmp	r3, #128	; 0x80
 80063f4:	d810      	bhi.n	8006418 <UART_SetConfig+0x1c0>
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <UART_SetConfig+0x1a8>
 80063fa:	2b40      	cmp	r3, #64	; 0x40
 80063fc:	d006      	beq.n	800640c <UART_SetConfig+0x1b4>
 80063fe:	e00b      	b.n	8006418 <UART_SetConfig+0x1c0>
 8006400:	2300      	movs	r3, #0
 8006402:	77fb      	strb	r3, [r7, #31]
 8006404:	e0cc      	b.n	80065a0 <UART_SetConfig+0x348>
 8006406:	2302      	movs	r3, #2
 8006408:	77fb      	strb	r3, [r7, #31]
 800640a:	e0c9      	b.n	80065a0 <UART_SetConfig+0x348>
 800640c:	2304      	movs	r3, #4
 800640e:	77fb      	strb	r3, [r7, #31]
 8006410:	e0c6      	b.n	80065a0 <UART_SetConfig+0x348>
 8006412:	2308      	movs	r3, #8
 8006414:	77fb      	strb	r3, [r7, #31]
 8006416:	e0c3      	b.n	80065a0 <UART_SetConfig+0x348>
 8006418:	2310      	movs	r3, #16
 800641a:	77fb      	strb	r3, [r7, #31]
 800641c:	e0c0      	b.n	80065a0 <UART_SetConfig+0x348>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a44      	ldr	r2, [pc, #272]	; (8006534 <UART_SetConfig+0x2dc>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d125      	bne.n	8006474 <UART_SetConfig+0x21c>
 8006428:	4b3e      	ldr	r3, [pc, #248]	; (8006524 <UART_SetConfig+0x2cc>)
 800642a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800642e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006436:	d017      	beq.n	8006468 <UART_SetConfig+0x210>
 8006438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800643c:	d817      	bhi.n	800646e <UART_SetConfig+0x216>
 800643e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006442:	d00b      	beq.n	800645c <UART_SetConfig+0x204>
 8006444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006448:	d811      	bhi.n	800646e <UART_SetConfig+0x216>
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <UART_SetConfig+0x1fe>
 800644e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006452:	d006      	beq.n	8006462 <UART_SetConfig+0x20a>
 8006454:	e00b      	b.n	800646e <UART_SetConfig+0x216>
 8006456:	2300      	movs	r3, #0
 8006458:	77fb      	strb	r3, [r7, #31]
 800645a:	e0a1      	b.n	80065a0 <UART_SetConfig+0x348>
 800645c:	2302      	movs	r3, #2
 800645e:	77fb      	strb	r3, [r7, #31]
 8006460:	e09e      	b.n	80065a0 <UART_SetConfig+0x348>
 8006462:	2304      	movs	r3, #4
 8006464:	77fb      	strb	r3, [r7, #31]
 8006466:	e09b      	b.n	80065a0 <UART_SetConfig+0x348>
 8006468:	2308      	movs	r3, #8
 800646a:	77fb      	strb	r3, [r7, #31]
 800646c:	e098      	b.n	80065a0 <UART_SetConfig+0x348>
 800646e:	2310      	movs	r3, #16
 8006470:	77fb      	strb	r3, [r7, #31]
 8006472:	e095      	b.n	80065a0 <UART_SetConfig+0x348>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a2f      	ldr	r2, [pc, #188]	; (8006538 <UART_SetConfig+0x2e0>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d125      	bne.n	80064ca <UART_SetConfig+0x272>
 800647e:	4b29      	ldr	r3, [pc, #164]	; (8006524 <UART_SetConfig+0x2cc>)
 8006480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006484:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006488:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800648c:	d017      	beq.n	80064be <UART_SetConfig+0x266>
 800648e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006492:	d817      	bhi.n	80064c4 <UART_SetConfig+0x26c>
 8006494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006498:	d00b      	beq.n	80064b2 <UART_SetConfig+0x25a>
 800649a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800649e:	d811      	bhi.n	80064c4 <UART_SetConfig+0x26c>
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <UART_SetConfig+0x254>
 80064a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064a8:	d006      	beq.n	80064b8 <UART_SetConfig+0x260>
 80064aa:	e00b      	b.n	80064c4 <UART_SetConfig+0x26c>
 80064ac:	2301      	movs	r3, #1
 80064ae:	77fb      	strb	r3, [r7, #31]
 80064b0:	e076      	b.n	80065a0 <UART_SetConfig+0x348>
 80064b2:	2302      	movs	r3, #2
 80064b4:	77fb      	strb	r3, [r7, #31]
 80064b6:	e073      	b.n	80065a0 <UART_SetConfig+0x348>
 80064b8:	2304      	movs	r3, #4
 80064ba:	77fb      	strb	r3, [r7, #31]
 80064bc:	e070      	b.n	80065a0 <UART_SetConfig+0x348>
 80064be:	2308      	movs	r3, #8
 80064c0:	77fb      	strb	r3, [r7, #31]
 80064c2:	e06d      	b.n	80065a0 <UART_SetConfig+0x348>
 80064c4:	2310      	movs	r3, #16
 80064c6:	77fb      	strb	r3, [r7, #31]
 80064c8:	e06a      	b.n	80065a0 <UART_SetConfig+0x348>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a1b      	ldr	r2, [pc, #108]	; (800653c <UART_SetConfig+0x2e4>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d138      	bne.n	8006546 <UART_SetConfig+0x2ee>
 80064d4:	4b13      	ldr	r3, [pc, #76]	; (8006524 <UART_SetConfig+0x2cc>)
 80064d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80064de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064e2:	d017      	beq.n	8006514 <UART_SetConfig+0x2bc>
 80064e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064e8:	d82a      	bhi.n	8006540 <UART_SetConfig+0x2e8>
 80064ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ee:	d00b      	beq.n	8006508 <UART_SetConfig+0x2b0>
 80064f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064f4:	d824      	bhi.n	8006540 <UART_SetConfig+0x2e8>
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d003      	beq.n	8006502 <UART_SetConfig+0x2aa>
 80064fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064fe:	d006      	beq.n	800650e <UART_SetConfig+0x2b6>
 8006500:	e01e      	b.n	8006540 <UART_SetConfig+0x2e8>
 8006502:	2300      	movs	r3, #0
 8006504:	77fb      	strb	r3, [r7, #31]
 8006506:	e04b      	b.n	80065a0 <UART_SetConfig+0x348>
 8006508:	2302      	movs	r3, #2
 800650a:	77fb      	strb	r3, [r7, #31]
 800650c:	e048      	b.n	80065a0 <UART_SetConfig+0x348>
 800650e:	2304      	movs	r3, #4
 8006510:	77fb      	strb	r3, [r7, #31]
 8006512:	e045      	b.n	80065a0 <UART_SetConfig+0x348>
 8006514:	2308      	movs	r3, #8
 8006516:	77fb      	strb	r3, [r7, #31]
 8006518:	e042      	b.n	80065a0 <UART_SetConfig+0x348>
 800651a:	bf00      	nop
 800651c:	efff69f3 	.word	0xefff69f3
 8006520:	40011000 	.word	0x40011000
 8006524:	40023800 	.word	0x40023800
 8006528:	40004400 	.word	0x40004400
 800652c:	40004800 	.word	0x40004800
 8006530:	40004c00 	.word	0x40004c00
 8006534:	40005000 	.word	0x40005000
 8006538:	40011400 	.word	0x40011400
 800653c:	40007800 	.word	0x40007800
 8006540:	2310      	movs	r3, #16
 8006542:	77fb      	strb	r3, [r7, #31]
 8006544:	e02c      	b.n	80065a0 <UART_SetConfig+0x348>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a72      	ldr	r2, [pc, #456]	; (8006714 <UART_SetConfig+0x4bc>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d125      	bne.n	800659c <UART_SetConfig+0x344>
 8006550:	4b71      	ldr	r3, [pc, #452]	; (8006718 <UART_SetConfig+0x4c0>)
 8006552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006556:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800655a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800655e:	d017      	beq.n	8006590 <UART_SetConfig+0x338>
 8006560:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006564:	d817      	bhi.n	8006596 <UART_SetConfig+0x33e>
 8006566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800656a:	d00b      	beq.n	8006584 <UART_SetConfig+0x32c>
 800656c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006570:	d811      	bhi.n	8006596 <UART_SetConfig+0x33e>
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <UART_SetConfig+0x326>
 8006576:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800657a:	d006      	beq.n	800658a <UART_SetConfig+0x332>
 800657c:	e00b      	b.n	8006596 <UART_SetConfig+0x33e>
 800657e:	2300      	movs	r3, #0
 8006580:	77fb      	strb	r3, [r7, #31]
 8006582:	e00d      	b.n	80065a0 <UART_SetConfig+0x348>
 8006584:	2302      	movs	r3, #2
 8006586:	77fb      	strb	r3, [r7, #31]
 8006588:	e00a      	b.n	80065a0 <UART_SetConfig+0x348>
 800658a:	2304      	movs	r3, #4
 800658c:	77fb      	strb	r3, [r7, #31]
 800658e:	e007      	b.n	80065a0 <UART_SetConfig+0x348>
 8006590:	2308      	movs	r3, #8
 8006592:	77fb      	strb	r3, [r7, #31]
 8006594:	e004      	b.n	80065a0 <UART_SetConfig+0x348>
 8006596:	2310      	movs	r3, #16
 8006598:	77fb      	strb	r3, [r7, #31]
 800659a:	e001      	b.n	80065a0 <UART_SetConfig+0x348>
 800659c:	2310      	movs	r3, #16
 800659e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	69db      	ldr	r3, [r3, #28]
 80065a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065a8:	d15b      	bne.n	8006662 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80065aa:	7ffb      	ldrb	r3, [r7, #31]
 80065ac:	2b08      	cmp	r3, #8
 80065ae:	d828      	bhi.n	8006602 <UART_SetConfig+0x3aa>
 80065b0:	a201      	add	r2, pc, #4	; (adr r2, 80065b8 <UART_SetConfig+0x360>)
 80065b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b6:	bf00      	nop
 80065b8:	080065dd 	.word	0x080065dd
 80065bc:	080065e5 	.word	0x080065e5
 80065c0:	080065ed 	.word	0x080065ed
 80065c4:	08006603 	.word	0x08006603
 80065c8:	080065f3 	.word	0x080065f3
 80065cc:	08006603 	.word	0x08006603
 80065d0:	08006603 	.word	0x08006603
 80065d4:	08006603 	.word	0x08006603
 80065d8:	080065fb 	.word	0x080065fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065dc:	f7fd fb96 	bl	8003d0c <HAL_RCC_GetPCLK1Freq>
 80065e0:	61b8      	str	r0, [r7, #24]
        break;
 80065e2:	e013      	b.n	800660c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065e4:	f7fd fba6 	bl	8003d34 <HAL_RCC_GetPCLK2Freq>
 80065e8:	61b8      	str	r0, [r7, #24]
        break;
 80065ea:	e00f      	b.n	800660c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065ec:	4b4b      	ldr	r3, [pc, #300]	; (800671c <UART_SetConfig+0x4c4>)
 80065ee:	61bb      	str	r3, [r7, #24]
        break;
 80065f0:	e00c      	b.n	800660c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065f2:	f7fd fa79 	bl	8003ae8 <HAL_RCC_GetSysClockFreq>
 80065f6:	61b8      	str	r0, [r7, #24]
        break;
 80065f8:	e008      	b.n	800660c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065fe:	61bb      	str	r3, [r7, #24]
        break;
 8006600:	e004      	b.n	800660c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006602:	2300      	movs	r3, #0
 8006604:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	77bb      	strb	r3, [r7, #30]
        break;
 800660a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d074      	beq.n	80066fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	005a      	lsls	r2, r3, #1
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	085b      	lsrs	r3, r3, #1
 800661c:	441a      	add	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	fbb2 f3f3 	udiv	r3, r2, r3
 8006626:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	2b0f      	cmp	r3, #15
 800662c:	d916      	bls.n	800665c <UART_SetConfig+0x404>
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006634:	d212      	bcs.n	800665c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	b29b      	uxth	r3, r3
 800663a:	f023 030f 	bic.w	r3, r3, #15
 800663e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	085b      	lsrs	r3, r3, #1
 8006644:	b29b      	uxth	r3, r3
 8006646:	f003 0307 	and.w	r3, r3, #7
 800664a:	b29a      	uxth	r2, r3
 800664c:	89fb      	ldrh	r3, [r7, #14]
 800664e:	4313      	orrs	r3, r2
 8006650:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	89fa      	ldrh	r2, [r7, #14]
 8006658:	60da      	str	r2, [r3, #12]
 800665a:	e04f      	b.n	80066fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	77bb      	strb	r3, [r7, #30]
 8006660:	e04c      	b.n	80066fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006662:	7ffb      	ldrb	r3, [r7, #31]
 8006664:	2b08      	cmp	r3, #8
 8006666:	d828      	bhi.n	80066ba <UART_SetConfig+0x462>
 8006668:	a201      	add	r2, pc, #4	; (adr r2, 8006670 <UART_SetConfig+0x418>)
 800666a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666e:	bf00      	nop
 8006670:	08006695 	.word	0x08006695
 8006674:	0800669d 	.word	0x0800669d
 8006678:	080066a5 	.word	0x080066a5
 800667c:	080066bb 	.word	0x080066bb
 8006680:	080066ab 	.word	0x080066ab
 8006684:	080066bb 	.word	0x080066bb
 8006688:	080066bb 	.word	0x080066bb
 800668c:	080066bb 	.word	0x080066bb
 8006690:	080066b3 	.word	0x080066b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006694:	f7fd fb3a 	bl	8003d0c <HAL_RCC_GetPCLK1Freq>
 8006698:	61b8      	str	r0, [r7, #24]
        break;
 800669a:	e013      	b.n	80066c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800669c:	f7fd fb4a 	bl	8003d34 <HAL_RCC_GetPCLK2Freq>
 80066a0:	61b8      	str	r0, [r7, #24]
        break;
 80066a2:	e00f      	b.n	80066c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066a4:	4b1d      	ldr	r3, [pc, #116]	; (800671c <UART_SetConfig+0x4c4>)
 80066a6:	61bb      	str	r3, [r7, #24]
        break;
 80066a8:	e00c      	b.n	80066c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066aa:	f7fd fa1d 	bl	8003ae8 <HAL_RCC_GetSysClockFreq>
 80066ae:	61b8      	str	r0, [r7, #24]
        break;
 80066b0:	e008      	b.n	80066c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066b6:	61bb      	str	r3, [r7, #24]
        break;
 80066b8:	e004      	b.n	80066c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	77bb      	strb	r3, [r7, #30]
        break;
 80066c2:	bf00      	nop
    }

    if (pclk != 0U)
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d018      	beq.n	80066fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	085a      	lsrs	r2, r3, #1
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	441a      	add	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	2b0f      	cmp	r3, #15
 80066e2:	d909      	bls.n	80066f8 <UART_SetConfig+0x4a0>
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ea:	d205      	bcs.n	80066f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	60da      	str	r2, [r3, #12]
 80066f6:	e001      	b.n	80066fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006708:	7fbb      	ldrb	r3, [r7, #30]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3720      	adds	r7, #32
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	40007c00 	.word	0x40007c00
 8006718:	40023800 	.word	0x40023800
 800671c:	00f42400 	.word	0x00f42400

08006720 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00a      	beq.n	800674a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	430a      	orrs	r2, r1
 8006748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00a      	beq.n	800676c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00a      	beq.n	800678e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	430a      	orrs	r2, r1
 800678c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006792:	f003 0308 	and.w	r3, r3, #8
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00a      	beq.n	80067b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	430a      	orrs	r2, r1
 80067ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b4:	f003 0310 	and.w	r3, r3, #16
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00a      	beq.n	80067d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	430a      	orrs	r2, r1
 80067d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	f003 0320 	and.w	r3, r3, #32
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00a      	beq.n	80067f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d01a      	beq.n	8006836 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800681e:	d10a      	bne.n	8006836 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	430a      	orrs	r2, r1
 8006834:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00a      	beq.n	8006858 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	430a      	orrs	r2, r1
 8006856:	605a      	str	r2, [r3, #4]
  }
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af02      	add	r7, sp, #8
 800686a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006874:	f7fb faba 	bl	8001dec <HAL_GetTick>
 8006878:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0308 	and.w	r3, r3, #8
 8006884:	2b08      	cmp	r3, #8
 8006886:	d10e      	bne.n	80068a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006888:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f831 	bl	80068fe <UART_WaitOnFlagUntilTimeout>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e027      	b.n	80068f6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b04      	cmp	r3, #4
 80068b2:	d10e      	bne.n	80068d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f81b 	bl	80068fe <UART_WaitOnFlagUntilTimeout>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e011      	b.n	80068f6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2220      	movs	r2, #32
 80068d6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2220      	movs	r2, #32
 80068dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b09c      	sub	sp, #112	; 0x70
 8006902:	af00      	add	r7, sp, #0
 8006904:	60f8      	str	r0, [r7, #12]
 8006906:	60b9      	str	r1, [r7, #8]
 8006908:	603b      	str	r3, [r7, #0]
 800690a:	4613      	mov	r3, r2
 800690c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800690e:	e0a7      	b.n	8006a60 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006910:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006916:	f000 80a3 	beq.w	8006a60 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800691a:	f7fb fa67 	bl	8001dec <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006926:	429a      	cmp	r2, r3
 8006928:	d302      	bcc.n	8006930 <UART_WaitOnFlagUntilTimeout+0x32>
 800692a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800692c:	2b00      	cmp	r3, #0
 800692e:	d13f      	bne.n	80069b0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800693e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006940:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006944:	667b      	str	r3, [r7, #100]	; 0x64
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800694e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006950:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006952:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006954:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800695c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e6      	bne.n	8006930 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3308      	adds	r3, #8
 8006968:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800696c:	e853 3f00 	ldrex	r3, [r3]
 8006970:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006974:	f023 0301 	bic.w	r3, r3, #1
 8006978:	663b      	str	r3, [r7, #96]	; 0x60
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3308      	adds	r3, #8
 8006980:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006982:	64ba      	str	r2, [r7, #72]	; 0x48
 8006984:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006986:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006988:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800698a:	e841 2300 	strex	r3, r2, [r1]
 800698e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1e5      	bne.n	8006962 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2220      	movs	r2, #32
 800699a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2220      	movs	r2, #32
 80069a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e068      	b.n	8006a82 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0304 	and.w	r3, r3, #4
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d050      	beq.n	8006a60 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	69db      	ldr	r3, [r3, #28]
 80069c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069cc:	d148      	bne.n	8006a60 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069d6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e0:	e853 3f00 	ldrex	r3, [r3]
 80069e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069f6:	637b      	str	r3, [r7, #52]	; 0x34
 80069f8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069fe:	e841 2300 	strex	r3, r2, [r1]
 8006a02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1e6      	bne.n	80069d8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3308      	adds	r3, #8
 8006a10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	613b      	str	r3, [r7, #16]
   return(result);
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f023 0301 	bic.w	r3, r3, #1
 8006a20:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3308      	adds	r3, #8
 8006a28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a2a:	623a      	str	r2, [r7, #32]
 8006a2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2e:	69f9      	ldr	r1, [r7, #28]
 8006a30:	6a3a      	ldr	r2, [r7, #32]
 8006a32:	e841 2300 	strex	r3, r2, [r1]
 8006a36:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1e5      	bne.n	8006a0a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2220      	movs	r2, #32
 8006a42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2220      	movs	r2, #32
 8006a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e010      	b.n	8006a82 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	69da      	ldr	r2, [r3, #28]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	4013      	ands	r3, r2
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	bf0c      	ite	eq
 8006a70:	2301      	moveq	r3, #1
 8006a72:	2300      	movne	r3, #0
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	461a      	mov	r2, r3
 8006a78:	79fb      	ldrb	r3, [r7, #7]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	f43f af48 	beq.w	8006910 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3770      	adds	r7, #112	; 0x70
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
	...

08006a8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b097      	sub	sp, #92	; 0x5c
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	4613      	mov	r3, r2
 8006a98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	88fa      	ldrh	r2, [r7, #6]
 8006aa4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	88fa      	ldrh	r2, [r7, #6]
 8006aac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006abe:	d10e      	bne.n	8006ade <UART_Start_Receive_IT+0x52>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d105      	bne.n	8006ad4 <UART_Start_Receive_IT+0x48>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006ace:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ad2:	e02d      	b.n	8006b30 <UART_Start_Receive_IT+0xa4>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	22ff      	movs	r2, #255	; 0xff
 8006ad8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006adc:	e028      	b.n	8006b30 <UART_Start_Receive_IT+0xa4>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10d      	bne.n	8006b02 <UART_Start_Receive_IT+0x76>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d104      	bne.n	8006af8 <UART_Start_Receive_IT+0x6c>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	22ff      	movs	r2, #255	; 0xff
 8006af2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006af6:	e01b      	b.n	8006b30 <UART_Start_Receive_IT+0xa4>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	227f      	movs	r2, #127	; 0x7f
 8006afc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b00:	e016      	b.n	8006b30 <UART_Start_Receive_IT+0xa4>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b0a:	d10d      	bne.n	8006b28 <UART_Start_Receive_IT+0x9c>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d104      	bne.n	8006b1e <UART_Start_Receive_IT+0x92>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	227f      	movs	r2, #127	; 0x7f
 8006b18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b1c:	e008      	b.n	8006b30 <UART_Start_Receive_IT+0xa4>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	223f      	movs	r2, #63	; 0x3f
 8006b22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b26:	e003      	b.n	8006b30 <UART_Start_Receive_IT+0xa4>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2222      	movs	r2, #34	; 0x22
 8006b3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3308      	adds	r3, #8
 8006b46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b4a:	e853 3f00 	ldrex	r3, [r3]
 8006b4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b52:	f043 0301 	orr.w	r3, r3, #1
 8006b56:	657b      	str	r3, [r7, #84]	; 0x54
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3308      	adds	r3, #8
 8006b5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b60:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b62:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b68:	e841 2300 	strex	r3, r2, [r1]
 8006b6c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1e5      	bne.n	8006b40 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b7c:	d107      	bne.n	8006b8e <UART_Start_Receive_IT+0x102>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d103      	bne.n	8006b8e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	4a21      	ldr	r2, [pc, #132]	; (8006c10 <UART_Start_Receive_IT+0x184>)
 8006b8a:	669a      	str	r2, [r3, #104]	; 0x68
 8006b8c:	e002      	b.n	8006b94 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	4a20      	ldr	r2, [pc, #128]	; (8006c14 <UART_Start_Receive_IT+0x188>)
 8006b92:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d019      	beq.n	8006bd0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba4:	e853 3f00 	ldrex	r3, [r3]
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bba:	637b      	str	r3, [r7, #52]	; 0x34
 8006bbc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e6      	bne.n	8006b9c <UART_Start_Receive_IT+0x110>
 8006bce:	e018      	b.n	8006c02 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	e853 3f00 	ldrex	r3, [r3]
 8006bdc:	613b      	str	r3, [r7, #16]
   return(result);
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	f043 0320 	orr.w	r3, r3, #32
 8006be4:	653b      	str	r3, [r7, #80]	; 0x50
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bee:	623b      	str	r3, [r7, #32]
 8006bf0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf2:	69f9      	ldr	r1, [r7, #28]
 8006bf4:	6a3a      	ldr	r2, [r7, #32]
 8006bf6:	e841 2300 	strex	r3, r2, [r1]
 8006bfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1e6      	bne.n	8006bd0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	375c      	adds	r7, #92	; 0x5c
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	0800703d 	.word	0x0800703d
 8006c14:	08006ed7 	.word	0x08006ed7

08006c18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b095      	sub	sp, #84	; 0x54
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c3e:	643b      	str	r3, [r7, #64]	; 0x40
 8006c40:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e6      	bne.n	8006c20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3308      	adds	r3, #8
 8006c58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	e853 3f00 	ldrex	r3, [r3]
 8006c60:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	f023 0301 	bic.w	r3, r3, #1
 8006c68:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3308      	adds	r3, #8
 8006c70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c7a:	e841 2300 	strex	r3, r2, [r1]
 8006c7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1e5      	bne.n	8006c52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d118      	bne.n	8006cc0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	e853 3f00 	ldrex	r3, [r3]
 8006c9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	f023 0310 	bic.w	r3, r3, #16
 8006ca2:	647b      	str	r3, [r7, #68]	; 0x44
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	461a      	mov	r2, r3
 8006caa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cac:	61bb      	str	r3, [r7, #24]
 8006cae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb0:	6979      	ldr	r1, [r7, #20]
 8006cb2:	69ba      	ldr	r2, [r7, #24]
 8006cb4:	e841 2300 	strex	r3, r2, [r1]
 8006cb8:	613b      	str	r3, [r7, #16]
   return(result);
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1e6      	bne.n	8006c8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006cd4:	bf00      	nop
 8006cd6:	3754      	adds	r7, #84	; 0x54
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f7ff fa8a 	bl	8006218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d04:	bf00      	nop
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b08f      	sub	sp, #60	; 0x3c
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d18:	2b21      	cmp	r3, #33	; 0x21
 8006d1a:	d14c      	bne.n	8006db6 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d132      	bne.n	8006d8e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	e853 3f00 	ldrex	r3, [r3]
 8006d34:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	461a      	mov	r2, r3
 8006d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d48:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d4e:	e841 2300 	strex	r3, r2, [r1]
 8006d52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1e6      	bne.n	8006d28 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	e853 3f00 	ldrex	r3, [r3]
 8006d66:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d6e:	633b      	str	r3, [r7, #48]	; 0x30
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	461a      	mov	r2, r3
 8006d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d78:	61bb      	str	r3, [r7, #24]
 8006d7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	6979      	ldr	r1, [r7, #20]
 8006d7e:	69ba      	ldr	r2, [r7, #24]
 8006d80:	e841 2300 	strex	r3, r2, [r1]
 8006d84:	613b      	str	r3, [r7, #16]
   return(result);
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1e6      	bne.n	8006d5a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006d8c:	e013      	b.n	8006db6 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d92:	781a      	ldrb	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d9e:	1c5a      	adds	r2, r3, #1
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	3b01      	subs	r3, #1
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006db6:	bf00      	nop
 8006db8:	373c      	adds	r7, #60	; 0x3c
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b091      	sub	sp, #68	; 0x44
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dce:	2b21      	cmp	r3, #33	; 0x21
 8006dd0:	d151      	bne.n	8006e76 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d132      	bne.n	8006e44 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	e853 3f00 	ldrex	r3, [r3]
 8006dea:	623b      	str	r3, [r7, #32]
   return(result);
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006df2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	461a      	mov	r2, r3
 8006dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfc:	633b      	str	r3, [r7, #48]	; 0x30
 8006dfe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e04:	e841 2300 	strex	r3, r2, [r1]
 8006e08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1e6      	bne.n	8006dde <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	e853 3f00 	ldrex	r3, [r3]
 8006e1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e24:	637b      	str	r3, [r7, #52]	; 0x34
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e2e:	61fb      	str	r3, [r7, #28]
 8006e30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e32:	69b9      	ldr	r1, [r7, #24]
 8006e34:	69fa      	ldr	r2, [r7, #28]
 8006e36:	e841 2300 	strex	r3, r2, [r1]
 8006e3a:	617b      	str	r3, [r7, #20]
   return(result);
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1e6      	bne.n	8006e10 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006e42:	e018      	b.n	8006e76 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e48:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e58:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e5e:	1c9a      	adds	r2, r3, #2
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006e76:	bf00      	nop
 8006e78:	3744      	adds	r7, #68	; 0x44
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b088      	sub	sp, #32
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	e853 3f00 	ldrex	r3, [r3]
 8006e96:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e9e:	61fb      	str	r3, [r7, #28]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	61bb      	str	r3, [r7, #24]
 8006eaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eac:	6979      	ldr	r1, [r7, #20]
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	e841 2300 	strex	r3, r2, [r1]
 8006eb4:	613b      	str	r3, [r7, #16]
   return(result);
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1e6      	bne.n	8006e8a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7ff f99b 	bl	8006204 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ece:	bf00      	nop
 8006ed0:	3720      	adds	r7, #32
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b096      	sub	sp, #88	; 0x58
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ee4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eee:	2b22      	cmp	r3, #34	; 0x22
 8006ef0:	f040 8098 	bne.w	8007024 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006efe:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006f02:	b2d9      	uxtb	r1, r3
 8006f04:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f0e:	400a      	ands	r2, r1
 8006f10:	b2d2      	uxtb	r2, r2
 8006f12:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	3b01      	subs	r3, #1
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d17b      	bne.n	8007034 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f44:	e853 3f00 	ldrex	r3, [r3]
 8006f48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f50:	653b      	str	r3, [r7, #80]	; 0x50
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	461a      	mov	r2, r3
 8006f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8006f5c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f62:	e841 2300 	strex	r3, r2, [r1]
 8006f66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1e6      	bne.n	8006f3c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3308      	adds	r3, #8
 8006f74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f78:	e853 3f00 	ldrex	r3, [r3]
 8006f7c:	623b      	str	r3, [r7, #32]
   return(result);
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	f023 0301 	bic.w	r3, r3, #1
 8006f84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3308      	adds	r3, #8
 8006f8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f8e:	633a      	str	r2, [r7, #48]	; 0x30
 8006f90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f96:	e841 2300 	strex	r3, r2, [r1]
 8006f9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e5      	bne.n	8006f6e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d12e      	bne.n	800701c <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	e853 3f00 	ldrex	r3, [r3]
 8006fd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f023 0310 	bic.w	r3, r3, #16
 8006fd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	461a      	mov	r2, r3
 8006fe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fe2:	61fb      	str	r3, [r7, #28]
 8006fe4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe6:	69b9      	ldr	r1, [r7, #24]
 8006fe8:	69fa      	ldr	r2, [r7, #28]
 8006fea:	e841 2300 	strex	r3, r2, [r1]
 8006fee:	617b      	str	r3, [r7, #20]
   return(result);
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1e6      	bne.n	8006fc4 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	69db      	ldr	r3, [r3, #28]
 8006ffc:	f003 0310 	and.w	r3, r3, #16
 8007000:	2b10      	cmp	r3, #16
 8007002:	d103      	bne.n	800700c <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2210      	movs	r2, #16
 800700a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007012:	4619      	mov	r1, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f7ff f909 	bl	800622c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800701a:	e00b      	b.n	8007034 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7f9 fd61 	bl	8000ae4 <HAL_UART_RxCpltCallback>
}
 8007022:	e007      	b.n	8007034 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	699a      	ldr	r2, [r3, #24]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f042 0208 	orr.w	r2, r2, #8
 8007032:	619a      	str	r2, [r3, #24]
}
 8007034:	bf00      	nop
 8007036:	3758      	adds	r7, #88	; 0x58
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b096      	sub	sp, #88	; 0x58
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800704a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007054:	2b22      	cmp	r3, #34	; 0x22
 8007056:	f040 8098 	bne.w	800718a <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007068:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800706a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800706e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007072:	4013      	ands	r3, r2
 8007074:	b29a      	uxth	r2, r3
 8007076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007078:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707e:	1c9a      	adds	r2, r3, #2
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800708a:	b29b      	uxth	r3, r3
 800708c:	3b01      	subs	r3, #1
 800708e:	b29a      	uxth	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800709c:	b29b      	uxth	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d17b      	bne.n	800719a <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	461a      	mov	r2, r3
 80070be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c0:	643b      	str	r3, [r7, #64]	; 0x40
 80070c2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e6      	bne.n	80070a2 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	3308      	adds	r3, #8
 80070da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	e853 3f00 	ldrex	r3, [r3]
 80070e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	f023 0301 	bic.w	r3, r3, #1
 80070ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	3308      	adds	r3, #8
 80070f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070fc:	e841 2300 	strex	r3, r2, [r1]
 8007100:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1e5      	bne.n	80070d4 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2220      	movs	r2, #32
 800710c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007120:	2b01      	cmp	r3, #1
 8007122:	d12e      	bne.n	8007182 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	e853 3f00 	ldrex	r3, [r3]
 8007136:	60bb      	str	r3, [r7, #8]
   return(result);
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	f023 0310 	bic.w	r3, r3, #16
 800713e:	647b      	str	r3, [r7, #68]	; 0x44
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	461a      	mov	r2, r3
 8007146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007148:	61bb      	str	r3, [r7, #24]
 800714a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714c:	6979      	ldr	r1, [r7, #20]
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	e841 2300 	strex	r3, r2, [r1]
 8007154:	613b      	str	r3, [r7, #16]
   return(result);
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1e6      	bne.n	800712a <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	f003 0310 	and.w	r3, r3, #16
 8007166:	2b10      	cmp	r3, #16
 8007168:	d103      	bne.n	8007172 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2210      	movs	r2, #16
 8007170:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007178:	4619      	mov	r1, r3
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7ff f856 	bl	800622c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007180:	e00b      	b.n	800719a <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7f9 fcae 	bl	8000ae4 <HAL_UART_RxCpltCallback>
}
 8007188:	e007      	b.n	800719a <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	699a      	ldr	r2, [r3, #24]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f042 0208 	orr.w	r2, r2, #8
 8007198:	619a      	str	r2, [r3, #24]
}
 800719a:	bf00      	nop
 800719c:	3758      	adds	r7, #88	; 0x58
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
	...

080071a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071a4:	b084      	sub	sp, #16
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
 80071ae:	f107 001c 	add.w	r0, r7, #28
 80071b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d120      	bne.n	80071fe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	68da      	ldr	r2, [r3, #12]
 80071cc:	4b20      	ldr	r3, [pc, #128]	; (8007250 <USB_CoreInit+0xac>)
 80071ce:	4013      	ands	r3, r2
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80071e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d105      	bne.n	80071f2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fa96 	bl	8007724 <USB_CoreReset>
 80071f8:	4603      	mov	r3, r0
 80071fa:	73fb      	strb	r3, [r7, #15]
 80071fc:	e010      	b.n	8007220 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fa8a 	bl	8007724 <USB_CoreReset>
 8007210:	4603      	mov	r3, r0
 8007212:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007218:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007222:	2b01      	cmp	r3, #1
 8007224:	d10b      	bne.n	800723e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f043 0206 	orr.w	r2, r3, #6
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f043 0220 	orr.w	r2, r3, #32
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800723e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800724a:	b004      	add	sp, #16
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	ffbdffbf 	.word	0xffbdffbf

08007254 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	f023 0201 	bic.w	r2, r3, #1
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b084      	sub	sp, #16
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	460b      	mov	r3, r1
 8007280:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007282:	2300      	movs	r3, #0
 8007284:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007292:	78fb      	ldrb	r3, [r7, #3]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d115      	bne.n	80072c4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072a4:	2001      	movs	r0, #1
 80072a6:	f7fa fdad 	bl	8001e04 <HAL_Delay>
      ms++;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	3301      	adds	r3, #1
 80072ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fa29 	bl	8007708 <USB_GetMode>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d01e      	beq.n	80072fa <USB_SetCurrentMode+0x84>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2b31      	cmp	r3, #49	; 0x31
 80072c0:	d9f0      	bls.n	80072a4 <USB_SetCurrentMode+0x2e>
 80072c2:	e01a      	b.n	80072fa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80072c4:	78fb      	ldrb	r3, [r7, #3]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d115      	bne.n	80072f6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072d6:	2001      	movs	r0, #1
 80072d8:	f7fa fd94 	bl	8001e04 <HAL_Delay>
      ms++;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	3301      	adds	r3, #1
 80072e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fa10 	bl	8007708 <USB_GetMode>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d005      	beq.n	80072fa <USB_SetCurrentMode+0x84>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2b31      	cmp	r3, #49	; 0x31
 80072f2:	d9f0      	bls.n	80072d6 <USB_SetCurrentMode+0x60>
 80072f4:	e001      	b.n	80072fa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e005      	b.n	8007306 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2b32      	cmp	r3, #50	; 0x32
 80072fe:	d101      	bne.n	8007304 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e000      	b.n	8007306 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
	...

08007310 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007310:	b084      	sub	sp, #16
 8007312:	b580      	push	{r7, lr}
 8007314:	b086      	sub	sp, #24
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800731e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007322:	2300      	movs	r3, #0
 8007324:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800732a:	2300      	movs	r3, #0
 800732c:	613b      	str	r3, [r7, #16]
 800732e:	e009      	b.n	8007344 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	3340      	adds	r3, #64	; 0x40
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	2200      	movs	r2, #0
 800733c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	3301      	adds	r3, #1
 8007342:	613b      	str	r3, [r7, #16]
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	2b0e      	cmp	r3, #14
 8007348:	d9f2      	bls.n	8007330 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800734a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800734c:	2b00      	cmp	r3, #0
 800734e:	d11c      	bne.n	800738a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800735e:	f043 0302 	orr.w	r3, r3, #2
 8007362:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007368:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	601a      	str	r2, [r3, #0]
 8007388:	e005      	b.n	8007396 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800739c:	461a      	mov	r2, r3
 800739e:	2300      	movs	r3, #0
 80073a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a8:	4619      	mov	r1, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073b0:	461a      	mov	r2, r3
 80073b2:	680b      	ldr	r3, [r1, #0]
 80073b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d10c      	bne.n	80073d6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80073bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d104      	bne.n	80073cc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80073c2:	2100      	movs	r1, #0
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f965 	bl	8007694 <USB_SetDevSpeed>
 80073ca:	e008      	b.n	80073de <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80073cc:	2101      	movs	r1, #1
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f960 	bl	8007694 <USB_SetDevSpeed>
 80073d4:	e003      	b.n	80073de <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80073d6:	2103      	movs	r1, #3
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f95b 	bl	8007694 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073de:	2110      	movs	r1, #16
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f8f3 	bl	80075cc <USB_FlushTxFifo>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d001      	beq.n	80073f0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f91f 	bl	8007634 <USB_FlushRxFifo>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d001      	beq.n	8007400 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007406:	461a      	mov	r2, r3
 8007408:	2300      	movs	r3, #0
 800740a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007412:	461a      	mov	r2, r3
 8007414:	2300      	movs	r3, #0
 8007416:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800741e:	461a      	mov	r2, r3
 8007420:	2300      	movs	r3, #0
 8007422:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007424:	2300      	movs	r3, #0
 8007426:	613b      	str	r3, [r7, #16]
 8007428:	e043      	b.n	80074b2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	4413      	add	r3, r2
 8007432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800743c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007440:	d118      	bne.n	8007474 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10a      	bne.n	800745e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4413      	add	r3, r2
 8007450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007454:	461a      	mov	r2, r3
 8007456:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800745a:	6013      	str	r3, [r2, #0]
 800745c:	e013      	b.n	8007486 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	4413      	add	r3, r2
 8007466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746a:	461a      	mov	r2, r3
 800746c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007470:	6013      	str	r3, [r2, #0]
 8007472:	e008      	b.n	8007486 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4413      	add	r3, r2
 800747c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007480:	461a      	mov	r2, r3
 8007482:	2300      	movs	r3, #0
 8007484:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	015a      	lsls	r2, r3, #5
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	4413      	add	r3, r2
 800748e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007492:	461a      	mov	r2, r3
 8007494:	2300      	movs	r3, #0
 8007496:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a4:	461a      	mov	r2, r3
 80074a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	3301      	adds	r3, #1
 80074b0:	613b      	str	r3, [r7, #16]
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d3b7      	bcc.n	800742a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074ba:	2300      	movs	r3, #0
 80074bc:	613b      	str	r3, [r7, #16]
 80074be:	e043      	b.n	8007548 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	015a      	lsls	r2, r3, #5
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	4413      	add	r3, r2
 80074c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074d6:	d118      	bne.n	800750a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10a      	bne.n	80074f4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	015a      	lsls	r2, r3, #5
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	4413      	add	r3, r2
 80074e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ea:	461a      	mov	r2, r3
 80074ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074f0:	6013      	str	r3, [r2, #0]
 80074f2:	e013      	b.n	800751c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007500:	461a      	mov	r2, r3
 8007502:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007506:	6013      	str	r3, [r2, #0]
 8007508:	e008      	b.n	800751c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	015a      	lsls	r2, r3, #5
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	4413      	add	r3, r2
 8007512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007516:	461a      	mov	r2, r3
 8007518:	2300      	movs	r3, #0
 800751a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	015a      	lsls	r2, r3, #5
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	4413      	add	r3, r2
 8007524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007528:	461a      	mov	r2, r3
 800752a:	2300      	movs	r3, #0
 800752c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	015a      	lsls	r2, r3, #5
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	4413      	add	r3, r2
 8007536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800753a:	461a      	mov	r2, r3
 800753c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007540:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	3301      	adds	r3, #1
 8007546:	613b      	str	r3, [r7, #16]
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	429a      	cmp	r2, r3
 800754e:	d3b7      	bcc.n	80074c0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800755e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007562:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007570:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007574:	2b00      	cmp	r3, #0
 8007576:	d105      	bne.n	8007584 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	f043 0210 	orr.w	r2, r3, #16
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	699a      	ldr	r2, [r3, #24]
 8007588:	4b0e      	ldr	r3, [pc, #56]	; (80075c4 <USB_DevInit+0x2b4>)
 800758a:	4313      	orrs	r3, r2
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007592:	2b00      	cmp	r3, #0
 8007594:	d005      	beq.n	80075a2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	f043 0208 	orr.w	r2, r3, #8
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80075a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d105      	bne.n	80075b4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	699a      	ldr	r2, [r3, #24]
 80075ac:	4b06      	ldr	r3, [pc, #24]	; (80075c8 <USB_DevInit+0x2b8>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3718      	adds	r7, #24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075c0:	b004      	add	sp, #16
 80075c2:	4770      	bx	lr
 80075c4:	803c3800 	.word	0x803c3800
 80075c8:	40000004 	.word	0x40000004

080075cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3301      	adds	r3, #1
 80075de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	4a13      	ldr	r2, [pc, #76]	; (8007630 <USB_FlushTxFifo+0x64>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d901      	bls.n	80075ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e01b      	b.n	8007624 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	daf2      	bge.n	80075da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80075f4:	2300      	movs	r3, #0
 80075f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	019b      	lsls	r3, r3, #6
 80075fc:	f043 0220 	orr.w	r2, r3, #32
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	3301      	adds	r3, #1
 8007608:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	4a08      	ldr	r2, [pc, #32]	; (8007630 <USB_FlushTxFifo+0x64>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d901      	bls.n	8007616 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e006      	b.n	8007624 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	f003 0320 	and.w	r3, r3, #32
 800761e:	2b20      	cmp	r3, #32
 8007620:	d0f0      	beq.n	8007604 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3714      	adds	r7, #20
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr
 8007630:	00030d40 	.word	0x00030d40

08007634 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	3301      	adds	r3, #1
 8007644:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	4a11      	ldr	r2, [pc, #68]	; (8007690 <USB_FlushRxFifo+0x5c>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d901      	bls.n	8007652 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800764e:	2303      	movs	r3, #3
 8007650:	e018      	b.n	8007684 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	2b00      	cmp	r3, #0
 8007658:	daf2      	bge.n	8007640 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800765a:	2300      	movs	r3, #0
 800765c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2210      	movs	r2, #16
 8007662:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	3301      	adds	r3, #1
 8007668:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	4a08      	ldr	r2, [pc, #32]	; (8007690 <USB_FlushRxFifo+0x5c>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d901      	bls.n	8007676 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e006      	b.n	8007684 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	f003 0310 	and.w	r3, r3, #16
 800767e:	2b10      	cmp	r3, #16
 8007680:	d0f0      	beq.n	8007664 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr
 8007690:	00030d40 	.word	0x00030d40

08007694 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	460b      	mov	r3, r1
 800769e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	78fb      	ldrb	r3, [r7, #3]
 80076ae:	68f9      	ldr	r1, [r7, #12]
 80076b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076b4:	4313      	orrs	r3, r2
 80076b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b085      	sub	sp, #20
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076e0:	f023 0303 	bic.w	r3, r3, #3
 80076e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076f4:	f043 0302 	orr.w	r3, r3, #2
 80076f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	695b      	ldr	r3, [r3, #20]
 8007714:	f003 0301 	and.w	r3, r3, #1
}
 8007718:	4618      	mov	r0, r3
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800772c:	2300      	movs	r3, #0
 800772e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	3301      	adds	r3, #1
 8007734:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	4a13      	ldr	r2, [pc, #76]	; (8007788 <USB_CoreReset+0x64>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d901      	bls.n	8007742 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e01b      	b.n	800777a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	2b00      	cmp	r3, #0
 8007748:	daf2      	bge.n	8007730 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800774a:	2300      	movs	r3, #0
 800774c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	f043 0201 	orr.w	r2, r3, #1
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	3301      	adds	r3, #1
 800775e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	4a09      	ldr	r2, [pc, #36]	; (8007788 <USB_CoreReset+0x64>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d901      	bls.n	800776c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e006      	b.n	800777a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	f003 0301 	and.w	r3, r3, #1
 8007774:	2b01      	cmp	r3, #1
 8007776:	d0f0      	beq.n	800775a <USB_CoreReset+0x36>

  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	00030d40 	.word	0x00030d40

0800778c <atoi>:
 800778c:	220a      	movs	r2, #10
 800778e:	2100      	movs	r1, #0
 8007790:	f000 b8d4 	b.w	800793c <strtol>

08007794 <__errno>:
 8007794:	4b01      	ldr	r3, [pc, #4]	; (800779c <__errno+0x8>)
 8007796:	6818      	ldr	r0, [r3, #0]
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	2000004c 	.word	0x2000004c

080077a0 <__libc_init_array>:
 80077a0:	b570      	push	{r4, r5, r6, lr}
 80077a2:	4d0d      	ldr	r5, [pc, #52]	; (80077d8 <__libc_init_array+0x38>)
 80077a4:	4c0d      	ldr	r4, [pc, #52]	; (80077dc <__libc_init_array+0x3c>)
 80077a6:	1b64      	subs	r4, r4, r5
 80077a8:	10a4      	asrs	r4, r4, #2
 80077aa:	2600      	movs	r6, #0
 80077ac:	42a6      	cmp	r6, r4
 80077ae:	d109      	bne.n	80077c4 <__libc_init_array+0x24>
 80077b0:	4d0b      	ldr	r5, [pc, #44]	; (80077e0 <__libc_init_array+0x40>)
 80077b2:	4c0c      	ldr	r4, [pc, #48]	; (80077e4 <__libc_init_array+0x44>)
 80077b4:	f000 fd1a 	bl	80081ec <_init>
 80077b8:	1b64      	subs	r4, r4, r5
 80077ba:	10a4      	asrs	r4, r4, #2
 80077bc:	2600      	movs	r6, #0
 80077be:	42a6      	cmp	r6, r4
 80077c0:	d105      	bne.n	80077ce <__libc_init_array+0x2e>
 80077c2:	bd70      	pop	{r4, r5, r6, pc}
 80077c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80077c8:	4798      	blx	r3
 80077ca:	3601      	adds	r6, #1
 80077cc:	e7ee      	b.n	80077ac <__libc_init_array+0xc>
 80077ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80077d2:	4798      	blx	r3
 80077d4:	3601      	adds	r6, #1
 80077d6:	e7f2      	b.n	80077be <__libc_init_array+0x1e>
 80077d8:	08008398 	.word	0x08008398
 80077dc:	08008398 	.word	0x08008398
 80077e0:	08008398 	.word	0x08008398
 80077e4:	0800839c 	.word	0x0800839c

080077e8 <memset>:
 80077e8:	4402      	add	r2, r0
 80077ea:	4603      	mov	r3, r0
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d100      	bne.n	80077f2 <memset+0xa>
 80077f0:	4770      	bx	lr
 80077f2:	f803 1b01 	strb.w	r1, [r3], #1
 80077f6:	e7f9      	b.n	80077ec <memset+0x4>

080077f8 <siprintf>:
 80077f8:	b40e      	push	{r1, r2, r3}
 80077fa:	b500      	push	{lr}
 80077fc:	b09c      	sub	sp, #112	; 0x70
 80077fe:	ab1d      	add	r3, sp, #116	; 0x74
 8007800:	9002      	str	r0, [sp, #8]
 8007802:	9006      	str	r0, [sp, #24]
 8007804:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007808:	4809      	ldr	r0, [pc, #36]	; (8007830 <siprintf+0x38>)
 800780a:	9107      	str	r1, [sp, #28]
 800780c:	9104      	str	r1, [sp, #16]
 800780e:	4909      	ldr	r1, [pc, #36]	; (8007834 <siprintf+0x3c>)
 8007810:	f853 2b04 	ldr.w	r2, [r3], #4
 8007814:	9105      	str	r1, [sp, #20]
 8007816:	6800      	ldr	r0, [r0, #0]
 8007818:	9301      	str	r3, [sp, #4]
 800781a:	a902      	add	r1, sp, #8
 800781c:	f000 f8f4 	bl	8007a08 <_svfiprintf_r>
 8007820:	9b02      	ldr	r3, [sp, #8]
 8007822:	2200      	movs	r2, #0
 8007824:	701a      	strb	r2, [r3, #0]
 8007826:	b01c      	add	sp, #112	; 0x70
 8007828:	f85d eb04 	ldr.w	lr, [sp], #4
 800782c:	b003      	add	sp, #12
 800782e:	4770      	bx	lr
 8007830:	2000004c 	.word	0x2000004c
 8007834:	ffff0208 	.word	0xffff0208

08007838 <_strtol_l.constprop.0>:
 8007838:	2b01      	cmp	r3, #1
 800783a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800783e:	d001      	beq.n	8007844 <_strtol_l.constprop.0+0xc>
 8007840:	2b24      	cmp	r3, #36	; 0x24
 8007842:	d906      	bls.n	8007852 <_strtol_l.constprop.0+0x1a>
 8007844:	f7ff ffa6 	bl	8007794 <__errno>
 8007848:	2316      	movs	r3, #22
 800784a:	6003      	str	r3, [r0, #0]
 800784c:	2000      	movs	r0, #0
 800784e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007852:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007938 <_strtol_l.constprop.0+0x100>
 8007856:	460d      	mov	r5, r1
 8007858:	462e      	mov	r6, r5
 800785a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800785e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007862:	f017 0708 	ands.w	r7, r7, #8
 8007866:	d1f7      	bne.n	8007858 <_strtol_l.constprop.0+0x20>
 8007868:	2c2d      	cmp	r4, #45	; 0x2d
 800786a:	d132      	bne.n	80078d2 <_strtol_l.constprop.0+0x9a>
 800786c:	782c      	ldrb	r4, [r5, #0]
 800786e:	2701      	movs	r7, #1
 8007870:	1cb5      	adds	r5, r6, #2
 8007872:	2b00      	cmp	r3, #0
 8007874:	d05b      	beq.n	800792e <_strtol_l.constprop.0+0xf6>
 8007876:	2b10      	cmp	r3, #16
 8007878:	d109      	bne.n	800788e <_strtol_l.constprop.0+0x56>
 800787a:	2c30      	cmp	r4, #48	; 0x30
 800787c:	d107      	bne.n	800788e <_strtol_l.constprop.0+0x56>
 800787e:	782c      	ldrb	r4, [r5, #0]
 8007880:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007884:	2c58      	cmp	r4, #88	; 0x58
 8007886:	d14d      	bne.n	8007924 <_strtol_l.constprop.0+0xec>
 8007888:	786c      	ldrb	r4, [r5, #1]
 800788a:	2310      	movs	r3, #16
 800788c:	3502      	adds	r5, #2
 800788e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007892:	f108 38ff 	add.w	r8, r8, #4294967295
 8007896:	f04f 0c00 	mov.w	ip, #0
 800789a:	fbb8 f9f3 	udiv	r9, r8, r3
 800789e:	4666      	mov	r6, ip
 80078a0:	fb03 8a19 	mls	sl, r3, r9, r8
 80078a4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80078a8:	f1be 0f09 	cmp.w	lr, #9
 80078ac:	d816      	bhi.n	80078dc <_strtol_l.constprop.0+0xa4>
 80078ae:	4674      	mov	r4, lr
 80078b0:	42a3      	cmp	r3, r4
 80078b2:	dd24      	ble.n	80078fe <_strtol_l.constprop.0+0xc6>
 80078b4:	f1bc 0f00 	cmp.w	ip, #0
 80078b8:	db1e      	blt.n	80078f8 <_strtol_l.constprop.0+0xc0>
 80078ba:	45b1      	cmp	r9, r6
 80078bc:	d31c      	bcc.n	80078f8 <_strtol_l.constprop.0+0xc0>
 80078be:	d101      	bne.n	80078c4 <_strtol_l.constprop.0+0x8c>
 80078c0:	45a2      	cmp	sl, r4
 80078c2:	db19      	blt.n	80078f8 <_strtol_l.constprop.0+0xc0>
 80078c4:	fb06 4603 	mla	r6, r6, r3, r4
 80078c8:	f04f 0c01 	mov.w	ip, #1
 80078cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078d0:	e7e8      	b.n	80078a4 <_strtol_l.constprop.0+0x6c>
 80078d2:	2c2b      	cmp	r4, #43	; 0x2b
 80078d4:	bf04      	itt	eq
 80078d6:	782c      	ldrbeq	r4, [r5, #0]
 80078d8:	1cb5      	addeq	r5, r6, #2
 80078da:	e7ca      	b.n	8007872 <_strtol_l.constprop.0+0x3a>
 80078dc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80078e0:	f1be 0f19 	cmp.w	lr, #25
 80078e4:	d801      	bhi.n	80078ea <_strtol_l.constprop.0+0xb2>
 80078e6:	3c37      	subs	r4, #55	; 0x37
 80078e8:	e7e2      	b.n	80078b0 <_strtol_l.constprop.0+0x78>
 80078ea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80078ee:	f1be 0f19 	cmp.w	lr, #25
 80078f2:	d804      	bhi.n	80078fe <_strtol_l.constprop.0+0xc6>
 80078f4:	3c57      	subs	r4, #87	; 0x57
 80078f6:	e7db      	b.n	80078b0 <_strtol_l.constprop.0+0x78>
 80078f8:	f04f 3cff 	mov.w	ip, #4294967295
 80078fc:	e7e6      	b.n	80078cc <_strtol_l.constprop.0+0x94>
 80078fe:	f1bc 0f00 	cmp.w	ip, #0
 8007902:	da05      	bge.n	8007910 <_strtol_l.constprop.0+0xd8>
 8007904:	2322      	movs	r3, #34	; 0x22
 8007906:	6003      	str	r3, [r0, #0]
 8007908:	4646      	mov	r6, r8
 800790a:	b942      	cbnz	r2, 800791e <_strtol_l.constprop.0+0xe6>
 800790c:	4630      	mov	r0, r6
 800790e:	e79e      	b.n	800784e <_strtol_l.constprop.0+0x16>
 8007910:	b107      	cbz	r7, 8007914 <_strtol_l.constprop.0+0xdc>
 8007912:	4276      	negs	r6, r6
 8007914:	2a00      	cmp	r2, #0
 8007916:	d0f9      	beq.n	800790c <_strtol_l.constprop.0+0xd4>
 8007918:	f1bc 0f00 	cmp.w	ip, #0
 800791c:	d000      	beq.n	8007920 <_strtol_l.constprop.0+0xe8>
 800791e:	1e69      	subs	r1, r5, #1
 8007920:	6011      	str	r1, [r2, #0]
 8007922:	e7f3      	b.n	800790c <_strtol_l.constprop.0+0xd4>
 8007924:	2430      	movs	r4, #48	; 0x30
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1b1      	bne.n	800788e <_strtol_l.constprop.0+0x56>
 800792a:	2308      	movs	r3, #8
 800792c:	e7af      	b.n	800788e <_strtol_l.constprop.0+0x56>
 800792e:	2c30      	cmp	r4, #48	; 0x30
 8007930:	d0a5      	beq.n	800787e <_strtol_l.constprop.0+0x46>
 8007932:	230a      	movs	r3, #10
 8007934:	e7ab      	b.n	800788e <_strtol_l.constprop.0+0x56>
 8007936:	bf00      	nop
 8007938:	0800825d 	.word	0x0800825d

0800793c <strtol>:
 800793c:	4613      	mov	r3, r2
 800793e:	460a      	mov	r2, r1
 8007940:	4601      	mov	r1, r0
 8007942:	4802      	ldr	r0, [pc, #8]	; (800794c <strtol+0x10>)
 8007944:	6800      	ldr	r0, [r0, #0]
 8007946:	f7ff bf77 	b.w	8007838 <_strtol_l.constprop.0>
 800794a:	bf00      	nop
 800794c:	2000004c 	.word	0x2000004c

08007950 <__ssputs_r>:
 8007950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007954:	688e      	ldr	r6, [r1, #8]
 8007956:	429e      	cmp	r6, r3
 8007958:	4682      	mov	sl, r0
 800795a:	460c      	mov	r4, r1
 800795c:	4690      	mov	r8, r2
 800795e:	461f      	mov	r7, r3
 8007960:	d838      	bhi.n	80079d4 <__ssputs_r+0x84>
 8007962:	898a      	ldrh	r2, [r1, #12]
 8007964:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007968:	d032      	beq.n	80079d0 <__ssputs_r+0x80>
 800796a:	6825      	ldr	r5, [r4, #0]
 800796c:	6909      	ldr	r1, [r1, #16]
 800796e:	eba5 0901 	sub.w	r9, r5, r1
 8007972:	6965      	ldr	r5, [r4, #20]
 8007974:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007978:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800797c:	3301      	adds	r3, #1
 800797e:	444b      	add	r3, r9
 8007980:	106d      	asrs	r5, r5, #1
 8007982:	429d      	cmp	r5, r3
 8007984:	bf38      	it	cc
 8007986:	461d      	movcc	r5, r3
 8007988:	0553      	lsls	r3, r2, #21
 800798a:	d531      	bpl.n	80079f0 <__ssputs_r+0xa0>
 800798c:	4629      	mov	r1, r5
 800798e:	f000 fb63 	bl	8008058 <_malloc_r>
 8007992:	4606      	mov	r6, r0
 8007994:	b950      	cbnz	r0, 80079ac <__ssputs_r+0x5c>
 8007996:	230c      	movs	r3, #12
 8007998:	f8ca 3000 	str.w	r3, [sl]
 800799c:	89a3      	ldrh	r3, [r4, #12]
 800799e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079a2:	81a3      	strh	r3, [r4, #12]
 80079a4:	f04f 30ff 	mov.w	r0, #4294967295
 80079a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ac:	6921      	ldr	r1, [r4, #16]
 80079ae:	464a      	mov	r2, r9
 80079b0:	f000 fabe 	bl	8007f30 <memcpy>
 80079b4:	89a3      	ldrh	r3, [r4, #12]
 80079b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079be:	81a3      	strh	r3, [r4, #12]
 80079c0:	6126      	str	r6, [r4, #16]
 80079c2:	6165      	str	r5, [r4, #20]
 80079c4:	444e      	add	r6, r9
 80079c6:	eba5 0509 	sub.w	r5, r5, r9
 80079ca:	6026      	str	r6, [r4, #0]
 80079cc:	60a5      	str	r5, [r4, #8]
 80079ce:	463e      	mov	r6, r7
 80079d0:	42be      	cmp	r6, r7
 80079d2:	d900      	bls.n	80079d6 <__ssputs_r+0x86>
 80079d4:	463e      	mov	r6, r7
 80079d6:	6820      	ldr	r0, [r4, #0]
 80079d8:	4632      	mov	r2, r6
 80079da:	4641      	mov	r1, r8
 80079dc:	f000 fab6 	bl	8007f4c <memmove>
 80079e0:	68a3      	ldr	r3, [r4, #8]
 80079e2:	1b9b      	subs	r3, r3, r6
 80079e4:	60a3      	str	r3, [r4, #8]
 80079e6:	6823      	ldr	r3, [r4, #0]
 80079e8:	4433      	add	r3, r6
 80079ea:	6023      	str	r3, [r4, #0]
 80079ec:	2000      	movs	r0, #0
 80079ee:	e7db      	b.n	80079a8 <__ssputs_r+0x58>
 80079f0:	462a      	mov	r2, r5
 80079f2:	f000 fba5 	bl	8008140 <_realloc_r>
 80079f6:	4606      	mov	r6, r0
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d1e1      	bne.n	80079c0 <__ssputs_r+0x70>
 80079fc:	6921      	ldr	r1, [r4, #16]
 80079fe:	4650      	mov	r0, sl
 8007a00:	f000 fabe 	bl	8007f80 <_free_r>
 8007a04:	e7c7      	b.n	8007996 <__ssputs_r+0x46>
	...

08007a08 <_svfiprintf_r>:
 8007a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0c:	4698      	mov	r8, r3
 8007a0e:	898b      	ldrh	r3, [r1, #12]
 8007a10:	061b      	lsls	r3, r3, #24
 8007a12:	b09d      	sub	sp, #116	; 0x74
 8007a14:	4607      	mov	r7, r0
 8007a16:	460d      	mov	r5, r1
 8007a18:	4614      	mov	r4, r2
 8007a1a:	d50e      	bpl.n	8007a3a <_svfiprintf_r+0x32>
 8007a1c:	690b      	ldr	r3, [r1, #16]
 8007a1e:	b963      	cbnz	r3, 8007a3a <_svfiprintf_r+0x32>
 8007a20:	2140      	movs	r1, #64	; 0x40
 8007a22:	f000 fb19 	bl	8008058 <_malloc_r>
 8007a26:	6028      	str	r0, [r5, #0]
 8007a28:	6128      	str	r0, [r5, #16]
 8007a2a:	b920      	cbnz	r0, 8007a36 <_svfiprintf_r+0x2e>
 8007a2c:	230c      	movs	r3, #12
 8007a2e:	603b      	str	r3, [r7, #0]
 8007a30:	f04f 30ff 	mov.w	r0, #4294967295
 8007a34:	e0d1      	b.n	8007bda <_svfiprintf_r+0x1d2>
 8007a36:	2340      	movs	r3, #64	; 0x40
 8007a38:	616b      	str	r3, [r5, #20]
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a3e:	2320      	movs	r3, #32
 8007a40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a44:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a48:	2330      	movs	r3, #48	; 0x30
 8007a4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007bf4 <_svfiprintf_r+0x1ec>
 8007a4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a52:	f04f 0901 	mov.w	r9, #1
 8007a56:	4623      	mov	r3, r4
 8007a58:	469a      	mov	sl, r3
 8007a5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a5e:	b10a      	cbz	r2, 8007a64 <_svfiprintf_r+0x5c>
 8007a60:	2a25      	cmp	r2, #37	; 0x25
 8007a62:	d1f9      	bne.n	8007a58 <_svfiprintf_r+0x50>
 8007a64:	ebba 0b04 	subs.w	fp, sl, r4
 8007a68:	d00b      	beq.n	8007a82 <_svfiprintf_r+0x7a>
 8007a6a:	465b      	mov	r3, fp
 8007a6c:	4622      	mov	r2, r4
 8007a6e:	4629      	mov	r1, r5
 8007a70:	4638      	mov	r0, r7
 8007a72:	f7ff ff6d 	bl	8007950 <__ssputs_r>
 8007a76:	3001      	adds	r0, #1
 8007a78:	f000 80aa 	beq.w	8007bd0 <_svfiprintf_r+0x1c8>
 8007a7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a7e:	445a      	add	r2, fp
 8007a80:	9209      	str	r2, [sp, #36]	; 0x24
 8007a82:	f89a 3000 	ldrb.w	r3, [sl]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f000 80a2 	beq.w	8007bd0 <_svfiprintf_r+0x1c8>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a96:	f10a 0a01 	add.w	sl, sl, #1
 8007a9a:	9304      	str	r3, [sp, #16]
 8007a9c:	9307      	str	r3, [sp, #28]
 8007a9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007aa2:	931a      	str	r3, [sp, #104]	; 0x68
 8007aa4:	4654      	mov	r4, sl
 8007aa6:	2205      	movs	r2, #5
 8007aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aac:	4851      	ldr	r0, [pc, #324]	; (8007bf4 <_svfiprintf_r+0x1ec>)
 8007aae:	f7f8 fbcf 	bl	8000250 <memchr>
 8007ab2:	9a04      	ldr	r2, [sp, #16]
 8007ab4:	b9d8      	cbnz	r0, 8007aee <_svfiprintf_r+0xe6>
 8007ab6:	06d0      	lsls	r0, r2, #27
 8007ab8:	bf44      	itt	mi
 8007aba:	2320      	movmi	r3, #32
 8007abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ac0:	0711      	lsls	r1, r2, #28
 8007ac2:	bf44      	itt	mi
 8007ac4:	232b      	movmi	r3, #43	; 0x2b
 8007ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aca:	f89a 3000 	ldrb.w	r3, [sl]
 8007ace:	2b2a      	cmp	r3, #42	; 0x2a
 8007ad0:	d015      	beq.n	8007afe <_svfiprintf_r+0xf6>
 8007ad2:	9a07      	ldr	r2, [sp, #28]
 8007ad4:	4654      	mov	r4, sl
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	f04f 0c0a 	mov.w	ip, #10
 8007adc:	4621      	mov	r1, r4
 8007ade:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ae2:	3b30      	subs	r3, #48	; 0x30
 8007ae4:	2b09      	cmp	r3, #9
 8007ae6:	d94e      	bls.n	8007b86 <_svfiprintf_r+0x17e>
 8007ae8:	b1b0      	cbz	r0, 8007b18 <_svfiprintf_r+0x110>
 8007aea:	9207      	str	r2, [sp, #28]
 8007aec:	e014      	b.n	8007b18 <_svfiprintf_r+0x110>
 8007aee:	eba0 0308 	sub.w	r3, r0, r8
 8007af2:	fa09 f303 	lsl.w	r3, r9, r3
 8007af6:	4313      	orrs	r3, r2
 8007af8:	9304      	str	r3, [sp, #16]
 8007afa:	46a2      	mov	sl, r4
 8007afc:	e7d2      	b.n	8007aa4 <_svfiprintf_r+0x9c>
 8007afe:	9b03      	ldr	r3, [sp, #12]
 8007b00:	1d19      	adds	r1, r3, #4
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	9103      	str	r1, [sp, #12]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	bfbb      	ittet	lt
 8007b0a:	425b      	neglt	r3, r3
 8007b0c:	f042 0202 	orrlt.w	r2, r2, #2
 8007b10:	9307      	strge	r3, [sp, #28]
 8007b12:	9307      	strlt	r3, [sp, #28]
 8007b14:	bfb8      	it	lt
 8007b16:	9204      	strlt	r2, [sp, #16]
 8007b18:	7823      	ldrb	r3, [r4, #0]
 8007b1a:	2b2e      	cmp	r3, #46	; 0x2e
 8007b1c:	d10c      	bne.n	8007b38 <_svfiprintf_r+0x130>
 8007b1e:	7863      	ldrb	r3, [r4, #1]
 8007b20:	2b2a      	cmp	r3, #42	; 0x2a
 8007b22:	d135      	bne.n	8007b90 <_svfiprintf_r+0x188>
 8007b24:	9b03      	ldr	r3, [sp, #12]
 8007b26:	1d1a      	adds	r2, r3, #4
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	9203      	str	r2, [sp, #12]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	bfb8      	it	lt
 8007b30:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b34:	3402      	adds	r4, #2
 8007b36:	9305      	str	r3, [sp, #20]
 8007b38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007c04 <_svfiprintf_r+0x1fc>
 8007b3c:	7821      	ldrb	r1, [r4, #0]
 8007b3e:	2203      	movs	r2, #3
 8007b40:	4650      	mov	r0, sl
 8007b42:	f7f8 fb85 	bl	8000250 <memchr>
 8007b46:	b140      	cbz	r0, 8007b5a <_svfiprintf_r+0x152>
 8007b48:	2340      	movs	r3, #64	; 0x40
 8007b4a:	eba0 000a 	sub.w	r0, r0, sl
 8007b4e:	fa03 f000 	lsl.w	r0, r3, r0
 8007b52:	9b04      	ldr	r3, [sp, #16]
 8007b54:	4303      	orrs	r3, r0
 8007b56:	3401      	adds	r4, #1
 8007b58:	9304      	str	r3, [sp, #16]
 8007b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b5e:	4826      	ldr	r0, [pc, #152]	; (8007bf8 <_svfiprintf_r+0x1f0>)
 8007b60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b64:	2206      	movs	r2, #6
 8007b66:	f7f8 fb73 	bl	8000250 <memchr>
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	d038      	beq.n	8007be0 <_svfiprintf_r+0x1d8>
 8007b6e:	4b23      	ldr	r3, [pc, #140]	; (8007bfc <_svfiprintf_r+0x1f4>)
 8007b70:	bb1b      	cbnz	r3, 8007bba <_svfiprintf_r+0x1b2>
 8007b72:	9b03      	ldr	r3, [sp, #12]
 8007b74:	3307      	adds	r3, #7
 8007b76:	f023 0307 	bic.w	r3, r3, #7
 8007b7a:	3308      	adds	r3, #8
 8007b7c:	9303      	str	r3, [sp, #12]
 8007b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b80:	4433      	add	r3, r6
 8007b82:	9309      	str	r3, [sp, #36]	; 0x24
 8007b84:	e767      	b.n	8007a56 <_svfiprintf_r+0x4e>
 8007b86:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b8a:	460c      	mov	r4, r1
 8007b8c:	2001      	movs	r0, #1
 8007b8e:	e7a5      	b.n	8007adc <_svfiprintf_r+0xd4>
 8007b90:	2300      	movs	r3, #0
 8007b92:	3401      	adds	r4, #1
 8007b94:	9305      	str	r3, [sp, #20]
 8007b96:	4619      	mov	r1, r3
 8007b98:	f04f 0c0a 	mov.w	ip, #10
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ba2:	3a30      	subs	r2, #48	; 0x30
 8007ba4:	2a09      	cmp	r2, #9
 8007ba6:	d903      	bls.n	8007bb0 <_svfiprintf_r+0x1a8>
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d0c5      	beq.n	8007b38 <_svfiprintf_r+0x130>
 8007bac:	9105      	str	r1, [sp, #20]
 8007bae:	e7c3      	b.n	8007b38 <_svfiprintf_r+0x130>
 8007bb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bb4:	4604      	mov	r4, r0
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e7f0      	b.n	8007b9c <_svfiprintf_r+0x194>
 8007bba:	ab03      	add	r3, sp, #12
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	462a      	mov	r2, r5
 8007bc0:	4b0f      	ldr	r3, [pc, #60]	; (8007c00 <_svfiprintf_r+0x1f8>)
 8007bc2:	a904      	add	r1, sp, #16
 8007bc4:	4638      	mov	r0, r7
 8007bc6:	f3af 8000 	nop.w
 8007bca:	1c42      	adds	r2, r0, #1
 8007bcc:	4606      	mov	r6, r0
 8007bce:	d1d6      	bne.n	8007b7e <_svfiprintf_r+0x176>
 8007bd0:	89ab      	ldrh	r3, [r5, #12]
 8007bd2:	065b      	lsls	r3, r3, #25
 8007bd4:	f53f af2c 	bmi.w	8007a30 <_svfiprintf_r+0x28>
 8007bd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bda:	b01d      	add	sp, #116	; 0x74
 8007bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be0:	ab03      	add	r3, sp, #12
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	462a      	mov	r2, r5
 8007be6:	4b06      	ldr	r3, [pc, #24]	; (8007c00 <_svfiprintf_r+0x1f8>)
 8007be8:	a904      	add	r1, sp, #16
 8007bea:	4638      	mov	r0, r7
 8007bec:	f000 f87a 	bl	8007ce4 <_printf_i>
 8007bf0:	e7eb      	b.n	8007bca <_svfiprintf_r+0x1c2>
 8007bf2:	bf00      	nop
 8007bf4:	0800835d 	.word	0x0800835d
 8007bf8:	08008367 	.word	0x08008367
 8007bfc:	00000000 	.word	0x00000000
 8007c00:	08007951 	.word	0x08007951
 8007c04:	08008363 	.word	0x08008363

08007c08 <_printf_common>:
 8007c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c0c:	4616      	mov	r6, r2
 8007c0e:	4699      	mov	r9, r3
 8007c10:	688a      	ldr	r2, [r1, #8]
 8007c12:	690b      	ldr	r3, [r1, #16]
 8007c14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	bfb8      	it	lt
 8007c1c:	4613      	movlt	r3, r2
 8007c1e:	6033      	str	r3, [r6, #0]
 8007c20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c24:	4607      	mov	r7, r0
 8007c26:	460c      	mov	r4, r1
 8007c28:	b10a      	cbz	r2, 8007c2e <_printf_common+0x26>
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	6033      	str	r3, [r6, #0]
 8007c2e:	6823      	ldr	r3, [r4, #0]
 8007c30:	0699      	lsls	r1, r3, #26
 8007c32:	bf42      	ittt	mi
 8007c34:	6833      	ldrmi	r3, [r6, #0]
 8007c36:	3302      	addmi	r3, #2
 8007c38:	6033      	strmi	r3, [r6, #0]
 8007c3a:	6825      	ldr	r5, [r4, #0]
 8007c3c:	f015 0506 	ands.w	r5, r5, #6
 8007c40:	d106      	bne.n	8007c50 <_printf_common+0x48>
 8007c42:	f104 0a19 	add.w	sl, r4, #25
 8007c46:	68e3      	ldr	r3, [r4, #12]
 8007c48:	6832      	ldr	r2, [r6, #0]
 8007c4a:	1a9b      	subs	r3, r3, r2
 8007c4c:	42ab      	cmp	r3, r5
 8007c4e:	dc26      	bgt.n	8007c9e <_printf_common+0x96>
 8007c50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c54:	1e13      	subs	r3, r2, #0
 8007c56:	6822      	ldr	r2, [r4, #0]
 8007c58:	bf18      	it	ne
 8007c5a:	2301      	movne	r3, #1
 8007c5c:	0692      	lsls	r2, r2, #26
 8007c5e:	d42b      	bmi.n	8007cb8 <_printf_common+0xb0>
 8007c60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c64:	4649      	mov	r1, r9
 8007c66:	4638      	mov	r0, r7
 8007c68:	47c0      	blx	r8
 8007c6a:	3001      	adds	r0, #1
 8007c6c:	d01e      	beq.n	8007cac <_printf_common+0xa4>
 8007c6e:	6823      	ldr	r3, [r4, #0]
 8007c70:	68e5      	ldr	r5, [r4, #12]
 8007c72:	6832      	ldr	r2, [r6, #0]
 8007c74:	f003 0306 	and.w	r3, r3, #6
 8007c78:	2b04      	cmp	r3, #4
 8007c7a:	bf08      	it	eq
 8007c7c:	1aad      	subeq	r5, r5, r2
 8007c7e:	68a3      	ldr	r3, [r4, #8]
 8007c80:	6922      	ldr	r2, [r4, #16]
 8007c82:	bf0c      	ite	eq
 8007c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c88:	2500      	movne	r5, #0
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	bfc4      	itt	gt
 8007c8e:	1a9b      	subgt	r3, r3, r2
 8007c90:	18ed      	addgt	r5, r5, r3
 8007c92:	2600      	movs	r6, #0
 8007c94:	341a      	adds	r4, #26
 8007c96:	42b5      	cmp	r5, r6
 8007c98:	d11a      	bne.n	8007cd0 <_printf_common+0xc8>
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	e008      	b.n	8007cb0 <_printf_common+0xa8>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	4652      	mov	r2, sl
 8007ca2:	4649      	mov	r1, r9
 8007ca4:	4638      	mov	r0, r7
 8007ca6:	47c0      	blx	r8
 8007ca8:	3001      	adds	r0, #1
 8007caa:	d103      	bne.n	8007cb4 <_printf_common+0xac>
 8007cac:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb4:	3501      	adds	r5, #1
 8007cb6:	e7c6      	b.n	8007c46 <_printf_common+0x3e>
 8007cb8:	18e1      	adds	r1, r4, r3
 8007cba:	1c5a      	adds	r2, r3, #1
 8007cbc:	2030      	movs	r0, #48	; 0x30
 8007cbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cc2:	4422      	add	r2, r4
 8007cc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ccc:	3302      	adds	r3, #2
 8007cce:	e7c7      	b.n	8007c60 <_printf_common+0x58>
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	4622      	mov	r2, r4
 8007cd4:	4649      	mov	r1, r9
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	47c0      	blx	r8
 8007cda:	3001      	adds	r0, #1
 8007cdc:	d0e6      	beq.n	8007cac <_printf_common+0xa4>
 8007cde:	3601      	adds	r6, #1
 8007ce0:	e7d9      	b.n	8007c96 <_printf_common+0x8e>
	...

08007ce4 <_printf_i>:
 8007ce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce8:	7e0f      	ldrb	r7, [r1, #24]
 8007cea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007cec:	2f78      	cmp	r7, #120	; 0x78
 8007cee:	4691      	mov	r9, r2
 8007cf0:	4680      	mov	r8, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	469a      	mov	sl, r3
 8007cf6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007cfa:	d807      	bhi.n	8007d0c <_printf_i+0x28>
 8007cfc:	2f62      	cmp	r7, #98	; 0x62
 8007cfe:	d80a      	bhi.n	8007d16 <_printf_i+0x32>
 8007d00:	2f00      	cmp	r7, #0
 8007d02:	f000 80d8 	beq.w	8007eb6 <_printf_i+0x1d2>
 8007d06:	2f58      	cmp	r7, #88	; 0x58
 8007d08:	f000 80a3 	beq.w	8007e52 <_printf_i+0x16e>
 8007d0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d14:	e03a      	b.n	8007d8c <_printf_i+0xa8>
 8007d16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d1a:	2b15      	cmp	r3, #21
 8007d1c:	d8f6      	bhi.n	8007d0c <_printf_i+0x28>
 8007d1e:	a101      	add	r1, pc, #4	; (adr r1, 8007d24 <_printf_i+0x40>)
 8007d20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d24:	08007d7d 	.word	0x08007d7d
 8007d28:	08007d91 	.word	0x08007d91
 8007d2c:	08007d0d 	.word	0x08007d0d
 8007d30:	08007d0d 	.word	0x08007d0d
 8007d34:	08007d0d 	.word	0x08007d0d
 8007d38:	08007d0d 	.word	0x08007d0d
 8007d3c:	08007d91 	.word	0x08007d91
 8007d40:	08007d0d 	.word	0x08007d0d
 8007d44:	08007d0d 	.word	0x08007d0d
 8007d48:	08007d0d 	.word	0x08007d0d
 8007d4c:	08007d0d 	.word	0x08007d0d
 8007d50:	08007e9d 	.word	0x08007e9d
 8007d54:	08007dc1 	.word	0x08007dc1
 8007d58:	08007e7f 	.word	0x08007e7f
 8007d5c:	08007d0d 	.word	0x08007d0d
 8007d60:	08007d0d 	.word	0x08007d0d
 8007d64:	08007ebf 	.word	0x08007ebf
 8007d68:	08007d0d 	.word	0x08007d0d
 8007d6c:	08007dc1 	.word	0x08007dc1
 8007d70:	08007d0d 	.word	0x08007d0d
 8007d74:	08007d0d 	.word	0x08007d0d
 8007d78:	08007e87 	.word	0x08007e87
 8007d7c:	682b      	ldr	r3, [r5, #0]
 8007d7e:	1d1a      	adds	r2, r3, #4
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	602a      	str	r2, [r5, #0]
 8007d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e0a3      	b.n	8007ed8 <_printf_i+0x1f4>
 8007d90:	6820      	ldr	r0, [r4, #0]
 8007d92:	6829      	ldr	r1, [r5, #0]
 8007d94:	0606      	lsls	r6, r0, #24
 8007d96:	f101 0304 	add.w	r3, r1, #4
 8007d9a:	d50a      	bpl.n	8007db2 <_printf_i+0xce>
 8007d9c:	680e      	ldr	r6, [r1, #0]
 8007d9e:	602b      	str	r3, [r5, #0]
 8007da0:	2e00      	cmp	r6, #0
 8007da2:	da03      	bge.n	8007dac <_printf_i+0xc8>
 8007da4:	232d      	movs	r3, #45	; 0x2d
 8007da6:	4276      	negs	r6, r6
 8007da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dac:	485e      	ldr	r0, [pc, #376]	; (8007f28 <_printf_i+0x244>)
 8007dae:	230a      	movs	r3, #10
 8007db0:	e019      	b.n	8007de6 <_printf_i+0x102>
 8007db2:	680e      	ldr	r6, [r1, #0]
 8007db4:	602b      	str	r3, [r5, #0]
 8007db6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007dba:	bf18      	it	ne
 8007dbc:	b236      	sxthne	r6, r6
 8007dbe:	e7ef      	b.n	8007da0 <_printf_i+0xbc>
 8007dc0:	682b      	ldr	r3, [r5, #0]
 8007dc2:	6820      	ldr	r0, [r4, #0]
 8007dc4:	1d19      	adds	r1, r3, #4
 8007dc6:	6029      	str	r1, [r5, #0]
 8007dc8:	0601      	lsls	r1, r0, #24
 8007dca:	d501      	bpl.n	8007dd0 <_printf_i+0xec>
 8007dcc:	681e      	ldr	r6, [r3, #0]
 8007dce:	e002      	b.n	8007dd6 <_printf_i+0xf2>
 8007dd0:	0646      	lsls	r6, r0, #25
 8007dd2:	d5fb      	bpl.n	8007dcc <_printf_i+0xe8>
 8007dd4:	881e      	ldrh	r6, [r3, #0]
 8007dd6:	4854      	ldr	r0, [pc, #336]	; (8007f28 <_printf_i+0x244>)
 8007dd8:	2f6f      	cmp	r7, #111	; 0x6f
 8007dda:	bf0c      	ite	eq
 8007ddc:	2308      	moveq	r3, #8
 8007dde:	230a      	movne	r3, #10
 8007de0:	2100      	movs	r1, #0
 8007de2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007de6:	6865      	ldr	r5, [r4, #4]
 8007de8:	60a5      	str	r5, [r4, #8]
 8007dea:	2d00      	cmp	r5, #0
 8007dec:	bfa2      	ittt	ge
 8007dee:	6821      	ldrge	r1, [r4, #0]
 8007df0:	f021 0104 	bicge.w	r1, r1, #4
 8007df4:	6021      	strge	r1, [r4, #0]
 8007df6:	b90e      	cbnz	r6, 8007dfc <_printf_i+0x118>
 8007df8:	2d00      	cmp	r5, #0
 8007dfa:	d04d      	beq.n	8007e98 <_printf_i+0x1b4>
 8007dfc:	4615      	mov	r5, r2
 8007dfe:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e02:	fb03 6711 	mls	r7, r3, r1, r6
 8007e06:	5dc7      	ldrb	r7, [r0, r7]
 8007e08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e0c:	4637      	mov	r7, r6
 8007e0e:	42bb      	cmp	r3, r7
 8007e10:	460e      	mov	r6, r1
 8007e12:	d9f4      	bls.n	8007dfe <_printf_i+0x11a>
 8007e14:	2b08      	cmp	r3, #8
 8007e16:	d10b      	bne.n	8007e30 <_printf_i+0x14c>
 8007e18:	6823      	ldr	r3, [r4, #0]
 8007e1a:	07de      	lsls	r6, r3, #31
 8007e1c:	d508      	bpl.n	8007e30 <_printf_i+0x14c>
 8007e1e:	6923      	ldr	r3, [r4, #16]
 8007e20:	6861      	ldr	r1, [r4, #4]
 8007e22:	4299      	cmp	r1, r3
 8007e24:	bfde      	ittt	le
 8007e26:	2330      	movle	r3, #48	; 0x30
 8007e28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e30:	1b52      	subs	r2, r2, r5
 8007e32:	6122      	str	r2, [r4, #16]
 8007e34:	f8cd a000 	str.w	sl, [sp]
 8007e38:	464b      	mov	r3, r9
 8007e3a:	aa03      	add	r2, sp, #12
 8007e3c:	4621      	mov	r1, r4
 8007e3e:	4640      	mov	r0, r8
 8007e40:	f7ff fee2 	bl	8007c08 <_printf_common>
 8007e44:	3001      	adds	r0, #1
 8007e46:	d14c      	bne.n	8007ee2 <_printf_i+0x1fe>
 8007e48:	f04f 30ff 	mov.w	r0, #4294967295
 8007e4c:	b004      	add	sp, #16
 8007e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e52:	4835      	ldr	r0, [pc, #212]	; (8007f28 <_printf_i+0x244>)
 8007e54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e58:	6829      	ldr	r1, [r5, #0]
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e60:	6029      	str	r1, [r5, #0]
 8007e62:	061d      	lsls	r5, r3, #24
 8007e64:	d514      	bpl.n	8007e90 <_printf_i+0x1ac>
 8007e66:	07df      	lsls	r7, r3, #31
 8007e68:	bf44      	itt	mi
 8007e6a:	f043 0320 	orrmi.w	r3, r3, #32
 8007e6e:	6023      	strmi	r3, [r4, #0]
 8007e70:	b91e      	cbnz	r6, 8007e7a <_printf_i+0x196>
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	f023 0320 	bic.w	r3, r3, #32
 8007e78:	6023      	str	r3, [r4, #0]
 8007e7a:	2310      	movs	r3, #16
 8007e7c:	e7b0      	b.n	8007de0 <_printf_i+0xfc>
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	f043 0320 	orr.w	r3, r3, #32
 8007e84:	6023      	str	r3, [r4, #0]
 8007e86:	2378      	movs	r3, #120	; 0x78
 8007e88:	4828      	ldr	r0, [pc, #160]	; (8007f2c <_printf_i+0x248>)
 8007e8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e8e:	e7e3      	b.n	8007e58 <_printf_i+0x174>
 8007e90:	0659      	lsls	r1, r3, #25
 8007e92:	bf48      	it	mi
 8007e94:	b2b6      	uxthmi	r6, r6
 8007e96:	e7e6      	b.n	8007e66 <_printf_i+0x182>
 8007e98:	4615      	mov	r5, r2
 8007e9a:	e7bb      	b.n	8007e14 <_printf_i+0x130>
 8007e9c:	682b      	ldr	r3, [r5, #0]
 8007e9e:	6826      	ldr	r6, [r4, #0]
 8007ea0:	6961      	ldr	r1, [r4, #20]
 8007ea2:	1d18      	adds	r0, r3, #4
 8007ea4:	6028      	str	r0, [r5, #0]
 8007ea6:	0635      	lsls	r5, r6, #24
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	d501      	bpl.n	8007eb0 <_printf_i+0x1cc>
 8007eac:	6019      	str	r1, [r3, #0]
 8007eae:	e002      	b.n	8007eb6 <_printf_i+0x1d2>
 8007eb0:	0670      	lsls	r0, r6, #25
 8007eb2:	d5fb      	bpl.n	8007eac <_printf_i+0x1c8>
 8007eb4:	8019      	strh	r1, [r3, #0]
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	6123      	str	r3, [r4, #16]
 8007eba:	4615      	mov	r5, r2
 8007ebc:	e7ba      	b.n	8007e34 <_printf_i+0x150>
 8007ebe:	682b      	ldr	r3, [r5, #0]
 8007ec0:	1d1a      	adds	r2, r3, #4
 8007ec2:	602a      	str	r2, [r5, #0]
 8007ec4:	681d      	ldr	r5, [r3, #0]
 8007ec6:	6862      	ldr	r2, [r4, #4]
 8007ec8:	2100      	movs	r1, #0
 8007eca:	4628      	mov	r0, r5
 8007ecc:	f7f8 f9c0 	bl	8000250 <memchr>
 8007ed0:	b108      	cbz	r0, 8007ed6 <_printf_i+0x1f2>
 8007ed2:	1b40      	subs	r0, r0, r5
 8007ed4:	6060      	str	r0, [r4, #4]
 8007ed6:	6863      	ldr	r3, [r4, #4]
 8007ed8:	6123      	str	r3, [r4, #16]
 8007eda:	2300      	movs	r3, #0
 8007edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ee0:	e7a8      	b.n	8007e34 <_printf_i+0x150>
 8007ee2:	6923      	ldr	r3, [r4, #16]
 8007ee4:	462a      	mov	r2, r5
 8007ee6:	4649      	mov	r1, r9
 8007ee8:	4640      	mov	r0, r8
 8007eea:	47d0      	blx	sl
 8007eec:	3001      	adds	r0, #1
 8007eee:	d0ab      	beq.n	8007e48 <_printf_i+0x164>
 8007ef0:	6823      	ldr	r3, [r4, #0]
 8007ef2:	079b      	lsls	r3, r3, #30
 8007ef4:	d413      	bmi.n	8007f1e <_printf_i+0x23a>
 8007ef6:	68e0      	ldr	r0, [r4, #12]
 8007ef8:	9b03      	ldr	r3, [sp, #12]
 8007efa:	4298      	cmp	r0, r3
 8007efc:	bfb8      	it	lt
 8007efe:	4618      	movlt	r0, r3
 8007f00:	e7a4      	b.n	8007e4c <_printf_i+0x168>
 8007f02:	2301      	movs	r3, #1
 8007f04:	4632      	mov	r2, r6
 8007f06:	4649      	mov	r1, r9
 8007f08:	4640      	mov	r0, r8
 8007f0a:	47d0      	blx	sl
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	d09b      	beq.n	8007e48 <_printf_i+0x164>
 8007f10:	3501      	adds	r5, #1
 8007f12:	68e3      	ldr	r3, [r4, #12]
 8007f14:	9903      	ldr	r1, [sp, #12]
 8007f16:	1a5b      	subs	r3, r3, r1
 8007f18:	42ab      	cmp	r3, r5
 8007f1a:	dcf2      	bgt.n	8007f02 <_printf_i+0x21e>
 8007f1c:	e7eb      	b.n	8007ef6 <_printf_i+0x212>
 8007f1e:	2500      	movs	r5, #0
 8007f20:	f104 0619 	add.w	r6, r4, #25
 8007f24:	e7f5      	b.n	8007f12 <_printf_i+0x22e>
 8007f26:	bf00      	nop
 8007f28:	0800836e 	.word	0x0800836e
 8007f2c:	0800837f 	.word	0x0800837f

08007f30 <memcpy>:
 8007f30:	440a      	add	r2, r1
 8007f32:	4291      	cmp	r1, r2
 8007f34:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f38:	d100      	bne.n	8007f3c <memcpy+0xc>
 8007f3a:	4770      	bx	lr
 8007f3c:	b510      	push	{r4, lr}
 8007f3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f46:	4291      	cmp	r1, r2
 8007f48:	d1f9      	bne.n	8007f3e <memcpy+0xe>
 8007f4a:	bd10      	pop	{r4, pc}

08007f4c <memmove>:
 8007f4c:	4288      	cmp	r0, r1
 8007f4e:	b510      	push	{r4, lr}
 8007f50:	eb01 0402 	add.w	r4, r1, r2
 8007f54:	d902      	bls.n	8007f5c <memmove+0x10>
 8007f56:	4284      	cmp	r4, r0
 8007f58:	4623      	mov	r3, r4
 8007f5a:	d807      	bhi.n	8007f6c <memmove+0x20>
 8007f5c:	1e43      	subs	r3, r0, #1
 8007f5e:	42a1      	cmp	r1, r4
 8007f60:	d008      	beq.n	8007f74 <memmove+0x28>
 8007f62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f6a:	e7f8      	b.n	8007f5e <memmove+0x12>
 8007f6c:	4402      	add	r2, r0
 8007f6e:	4601      	mov	r1, r0
 8007f70:	428a      	cmp	r2, r1
 8007f72:	d100      	bne.n	8007f76 <memmove+0x2a>
 8007f74:	bd10      	pop	{r4, pc}
 8007f76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f7e:	e7f7      	b.n	8007f70 <memmove+0x24>

08007f80 <_free_r>:
 8007f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f82:	2900      	cmp	r1, #0
 8007f84:	d044      	beq.n	8008010 <_free_r+0x90>
 8007f86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f8a:	9001      	str	r0, [sp, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	f1a1 0404 	sub.w	r4, r1, #4
 8007f92:	bfb8      	it	lt
 8007f94:	18e4      	addlt	r4, r4, r3
 8007f96:	f000 f913 	bl	80081c0 <__malloc_lock>
 8007f9a:	4a1e      	ldr	r2, [pc, #120]	; (8008014 <_free_r+0x94>)
 8007f9c:	9801      	ldr	r0, [sp, #4]
 8007f9e:	6813      	ldr	r3, [r2, #0]
 8007fa0:	b933      	cbnz	r3, 8007fb0 <_free_r+0x30>
 8007fa2:	6063      	str	r3, [r4, #4]
 8007fa4:	6014      	str	r4, [r2, #0]
 8007fa6:	b003      	add	sp, #12
 8007fa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fac:	f000 b90e 	b.w	80081cc <__malloc_unlock>
 8007fb0:	42a3      	cmp	r3, r4
 8007fb2:	d908      	bls.n	8007fc6 <_free_r+0x46>
 8007fb4:	6825      	ldr	r5, [r4, #0]
 8007fb6:	1961      	adds	r1, r4, r5
 8007fb8:	428b      	cmp	r3, r1
 8007fba:	bf01      	itttt	eq
 8007fbc:	6819      	ldreq	r1, [r3, #0]
 8007fbe:	685b      	ldreq	r3, [r3, #4]
 8007fc0:	1949      	addeq	r1, r1, r5
 8007fc2:	6021      	streq	r1, [r4, #0]
 8007fc4:	e7ed      	b.n	8007fa2 <_free_r+0x22>
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	b10b      	cbz	r3, 8007fd0 <_free_r+0x50>
 8007fcc:	42a3      	cmp	r3, r4
 8007fce:	d9fa      	bls.n	8007fc6 <_free_r+0x46>
 8007fd0:	6811      	ldr	r1, [r2, #0]
 8007fd2:	1855      	adds	r5, r2, r1
 8007fd4:	42a5      	cmp	r5, r4
 8007fd6:	d10b      	bne.n	8007ff0 <_free_r+0x70>
 8007fd8:	6824      	ldr	r4, [r4, #0]
 8007fda:	4421      	add	r1, r4
 8007fdc:	1854      	adds	r4, r2, r1
 8007fde:	42a3      	cmp	r3, r4
 8007fe0:	6011      	str	r1, [r2, #0]
 8007fe2:	d1e0      	bne.n	8007fa6 <_free_r+0x26>
 8007fe4:	681c      	ldr	r4, [r3, #0]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	6053      	str	r3, [r2, #4]
 8007fea:	4421      	add	r1, r4
 8007fec:	6011      	str	r1, [r2, #0]
 8007fee:	e7da      	b.n	8007fa6 <_free_r+0x26>
 8007ff0:	d902      	bls.n	8007ff8 <_free_r+0x78>
 8007ff2:	230c      	movs	r3, #12
 8007ff4:	6003      	str	r3, [r0, #0]
 8007ff6:	e7d6      	b.n	8007fa6 <_free_r+0x26>
 8007ff8:	6825      	ldr	r5, [r4, #0]
 8007ffa:	1961      	adds	r1, r4, r5
 8007ffc:	428b      	cmp	r3, r1
 8007ffe:	bf04      	itt	eq
 8008000:	6819      	ldreq	r1, [r3, #0]
 8008002:	685b      	ldreq	r3, [r3, #4]
 8008004:	6063      	str	r3, [r4, #4]
 8008006:	bf04      	itt	eq
 8008008:	1949      	addeq	r1, r1, r5
 800800a:	6021      	streq	r1, [r4, #0]
 800800c:	6054      	str	r4, [r2, #4]
 800800e:	e7ca      	b.n	8007fa6 <_free_r+0x26>
 8008010:	b003      	add	sp, #12
 8008012:	bd30      	pop	{r4, r5, pc}
 8008014:	20000850 	.word	0x20000850

08008018 <sbrk_aligned>:
 8008018:	b570      	push	{r4, r5, r6, lr}
 800801a:	4e0e      	ldr	r6, [pc, #56]	; (8008054 <sbrk_aligned+0x3c>)
 800801c:	460c      	mov	r4, r1
 800801e:	6831      	ldr	r1, [r6, #0]
 8008020:	4605      	mov	r5, r0
 8008022:	b911      	cbnz	r1, 800802a <sbrk_aligned+0x12>
 8008024:	f000 f8bc 	bl	80081a0 <_sbrk_r>
 8008028:	6030      	str	r0, [r6, #0]
 800802a:	4621      	mov	r1, r4
 800802c:	4628      	mov	r0, r5
 800802e:	f000 f8b7 	bl	80081a0 <_sbrk_r>
 8008032:	1c43      	adds	r3, r0, #1
 8008034:	d00a      	beq.n	800804c <sbrk_aligned+0x34>
 8008036:	1cc4      	adds	r4, r0, #3
 8008038:	f024 0403 	bic.w	r4, r4, #3
 800803c:	42a0      	cmp	r0, r4
 800803e:	d007      	beq.n	8008050 <sbrk_aligned+0x38>
 8008040:	1a21      	subs	r1, r4, r0
 8008042:	4628      	mov	r0, r5
 8008044:	f000 f8ac 	bl	80081a0 <_sbrk_r>
 8008048:	3001      	adds	r0, #1
 800804a:	d101      	bne.n	8008050 <sbrk_aligned+0x38>
 800804c:	f04f 34ff 	mov.w	r4, #4294967295
 8008050:	4620      	mov	r0, r4
 8008052:	bd70      	pop	{r4, r5, r6, pc}
 8008054:	20000854 	.word	0x20000854

08008058 <_malloc_r>:
 8008058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800805c:	1ccd      	adds	r5, r1, #3
 800805e:	f025 0503 	bic.w	r5, r5, #3
 8008062:	3508      	adds	r5, #8
 8008064:	2d0c      	cmp	r5, #12
 8008066:	bf38      	it	cc
 8008068:	250c      	movcc	r5, #12
 800806a:	2d00      	cmp	r5, #0
 800806c:	4607      	mov	r7, r0
 800806e:	db01      	blt.n	8008074 <_malloc_r+0x1c>
 8008070:	42a9      	cmp	r1, r5
 8008072:	d905      	bls.n	8008080 <_malloc_r+0x28>
 8008074:	230c      	movs	r3, #12
 8008076:	603b      	str	r3, [r7, #0]
 8008078:	2600      	movs	r6, #0
 800807a:	4630      	mov	r0, r6
 800807c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008080:	4e2e      	ldr	r6, [pc, #184]	; (800813c <_malloc_r+0xe4>)
 8008082:	f000 f89d 	bl	80081c0 <__malloc_lock>
 8008086:	6833      	ldr	r3, [r6, #0]
 8008088:	461c      	mov	r4, r3
 800808a:	bb34      	cbnz	r4, 80080da <_malloc_r+0x82>
 800808c:	4629      	mov	r1, r5
 800808e:	4638      	mov	r0, r7
 8008090:	f7ff ffc2 	bl	8008018 <sbrk_aligned>
 8008094:	1c43      	adds	r3, r0, #1
 8008096:	4604      	mov	r4, r0
 8008098:	d14d      	bne.n	8008136 <_malloc_r+0xde>
 800809a:	6834      	ldr	r4, [r6, #0]
 800809c:	4626      	mov	r6, r4
 800809e:	2e00      	cmp	r6, #0
 80080a0:	d140      	bne.n	8008124 <_malloc_r+0xcc>
 80080a2:	6823      	ldr	r3, [r4, #0]
 80080a4:	4631      	mov	r1, r6
 80080a6:	4638      	mov	r0, r7
 80080a8:	eb04 0803 	add.w	r8, r4, r3
 80080ac:	f000 f878 	bl	80081a0 <_sbrk_r>
 80080b0:	4580      	cmp	r8, r0
 80080b2:	d13a      	bne.n	800812a <_malloc_r+0xd2>
 80080b4:	6821      	ldr	r1, [r4, #0]
 80080b6:	3503      	adds	r5, #3
 80080b8:	1a6d      	subs	r5, r5, r1
 80080ba:	f025 0503 	bic.w	r5, r5, #3
 80080be:	3508      	adds	r5, #8
 80080c0:	2d0c      	cmp	r5, #12
 80080c2:	bf38      	it	cc
 80080c4:	250c      	movcc	r5, #12
 80080c6:	4629      	mov	r1, r5
 80080c8:	4638      	mov	r0, r7
 80080ca:	f7ff ffa5 	bl	8008018 <sbrk_aligned>
 80080ce:	3001      	adds	r0, #1
 80080d0:	d02b      	beq.n	800812a <_malloc_r+0xd2>
 80080d2:	6823      	ldr	r3, [r4, #0]
 80080d4:	442b      	add	r3, r5
 80080d6:	6023      	str	r3, [r4, #0]
 80080d8:	e00e      	b.n	80080f8 <_malloc_r+0xa0>
 80080da:	6822      	ldr	r2, [r4, #0]
 80080dc:	1b52      	subs	r2, r2, r5
 80080de:	d41e      	bmi.n	800811e <_malloc_r+0xc6>
 80080e0:	2a0b      	cmp	r2, #11
 80080e2:	d916      	bls.n	8008112 <_malloc_r+0xba>
 80080e4:	1961      	adds	r1, r4, r5
 80080e6:	42a3      	cmp	r3, r4
 80080e8:	6025      	str	r5, [r4, #0]
 80080ea:	bf18      	it	ne
 80080ec:	6059      	strne	r1, [r3, #4]
 80080ee:	6863      	ldr	r3, [r4, #4]
 80080f0:	bf08      	it	eq
 80080f2:	6031      	streq	r1, [r6, #0]
 80080f4:	5162      	str	r2, [r4, r5]
 80080f6:	604b      	str	r3, [r1, #4]
 80080f8:	4638      	mov	r0, r7
 80080fa:	f104 060b 	add.w	r6, r4, #11
 80080fe:	f000 f865 	bl	80081cc <__malloc_unlock>
 8008102:	f026 0607 	bic.w	r6, r6, #7
 8008106:	1d23      	adds	r3, r4, #4
 8008108:	1af2      	subs	r2, r6, r3
 800810a:	d0b6      	beq.n	800807a <_malloc_r+0x22>
 800810c:	1b9b      	subs	r3, r3, r6
 800810e:	50a3      	str	r3, [r4, r2]
 8008110:	e7b3      	b.n	800807a <_malloc_r+0x22>
 8008112:	6862      	ldr	r2, [r4, #4]
 8008114:	42a3      	cmp	r3, r4
 8008116:	bf0c      	ite	eq
 8008118:	6032      	streq	r2, [r6, #0]
 800811a:	605a      	strne	r2, [r3, #4]
 800811c:	e7ec      	b.n	80080f8 <_malloc_r+0xa0>
 800811e:	4623      	mov	r3, r4
 8008120:	6864      	ldr	r4, [r4, #4]
 8008122:	e7b2      	b.n	800808a <_malloc_r+0x32>
 8008124:	4634      	mov	r4, r6
 8008126:	6876      	ldr	r6, [r6, #4]
 8008128:	e7b9      	b.n	800809e <_malloc_r+0x46>
 800812a:	230c      	movs	r3, #12
 800812c:	603b      	str	r3, [r7, #0]
 800812e:	4638      	mov	r0, r7
 8008130:	f000 f84c 	bl	80081cc <__malloc_unlock>
 8008134:	e7a1      	b.n	800807a <_malloc_r+0x22>
 8008136:	6025      	str	r5, [r4, #0]
 8008138:	e7de      	b.n	80080f8 <_malloc_r+0xa0>
 800813a:	bf00      	nop
 800813c:	20000850 	.word	0x20000850

08008140 <_realloc_r>:
 8008140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008144:	4680      	mov	r8, r0
 8008146:	4614      	mov	r4, r2
 8008148:	460e      	mov	r6, r1
 800814a:	b921      	cbnz	r1, 8008156 <_realloc_r+0x16>
 800814c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008150:	4611      	mov	r1, r2
 8008152:	f7ff bf81 	b.w	8008058 <_malloc_r>
 8008156:	b92a      	cbnz	r2, 8008164 <_realloc_r+0x24>
 8008158:	f7ff ff12 	bl	8007f80 <_free_r>
 800815c:	4625      	mov	r5, r4
 800815e:	4628      	mov	r0, r5
 8008160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008164:	f000 f838 	bl	80081d8 <_malloc_usable_size_r>
 8008168:	4284      	cmp	r4, r0
 800816a:	4607      	mov	r7, r0
 800816c:	d802      	bhi.n	8008174 <_realloc_r+0x34>
 800816e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008172:	d812      	bhi.n	800819a <_realloc_r+0x5a>
 8008174:	4621      	mov	r1, r4
 8008176:	4640      	mov	r0, r8
 8008178:	f7ff ff6e 	bl	8008058 <_malloc_r>
 800817c:	4605      	mov	r5, r0
 800817e:	2800      	cmp	r0, #0
 8008180:	d0ed      	beq.n	800815e <_realloc_r+0x1e>
 8008182:	42bc      	cmp	r4, r7
 8008184:	4622      	mov	r2, r4
 8008186:	4631      	mov	r1, r6
 8008188:	bf28      	it	cs
 800818a:	463a      	movcs	r2, r7
 800818c:	f7ff fed0 	bl	8007f30 <memcpy>
 8008190:	4631      	mov	r1, r6
 8008192:	4640      	mov	r0, r8
 8008194:	f7ff fef4 	bl	8007f80 <_free_r>
 8008198:	e7e1      	b.n	800815e <_realloc_r+0x1e>
 800819a:	4635      	mov	r5, r6
 800819c:	e7df      	b.n	800815e <_realloc_r+0x1e>
	...

080081a0 <_sbrk_r>:
 80081a0:	b538      	push	{r3, r4, r5, lr}
 80081a2:	4d06      	ldr	r5, [pc, #24]	; (80081bc <_sbrk_r+0x1c>)
 80081a4:	2300      	movs	r3, #0
 80081a6:	4604      	mov	r4, r0
 80081a8:	4608      	mov	r0, r1
 80081aa:	602b      	str	r3, [r5, #0]
 80081ac:	f7f8 fe48 	bl	8000e40 <_sbrk>
 80081b0:	1c43      	adds	r3, r0, #1
 80081b2:	d102      	bne.n	80081ba <_sbrk_r+0x1a>
 80081b4:	682b      	ldr	r3, [r5, #0]
 80081b6:	b103      	cbz	r3, 80081ba <_sbrk_r+0x1a>
 80081b8:	6023      	str	r3, [r4, #0]
 80081ba:	bd38      	pop	{r3, r4, r5, pc}
 80081bc:	20000858 	.word	0x20000858

080081c0 <__malloc_lock>:
 80081c0:	4801      	ldr	r0, [pc, #4]	; (80081c8 <__malloc_lock+0x8>)
 80081c2:	f000 b811 	b.w	80081e8 <__retarget_lock_acquire_recursive>
 80081c6:	bf00      	nop
 80081c8:	2000085c 	.word	0x2000085c

080081cc <__malloc_unlock>:
 80081cc:	4801      	ldr	r0, [pc, #4]	; (80081d4 <__malloc_unlock+0x8>)
 80081ce:	f000 b80c 	b.w	80081ea <__retarget_lock_release_recursive>
 80081d2:	bf00      	nop
 80081d4:	2000085c 	.word	0x2000085c

080081d8 <_malloc_usable_size_r>:
 80081d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081dc:	1f18      	subs	r0, r3, #4
 80081de:	2b00      	cmp	r3, #0
 80081e0:	bfbc      	itt	lt
 80081e2:	580b      	ldrlt	r3, [r1, r0]
 80081e4:	18c0      	addlt	r0, r0, r3
 80081e6:	4770      	bx	lr

080081e8 <__retarget_lock_acquire_recursive>:
 80081e8:	4770      	bx	lr

080081ea <__retarget_lock_release_recursive>:
 80081ea:	4770      	bx	lr

080081ec <_init>:
 80081ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ee:	bf00      	nop
 80081f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081f2:	bc08      	pop	{r3}
 80081f4:	469e      	mov	lr, r3
 80081f6:	4770      	bx	lr

080081f8 <_fini>:
 80081f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fa:	bf00      	nop
 80081fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081fe:	bc08      	pop	{r3}
 8008200:	469e      	mov	lr, r3
 8008202:	4770      	bx	lr
