
STM32_Light_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003468  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003660  08003660  00013660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003678  08003678  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003678  08003678  00013678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003680  08003680  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003680  08003680  00013680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003684  08003684  00013684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b0  2000000c  08003694  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  08003694  000205bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed44  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002282  00000000  00000000  0002ed7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  00031000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a68  00000000  00000000  00031b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027215  00000000  00000000  000325c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ede4  00000000  00000000  000597dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efd12  00000000  00000000  000685c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001582d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d84  00000000  00000000  00158324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003648 	.word	0x08003648

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003648 	.word	0x08003648

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08c      	sub	sp, #48	; 0x30
 8000540:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000542:	f107 031c 	add.w	r3, r7, #28
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000552:	4b68      	ldr	r3, [pc, #416]	; (80006f4 <MX_GPIO_Init+0x1b8>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a67      	ldr	r2, [pc, #412]	; (80006f4 <MX_GPIO_Init+0x1b8>)
 8000558:	f043 0304 	orr.w	r3, r3, #4
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b65      	ldr	r3, [pc, #404]	; (80006f4 <MX_GPIO_Init+0x1b8>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0304 	and.w	r3, r3, #4
 8000566:	61bb      	str	r3, [r7, #24]
 8000568:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800056a:	4b62      	ldr	r3, [pc, #392]	; (80006f4 <MX_GPIO_Init+0x1b8>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a61      	ldr	r2, [pc, #388]	; (80006f4 <MX_GPIO_Init+0x1b8>)
 8000570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b5f      	ldr	r3, [pc, #380]	; (80006f4 <MX_GPIO_Init+0x1b8>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800057e:	617b      	str	r3, [r7, #20]
 8000580:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000582:	4b5c      	ldr	r3, [pc, #368]	; (80006f4 <MX_GPIO_Init+0x1b8>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a5b      	ldr	r2, [pc, #364]	; (80006f4 <MX_GPIO_Init+0x1b8>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b59      	ldr	r3, [pc, #356]	; (80006f4 <MX_GPIO_Init+0x1b8>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	4b56      	ldr	r3, [pc, #344]	; (80006f4 <MX_GPIO_Init+0x1b8>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a55      	ldr	r2, [pc, #340]	; (80006f4 <MX_GPIO_Init+0x1b8>)
 80005a0:	f043 0302 	orr.w	r3, r3, #2
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b53      	ldr	r3, [pc, #332]	; (80006f4 <MX_GPIO_Init+0x1b8>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0302 	and.w	r3, r3, #2
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b2:	4b50      	ldr	r3, [pc, #320]	; (80006f4 <MX_GPIO_Init+0x1b8>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a4f      	ldr	r2, [pc, #316]	; (80006f4 <MX_GPIO_Init+0x1b8>)
 80005b8:	f043 0308 	orr.w	r3, r3, #8
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b4d      	ldr	r3, [pc, #308]	; (80006f4 <MX_GPIO_Init+0x1b8>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0308 	and.w	r3, r3, #8
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005ca:	4b4a      	ldr	r3, [pc, #296]	; (80006f4 <MX_GPIO_Init+0x1b8>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a49      	ldr	r2, [pc, #292]	; (80006f4 <MX_GPIO_Init+0x1b8>)
 80005d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b47      	ldr	r3, [pc, #284]	; (80006f4 <MX_GPIO_Init+0x1b8>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f244 0181 	movw	r1, #16513	; 0x4081
 80005e8:	4843      	ldr	r0, [pc, #268]	; (80006f8 <MX_GPIO_Init+0x1bc>)
 80005ea:	f000 fde7 	bl	80011bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2140      	movs	r1, #64	; 0x40
 80005f2:	4842      	ldr	r0, [pc, #264]	; (80006fc <MX_GPIO_Init+0x1c0>)
 80005f4:	f000 fde2 	bl	80011bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80005f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000602:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000608:	f107 031c 	add.w	r3, r7, #28
 800060c:	4619      	mov	r1, r3
 800060e:	483c      	ldr	r0, [pc, #240]	; (8000700 <MX_GPIO_Init+0x1c4>)
 8000610:	f000 fc28 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000614:	2332      	movs	r3, #50	; 0x32
 8000616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000618:	2302      	movs	r3, #2
 800061a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000624:	230b      	movs	r3, #11
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4619      	mov	r1, r3
 800062e:	4834      	ldr	r0, [pc, #208]	; (8000700 <MX_GPIO_Init+0x1c4>)
 8000630:	f000 fc18 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000634:	2386      	movs	r3, #134	; 0x86
 8000636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000638:	2302      	movs	r3, #2
 800063a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000640:	2303      	movs	r3, #3
 8000642:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000644:	230b      	movs	r3, #11
 8000646:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4619      	mov	r1, r3
 800064e:	482d      	ldr	r0, [pc, #180]	; (8000704 <MX_GPIO_Init+0x1c8>)
 8000650:	f000 fc08 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000654:	f244 0381 	movw	r3, #16513	; 0x4081
 8000658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	2301      	movs	r3, #1
 800065c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2300      	movs	r3, #0
 8000664:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	4619      	mov	r1, r3
 800066c:	4822      	ldr	r0, [pc, #136]	; (80006f8 <MX_GPIO_Init+0x1bc>)
 800066e:	f000 fbf9 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000680:	2303      	movs	r3, #3
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000684:	230b      	movs	r3, #11
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000688:	f107 031c 	add.w	r3, r7, #28
 800068c:	4619      	mov	r1, r3
 800068e:	481a      	ldr	r0, [pc, #104]	; (80006f8 <MX_GPIO_Init+0x1bc>)
 8000690:	f000 fbe8 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000694:	2340      	movs	r3, #64	; 0x40
 8000696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2300      	movs	r3, #0
 80006a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	4619      	mov	r1, r3
 80006aa:	4814      	ldr	r0, [pc, #80]	; (80006fc <MX_GPIO_Init+0x1c0>)
 80006ac:	f000 fbda 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006b0:	2380      	movs	r3, #128	; 0x80
 80006b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b4:	2300      	movs	r3, #0
 80006b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	4619      	mov	r1, r3
 80006c2:	480e      	ldr	r0, [pc, #56]	; (80006fc <MX_GPIO_Init+0x1c0>)
 80006c4:	f000 fbce 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80006c8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80006cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ce:	2302      	movs	r3, #2
 80006d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d6:	2303      	movs	r3, #3
 80006d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006da:	230b      	movs	r3, #11
 80006dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	4619      	mov	r1, r3
 80006e4:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_GPIO_Init+0x1c0>)
 80006e6:	f000 fbbd 	bl	8000e64 <HAL_GPIO_Init>

}
 80006ea:	bf00      	nop
 80006ec:	3730      	adds	r7, #48	; 0x30
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020400 	.word	0x40020400
 80006fc:	40021800 	.word	0x40021800
 8000700:	40020800 	.word	0x40020800
 8000704:	40020000 	.word	0x40020000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070c:	f000 fa43 	bl	8000b96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000710:	f000 f808 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000714:	f7ff ff12 	bl	800053c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000718:	f000 f8dc 	bl	80008d4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800071c:	f000 f96a 	bl	80009f4 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000720:	e7fe      	b.n	8000720 <main+0x18>
	...

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	; 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2234      	movs	r2, #52	; 0x34
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f002 ff80 	bl	8003638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000748:	f000 fe9a 	bl	8001480 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800074c:	4b2c      	ldr	r3, [pc, #176]	; (8000800 <SystemClock_Config+0xdc>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	4a2b      	ldr	r2, [pc, #172]	; (8000800 <SystemClock_Config+0xdc>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000756:	6413      	str	r3, [r2, #64]	; 0x40
 8000758:	4b29      	ldr	r3, [pc, #164]	; (8000800 <SystemClock_Config+0xdc>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <SystemClock_Config+0xe0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800076c:	4a25      	ldr	r2, [pc, #148]	; (8000804 <SystemClock_Config+0xe0>)
 800076e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	4b23      	ldr	r3, [pc, #140]	; (8000804 <SystemClock_Config+0xe0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000780:	2301      	movs	r3, #1
 8000782:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000784:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000788:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078a:	2302      	movs	r3, #2
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000792:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000794:	2304      	movs	r3, #4
 8000796:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000798:	2360      	movs	r3, #96	; 0x60
 800079a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800079c:	2302      	movs	r3, #2
 800079e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007a0:	2304      	movs	r3, #4
 80007a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 fec7 	bl	8001540 <HAL_RCC_OscConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007b8:	f000 f826 	bl	8000808 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007bc:	f000 fe70 	bl	80014a0 <HAL_PWREx_EnableOverDrive>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007c6:	f000 f81f 	bl	8000808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	230f      	movs	r3, #15
 80007cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ce:	2302      	movs	r3, #2
 80007d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	2103      	movs	r1, #3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 f958 	bl	8001a9c <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80007f2:	f000 f809 	bl	8000808 <Error_Handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	3750      	adds	r7, #80	; 0x50
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000810:	e7fe      	b.n	8000810 <Error_Handler+0x8>
	...

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <HAL_MspInit+0x44>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a0e      	ldr	r2, [pc, #56]	; (8000858 <HAL_MspInit+0x44>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <HAL_MspInit+0x44>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <HAL_MspInit+0x44>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000836:	4a08      	ldr	r2, [pc, #32]	; (8000858 <HAL_MspInit+0x44>)
 8000838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083c:	6453      	str	r3, [r2, #68]	; 0x44
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_MspInit+0x44>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800

0800085c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <NMI_Handler+0x4>

08000862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <HardFault_Handler+0x4>

08000868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <MemManage_Handler+0x4>

0800086e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <BusFault_Handler+0x4>

08000874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <UsageFault_Handler+0x4>

0800087a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a8:	f000 f9b2 	bl	8000c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <SystemInit+0x20>)
 80008b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ba:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <SystemInit+0x20>)
 80008bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_USART3_UART_Init+0x58>)
 80008da:	4a15      	ldr	r2, [pc, #84]	; (8000930 <MX_USART3_UART_Init+0x5c>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_USART3_UART_Init+0x58>)
 80008e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_USART3_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_USART3_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_USART3_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_USART3_UART_Init+0x58>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_USART3_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_USART3_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_USART3_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_USART3_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_USART3_UART_Init+0x58>)
 8000918:	f001 ff0e 	bl	8002738 <HAL_UART_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000922:	f7ff ff71 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000028 	.word	0x20000028
 8000930:	40004800 	.word	0x40004800

08000934 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b0ae      	sub	sp, #184	; 0xb8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	2290      	movs	r2, #144	; 0x90
 8000952:	2100      	movs	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f002 fe6f 	bl	8003638 <memset>
  if(uartHandle->Instance==USART3)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a22      	ldr	r2, [pc, #136]	; (80009e8 <HAL_UART_MspInit+0xb4>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d13c      	bne.n	80009de <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000968:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800096a:	2300      	movs	r3, #0
 800096c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4618      	mov	r0, r3
 8000974:	f001 fab8 	bl	8001ee8 <HAL_RCCEx_PeriphCLKConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800097e:	f7ff ff43 	bl	8000808 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <HAL_UART_MspInit+0xb8>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	4a19      	ldr	r2, [pc, #100]	; (80009ec <HAL_UART_MspInit+0xb8>)
 8000988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800098c:	6413      	str	r3, [r2, #64]	; 0x40
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <HAL_UART_MspInit+0xb8>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800099a:	4b14      	ldr	r3, [pc, #80]	; (80009ec <HAL_UART_MspInit+0xb8>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a13      	ldr	r2, [pc, #76]	; (80009ec <HAL_UART_MspInit+0xb8>)
 80009a0:	f043 0308 	orr.w	r3, r3, #8
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <HAL_UART_MspInit+0xb8>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0308 	and.w	r3, r3, #8
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009cc:	2307      	movs	r3, #7
 80009ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <HAL_UART_MspInit+0xbc>)
 80009da:	f000 fa43 	bl	8000e64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80009de:	bf00      	nop
 80009e0:	37b8      	adds	r7, #184	; 0xb8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40004800 	.word	0x40004800
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020c00 	.word	0x40020c00

080009f4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a02:	2206      	movs	r2, #6
 8000a04:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a08:	2202      	movs	r2, #2
 8000a0a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a14:	2202      	movs	r2, #2
 8000a16:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a38:	f000 fbd9 	bl	80011ee <HAL_PCD_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a42:	f7ff fee1 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000b0 	.word	0x200000b0

08000a50 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b0ae      	sub	sp, #184	; 0xb8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2290      	movs	r2, #144	; 0x90
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f002 fde1 	bl	8003638 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a7e:	d159      	bne.n	8000b34 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000a84:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 fa29 	bl	8001ee8 <HAL_RCCEx_PeriphCLKConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000a9c:	f7ff feb4 	bl	8000808 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa0:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <HAL_PCD_MspInit+0xec>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa4:	4a25      	ldr	r2, [pc, #148]	; (8000b3c <HAL_PCD_MspInit+0xec>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8000aac:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <HAL_PCD_MspInit+0xec>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ab8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000abc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ad2:	230a      	movs	r3, #10
 8000ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000adc:	4619      	mov	r1, r3
 8000ade:	4818      	ldr	r0, [pc, #96]	; (8000b40 <HAL_PCD_MspInit+0xf0>)
 8000ae0:	f000 f9c0 	bl	8000e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ae8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aec:	2300      	movs	r3, #0
 8000aee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000afc:	4619      	mov	r1, r3
 8000afe:	4810      	ldr	r0, [pc, #64]	; (8000b40 <HAL_PCD_MspInit+0xf0>)
 8000b00:	f000 f9b0 	bl	8000e64 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b04:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <HAL_PCD_MspInit+0xec>)
 8000b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b08:	4a0c      	ldr	r2, [pc, #48]	; (8000b3c <HAL_PCD_MspInit+0xec>)
 8000b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b0e:	6353      	str	r3, [r2, #52]	; 0x34
 8000b10:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <HAL_PCD_MspInit+0xec>)
 8000b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <HAL_PCD_MspInit+0xec>)
 8000b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <HAL_PCD_MspInit+0xec>)
 8000b22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b26:	6453      	str	r3, [r2, #68]	; 0x44
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <HAL_PCD_MspInit+0xec>)
 8000b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000b34:	bf00      	nop
 8000b36:	37b8      	adds	r7, #184	; 0xb8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020000 	.word	0x40020000

08000b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b48:	480d      	ldr	r0, [pc, #52]	; (8000b80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b4a:	490e      	ldr	r1, [pc, #56]	; (8000b84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b4c:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b50:	e002      	b.n	8000b58 <LoopCopyDataInit>

08000b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b56:	3304      	adds	r3, #4

08000b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b5c:	d3f9      	bcc.n	8000b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5e:	4a0b      	ldr	r2, [pc, #44]	; (8000b8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b60:	4c0b      	ldr	r4, [pc, #44]	; (8000b90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b64:	e001      	b.n	8000b6a <LoopFillZerobss>

08000b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b68:	3204      	adds	r2, #4

08000b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b6c:	d3fb      	bcc.n	8000b66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b6e:	f7ff fe9f 	bl	80008b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b72:	f002 fd3d 	bl	80035f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b76:	f7ff fdc7 	bl	8000708 <main>
  bx  lr    
 8000b7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b7c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b88:	08003688 	.word	0x08003688
  ldr r2, =_sbss
 8000b8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b90:	200005bc 	.word	0x200005bc

08000b94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b94:	e7fe      	b.n	8000b94 <ADC_IRQHandler>

08000b96 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b9a:	2003      	movs	r0, #3
 8000b9c:	f000 f92e 	bl	8000dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f000 f805 	bl	8000bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba6:	f7ff fe35 	bl	8000814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000baa:	2300      	movs	r3, #0
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_InitTick+0x54>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_InitTick+0x58>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 f93b 	bl	8000e4a <HAL_SYSTICK_Config>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e00e      	b.n	8000bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b0f      	cmp	r3, #15
 8000be2:	d80a      	bhi.n	8000bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be4:	2200      	movs	r2, #0
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bec:	f000 f911 	bl	8000e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf0:	4a06      	ldr	r2, [pc, #24]	; (8000c0c <HAL_InitTick+0x5c>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e000      	b.n	8000bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000000 	.word	0x20000000
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20000004 	.word	0x20000004

08000c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x20>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_IncTick+0x24>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <HAL_IncTick+0x24>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008
 8000c34:	200005b8 	.word	0x200005b8

08000c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <HAL_GetTick+0x14>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	200005b8 	.word	0x200005b8

08000c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c58:	f7ff ffee 	bl	8000c38 <HAL_GetTick>
 8000c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c68:	d005      	beq.n	8000c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <HAL_Delay+0x44>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4413      	add	r3, r2
 8000c74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c76:	bf00      	nop
 8000c78:	f7ff ffde 	bl	8000c38 <HAL_GetTick>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d8f7      	bhi.n	8000c78 <HAL_Delay+0x28>
  {
  }
}
 8000c88:	bf00      	nop
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008

08000c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x40>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x40>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	60d3      	str	r3, [r2, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00
 8000cdc:	05fa0000 	.word	0x05fa0000

08000ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	db0a      	blt.n	8000d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	; (8000d48 <__NVIC_SetPriority+0x4c>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d24:	e00a      	b.n	8000d3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4908      	ldr	r1, [pc, #32]	; (8000d4c <__NVIC_SetPriority+0x50>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	3b04      	subs	r3, #4
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	761a      	strb	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f1c3 0307 	rsb	r3, r3, #7
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	bf28      	it	cs
 8000d6e:	2304      	movcs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3304      	adds	r3, #4
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d902      	bls.n	8000d80 <NVIC_EncodePriority+0x30>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b03      	subs	r3, #3
 8000d7e:	e000      	b.n	8000d82 <NVIC_EncodePriority+0x32>
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	4313      	orrs	r3, r2
         );
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc8:	d301      	bcc.n	8000dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00f      	b.n	8000dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <SysTick_Config+0x40>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd6:	210f      	movs	r1, #15
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f7ff ff8e 	bl	8000cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <SysTick_Config+0x40>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de6:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <SysTick_Config+0x40>)
 8000de8:	2207      	movs	r2, #7
 8000dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	e000e010 	.word	0xe000e010

08000dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff47 	bl	8000c98 <__NVIC_SetPriorityGrouping>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b086      	sub	sp, #24
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
 8000e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e24:	f7ff ff5c 	bl	8000ce0 <__NVIC_GetPriorityGrouping>
 8000e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	68b9      	ldr	r1, [r7, #8]
 8000e2e:	6978      	ldr	r0, [r7, #20]
 8000e30:	f7ff ff8e 	bl	8000d50 <NVIC_EncodePriority>
 8000e34:	4602      	mov	r2, r0
 8000e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff5d 	bl	8000cfc <__NVIC_SetPriority>
}
 8000e42:	bf00      	nop
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ffb0 	bl	8000db8 <SysTick_Config>
 8000e58:	4603      	mov	r3, r0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
 8000e82:	e175      	b.n	8001170 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e84:	2201      	movs	r2, #1
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	f040 8164 	bne.w	800116a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 0303 	and.w	r3, r3, #3
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d005      	beq.n	8000eba <HAL_GPIO_Init+0x56>
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d130      	bne.n	8000f1c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	091b      	lsrs	r3, r3, #4
 8000f06:	f003 0201 	and.w	r2, r3, #1
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d017      	beq.n	8000f58 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d123      	bne.n	8000fac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	08da      	lsrs	r2, r3, #3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3208      	adds	r2, #8
 8000f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	691a      	ldr	r2, [r3, #16]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	08da      	lsrs	r2, r3, #3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3208      	adds	r2, #8
 8000fa6:	69b9      	ldr	r1, [r7, #24]
 8000fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0203 	and.w	r2, r3, #3
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 80be 	beq.w	800116a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	4b66      	ldr	r3, [pc, #408]	; (8001188 <HAL_GPIO_Init+0x324>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	4a65      	ldr	r2, [pc, #404]	; (8001188 <HAL_GPIO_Init+0x324>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffa:	4b63      	ldr	r3, [pc, #396]	; (8001188 <HAL_GPIO_Init+0x324>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001006:	4a61      	ldr	r2, [pc, #388]	; (800118c <HAL_GPIO_Init+0x328>)
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	3302      	adds	r3, #2
 800100e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	220f      	movs	r2, #15
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a58      	ldr	r2, [pc, #352]	; (8001190 <HAL_GPIO_Init+0x32c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d037      	beq.n	80010a2 <HAL_GPIO_Init+0x23e>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a57      	ldr	r2, [pc, #348]	; (8001194 <HAL_GPIO_Init+0x330>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d031      	beq.n	800109e <HAL_GPIO_Init+0x23a>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a56      	ldr	r2, [pc, #344]	; (8001198 <HAL_GPIO_Init+0x334>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d02b      	beq.n	800109a <HAL_GPIO_Init+0x236>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a55      	ldr	r2, [pc, #340]	; (800119c <HAL_GPIO_Init+0x338>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d025      	beq.n	8001096 <HAL_GPIO_Init+0x232>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a54      	ldr	r2, [pc, #336]	; (80011a0 <HAL_GPIO_Init+0x33c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d01f      	beq.n	8001092 <HAL_GPIO_Init+0x22e>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a53      	ldr	r2, [pc, #332]	; (80011a4 <HAL_GPIO_Init+0x340>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d019      	beq.n	800108e <HAL_GPIO_Init+0x22a>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a52      	ldr	r2, [pc, #328]	; (80011a8 <HAL_GPIO_Init+0x344>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d013      	beq.n	800108a <HAL_GPIO_Init+0x226>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a51      	ldr	r2, [pc, #324]	; (80011ac <HAL_GPIO_Init+0x348>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d00d      	beq.n	8001086 <HAL_GPIO_Init+0x222>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a50      	ldr	r2, [pc, #320]	; (80011b0 <HAL_GPIO_Init+0x34c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d007      	beq.n	8001082 <HAL_GPIO_Init+0x21e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4f      	ldr	r2, [pc, #316]	; (80011b4 <HAL_GPIO_Init+0x350>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d101      	bne.n	800107e <HAL_GPIO_Init+0x21a>
 800107a:	2309      	movs	r3, #9
 800107c:	e012      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 800107e:	230a      	movs	r3, #10
 8001080:	e010      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 8001082:	2308      	movs	r3, #8
 8001084:	e00e      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 8001086:	2307      	movs	r3, #7
 8001088:	e00c      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 800108a:	2306      	movs	r3, #6
 800108c:	e00a      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 800108e:	2305      	movs	r3, #5
 8001090:	e008      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 8001092:	2304      	movs	r3, #4
 8001094:	e006      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 8001096:	2303      	movs	r3, #3
 8001098:	e004      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 800109a:	2302      	movs	r3, #2
 800109c:	e002      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 80010a2:	2300      	movs	r3, #0
 80010a4:	69fa      	ldr	r2, [r7, #28]
 80010a6:	f002 0203 	and.w	r2, r2, #3
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	4093      	lsls	r3, r2
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80010b4:	4935      	ldr	r1, [pc, #212]	; (800118c <HAL_GPIO_Init+0x328>)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	3302      	adds	r3, #2
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c2:	4b3d      	ldr	r3, [pc, #244]	; (80011b8 <HAL_GPIO_Init+0x354>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010e6:	4a34      	ldr	r2, [pc, #208]	; (80011b8 <HAL_GPIO_Init+0x354>)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ec:	4b32      	ldr	r3, [pc, #200]	; (80011b8 <HAL_GPIO_Init+0x354>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001110:	4a29      	ldr	r2, [pc, #164]	; (80011b8 <HAL_GPIO_Init+0x354>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001116:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <HAL_GPIO_Init+0x354>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800113a:	4a1f      	ldr	r2, [pc, #124]	; (80011b8 <HAL_GPIO_Init+0x354>)
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001140:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <HAL_GPIO_Init+0x354>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001164:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <HAL_GPIO_Init+0x354>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3301      	adds	r3, #1
 800116e:	61fb      	str	r3, [r7, #28]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	2b0f      	cmp	r3, #15
 8001174:	f67f ae86 	bls.w	8000e84 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3724      	adds	r7, #36	; 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	40013800 	.word	0x40013800
 8001190:	40020000 	.word	0x40020000
 8001194:	40020400 	.word	0x40020400
 8001198:	40020800 	.word	0x40020800
 800119c:	40020c00 	.word	0x40020c00
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40021400 	.word	0x40021400
 80011a8:	40021800 	.word	0x40021800
 80011ac:	40021c00 	.word	0x40021c00
 80011b0:	40022000 	.word	0x40022000
 80011b4:	40022400 	.word	0x40022400
 80011b8:	40013c00 	.word	0x40013c00

080011bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]
 80011c8:	4613      	mov	r3, r2
 80011ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011cc:	787b      	ldrb	r3, [r7, #1]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80011d8:	e003      	b.n	80011e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	041a      	lsls	r2, r3, #16
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	619a      	str	r2, [r3, #24]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011f0:	b08f      	sub	sp, #60	; 0x3c
 80011f2:	af0a      	add	r7, sp, #40	; 0x28
 80011f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d101      	bne.n	8001200 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e116      	b.n	800142e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d106      	bne.n	8001220 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff fc18 	bl	8000a50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2203      	movs	r2, #3
 8001224:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800122c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001230:	2b00      	cmp	r3, #0
 8001232:	d102      	bne.n	800123a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f001 ff3a 	bl	80030b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	603b      	str	r3, [r7, #0]
 800124a:	687e      	ldr	r6, [r7, #4]
 800124c:	466d      	mov	r5, sp
 800124e:	f106 0410 	add.w	r4, r6, #16
 8001252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001254:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001258:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800125a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800125e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001262:	1d33      	adds	r3, r6, #4
 8001264:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001266:	6838      	ldr	r0, [r7, #0]
 8001268:	f001 fece 	bl	8003008 <USB_CoreInit>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d005      	beq.n	800127e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2202      	movs	r2, #2
 8001276:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e0d7      	b.n	800142e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2100      	movs	r1, #0
 8001284:	4618      	mov	r0, r3
 8001286:	f001 ff28 	bl	80030da <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800128a:	2300      	movs	r3, #0
 800128c:	73fb      	strb	r3, [r7, #15]
 800128e:	e04a      	b.n	8001326 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	4413      	add	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	333d      	adds	r3, #61	; 0x3d
 80012a0:	2201      	movs	r2, #1
 80012a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	4613      	mov	r3, r2
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	4413      	add	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	333c      	adds	r3, #60	; 0x3c
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012b8:	7bfa      	ldrb	r2, [r7, #15]
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	b298      	uxth	r0, r3
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	4613      	mov	r3, r2
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	4413      	add	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	440b      	add	r3, r1
 80012ca:	3344      	adds	r3, #68	; 0x44
 80012cc:	4602      	mov	r2, r0
 80012ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	4613      	mov	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	4413      	add	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	3340      	adds	r3, #64	; 0x40
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012e4:	7bfa      	ldrb	r2, [r7, #15]
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	4613      	mov	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	4413      	add	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	3348      	adds	r3, #72	; 0x48
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	4613      	mov	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	4413      	add	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	334c      	adds	r3, #76	; 0x4c
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4413      	add	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	3354      	adds	r3, #84	; 0x54
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	3301      	adds	r3, #1
 8001324:	73fb      	strb	r3, [r7, #15]
 8001326:	7bfa      	ldrb	r2, [r7, #15]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	429a      	cmp	r2, r3
 800132e:	d3af      	bcc.n	8001290 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001330:	2300      	movs	r3, #0
 8001332:	73fb      	strb	r3, [r7, #15]
 8001334:	e044      	b.n	80013c0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001336:	7bfa      	ldrb	r2, [r7, #15]
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	4613      	mov	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	4413      	add	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	440b      	add	r3, r1
 8001344:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800134c:	7bfa      	ldrb	r2, [r7, #15]
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	4613      	mov	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	4413      	add	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	440b      	add	r3, r1
 800135a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800135e:	7bfa      	ldrb	r2, [r7, #15]
 8001360:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	4413      	add	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	440b      	add	r3, r1
 8001370:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	4413      	add	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	440b      	add	r3, r1
 8001386:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800138e:	7bfa      	ldrb	r2, [r7, #15]
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	4413      	add	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	440b      	add	r3, r1
 800139c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4413      	add	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	440b      	add	r3, r1
 80013b2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	3301      	adds	r3, #1
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	7bfa      	ldrb	r2, [r7, #15]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d3b5      	bcc.n	8001336 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	687e      	ldr	r6, [r7, #4]
 80013d2:	466d      	mov	r5, sp
 80013d4:	f106 0410 	add.w	r4, r6, #16
 80013d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80013e8:	1d33      	adds	r3, r6, #4
 80013ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ec:	6838      	ldr	r0, [r7, #0]
 80013ee:	f001 fec1 	bl	8003174 <USB_DevInit>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d005      	beq.n	8001404 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2202      	movs	r2, #2
 80013fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e014      	b.n	800142e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001418:	2b01      	cmp	r3, #1
 800141a:	d102      	bne.n	8001422 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 f80b 	bl	8001438 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f002 f87f 	bl	800352a <USB_DevDisconnect>

  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001438 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2201      	movs	r2, #1
 800144a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001466:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_PCDEx_ActivateLPM+0x44>)
 8001468:	4313      	orrs	r3, r2
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	10000003 	.word	0x10000003

08001480 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a04      	ldr	r2, [pc, #16]	; (800149c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800148a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148e:	6013      	str	r3, [r2, #0]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40007000 	.word	0x40007000

080014a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	4b23      	ldr	r3, [pc, #140]	; (8001538 <HAL_PWREx_EnableOverDrive+0x98>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	4a22      	ldr	r2, [pc, #136]	; (8001538 <HAL_PWREx_EnableOverDrive+0x98>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b4:	6413      	str	r3, [r2, #64]	; 0x40
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <HAL_PWREx_EnableOverDrive+0x98>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014c2:	4b1e      	ldr	r3, [pc, #120]	; (800153c <HAL_PWREx_EnableOverDrive+0x9c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a1d      	ldr	r2, [pc, #116]	; (800153c <HAL_PWREx_EnableOverDrive+0x9c>)
 80014c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014ce:	f7ff fbb3 	bl	8000c38 <HAL_GetTick>
 80014d2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014d4:	e009      	b.n	80014ea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014d6:	f7ff fbaf 	bl	8000c38 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014e4:	d901      	bls.n	80014ea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e022      	b.n	8001530 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014ea:	4b14      	ldr	r3, [pc, #80]	; (800153c <HAL_PWREx_EnableOverDrive+0x9c>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f6:	d1ee      	bne.n	80014d6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014f8:	4b10      	ldr	r3, [pc, #64]	; (800153c <HAL_PWREx_EnableOverDrive+0x9c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0f      	ldr	r2, [pc, #60]	; (800153c <HAL_PWREx_EnableOverDrive+0x9c>)
 80014fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001502:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001504:	f7ff fb98 	bl	8000c38 <HAL_GetTick>
 8001508:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800150a:	e009      	b.n	8001520 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800150c:	f7ff fb94 	bl	8000c38 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800151a:	d901      	bls.n	8001520 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e007      	b.n	8001530 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001528:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800152c:	d1ee      	bne.n	800150c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40023800 	.word	0x40023800
 800153c:	40007000 	.word	0x40007000

08001540 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e29b      	b.n	8001a8e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 8087 	beq.w	8001672 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001564:	4b96      	ldr	r3, [pc, #600]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 030c 	and.w	r3, r3, #12
 800156c:	2b04      	cmp	r3, #4
 800156e:	d00c      	beq.n	800158a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001570:	4b93      	ldr	r3, [pc, #588]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 030c 	and.w	r3, r3, #12
 8001578:	2b08      	cmp	r3, #8
 800157a:	d112      	bne.n	80015a2 <HAL_RCC_OscConfig+0x62>
 800157c:	4b90      	ldr	r3, [pc, #576]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001588:	d10b      	bne.n	80015a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158a:	4b8d      	ldr	r3, [pc, #564]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d06c      	beq.n	8001670 <HAL_RCC_OscConfig+0x130>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d168      	bne.n	8001670 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e275      	b.n	8001a8e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015aa:	d106      	bne.n	80015ba <HAL_RCC_OscConfig+0x7a>
 80015ac:	4b84      	ldr	r3, [pc, #528]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a83      	ldr	r2, [pc, #524]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 80015b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	e02e      	b.n	8001618 <HAL_RCC_OscConfig+0xd8>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10c      	bne.n	80015dc <HAL_RCC_OscConfig+0x9c>
 80015c2:	4b7f      	ldr	r3, [pc, #508]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a7e      	ldr	r2, [pc, #504]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 80015c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	4b7c      	ldr	r3, [pc, #496]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a7b      	ldr	r2, [pc, #492]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 80015d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	e01d      	b.n	8001618 <HAL_RCC_OscConfig+0xd8>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015e4:	d10c      	bne.n	8001600 <HAL_RCC_OscConfig+0xc0>
 80015e6:	4b76      	ldr	r3, [pc, #472]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a75      	ldr	r2, [pc, #468]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 80015ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	4b73      	ldr	r3, [pc, #460]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a72      	ldr	r2, [pc, #456]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 80015f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	e00b      	b.n	8001618 <HAL_RCC_OscConfig+0xd8>
 8001600:	4b6f      	ldr	r3, [pc, #444]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a6e      	ldr	r2, [pc, #440]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 8001606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b6c      	ldr	r3, [pc, #432]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a6b      	ldr	r2, [pc, #428]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 8001612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d013      	beq.n	8001648 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001620:	f7ff fb0a 	bl	8000c38 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001628:	f7ff fb06 	bl	8000c38 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b64      	cmp	r3, #100	; 0x64
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e229      	b.n	8001a8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163a:	4b61      	ldr	r3, [pc, #388]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0xe8>
 8001646:	e014      	b.n	8001672 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001648:	f7ff faf6 	bl	8000c38 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001650:	f7ff faf2 	bl	8000c38 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b64      	cmp	r3, #100	; 0x64
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e215      	b.n	8001a8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001662:	4b57      	ldr	r3, [pc, #348]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x110>
 800166e:	e000      	b.n	8001672 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d069      	beq.n	8001752 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800167e:	4b50      	ldr	r3, [pc, #320]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00b      	beq.n	80016a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800168a:	4b4d      	ldr	r3, [pc, #308]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	2b08      	cmp	r3, #8
 8001694:	d11c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x190>
 8001696:	4b4a      	ldr	r3, [pc, #296]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d116      	bne.n	80016d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a2:	4b47      	ldr	r3, [pc, #284]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d005      	beq.n	80016ba <HAL_RCC_OscConfig+0x17a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d001      	beq.n	80016ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e1e9      	b.n	8001a8e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ba:	4b41      	ldr	r3, [pc, #260]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	493d      	ldr	r1, [pc, #244]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ce:	e040      	b.n	8001752 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d023      	beq.n	8001720 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d8:	4b39      	ldr	r3, [pc, #228]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a38      	ldr	r2, [pc, #224]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e4:	f7ff faa8 	bl	8000c38 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ec:	f7ff faa4 	bl	8000c38 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e1c7      	b.n	8001a8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fe:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f0      	beq.n	80016ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170a:	4b2d      	ldr	r3, [pc, #180]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4929      	ldr	r1, [pc, #164]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]
 800171e:	e018      	b.n	8001752 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001720:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a26      	ldr	r2, [pc, #152]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 8001726:	f023 0301 	bic.w	r3, r3, #1
 800172a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff fa84 	bl	8000c38 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001734:	f7ff fa80 	bl	8000c38 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e1a3      	b.n	8001a8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001746:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d038      	beq.n	80017d0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d019      	beq.n	800179a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001766:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 8001768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800176a:	4a15      	ldr	r2, [pc, #84]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001772:	f7ff fa61 	bl	8000c38 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800177a:	f7ff fa5d 	bl	8000c38 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e180      	b.n	8001a8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 800178e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0x23a>
 8001798:	e01a      	b.n	80017d0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 800179c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800179e:	4a08      	ldr	r2, [pc, #32]	; (80017c0 <HAL_RCC_OscConfig+0x280>)
 80017a0:	f023 0301 	bic.w	r3, r3, #1
 80017a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a6:	f7ff fa47 	bl	8000c38 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ac:	e00a      	b.n	80017c4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ae:	f7ff fa43 	bl	8000c38 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d903      	bls.n	80017c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e166      	b.n	8001a8e <HAL_RCC_OscConfig+0x54e>
 80017c0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c4:	4b92      	ldr	r3, [pc, #584]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 80017c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1ee      	bne.n	80017ae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 80a4 	beq.w	8001926 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017de:	4b8c      	ldr	r3, [pc, #560]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10d      	bne.n	8001806 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	4b89      	ldr	r3, [pc, #548]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	4a88      	ldr	r2, [pc, #544]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f4:	6413      	str	r3, [r2, #64]	; 0x40
 80017f6:	4b86      	ldr	r3, [pc, #536]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001802:	2301      	movs	r3, #1
 8001804:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001806:	4b83      	ldr	r3, [pc, #524]	; (8001a14 <HAL_RCC_OscConfig+0x4d4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180e:	2b00      	cmp	r3, #0
 8001810:	d118      	bne.n	8001844 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001812:	4b80      	ldr	r3, [pc, #512]	; (8001a14 <HAL_RCC_OscConfig+0x4d4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a7f      	ldr	r2, [pc, #508]	; (8001a14 <HAL_RCC_OscConfig+0x4d4>)
 8001818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800181e:	f7ff fa0b 	bl	8000c38 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001826:	f7ff fa07 	bl	8000c38 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b64      	cmp	r3, #100	; 0x64
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e12a      	b.n	8001a8e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001838:	4b76      	ldr	r3, [pc, #472]	; (8001a14 <HAL_RCC_OscConfig+0x4d4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d106      	bne.n	800185a <HAL_RCC_OscConfig+0x31a>
 800184c:	4b70      	ldr	r3, [pc, #448]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 800184e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001850:	4a6f      	ldr	r2, [pc, #444]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6713      	str	r3, [r2, #112]	; 0x70
 8001858:	e02d      	b.n	80018b6 <HAL_RCC_OscConfig+0x376>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10c      	bne.n	800187c <HAL_RCC_OscConfig+0x33c>
 8001862:	4b6b      	ldr	r3, [pc, #428]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 8001864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001866:	4a6a      	ldr	r2, [pc, #424]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 8001868:	f023 0301 	bic.w	r3, r3, #1
 800186c:	6713      	str	r3, [r2, #112]	; 0x70
 800186e:	4b68      	ldr	r3, [pc, #416]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 8001870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001872:	4a67      	ldr	r2, [pc, #412]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 8001874:	f023 0304 	bic.w	r3, r3, #4
 8001878:	6713      	str	r3, [r2, #112]	; 0x70
 800187a:	e01c      	b.n	80018b6 <HAL_RCC_OscConfig+0x376>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2b05      	cmp	r3, #5
 8001882:	d10c      	bne.n	800189e <HAL_RCC_OscConfig+0x35e>
 8001884:	4b62      	ldr	r3, [pc, #392]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 8001886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001888:	4a61      	ldr	r2, [pc, #388]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 800188a:	f043 0304 	orr.w	r3, r3, #4
 800188e:	6713      	str	r3, [r2, #112]	; 0x70
 8001890:	4b5f      	ldr	r3, [pc, #380]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 8001892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001894:	4a5e      	ldr	r2, [pc, #376]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	6713      	str	r3, [r2, #112]	; 0x70
 800189c:	e00b      	b.n	80018b6 <HAL_RCC_OscConfig+0x376>
 800189e:	4b5c      	ldr	r3, [pc, #368]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 80018a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a2:	4a5b      	ldr	r2, [pc, #364]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 80018a4:	f023 0301 	bic.w	r3, r3, #1
 80018a8:	6713      	str	r3, [r2, #112]	; 0x70
 80018aa:	4b59      	ldr	r3, [pc, #356]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 80018ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ae:	4a58      	ldr	r2, [pc, #352]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 80018b0:	f023 0304 	bic.w	r3, r3, #4
 80018b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d015      	beq.n	80018ea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018be:	f7ff f9bb 	bl	8000c38 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c4:	e00a      	b.n	80018dc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c6:	f7ff f9b7 	bl	8000c38 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e0d8      	b.n	8001a8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018dc:	4b4c      	ldr	r3, [pc, #304]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 80018de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0ee      	beq.n	80018c6 <HAL_RCC_OscConfig+0x386>
 80018e8:	e014      	b.n	8001914 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ea:	f7ff f9a5 	bl	8000c38 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f0:	e00a      	b.n	8001908 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f2:	f7ff f9a1 	bl	8000c38 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001900:	4293      	cmp	r3, r2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e0c2      	b.n	8001a8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001908:	4b41      	ldr	r3, [pc, #260]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 800190a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1ee      	bne.n	80018f2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001914:	7dfb      	ldrb	r3, [r7, #23]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d105      	bne.n	8001926 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800191a:	4b3d      	ldr	r3, [pc, #244]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	4a3c      	ldr	r2, [pc, #240]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 8001920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001924:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 80ae 	beq.w	8001a8c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001930:	4b37      	ldr	r3, [pc, #220]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 030c 	and.w	r3, r3, #12
 8001938:	2b08      	cmp	r3, #8
 800193a:	d06d      	beq.n	8001a18 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d14b      	bne.n	80019dc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001944:	4b32      	ldr	r3, [pc, #200]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a31      	ldr	r2, [pc, #196]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 800194a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800194e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff f972 	bl	8000c38 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001958:	f7ff f96e 	bl	8000c38 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e091      	b.n	8001a8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196a:	4b29      	ldr	r3, [pc, #164]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69da      	ldr	r2, [r3, #28]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	019b      	lsls	r3, r3, #6
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198c:	085b      	lsrs	r3, r3, #1
 800198e:	3b01      	subs	r3, #1
 8001990:	041b      	lsls	r3, r3, #16
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	061b      	lsls	r3, r3, #24
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a0:	071b      	lsls	r3, r3, #28
 80019a2:	491b      	ldr	r1, [pc, #108]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a18      	ldr	r2, [pc, #96]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 80019ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b4:	f7ff f940 	bl	8000c38 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019bc:	f7ff f93c 	bl	8000c38 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e05f      	b.n	8001a8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0f0      	beq.n	80019bc <HAL_RCC_OscConfig+0x47c>
 80019da:	e057      	b.n	8001a8c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0b      	ldr	r2, [pc, #44]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 80019e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e8:	f7ff f926 	bl	8000c38 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f0:	f7ff f922 	bl	8000c38 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e045      	b.n	8001a8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a02:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <HAL_RCC_OscConfig+0x4d0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x4b0>
 8001a0e:	e03d      	b.n	8001a8c <HAL_RCC_OscConfig+0x54c>
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001a18:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <HAL_RCC_OscConfig+0x558>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d030      	beq.n	8001a88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d129      	bne.n	8001a88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d122      	bne.n	8001a88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a48:	4013      	ands	r3, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a4e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d119      	bne.n	8001a88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5e:	085b      	lsrs	r3, r3, #1
 8001a60:	3b01      	subs	r3, #1
 8001a62:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d10f      	bne.n	8001a88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d107      	bne.n	8001a88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800

08001a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0d0      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b6a      	ldr	r3, [pc, #424]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 030f 	and.w	r3, r3, #15
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d910      	bls.n	8001ae4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b67      	ldr	r3, [pc, #412]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 020f 	bic.w	r2, r3, #15
 8001aca:	4965      	ldr	r1, [pc, #404]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad2:	4b63      	ldr	r3, [pc, #396]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0b8      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d020      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001afc:	4b59      	ldr	r3, [pc, #356]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	4a58      	ldr	r2, [pc, #352]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b14:	4b53      	ldr	r3, [pc, #332]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	4a52      	ldr	r2, [pc, #328]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b20:	4b50      	ldr	r3, [pc, #320]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	494d      	ldr	r1, [pc, #308]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d040      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d107      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	4b47      	ldr	r3, [pc, #284]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d115      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e07f      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d107      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5e:	4b41      	ldr	r3, [pc, #260]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d109      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e073      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6e:	4b3d      	ldr	r3, [pc, #244]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e06b      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b7e:	4b39      	ldr	r3, [pc, #228]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f023 0203 	bic.w	r2, r3, #3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4936      	ldr	r1, [pc, #216]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b90:	f7ff f852 	bl	8000c38 <HAL_GetTick>
 8001b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b96:	e00a      	b.n	8001bae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b98:	f7ff f84e 	bl	8000c38 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e053      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bae:	4b2d      	ldr	r3, [pc, #180]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 020c 	and.w	r2, r3, #12
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d1eb      	bne.n	8001b98 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b27      	ldr	r3, [pc, #156]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d210      	bcs.n	8001bf0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 020f 	bic.w	r2, r3, #15
 8001bd6:	4922      	ldr	r1, [pc, #136]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e032      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d008      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bfc:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	4916      	ldr	r1, [pc, #88]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d009      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c1a:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	490e      	ldr	r1, [pc, #56]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c2e:	f000 f821 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8001c32:	4602      	mov	r2, r0
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	490a      	ldr	r1, [pc, #40]	; (8001c68 <HAL_RCC_ClockConfig+0x1cc>)
 8001c40:	5ccb      	ldrb	r3, [r1, r3]
 8001c42:	fa22 f303 	lsr.w	r3, r2, r3
 8001c46:	4a09      	ldr	r2, [pc, #36]	; (8001c6c <HAL_RCC_ClockConfig+0x1d0>)
 8001c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_RCC_ClockConfig+0x1d4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe ffae 	bl	8000bb0 <HAL_InitTick>

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023c00 	.word	0x40023c00
 8001c64:	40023800 	.word	0x40023800
 8001c68:	08003660 	.word	0x08003660
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000004 	.word	0x20000004

08001c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c78:	b094      	sub	sp, #80	; 0x50
 8001c7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	647b      	str	r3, [r7, #68]	; 0x44
 8001c80:	2300      	movs	r3, #0
 8001c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c84:	2300      	movs	r3, #0
 8001c86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c8c:	4b79      	ldr	r3, [pc, #484]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 030c 	and.w	r3, r3, #12
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d00d      	beq.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x40>
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	f200 80e1 	bhi.w	8001e60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d003      	beq.n	8001cae <HAL_RCC_GetSysClockFreq+0x3a>
 8001ca6:	e0db      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ca8:	4b73      	ldr	r3, [pc, #460]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x204>)
 8001caa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cac:	e0db      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cae:	4b73      	ldr	r3, [pc, #460]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x208>)
 8001cb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cb2:	e0d8      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cb4:	4b6f      	ldr	r3, [pc, #444]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cbc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001cbe:	4b6d      	ldr	r3, [pc, #436]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d063      	beq.n	8001d92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cca:	4b6a      	ldr	r3, [pc, #424]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	099b      	lsrs	r3, r3, #6
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8001cde:	2300      	movs	r3, #0
 8001ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ce2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ce6:	4622      	mov	r2, r4
 8001ce8:	462b      	mov	r3, r5
 8001cea:	f04f 0000 	mov.w	r0, #0
 8001cee:	f04f 0100 	mov.w	r1, #0
 8001cf2:	0159      	lsls	r1, r3, #5
 8001cf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cf8:	0150      	lsls	r0, r2, #5
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4621      	mov	r1, r4
 8001d00:	1a51      	subs	r1, r2, r1
 8001d02:	6139      	str	r1, [r7, #16]
 8001d04:	4629      	mov	r1, r5
 8001d06:	eb63 0301 	sbc.w	r3, r3, r1
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	f04f 0300 	mov.w	r3, #0
 8001d14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d18:	4659      	mov	r1, fp
 8001d1a:	018b      	lsls	r3, r1, #6
 8001d1c:	4651      	mov	r1, sl
 8001d1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d22:	4651      	mov	r1, sl
 8001d24:	018a      	lsls	r2, r1, #6
 8001d26:	4651      	mov	r1, sl
 8001d28:	ebb2 0801 	subs.w	r8, r2, r1
 8001d2c:	4659      	mov	r1, fp
 8001d2e:	eb63 0901 	sbc.w	r9, r3, r1
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d46:	4690      	mov	r8, r2
 8001d48:	4699      	mov	r9, r3
 8001d4a:	4623      	mov	r3, r4
 8001d4c:	eb18 0303 	adds.w	r3, r8, r3
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	462b      	mov	r3, r5
 8001d54:	eb49 0303 	adc.w	r3, r9, r3
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d66:	4629      	mov	r1, r5
 8001d68:	024b      	lsls	r3, r1, #9
 8001d6a:	4621      	mov	r1, r4
 8001d6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d70:	4621      	mov	r1, r4
 8001d72:	024a      	lsls	r2, r1, #9
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d84:	f7fe fa58 	bl	8000238 <__aeabi_uldivmod>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d90:	e058      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d92:	4b38      	ldr	r3, [pc, #224]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	099b      	lsrs	r3, r3, #6
 8001d98:	2200      	movs	r2, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001da2:	623b      	str	r3, [r7, #32]
 8001da4:	2300      	movs	r3, #0
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
 8001da8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001dac:	4642      	mov	r2, r8
 8001dae:	464b      	mov	r3, r9
 8001db0:	f04f 0000 	mov.w	r0, #0
 8001db4:	f04f 0100 	mov.w	r1, #0
 8001db8:	0159      	lsls	r1, r3, #5
 8001dba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dbe:	0150      	lsls	r0, r2, #5
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4641      	mov	r1, r8
 8001dc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dca:	4649      	mov	r1, r9
 8001dcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ddc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001de0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001de4:	ebb2 040a 	subs.w	r4, r2, sl
 8001de8:	eb63 050b 	sbc.w	r5, r3, fp
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	00eb      	lsls	r3, r5, #3
 8001df6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dfa:	00e2      	lsls	r2, r4, #3
 8001dfc:	4614      	mov	r4, r2
 8001dfe:	461d      	mov	r5, r3
 8001e00:	4643      	mov	r3, r8
 8001e02:	18e3      	adds	r3, r4, r3
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	464b      	mov	r3, r9
 8001e08:	eb45 0303 	adc.w	r3, r5, r3
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e1a:	4629      	mov	r1, r5
 8001e1c:	028b      	lsls	r3, r1, #10
 8001e1e:	4621      	mov	r1, r4
 8001e20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e24:	4621      	mov	r1, r4
 8001e26:	028a      	lsls	r2, r1, #10
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	61fa      	str	r2, [r7, #28]
 8001e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e38:	f7fe f9fe 	bl	8000238 <__aeabi_uldivmod>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4613      	mov	r3, r2
 8001e42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	0c1b      	lsrs	r3, r3, #16
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	3301      	adds	r3, #1
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001e54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e5e:	e002      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3750      	adds	r7, #80	; 0x50
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e72:	bf00      	nop
 8001e74:	40023800 	.word	0x40023800
 8001e78:	00f42400 	.word	0x00f42400
 8001e7c:	007a1200 	.word	0x007a1200

08001e80 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e84:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e86:	681b      	ldr	r3, [r3, #0]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20000000 	.word	0x20000000

08001e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e9c:	f7ff fff0 	bl	8001e80 <HAL_RCC_GetHCLKFreq>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	0a9b      	lsrs	r3, r3, #10
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	4903      	ldr	r1, [pc, #12]	; (8001ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eae:	5ccb      	ldrb	r3, [r1, r3]
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	08003670 	.word	0x08003670

08001ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ec4:	f7ff ffdc 	bl	8001e80 <HAL_RCC_GetHCLKFreq>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	0b5b      	lsrs	r3, r3, #13
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	4903      	ldr	r1, [pc, #12]	; (8001ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ed6:	5ccb      	ldrb	r3, [r1, r3]
 8001ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	08003670 	.word	0x08003670

08001ee8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d012      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f10:	4b69      	ldr	r3, [pc, #420]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	4a68      	ldr	r2, [pc, #416]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f1a:	6093      	str	r3, [r2, #8]
 8001f1c:	4b66      	ldr	r3, [pc, #408]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f24:	4964      	ldr	r1, [pc, #400]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001f32:	2301      	movs	r3, #1
 8001f34:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d017      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f42:	4b5d      	ldr	r3, [pc, #372]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f50:	4959      	ldr	r1, [pc, #356]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f60:	d101      	bne.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001f62:	2301      	movs	r3, #1
 8001f64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d017      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f7e:	4b4e      	ldr	r3, [pc, #312]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	494a      	ldr	r1, [pc, #296]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f9c:	d101      	bne.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001faa:	2301      	movs	r3, #1
 8001fac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0320 	and.w	r3, r3, #32
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 808b 	beq.w	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fcc:	4b3a      	ldr	r3, [pc, #232]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	4a39      	ldr	r2, [pc, #228]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd8:	4b37      	ldr	r3, [pc, #220]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001fe4:	4b35      	ldr	r3, [pc, #212]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a34      	ldr	r2, [pc, #208]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ff0:	f7fe fe22 	bl	8000c38 <HAL_GetTick>
 8001ff4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff8:	f7fe fe1e 	bl	8000c38 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b64      	cmp	r3, #100	; 0x64
 8002004:	d901      	bls.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e38f      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800200a:	4b2c      	ldr	r3, [pc, #176]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002016:	4b28      	ldr	r3, [pc, #160]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800201e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d035      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	429a      	cmp	r2, r3
 8002032:	d02e      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002034:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800203c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800203e:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002042:	4a1d      	ldr	r2, [pc, #116]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002048:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800204a:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204e:	4a1a      	ldr	r2, [pc, #104]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002054:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002056:	4a18      	ldr	r2, [pc, #96]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800205c:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800205e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b01      	cmp	r3, #1
 8002066:	d114      	bne.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002068:	f7fe fde6 	bl	8000c38 <HAL_GetTick>
 800206c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206e:	e00a      	b.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002070:	f7fe fde2 	bl	8000c38 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	; 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e351      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002086:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0ee      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800209e:	d111      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020ac:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80020ae:	400b      	ands	r3, r1
 80020b0:	4901      	ldr	r1, [pc, #4]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	608b      	str	r3, [r1, #8]
 80020b6:	e00b      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40007000 	.word	0x40007000
 80020c0:	0ffffcff 	.word	0x0ffffcff
 80020c4:	4bac      	ldr	r3, [pc, #688]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	4aab      	ldr	r2, [pc, #684]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80020ce:	6093      	str	r3, [r2, #8]
 80020d0:	4ba9      	ldr	r3, [pc, #676]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020dc:	49a6      	ldr	r1, [pc, #664]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0310 	and.w	r3, r3, #16
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d010      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80020ee:	4ba2      	ldr	r3, [pc, #648]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020f4:	4aa0      	ldr	r2, [pc, #640]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020fe:	4b9e      	ldr	r3, [pc, #632]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002100:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002108:	499b      	ldr	r1, [pc, #620]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00a      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800211c:	4b96      	ldr	r3, [pc, #600]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800211e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002122:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800212a:	4993      	ldr	r1, [pc, #588]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800212c:	4313      	orrs	r3, r2
 800212e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00a      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800213e:	4b8e      	ldr	r3, [pc, #568]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002144:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800214c:	498a      	ldr	r1, [pc, #552]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800214e:	4313      	orrs	r3, r2
 8002150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00a      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002160:	4b85      	ldr	r3, [pc, #532]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002166:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800216e:	4982      	ldr	r1, [pc, #520]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00a      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002182:	4b7d      	ldr	r3, [pc, #500]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002188:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002190:	4979      	ldr	r1, [pc, #484]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002192:	4313      	orrs	r3, r2
 8002194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00a      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021a4:	4b74      	ldr	r3, [pc, #464]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021aa:	f023 0203 	bic.w	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	4971      	ldr	r1, [pc, #452]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021c6:	4b6c      	ldr	r3, [pc, #432]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021cc:	f023 020c 	bic.w	r2, r3, #12
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d4:	4968      	ldr	r1, [pc, #416]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00a      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021e8:	4b63      	ldr	r3, [pc, #396]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f6:	4960      	ldr	r1, [pc, #384]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800220a:	4b5b      	ldr	r3, [pc, #364]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800220c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002210:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002218:	4957      	ldr	r1, [pc, #348]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00a      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800222c:	4b52      	ldr	r3, [pc, #328]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800222e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002232:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223a:	494f      	ldr	r1, [pc, #316]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00a      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800224e:	4b4a      	ldr	r3, [pc, #296]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002254:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225c:	4946      	ldr	r1, [pc, #280]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00a      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002270:	4b41      	ldr	r3, [pc, #260]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002276:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227e:	493e      	ldr	r1, [pc, #248]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00a      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002292:	4b39      	ldr	r3, [pc, #228]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002298:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a0:	4935      	ldr	r1, [pc, #212]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00a      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022b4:	4b30      	ldr	r3, [pc, #192]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022c2:	492d      	ldr	r1, [pc, #180]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d011      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022d6:	4b28      	ldr	r3, [pc, #160]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022e4:	4924      	ldr	r1, [pc, #144]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022f4:	d101      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80022f6:	2301      	movs	r3, #1
 80022f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002306:	2301      	movs	r3, #1
 8002308:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002316:	4b18      	ldr	r3, [pc, #96]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002324:	4914      	ldr	r1, [pc, #80]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00b      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800233a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002348:	490b      	ldr	r1, [pc, #44]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00f      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800235e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002362:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800236c:	4902      	ldr	r1, [pc, #8]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800236e:	4313      	orrs	r3, r2
 8002370:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002374:	e002      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00b      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002388:	4b8a      	ldr	r3, [pc, #552]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800238a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800238e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002398:	4986      	ldr	r1, [pc, #536]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00b      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80023ac:	4b81      	ldr	r3, [pc, #516]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023bc:	497d      	ldr	r1, [pc, #500]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d006      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 80d6 	beq.w	8002584 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80023d8:	4b76      	ldr	r3, [pc, #472]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a75      	ldr	r2, [pc, #468]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e4:	f7fe fc28 	bl	8000c38 <HAL_GetTick>
 80023e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80023ec:	f7fe fc24 	bl	8000c38 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b64      	cmp	r3, #100	; 0x64
 80023f8:	d901      	bls.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e195      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023fe:	4b6d      	ldr	r3, [pc, #436]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f0      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d021      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241a:	2b00      	cmp	r3, #0
 800241c:	d11d      	bne.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800241e:	4b65      	ldr	r3, [pc, #404]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002424:	0c1b      	lsrs	r3, r3, #16
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800242c:	4b61      	ldr	r3, [pc, #388]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800242e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002432:	0e1b      	lsrs	r3, r3, #24
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	019a      	lsls	r2, r3, #6
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	041b      	lsls	r3, r3, #16
 8002444:	431a      	orrs	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	061b      	lsls	r3, r3, #24
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	071b      	lsls	r3, r3, #28
 8002452:	4958      	ldr	r1, [pc, #352]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d004      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800246e:	d00a      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002478:	2b00      	cmp	r3, #0
 800247a:	d02e      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002484:	d129      	bne.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002486:	4b4b      	ldr	r3, [pc, #300]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800248c:	0c1b      	lsrs	r3, r3, #16
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002494:	4b47      	ldr	r3, [pc, #284]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800249a:	0f1b      	lsrs	r3, r3, #28
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	019a      	lsls	r2, r3, #6
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	041b      	lsls	r3, r3, #16
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	061b      	lsls	r3, r3, #24
 80024b4:	431a      	orrs	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	071b      	lsls	r3, r3, #28
 80024ba:	493e      	ldr	r1, [pc, #248]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80024c2:	4b3c      	ldr	r3, [pc, #240]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024c8:	f023 021f 	bic.w	r2, r3, #31
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	3b01      	subs	r3, #1
 80024d2:	4938      	ldr	r1, [pc, #224]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d01d      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024e6:	4b33      	ldr	r3, [pc, #204]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024ec:	0e1b      	lsrs	r3, r3, #24
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024f4:	4b2f      	ldr	r3, [pc, #188]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024fa:	0f1b      	lsrs	r3, r3, #28
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	019a      	lsls	r2, r3, #6
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	041b      	lsls	r3, r3, #16
 800250e:	431a      	orrs	r2, r3
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	061b      	lsls	r3, r3, #24
 8002514:	431a      	orrs	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	071b      	lsls	r3, r3, #28
 800251a:	4926      	ldr	r1, [pc, #152]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800251c:	4313      	orrs	r3, r2
 800251e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d011      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	019a      	lsls	r2, r3, #6
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	041b      	lsls	r3, r3, #16
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	061b      	lsls	r3, r3, #24
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	071b      	lsls	r3, r3, #28
 800254a:	491a      	ldr	r1, [pc, #104]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002552:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a17      	ldr	r2, [pc, #92]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002558:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800255c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800255e:	f7fe fb6b 	bl	8000c38 <HAL_GetTick>
 8002562:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002566:	f7fe fb67 	bl	8000c38 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b64      	cmp	r3, #100	; 0x64
 8002572:	d901      	bls.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e0d8      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002578:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	2b01      	cmp	r3, #1
 8002588:	f040 80ce 	bne.w	8002728 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800258c:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a08      	ldr	r2, [pc, #32]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002598:	f7fe fb4e 	bl	8000c38 <HAL_GetTick>
 800259c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800259e:	e00b      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025a0:	f7fe fb4a 	bl	8000c38 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	; 0x64
 80025ac:	d904      	bls.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e0bb      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80025b2:	bf00      	nop
 80025b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025b8:	4b5e      	ldr	r3, [pc, #376]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025c4:	d0ec      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d009      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d02e      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d12a      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025ee:	4b51      	ldr	r3, [pc, #324]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f4:	0c1b      	lsrs	r3, r3, #16
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80025fc:	4b4d      	ldr	r3, [pc, #308]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	0f1b      	lsrs	r3, r3, #28
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	019a      	lsls	r2, r3, #6
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	041b      	lsls	r3, r3, #16
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	061b      	lsls	r3, r3, #24
 800261c:	431a      	orrs	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	071b      	lsls	r3, r3, #28
 8002622:	4944      	ldr	r1, [pc, #272]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800262a:	4b42      	ldr	r3, [pc, #264]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800262c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002630:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	3b01      	subs	r3, #1
 800263a:	021b      	lsls	r3, r3, #8
 800263c:	493d      	ldr	r1, [pc, #244]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d022      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002654:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002658:	d11d      	bne.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800265a:	4b36      	ldr	r3, [pc, #216]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800265c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002660:	0e1b      	lsrs	r3, r3, #24
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002668:	4b32      	ldr	r3, [pc, #200]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266e:	0f1b      	lsrs	r3, r3, #28
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	019a      	lsls	r2, r3, #6
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	041b      	lsls	r3, r3, #16
 8002682:	431a      	orrs	r2, r3
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	061b      	lsls	r3, r3, #24
 8002688:	431a      	orrs	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	071b      	lsls	r3, r3, #28
 800268e:	4929      	ldr	r1, [pc, #164]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002690:	4313      	orrs	r3, r2
 8002692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d028      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026a2:	4b24      	ldr	r3, [pc, #144]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a8:	0e1b      	lsrs	r3, r3, #24
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80026b0:	4b20      	ldr	r3, [pc, #128]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b6:	0c1b      	lsrs	r3, r3, #16
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	019a      	lsls	r2, r3, #6
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	041b      	lsls	r3, r3, #16
 80026c8:	431a      	orrs	r2, r3
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	061b      	lsls	r3, r3, #24
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	071b      	lsls	r3, r3, #28
 80026d6:	4917      	ldr	r1, [pc, #92]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80026de:	4b15      	ldr	r3, [pc, #84]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	4911      	ldr	r1, [pc, #68]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80026f4:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a0e      	ldr	r2, [pc, #56]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002700:	f7fe fa9a 	bl	8000c38 <HAL_GetTick>
 8002704:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002706:	e008      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002708:	f7fe fa96 	bl	8000c38 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	; 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e007      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002726:	d1ef      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3720      	adds	r7, #32
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800

08002738 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e040      	b.n	80027cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800274e:	2b00      	cmp	r3, #0
 8002750:	d106      	bne.n	8002760 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7fe f8ea 	bl	8000934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2224      	movs	r2, #36	; 0x24
 8002764:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0201 	bic.w	r2, r2, #1
 8002774:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f82c 	bl	80027d4 <UART_SetConfig>
 800277c:	4603      	mov	r3, r0
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e022      	b.n	80027cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 fa84 	bl	8002c9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 fb0b 	bl	8002de0 <UART_CheckIdleState>
 80027ca:	4603      	mov	r3, r0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	4ba6      	ldr	r3, [pc, #664]	; (8002a98 <UART_SetConfig+0x2c4>)
 8002800:	4013      	ands	r3, r2
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	6979      	ldr	r1, [r7, #20]
 8002808:	430b      	orrs	r3, r1
 800280a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	4313      	orrs	r3, r2
 8002830:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	430a      	orrs	r2, r1
 8002844:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a94      	ldr	r2, [pc, #592]	; (8002a9c <UART_SetConfig+0x2c8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d120      	bne.n	8002892 <UART_SetConfig+0xbe>
 8002850:	4b93      	ldr	r3, [pc, #588]	; (8002aa0 <UART_SetConfig+0x2cc>)
 8002852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	2b03      	cmp	r3, #3
 800285c:	d816      	bhi.n	800288c <UART_SetConfig+0xb8>
 800285e:	a201      	add	r2, pc, #4	; (adr r2, 8002864 <UART_SetConfig+0x90>)
 8002860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002864:	08002875 	.word	0x08002875
 8002868:	08002881 	.word	0x08002881
 800286c:	0800287b 	.word	0x0800287b
 8002870:	08002887 	.word	0x08002887
 8002874:	2301      	movs	r3, #1
 8002876:	77fb      	strb	r3, [r7, #31]
 8002878:	e150      	b.n	8002b1c <UART_SetConfig+0x348>
 800287a:	2302      	movs	r3, #2
 800287c:	77fb      	strb	r3, [r7, #31]
 800287e:	e14d      	b.n	8002b1c <UART_SetConfig+0x348>
 8002880:	2304      	movs	r3, #4
 8002882:	77fb      	strb	r3, [r7, #31]
 8002884:	e14a      	b.n	8002b1c <UART_SetConfig+0x348>
 8002886:	2308      	movs	r3, #8
 8002888:	77fb      	strb	r3, [r7, #31]
 800288a:	e147      	b.n	8002b1c <UART_SetConfig+0x348>
 800288c:	2310      	movs	r3, #16
 800288e:	77fb      	strb	r3, [r7, #31]
 8002890:	e144      	b.n	8002b1c <UART_SetConfig+0x348>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a83      	ldr	r2, [pc, #524]	; (8002aa4 <UART_SetConfig+0x2d0>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d132      	bne.n	8002902 <UART_SetConfig+0x12e>
 800289c:	4b80      	ldr	r3, [pc, #512]	; (8002aa0 <UART_SetConfig+0x2cc>)
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a2:	f003 030c 	and.w	r3, r3, #12
 80028a6:	2b0c      	cmp	r3, #12
 80028a8:	d828      	bhi.n	80028fc <UART_SetConfig+0x128>
 80028aa:	a201      	add	r2, pc, #4	; (adr r2, 80028b0 <UART_SetConfig+0xdc>)
 80028ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b0:	080028e5 	.word	0x080028e5
 80028b4:	080028fd 	.word	0x080028fd
 80028b8:	080028fd 	.word	0x080028fd
 80028bc:	080028fd 	.word	0x080028fd
 80028c0:	080028f1 	.word	0x080028f1
 80028c4:	080028fd 	.word	0x080028fd
 80028c8:	080028fd 	.word	0x080028fd
 80028cc:	080028fd 	.word	0x080028fd
 80028d0:	080028eb 	.word	0x080028eb
 80028d4:	080028fd 	.word	0x080028fd
 80028d8:	080028fd 	.word	0x080028fd
 80028dc:	080028fd 	.word	0x080028fd
 80028e0:	080028f7 	.word	0x080028f7
 80028e4:	2300      	movs	r3, #0
 80028e6:	77fb      	strb	r3, [r7, #31]
 80028e8:	e118      	b.n	8002b1c <UART_SetConfig+0x348>
 80028ea:	2302      	movs	r3, #2
 80028ec:	77fb      	strb	r3, [r7, #31]
 80028ee:	e115      	b.n	8002b1c <UART_SetConfig+0x348>
 80028f0:	2304      	movs	r3, #4
 80028f2:	77fb      	strb	r3, [r7, #31]
 80028f4:	e112      	b.n	8002b1c <UART_SetConfig+0x348>
 80028f6:	2308      	movs	r3, #8
 80028f8:	77fb      	strb	r3, [r7, #31]
 80028fa:	e10f      	b.n	8002b1c <UART_SetConfig+0x348>
 80028fc:	2310      	movs	r3, #16
 80028fe:	77fb      	strb	r3, [r7, #31]
 8002900:	e10c      	b.n	8002b1c <UART_SetConfig+0x348>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a68      	ldr	r2, [pc, #416]	; (8002aa8 <UART_SetConfig+0x2d4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d120      	bne.n	800294e <UART_SetConfig+0x17a>
 800290c:	4b64      	ldr	r3, [pc, #400]	; (8002aa0 <UART_SetConfig+0x2cc>)
 800290e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002912:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002916:	2b30      	cmp	r3, #48	; 0x30
 8002918:	d013      	beq.n	8002942 <UART_SetConfig+0x16e>
 800291a:	2b30      	cmp	r3, #48	; 0x30
 800291c:	d814      	bhi.n	8002948 <UART_SetConfig+0x174>
 800291e:	2b20      	cmp	r3, #32
 8002920:	d009      	beq.n	8002936 <UART_SetConfig+0x162>
 8002922:	2b20      	cmp	r3, #32
 8002924:	d810      	bhi.n	8002948 <UART_SetConfig+0x174>
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <UART_SetConfig+0x15c>
 800292a:	2b10      	cmp	r3, #16
 800292c:	d006      	beq.n	800293c <UART_SetConfig+0x168>
 800292e:	e00b      	b.n	8002948 <UART_SetConfig+0x174>
 8002930:	2300      	movs	r3, #0
 8002932:	77fb      	strb	r3, [r7, #31]
 8002934:	e0f2      	b.n	8002b1c <UART_SetConfig+0x348>
 8002936:	2302      	movs	r3, #2
 8002938:	77fb      	strb	r3, [r7, #31]
 800293a:	e0ef      	b.n	8002b1c <UART_SetConfig+0x348>
 800293c:	2304      	movs	r3, #4
 800293e:	77fb      	strb	r3, [r7, #31]
 8002940:	e0ec      	b.n	8002b1c <UART_SetConfig+0x348>
 8002942:	2308      	movs	r3, #8
 8002944:	77fb      	strb	r3, [r7, #31]
 8002946:	e0e9      	b.n	8002b1c <UART_SetConfig+0x348>
 8002948:	2310      	movs	r3, #16
 800294a:	77fb      	strb	r3, [r7, #31]
 800294c:	e0e6      	b.n	8002b1c <UART_SetConfig+0x348>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a56      	ldr	r2, [pc, #344]	; (8002aac <UART_SetConfig+0x2d8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d120      	bne.n	800299a <UART_SetConfig+0x1c6>
 8002958:	4b51      	ldr	r3, [pc, #324]	; (8002aa0 <UART_SetConfig+0x2cc>)
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002962:	2bc0      	cmp	r3, #192	; 0xc0
 8002964:	d013      	beq.n	800298e <UART_SetConfig+0x1ba>
 8002966:	2bc0      	cmp	r3, #192	; 0xc0
 8002968:	d814      	bhi.n	8002994 <UART_SetConfig+0x1c0>
 800296a:	2b80      	cmp	r3, #128	; 0x80
 800296c:	d009      	beq.n	8002982 <UART_SetConfig+0x1ae>
 800296e:	2b80      	cmp	r3, #128	; 0x80
 8002970:	d810      	bhi.n	8002994 <UART_SetConfig+0x1c0>
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <UART_SetConfig+0x1a8>
 8002976:	2b40      	cmp	r3, #64	; 0x40
 8002978:	d006      	beq.n	8002988 <UART_SetConfig+0x1b4>
 800297a:	e00b      	b.n	8002994 <UART_SetConfig+0x1c0>
 800297c:	2300      	movs	r3, #0
 800297e:	77fb      	strb	r3, [r7, #31]
 8002980:	e0cc      	b.n	8002b1c <UART_SetConfig+0x348>
 8002982:	2302      	movs	r3, #2
 8002984:	77fb      	strb	r3, [r7, #31]
 8002986:	e0c9      	b.n	8002b1c <UART_SetConfig+0x348>
 8002988:	2304      	movs	r3, #4
 800298a:	77fb      	strb	r3, [r7, #31]
 800298c:	e0c6      	b.n	8002b1c <UART_SetConfig+0x348>
 800298e:	2308      	movs	r3, #8
 8002990:	77fb      	strb	r3, [r7, #31]
 8002992:	e0c3      	b.n	8002b1c <UART_SetConfig+0x348>
 8002994:	2310      	movs	r3, #16
 8002996:	77fb      	strb	r3, [r7, #31]
 8002998:	e0c0      	b.n	8002b1c <UART_SetConfig+0x348>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a44      	ldr	r2, [pc, #272]	; (8002ab0 <UART_SetConfig+0x2dc>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d125      	bne.n	80029f0 <UART_SetConfig+0x21c>
 80029a4:	4b3e      	ldr	r3, [pc, #248]	; (8002aa0 <UART_SetConfig+0x2cc>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029b2:	d017      	beq.n	80029e4 <UART_SetConfig+0x210>
 80029b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029b8:	d817      	bhi.n	80029ea <UART_SetConfig+0x216>
 80029ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029be:	d00b      	beq.n	80029d8 <UART_SetConfig+0x204>
 80029c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029c4:	d811      	bhi.n	80029ea <UART_SetConfig+0x216>
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <UART_SetConfig+0x1fe>
 80029ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ce:	d006      	beq.n	80029de <UART_SetConfig+0x20a>
 80029d0:	e00b      	b.n	80029ea <UART_SetConfig+0x216>
 80029d2:	2300      	movs	r3, #0
 80029d4:	77fb      	strb	r3, [r7, #31]
 80029d6:	e0a1      	b.n	8002b1c <UART_SetConfig+0x348>
 80029d8:	2302      	movs	r3, #2
 80029da:	77fb      	strb	r3, [r7, #31]
 80029dc:	e09e      	b.n	8002b1c <UART_SetConfig+0x348>
 80029de:	2304      	movs	r3, #4
 80029e0:	77fb      	strb	r3, [r7, #31]
 80029e2:	e09b      	b.n	8002b1c <UART_SetConfig+0x348>
 80029e4:	2308      	movs	r3, #8
 80029e6:	77fb      	strb	r3, [r7, #31]
 80029e8:	e098      	b.n	8002b1c <UART_SetConfig+0x348>
 80029ea:	2310      	movs	r3, #16
 80029ec:	77fb      	strb	r3, [r7, #31]
 80029ee:	e095      	b.n	8002b1c <UART_SetConfig+0x348>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a2f      	ldr	r2, [pc, #188]	; (8002ab4 <UART_SetConfig+0x2e0>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d125      	bne.n	8002a46 <UART_SetConfig+0x272>
 80029fa:	4b29      	ldr	r3, [pc, #164]	; (8002aa0 <UART_SetConfig+0x2cc>)
 80029fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a08:	d017      	beq.n	8002a3a <UART_SetConfig+0x266>
 8002a0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a0e:	d817      	bhi.n	8002a40 <UART_SetConfig+0x26c>
 8002a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a14:	d00b      	beq.n	8002a2e <UART_SetConfig+0x25a>
 8002a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a1a:	d811      	bhi.n	8002a40 <UART_SetConfig+0x26c>
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <UART_SetConfig+0x254>
 8002a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a24:	d006      	beq.n	8002a34 <UART_SetConfig+0x260>
 8002a26:	e00b      	b.n	8002a40 <UART_SetConfig+0x26c>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	77fb      	strb	r3, [r7, #31]
 8002a2c:	e076      	b.n	8002b1c <UART_SetConfig+0x348>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	77fb      	strb	r3, [r7, #31]
 8002a32:	e073      	b.n	8002b1c <UART_SetConfig+0x348>
 8002a34:	2304      	movs	r3, #4
 8002a36:	77fb      	strb	r3, [r7, #31]
 8002a38:	e070      	b.n	8002b1c <UART_SetConfig+0x348>
 8002a3a:	2308      	movs	r3, #8
 8002a3c:	77fb      	strb	r3, [r7, #31]
 8002a3e:	e06d      	b.n	8002b1c <UART_SetConfig+0x348>
 8002a40:	2310      	movs	r3, #16
 8002a42:	77fb      	strb	r3, [r7, #31]
 8002a44:	e06a      	b.n	8002b1c <UART_SetConfig+0x348>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a1b      	ldr	r2, [pc, #108]	; (8002ab8 <UART_SetConfig+0x2e4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d138      	bne.n	8002ac2 <UART_SetConfig+0x2ee>
 8002a50:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <UART_SetConfig+0x2cc>)
 8002a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a56:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002a5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a5e:	d017      	beq.n	8002a90 <UART_SetConfig+0x2bc>
 8002a60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a64:	d82a      	bhi.n	8002abc <UART_SetConfig+0x2e8>
 8002a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a6a:	d00b      	beq.n	8002a84 <UART_SetConfig+0x2b0>
 8002a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a70:	d824      	bhi.n	8002abc <UART_SetConfig+0x2e8>
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <UART_SetConfig+0x2aa>
 8002a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a7a:	d006      	beq.n	8002a8a <UART_SetConfig+0x2b6>
 8002a7c:	e01e      	b.n	8002abc <UART_SetConfig+0x2e8>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	77fb      	strb	r3, [r7, #31]
 8002a82:	e04b      	b.n	8002b1c <UART_SetConfig+0x348>
 8002a84:	2302      	movs	r3, #2
 8002a86:	77fb      	strb	r3, [r7, #31]
 8002a88:	e048      	b.n	8002b1c <UART_SetConfig+0x348>
 8002a8a:	2304      	movs	r3, #4
 8002a8c:	77fb      	strb	r3, [r7, #31]
 8002a8e:	e045      	b.n	8002b1c <UART_SetConfig+0x348>
 8002a90:	2308      	movs	r3, #8
 8002a92:	77fb      	strb	r3, [r7, #31]
 8002a94:	e042      	b.n	8002b1c <UART_SetConfig+0x348>
 8002a96:	bf00      	nop
 8002a98:	efff69f3 	.word	0xefff69f3
 8002a9c:	40011000 	.word	0x40011000
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40004400 	.word	0x40004400
 8002aa8:	40004800 	.word	0x40004800
 8002aac:	40004c00 	.word	0x40004c00
 8002ab0:	40005000 	.word	0x40005000
 8002ab4:	40011400 	.word	0x40011400
 8002ab8:	40007800 	.word	0x40007800
 8002abc:	2310      	movs	r3, #16
 8002abe:	77fb      	strb	r3, [r7, #31]
 8002ac0:	e02c      	b.n	8002b1c <UART_SetConfig+0x348>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a72      	ldr	r2, [pc, #456]	; (8002c90 <UART_SetConfig+0x4bc>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d125      	bne.n	8002b18 <UART_SetConfig+0x344>
 8002acc:	4b71      	ldr	r3, [pc, #452]	; (8002c94 <UART_SetConfig+0x4c0>)
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ad6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ada:	d017      	beq.n	8002b0c <UART_SetConfig+0x338>
 8002adc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ae0:	d817      	bhi.n	8002b12 <UART_SetConfig+0x33e>
 8002ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ae6:	d00b      	beq.n	8002b00 <UART_SetConfig+0x32c>
 8002ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aec:	d811      	bhi.n	8002b12 <UART_SetConfig+0x33e>
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <UART_SetConfig+0x326>
 8002af2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002af6:	d006      	beq.n	8002b06 <UART_SetConfig+0x332>
 8002af8:	e00b      	b.n	8002b12 <UART_SetConfig+0x33e>
 8002afa:	2300      	movs	r3, #0
 8002afc:	77fb      	strb	r3, [r7, #31]
 8002afe:	e00d      	b.n	8002b1c <UART_SetConfig+0x348>
 8002b00:	2302      	movs	r3, #2
 8002b02:	77fb      	strb	r3, [r7, #31]
 8002b04:	e00a      	b.n	8002b1c <UART_SetConfig+0x348>
 8002b06:	2304      	movs	r3, #4
 8002b08:	77fb      	strb	r3, [r7, #31]
 8002b0a:	e007      	b.n	8002b1c <UART_SetConfig+0x348>
 8002b0c:	2308      	movs	r3, #8
 8002b0e:	77fb      	strb	r3, [r7, #31]
 8002b10:	e004      	b.n	8002b1c <UART_SetConfig+0x348>
 8002b12:	2310      	movs	r3, #16
 8002b14:	77fb      	strb	r3, [r7, #31]
 8002b16:	e001      	b.n	8002b1c <UART_SetConfig+0x348>
 8002b18:	2310      	movs	r3, #16
 8002b1a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b24:	d15b      	bne.n	8002bde <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002b26:	7ffb      	ldrb	r3, [r7, #31]
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d828      	bhi.n	8002b7e <UART_SetConfig+0x3aa>
 8002b2c:	a201      	add	r2, pc, #4	; (adr r2, 8002b34 <UART_SetConfig+0x360>)
 8002b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b32:	bf00      	nop
 8002b34:	08002b59 	.word	0x08002b59
 8002b38:	08002b61 	.word	0x08002b61
 8002b3c:	08002b69 	.word	0x08002b69
 8002b40:	08002b7f 	.word	0x08002b7f
 8002b44:	08002b6f 	.word	0x08002b6f
 8002b48:	08002b7f 	.word	0x08002b7f
 8002b4c:	08002b7f 	.word	0x08002b7f
 8002b50:	08002b7f 	.word	0x08002b7f
 8002b54:	08002b77 	.word	0x08002b77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b58:	f7ff f99e 	bl	8001e98 <HAL_RCC_GetPCLK1Freq>
 8002b5c:	61b8      	str	r0, [r7, #24]
        break;
 8002b5e:	e013      	b.n	8002b88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b60:	f7ff f9ae 	bl	8001ec0 <HAL_RCC_GetPCLK2Freq>
 8002b64:	61b8      	str	r0, [r7, #24]
        break;
 8002b66:	e00f      	b.n	8002b88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b68:	4b4b      	ldr	r3, [pc, #300]	; (8002c98 <UART_SetConfig+0x4c4>)
 8002b6a:	61bb      	str	r3, [r7, #24]
        break;
 8002b6c:	e00c      	b.n	8002b88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b6e:	f7ff f881 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8002b72:	61b8      	str	r0, [r7, #24]
        break;
 8002b74:	e008      	b.n	8002b88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b7a:	61bb      	str	r3, [r7, #24]
        break;
 8002b7c:	e004      	b.n	8002b88 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	77bb      	strb	r3, [r7, #30]
        break;
 8002b86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d074      	beq.n	8002c78 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	005a      	lsls	r2, r3, #1
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	085b      	lsrs	r3, r3, #1
 8002b98:	441a      	add	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	2b0f      	cmp	r3, #15
 8002ba8:	d916      	bls.n	8002bd8 <UART_SetConfig+0x404>
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb0:	d212      	bcs.n	8002bd8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	f023 030f 	bic.w	r3, r3, #15
 8002bba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	085b      	lsrs	r3, r3, #1
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	89fb      	ldrh	r3, [r7, #14]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	89fa      	ldrh	r2, [r7, #14]
 8002bd4:	60da      	str	r2, [r3, #12]
 8002bd6:	e04f      	b.n	8002c78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	77bb      	strb	r3, [r7, #30]
 8002bdc:	e04c      	b.n	8002c78 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bde:	7ffb      	ldrb	r3, [r7, #31]
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d828      	bhi.n	8002c36 <UART_SetConfig+0x462>
 8002be4:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <UART_SetConfig+0x418>)
 8002be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bea:	bf00      	nop
 8002bec:	08002c11 	.word	0x08002c11
 8002bf0:	08002c19 	.word	0x08002c19
 8002bf4:	08002c21 	.word	0x08002c21
 8002bf8:	08002c37 	.word	0x08002c37
 8002bfc:	08002c27 	.word	0x08002c27
 8002c00:	08002c37 	.word	0x08002c37
 8002c04:	08002c37 	.word	0x08002c37
 8002c08:	08002c37 	.word	0x08002c37
 8002c0c:	08002c2f 	.word	0x08002c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c10:	f7ff f942 	bl	8001e98 <HAL_RCC_GetPCLK1Freq>
 8002c14:	61b8      	str	r0, [r7, #24]
        break;
 8002c16:	e013      	b.n	8002c40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c18:	f7ff f952 	bl	8001ec0 <HAL_RCC_GetPCLK2Freq>
 8002c1c:	61b8      	str	r0, [r7, #24]
        break;
 8002c1e:	e00f      	b.n	8002c40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c20:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <UART_SetConfig+0x4c4>)
 8002c22:	61bb      	str	r3, [r7, #24]
        break;
 8002c24:	e00c      	b.n	8002c40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c26:	f7ff f825 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8002c2a:	61b8      	str	r0, [r7, #24]
        break;
 8002c2c:	e008      	b.n	8002c40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c32:	61bb      	str	r3, [r7, #24]
        break;
 8002c34:	e004      	b.n	8002c40 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	77bb      	strb	r3, [r7, #30]
        break;
 8002c3e:	bf00      	nop
    }

    if (pclk != 0U)
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d018      	beq.n	8002c78 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	085a      	lsrs	r2, r3, #1
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	441a      	add	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	2b0f      	cmp	r3, #15
 8002c5e:	d909      	bls.n	8002c74 <UART_SetConfig+0x4a0>
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c66:	d205      	bcs.n	8002c74 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	60da      	str	r2, [r3, #12]
 8002c72:	e001      	b.n	8002c78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002c84:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3720      	adds	r7, #32
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40007c00 	.word	0x40007c00
 8002c94:	40023800 	.word	0x40023800
 8002c98:	00f42400 	.word	0x00f42400

08002c9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00a      	beq.n	8002cc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	f003 0320 	and.w	r3, r3, #32
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d01a      	beq.n	8002db2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d9a:	d10a      	bne.n	8002db2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00a      	beq.n	8002dd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	605a      	str	r2, [r3, #4]
  }
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af02      	add	r7, sp, #8
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002df0:	f7fd ff22 	bl	8000c38 <HAL_GetTick>
 8002df4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d10e      	bne.n	8002e22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f831 	bl	8002e7a <UART_WaitOnFlagUntilTimeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e027      	b.n	8002e72 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d10e      	bne.n	8002e4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f81b 	bl	8002e7a <UART_WaitOnFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e011      	b.n	8002e72 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2220      	movs	r2, #32
 8002e52:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b09c      	sub	sp, #112	; 0x70
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	603b      	str	r3, [r7, #0]
 8002e86:	4613      	mov	r3, r2
 8002e88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e8a:	e0a7      	b.n	8002fdc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e92:	f000 80a3 	beq.w	8002fdc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e96:	f7fd fecf 	bl	8000c38 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d302      	bcc.n	8002eac <UART_WaitOnFlagUntilTimeout+0x32>
 8002ea6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d13f      	bne.n	8002f2c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb4:	e853 3f00 	ldrex	r3, [r3]
 8002eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ebc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ec0:	667b      	str	r3, [r7, #100]	; 0x64
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002eca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ecc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ece:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002ed0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ed2:	e841 2300 	strex	r3, r2, [r1]
 8002ed6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1e6      	bne.n	8002eac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	3308      	adds	r3, #8
 8002ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee8:	e853 3f00 	ldrex	r3, [r3]
 8002eec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef0:	f023 0301 	bic.w	r3, r3, #1
 8002ef4:	663b      	str	r3, [r7, #96]	; 0x60
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	3308      	adds	r3, #8
 8002efc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002efe:	64ba      	str	r2, [r7, #72]	; 0x48
 8002f00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002f04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f06:	e841 2300 	strex	r3, r2, [r1]
 8002f0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1e5      	bne.n	8002ede <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2220      	movs	r2, #32
 8002f16:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e068      	b.n	8002ffe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d050      	beq.n	8002fdc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f48:	d148      	bne.n	8002fdc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f52:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	e853 3f00 	ldrex	r3, [r3]
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f72:	637b      	str	r3, [r7, #52]	; 0x34
 8002f74:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f7a:	e841 2300 	strex	r3, r2, [r1]
 8002f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1e6      	bne.n	8002f54 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	3308      	adds	r3, #8
 8002f8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	e853 3f00 	ldrex	r3, [r3]
 8002f94:	613b      	str	r3, [r7, #16]
   return(result);
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f023 0301 	bic.w	r3, r3, #1
 8002f9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3308      	adds	r3, #8
 8002fa4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002fa6:	623a      	str	r2, [r7, #32]
 8002fa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002faa:	69f9      	ldr	r1, [r7, #28]
 8002fac:	6a3a      	ldr	r2, [r7, #32]
 8002fae:	e841 2300 	strex	r3, r2, [r1]
 8002fb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1e5      	bne.n	8002f86 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e010      	b.n	8002ffe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	69da      	ldr	r2, [r3, #28]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	bf0c      	ite	eq
 8002fec:	2301      	moveq	r3, #1
 8002fee:	2300      	movne	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	f43f af48 	beq.w	8002e8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3770      	adds	r7, #112	; 0x70
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003008:	b084      	sub	sp, #16
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	f107 001c 	add.w	r0, r7, #28
 8003016:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800301a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301c:	2b01      	cmp	r3, #1
 800301e:	d120      	bne.n	8003062 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003024:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	4b20      	ldr	r3, [pc, #128]	; (80030b4 <USB_CoreInit+0xac>)
 8003032:	4013      	ands	r3, r2
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003046:	2b01      	cmp	r3, #1
 8003048:	d105      	bne.n	8003056 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fa96 	bl	8003588 <USB_CoreReset>
 800305c:	4603      	mov	r3, r0
 800305e:	73fb      	strb	r3, [r7, #15]
 8003060:	e010      	b.n	8003084 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fa8a 	bl	8003588 <USB_CoreReset>
 8003074:	4603      	mov	r3, r0
 8003076:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003086:	2b01      	cmp	r3, #1
 8003088:	d10b      	bne.n	80030a2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f043 0206 	orr.w	r2, r3, #6
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f043 0220 	orr.w	r2, r3, #32
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030ae:	b004      	add	sp, #16
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	ffbdffbf 	.word	0xffbdffbf

080030b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f023 0201 	bic.w	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	460b      	mov	r3, r1
 80030e4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80030f6:	78fb      	ldrb	r3, [r7, #3]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d115      	bne.n	8003128 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003108:	2001      	movs	r0, #1
 800310a:	f7fd fda1 	bl	8000c50 <HAL_Delay>
      ms++;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	3301      	adds	r3, #1
 8003112:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 fa29 	bl	800356c <USB_GetMode>
 800311a:	4603      	mov	r3, r0
 800311c:	2b01      	cmp	r3, #1
 800311e:	d01e      	beq.n	800315e <USB_SetCurrentMode+0x84>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2b31      	cmp	r3, #49	; 0x31
 8003124:	d9f0      	bls.n	8003108 <USB_SetCurrentMode+0x2e>
 8003126:	e01a      	b.n	800315e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d115      	bne.n	800315a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800313a:	2001      	movs	r0, #1
 800313c:	f7fd fd88 	bl	8000c50 <HAL_Delay>
      ms++;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	3301      	adds	r3, #1
 8003144:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fa10 	bl	800356c <USB_GetMode>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <USB_SetCurrentMode+0x84>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b31      	cmp	r3, #49	; 0x31
 8003156:	d9f0      	bls.n	800313a <USB_SetCurrentMode+0x60>
 8003158:	e001      	b.n	800315e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e005      	b.n	800316a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2b32      	cmp	r3, #50	; 0x32
 8003162:	d101      	bne.n	8003168 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003174:	b084      	sub	sp, #16
 8003176:	b580      	push	{r7, lr}
 8003178:	b086      	sub	sp, #24
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003182:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800318e:	2300      	movs	r3, #0
 8003190:	613b      	str	r3, [r7, #16]
 8003192:	e009      	b.n	80031a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	3340      	adds	r3, #64	; 0x40
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	2200      	movs	r2, #0
 80031a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	3301      	adds	r3, #1
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	2b0e      	cmp	r3, #14
 80031ac:	d9f2      	bls.n	8003194 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80031ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d11c      	bne.n	80031ee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031c2:	f043 0302 	orr.w	r3, r3, #2
 80031c6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031cc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	e005      	b.n	80031fa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003200:	461a      	mov	r2, r3
 8003202:	2300      	movs	r3, #0
 8003204:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800320c:	4619      	mov	r1, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003214:	461a      	mov	r2, r3
 8003216:	680b      	ldr	r3, [r1, #0]
 8003218:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800321a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321c:	2b01      	cmp	r3, #1
 800321e:	d10c      	bne.n	800323a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003222:	2b00      	cmp	r3, #0
 8003224:	d104      	bne.n	8003230 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003226:	2100      	movs	r1, #0
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f965 	bl	80034f8 <USB_SetDevSpeed>
 800322e:	e008      	b.n	8003242 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003230:	2101      	movs	r1, #1
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f960 	bl	80034f8 <USB_SetDevSpeed>
 8003238:	e003      	b.n	8003242 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800323a:	2103      	movs	r1, #3
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f95b 	bl	80034f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003242:	2110      	movs	r1, #16
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f8f3 	bl	8003430 <USB_FlushTxFifo>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f91f 	bl	8003498 <USB_FlushRxFifo>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800326a:	461a      	mov	r2, r3
 800326c:	2300      	movs	r3, #0
 800326e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003276:	461a      	mov	r2, r3
 8003278:	2300      	movs	r3, #0
 800327a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003282:	461a      	mov	r2, r3
 8003284:	2300      	movs	r3, #0
 8003286:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003288:	2300      	movs	r3, #0
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	e043      	b.n	8003316 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4413      	add	r3, r2
 8003296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032a4:	d118      	bne.n	80032d8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10a      	bne.n	80032c2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032b8:	461a      	mov	r2, r3
 80032ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	e013      	b.n	80032ea <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	015a      	lsls	r2, r3, #5
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4413      	add	r3, r2
 80032ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032ce:	461a      	mov	r2, r3
 80032d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	e008      	b.n	80032ea <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032e4:	461a      	mov	r2, r3
 80032e6:	2300      	movs	r3, #0
 80032e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f6:	461a      	mov	r2, r3
 80032f8:	2300      	movs	r3, #0
 80032fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4413      	add	r3, r2
 8003304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003308:	461a      	mov	r2, r3
 800330a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800330e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	3301      	adds	r3, #1
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	429a      	cmp	r2, r3
 800331c:	d3b7      	bcc.n	800328e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800331e:	2300      	movs	r3, #0
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	e043      	b.n	80033ac <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4413      	add	r3, r2
 800332c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003336:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800333a:	d118      	bne.n	800336e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10a      	bne.n	8003358 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4413      	add	r3, r2
 800334a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334e:	461a      	mov	r2, r3
 8003350:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	e013      	b.n	8003380 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4413      	add	r3, r2
 8003360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003364:	461a      	mov	r2, r3
 8003366:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	e008      	b.n	8003380 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4413      	add	r3, r2
 8003376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800337a:	461a      	mov	r2, r3
 800337c:	2300      	movs	r3, #0
 800337e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4413      	add	r3, r2
 8003388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338c:	461a      	mov	r2, r3
 800338e:	2300      	movs	r3, #0
 8003390:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4413      	add	r3, r2
 800339a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339e:	461a      	mov	r2, r3
 80033a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	3301      	adds	r3, #1
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d3b7      	bcc.n	8003324 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80033d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80033d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f043 0210 	orr.w	r2, r3, #16
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699a      	ldr	r2, [r3, #24]
 80033ec:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <USB_DevInit+0x2b4>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80033f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d005      	beq.n	8003406 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f043 0208 	orr.w	r2, r3, #8
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003408:	2b01      	cmp	r3, #1
 800340a:	d105      	bne.n	8003418 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	699a      	ldr	r2, [r3, #24]
 8003410:	4b06      	ldr	r3, [pc, #24]	; (800342c <USB_DevInit+0x2b8>)
 8003412:	4313      	orrs	r3, r2
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003418:	7dfb      	ldrb	r3, [r7, #23]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003424:	b004      	add	sp, #16
 8003426:	4770      	bx	lr
 8003428:	803c3800 	.word	0x803c3800
 800342c:	40000004 	.word	0x40000004

08003430 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	3301      	adds	r3, #1
 8003442:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4a13      	ldr	r2, [pc, #76]	; (8003494 <USB_FlushTxFifo+0x64>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d901      	bls.n	8003450 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e01b      	b.n	8003488 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	2b00      	cmp	r3, #0
 8003456:	daf2      	bge.n	800343e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	019b      	lsls	r3, r3, #6
 8003460:	f043 0220 	orr.w	r2, r3, #32
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	3301      	adds	r3, #1
 800346c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4a08      	ldr	r2, [pc, #32]	; (8003494 <USB_FlushTxFifo+0x64>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d901      	bls.n	800347a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e006      	b.n	8003488 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0320 	and.w	r3, r3, #32
 8003482:	2b20      	cmp	r3, #32
 8003484:	d0f0      	beq.n	8003468 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	00030d40 	.word	0x00030d40

08003498 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	3301      	adds	r3, #1
 80034a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4a11      	ldr	r2, [pc, #68]	; (80034f4 <USB_FlushRxFifo+0x5c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e018      	b.n	80034e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	daf2      	bge.n	80034a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2210      	movs	r2, #16
 80034c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	3301      	adds	r3, #1
 80034cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4a08      	ldr	r2, [pc, #32]	; (80034f4 <USB_FlushRxFifo+0x5c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e006      	b.n	80034e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f003 0310 	and.w	r3, r3, #16
 80034e2:	2b10      	cmp	r3, #16
 80034e4:	d0f0      	beq.n	80034c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	00030d40 	.word	0x00030d40

080034f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	78fb      	ldrb	r3, [r7, #3]
 8003512:	68f9      	ldr	r1, [r7, #12]
 8003514:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003518:	4313      	orrs	r3, r2
 800351a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800352a:	b480      	push	{r7}
 800352c:	b085      	sub	sp, #20
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003544:	f023 0303 	bic.w	r3, r3, #3
 8003548:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003558:	f043 0302 	orr.w	r3, r3, #2
 800355c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	f003 0301 	and.w	r3, r3, #1
}
 800357c:	4618      	mov	r0, r3
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	3301      	adds	r3, #1
 8003598:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4a13      	ldr	r2, [pc, #76]	; (80035ec <USB_CoreReset+0x64>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d901      	bls.n	80035a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e01b      	b.n	80035de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	daf2      	bge.n	8003594 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f043 0201 	orr.w	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	3301      	adds	r3, #1
 80035c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4a09      	ldr	r2, [pc, #36]	; (80035ec <USB_CoreReset+0x64>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d901      	bls.n	80035d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e006      	b.n	80035de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d0f0      	beq.n	80035be <USB_CoreReset+0x36>

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	00030d40 	.word	0x00030d40

080035f0 <__libc_init_array>:
 80035f0:	b570      	push	{r4, r5, r6, lr}
 80035f2:	4d0d      	ldr	r5, [pc, #52]	; (8003628 <__libc_init_array+0x38>)
 80035f4:	4c0d      	ldr	r4, [pc, #52]	; (800362c <__libc_init_array+0x3c>)
 80035f6:	1b64      	subs	r4, r4, r5
 80035f8:	10a4      	asrs	r4, r4, #2
 80035fa:	2600      	movs	r6, #0
 80035fc:	42a6      	cmp	r6, r4
 80035fe:	d109      	bne.n	8003614 <__libc_init_array+0x24>
 8003600:	4d0b      	ldr	r5, [pc, #44]	; (8003630 <__libc_init_array+0x40>)
 8003602:	4c0c      	ldr	r4, [pc, #48]	; (8003634 <__libc_init_array+0x44>)
 8003604:	f000 f820 	bl	8003648 <_init>
 8003608:	1b64      	subs	r4, r4, r5
 800360a:	10a4      	asrs	r4, r4, #2
 800360c:	2600      	movs	r6, #0
 800360e:	42a6      	cmp	r6, r4
 8003610:	d105      	bne.n	800361e <__libc_init_array+0x2e>
 8003612:	bd70      	pop	{r4, r5, r6, pc}
 8003614:	f855 3b04 	ldr.w	r3, [r5], #4
 8003618:	4798      	blx	r3
 800361a:	3601      	adds	r6, #1
 800361c:	e7ee      	b.n	80035fc <__libc_init_array+0xc>
 800361e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003622:	4798      	blx	r3
 8003624:	3601      	adds	r6, #1
 8003626:	e7f2      	b.n	800360e <__libc_init_array+0x1e>
 8003628:	08003680 	.word	0x08003680
 800362c:	08003680 	.word	0x08003680
 8003630:	08003680 	.word	0x08003680
 8003634:	08003684 	.word	0x08003684

08003638 <memset>:
 8003638:	4402      	add	r2, r0
 800363a:	4603      	mov	r3, r0
 800363c:	4293      	cmp	r3, r2
 800363e:	d100      	bne.n	8003642 <memset+0xa>
 8003640:	4770      	bx	lr
 8003642:	f803 1b01 	strb.w	r1, [r3], #1
 8003646:	e7f9      	b.n	800363c <memset+0x4>

08003648 <_init>:
 8003648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364a:	bf00      	nop
 800364c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800364e:	bc08      	pop	{r3}
 8003650:	469e      	mov	lr, r3
 8003652:	4770      	bx	lr

08003654 <_fini>:
 8003654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003656:	bf00      	nop
 8003658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365a:	bc08      	pop	{r3}
 800365c:	469e      	mov	lr, r3
 800365e:	4770      	bx	lr
